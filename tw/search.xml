<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>10up Best Practices</title>
    <url>/tw/10up-best-practices/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>11 個 SQL 語法快速修改 WordPress</title>
    <url>/tw/11-%E5%80%8B-sql-%E8%AA%9E%E6%B3%95%E5%BF%AB%E9%80%9F%E4%BF%AE%E6%94%B9-wordpress/</url>
    <content><![CDATA[<p>有些資料在 WordPress 後台設定時，可能因筆數太多或是操作介面有固定流程而需費時修改的情況下，直接進資料庫修改會是非常方便又快速的方式，而一般的主機商多半會有提供資料庫管理介面 phpMyAdmin 來修改資料表，透過視覺化介面可以選擇要修改的資料並更新。這篇文章整裡了 11 個在管理 WordPress 網站上可能會用到的 SQL 語法，像是修改使用者密碼、修改全站網址、將文章搬到頁面、關閉所有迴響等功能，記得在使用前先備份好資料庫，才能在出狀況時還原，如果資料表前綴有修改過的，記得在語法中替換成你的資料表前綴。</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1582165378557127” display=”yes” title=”MTEg5YCLIFNRTCDoqp7ms5Xlv6vpgJ/kv67mlLkgV29yZFByZXNz” body=”5pyJ5Lqb6LOH5paZ5ZyoIFdvcmRQcmVzcyDlvozlj7DoqK3lrprmmYLvvIzlj6/og73lm6DnrYbmlbjlpKrlpJrmiJbmmK/mk43kvZzku4vpnaLmnInlm7rlrprmtYHnqIvogIzpnIDosrvmmYLkv67mlLnnmoTmg4Xms4HkuIvvvIznm7TmjqXpgLLos4fmlpnluqvkv67mlLnmnIPmmK/pnZ7luLjmlrnkvr/lj4jlv6vpgJ/nmoTmlrnlvI/vvIzogIzkuIDoiKznmoTkuLvmqZ/llYblpJrljYrmnIPmnInmj5Dkvpvos4fmlpnluqvnrqHnkIbku4vpnaIgcGhwTXlBZG1pbiDkvobkv67mlLnos4fmlpnooajvvIzpgI/pgY7oppboprrljJbku4vpnaLlj6/ku6Xpgbjmk4fopoHkv67mlLnnmoTos4fmlpnkuKbmm7TmlrDjgILpgJnnr4fmlofnq6DmlbToo6HkuoYgMTEg5YCL5Zyo566h55CGIFdvcmRQcmVzcyDntrLnq5nkuIrlj6/og73mnIPnlKjliLDnmoQgU1FMIOiqnuazle+8jOWDj+aYr+S/ruaUueS9v+eUqOiAheWvhueivOOAgeS/ruaUueWFqOermee2suWdgOOAgeWwh+aWh+eroOaQrOWIsOmggemdouOAgemXnOmWieaJgOaciei/tOmfv+etieWKn+iDve+8jOiomOW+l+WcqOS9v+eUqOWJjeWFiOWCmeS7veWlveizh+aWmeW6q++8jOaJjeiDveWcqOWHuueLgOazgeaZgumChOWOn++8jOWmguaenOizh+aWmeihqOWJjee2tOacieS/ruaUuemBjueahO+8jOiomOW+l+WcqOiqnuazleS4reabv+aPm+aIkOS9oOeahOizh+aWmeihqOWJjee2tOOAgg==” pid=”3343”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>130 間使用 WordPress 架站的知名企業</title>
    <url>/tw/130-%E9%96%93%E4%BD%BF%E7%94%A8-wordpress-%E6%9E%B6%E7%AB%99%E7%9A%84%E7%9F%A5%E5%90%8D%E4%BC%81%E6%A5%AD/</url>
    <content><![CDATA[<p>WordPress 內容管理系統的穩定度以及操作便利性已經被許多知名企業所認可並進行採用，下次聽到有人在質疑 WordPress 是免費的系統不可靠時，可以拿這些網站來做為佐證，但要用的好還是需要不少的時間進行調校才能承載大流量的訪客。</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1540108199429512” display=”yes” title=”MTMwIOmWk+S9v+eUqCBXb3JkUHJlc3Mg5p6256uZ55qE55+l5ZCN5LyB5qWt” body=”V29yZFByZXNzIOWFp+WuueeuoeeQhuezu+e1seeahOepqeWumuW6puS7peWPiuaTjeS9nOS+v+WIqeaAp+W3sue2k+iiq+ioseWkmuefpeWQjeS8gealreaJgOiqjeWPr+S4pumAsuihjOaOoeeUqO+8jOS4i+asoeiBveWIsOacieS6uuWcqOizqueWkSBXb3JkUHJlc3Mg5piv5YWN6LK755qE57O757Wx5LiN5Y+v6Z2g5pmC77yM5Y+v5Lul5ou/6YCZ5Lqb57ay56uZ5L6G5YGa54K65L2Q6K2J77yM5L2G6KaB55So55qE5aW96YKE5piv6ZyA6KaB5LiN5bCR55qE5pmC6ZaT6YCy6KGM6Kq/5qCh5omN6IO95om/6LyJ5aSn5rWB6YeP55qE6Kiq5a6i44CC” pid=”3267”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>SEO 課程資訊分享</title>
    <url>/tw/166150690078924274ken-channel-%E7%9A%84%E8%82%AF%E5%A4%A7%E7%A4%BA%E7%AF%84%E4%BA%86%E5%A6%82%E4%BD%95%E7%94%A8-seo-%E9%80%B2%E8%A1%8C%E5%93%81%E7%89%8C%E6%9B%9D%E5%85%89%E3%84%8A%E3%84%A0%CB%87/</url>
    <content><![CDATA[<p>@[166150690078924:274:KEN Channel] 的肯大示範了如何用 SEO 進行品牌曝光(ㄊㄠˇㄗㄞˋ)，主要步驟是鎖定關鍵字、思考曝光管道、放一陣子讓它燒(?)，更多的具體內容可以參考他們八月份的課程，對於 SEO 有需要的朋友不要錯過！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1389268704513463” display=”yes” title=”QFsxNjYxNTA2OTAwNzg5MjQ6Mjc0OktFTiBDaGFubmVsXSDnmoTogq/lpKfnpLrnr4TkuoblpoLkvZXnlKggU0VPIOmAsuihjOWTgeeJjOabneWFiSjjhIrjhKDLh+OEl+OEnsuLKe+8jOS4u+imgeatpempn+aYr+mOluWumumXnOmNteWtl+OAgeaAneiAg+abneWFieeuoemBk+OAgeaUvuS4gOmZo+WtkOiuk+Wug+eHkig/Ke+8jOabtOWkmueahOWFt+mrlOWFp+WuueWPr+S7peWPg+iAg+S7luWAkeWFq+aciOS7veeahOiqsueoi++8jOWwjeaWvCBTRU8g5pyJ6ZyA6KaB55qE5pyL5Y+L5LiN6KaB6Yyv6YGO77yB” body=”” pid=”2909”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>2017 WordPress 免費佈景主題</title>
    <url>/tw/2017-wordpress-%E5%85%8D%E8%B2%BB%E4%BD%88%E6%99%AF%E4%B8%BB%E9%A1%8C/</url>
    <content><![CDATA[<p>  早期 WordPress 的佈景主題以質跟量取勝，而且由廣大社群開發、免費可商用的主題非常多，這是能讓 WordPress 擁有高市佔率的主因之一。這幾年付費主題的興起，免費主題反而是變成一種商業模式，它提供有限的功能或版型，透過進階購買的功能來賺取佈景主題的維護成本以及開發費用，而這也是免費與付主題的主要差異，如果你有明確的網站目標，且自己懂得一些程式會調整網站，但對於設計可能比較不在行，就可以考慮使用免費佈景主題當作架站的入門！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1401567886616878” display=”yes” title=”MjAxNyBXb3JkUHJlc3Mg5YWN6LK75L2I5pmv5Li76aGM” body=”5pep5pyfIFdvcmRQcmVzcyDnmoTkvYjmma/kuLvpoYzku6Xos6rot5/ph4/lj5bli53vvIzogIzkuJTnlLHlu6PlpKfnpL7nvqTplovnmbzjgIHlhY3osrvlj6/llYbnlKjnmoTkuLvpoYzpnZ7luLjlpJrvvIzpgJnmmK/og73orpMgV29yZFByZXNzIOaTgeaciemrmOW4guS9lOeOh+eahOS4u+WboOS5i+S4gOOAgumAmeW5vuW5tOS7mOiyu+S4u+mhjOeahOiIiOi1t++8jOWFjeiyu+S4u+mhjOWPjeiAjOaYr+iuiuaIkOS4gOeoruWVhualreaooeW8j++8jOWug+aPkOS+m+aciemZkOeahOWKn+iDveaIlueJiOWei++8jOmAj+mBjumAsumajuizvOiyt+eahOWKn+iDveS+huizuuWPluS9iOaZr+S4u+mhjOeahOe2reitt+aIkOacrOS7peWPiumWi+eZvOiyu+eUqO+8jOiAjOmAmeS5n+aYr+WFjeiyu+iIh+S7mOS4u+mhjOeahOS4u+imgeW3rueVsO+8jOWmguaenOS9oOacieaYjueiuueahOe2suermeebruaome+8jOS4lOiHquW3seaHguW+l+S4gOS6m+eoi+W8j+acg+iqv+aVtOe2suerme+8jOS9huWwjeaWvOioreioiOWPr+iDveavlOi8g+S4jeWcqOihjO+8jOWwseWPr+S7peiAg+aFruS9v+eUqOWFjeiyu+S9iOaZr+S4u+mhjOeVtuS9nOaetuermeeahOWFpemWgO+8gQ==” pid=”2927”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>2017 開源人年會 WordPress Delay Live</title>
    <url>/tw/2017-%E9%96%8B%E6%BA%90%E4%BA%BA%E5%B9%B4%E6%9C%83-wordpress-delay-live/</url>
    <content><![CDATA[<p>  上週六日於台大舉辦的 COSCUP 圓滿落幕，星期六在教室 303 有安排一整天的 WordPress 議程，從前端整合、VPS 主機資安維護、WP 專用主機，到 WooCommerce 的開發流程、外掛開發以及本地化介紹，實在是豐富到不行，錯過的朋友也沒關係，全程都有錄影轉播，可以重看這天所有分享者的精彩內容，最重要的是要感謝這些講者願意花時間整理這麼多知識與經驗，這樣的良性循環，讓人感受到 WordPress 圈真的是一個很棒的社群！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1409343535839313” display=”yes” title=”MjAxNyDplovmupDkurrlubTmnIMgV29yZFByZXNzIERlbGF5IExpdmU=” body=”5LiK6YCx5YWt5pel5pa85Y+w5aSn6IiJ6L6m55qEIENPU0NVUCDlnJPmu7/okL3luZXvvIzmmJ/mnJ/lha3lnKjmlZnlrqQgMzAzIOacieWuieaOkuS4gOaVtOWkqeeahCBXb3JkUHJlc3Mg6K2w56iL77yM5b6e5YmN56uv5pW05ZCI44CBVlBTIOS4u+apn+izh+Wuiee2reitt+OAgVdQIOWwiOeUqOS4u+apn++8jOWIsCBXb29Db21tZXJjZSDnmoTplovnmbzmtYHnqIvjgIHlpJbmjpvplovnmbzku6Xlj4rmnKzlnLDljJbku4vntLnvvIzlr6blnKjmmK/osZDlr4zliLDkuI3ooYzvvIzpjK/pgY7nmoTmnIvlj4vkuZ/mspLpl5zkv4LvvIzlhajnqIvpg73mnInpjITlvbHovYnmkq3vvIzlj6/ku6Xph43nnIvpgJnlpKnmiYDmnInliIbkuqvogIXnmoTnsr7lvanlhaflrrnvvIzmnIDph43opoHnmoTmmK/opoHmhJ/orJ3pgJnkupvorJvogIXpoZjmhI/oirHmmYLplpPmlbTnkIbpgJnpurzlpJrnn6XorZjoiIfntpPpqZfvvIzpgJnmqKPnmoToia/mgKflvqrnkrDvvIzorpPkurrmhJ/lj5fliLAgV29yZFByZXNzIOWciOecn+eahOaYr+S4gOWAi+W+iOajkueahOekvue+pO+8gQ==” pid=”2935”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>2019/02/26 WordPress 板橋小聚會後小記</title>
    <url>/tw/2019-02-26-wordpress-meetup/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="https://oberonlai.blog/wp-content/uploads/2019/02/img_7985.jpg"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>「因為住板橋，內湖的小聚太遠所以辦了板橋小聚！」主辦人 Erin Lin 這句話實在太深得我心，我就是住太遠超懶得去內湖，所以很少參加 WordPress 小聚的那個人XD</p>
<p>WordPress 板橋小聚辦得非常成功，雖然號稱是「小聚」，但規模是「大聚」無誤，講師分享的內容都非常有料，現場的設備豪華，竟然有流明度 80,000 的投影機 (我有聽錯嗎？)，而且還是 Erin 自掏腰包貢獻給社群的，更不用說還有立體環繞音響、以及奉獻自己寶貴時間付出的志工大大們，在這個年代玩 WordPress 實在太幸福了，有超多大大可以請益啊～</p>
<p>另外除了板橋外，全台各地的 WordPress 的小聚也如雨後春筍般的遍地開花了，有興趣的朋友可以上 WordPress 小聚紀錄網站 —&gt; <a href="https://wp-meetups.com/">https://wp-meetups.com</a></p>
<blockquote>
<p>WordPress 為開源的架站工具，WordPress 小聚為非營利聚會，不屬於任何公司、品牌，純粹由 WordPress 愛好者發起</p>
</blockquote>
<p>以下就今天兩位講者精彩的分享做一些重點摘錄：</p>
<h2 id="WooCoomerce-1000-人同時在線-一頁式電商"><a href="#WooCoomerce-1000-人同時在線-一頁式電商" class="headerlink" title="WooCoomerce 1000 人同時在線 一頁式電商"></a>WooCoomerce 1000 人同時在線 一頁式電商</h2><p>講師 Andy Liao 大大，資歷豐富的嚇人，尤其是跨領域的經驗，從技術到行銷都待過大企業的高階職務，演講方式風趣幽默，非常吸引聽眾。</p>
<p>主要內容分為五大部分，從一頁式電商的概念介紹、一頁式電商與購物平台的策略、推薦的使用外掛，以及手把手的 WooCommerce 操作教學，最後還有非常精彩的網站壓力測試 Liveshow。</p>
<p>整場聽下來 Andy 大大一直在強調一個觀念，那就是聽到別人的知識要能自己靈活思考並加以運用在自己的情境中，而非全部照本宣科，並且用最小成本做最快速度執行，才能進行優化調整。相信這是在競爭如此激烈的電商環境中，能存活下來的不二法門。</p>
<p>Andy 大大用的簡報軟體很有趣，叫做 <a href="http://focusky.com/">Focusky</a>，看官網介紹是一套以 HTML5 為核心的簡報製作軟體，可以做出超多各種絢麗的轉場效果，也因為是 HTML5，所以可以直接在瀏覽器上面播放，要簡報的電腦就不用安裝軟體，而且方案也很佛心，是用雲端空間的容量來計算，10G 的話是免錢，也許下次有機會我會用他來做簡報看看。  </p>
<p><img src="https://i1.wp.com/oberonlai.blog/wp-content/uploads/2019/02/use2.png?fit=1024,530&ssl=1"></p>
<p>簡報摘要如下：</p>
<ul>
<li>  有人說 WooCommerce 速度慢、門檻高、體質差，無法承載高流量</li>
<li>  網頁載入超過三秒就被關閉的機會大幅提升</li>
<li>  一千個人在線速度還要維持，實際經驗運作過是可行的，但還是要依照自身情況進行調整優化</li>
</ul>
<p>為什麼要用一頁式電商？</p>
<ul>
<li>  適合帶入第一次購買的客戶</li>
<li>  架構邏輯清楚，無痛下單</li>
<li>  從社群通路引導，第一次下單在一頁式電商，讓客戶產生專注力，提高轉換率</li>
<li>  適合主題式產品、同質性商品、選擇性限制產品</li>
<li>  可以賣完就關站，賣完就走了，不需要累積 SEO</li>
<li>  付費廣告流量來源，導入後再做電商平台</li>
</ul>
<p>WordPress 的入門操作可以參考網站帶路姬的免費課程<br><a href="https://wpointer.com/wordpress-tutorials/5days-wordpress-diy/">https://wpointer.com/wordpress-tutorials/5days-wordpress-diy/</a></p>
<p>怎麼製作一頁式電商？</p>
<ul>
<li>  先決定網站目標</li>
<li>  有人要買再去生產產品 –&gt; 適合名單收集型</li>
<li>  產品銷售型可以連結，帶入精準的流量，進來就是要下單購買的</li>
<li>  素材要對，要讓導購文案也可以吸引點進來的人，素材、文案、影片、圖片都重要</li>
<li>  適合自己的轉換工具，知道自己在幹嘛，</li>
<li>  Google 表單、WooCmmerce 都可以用，評估學習成本，只要能賣得嚇嚇叫就是好工具</li>
</ul>
<p>名單搜集型網站推薦的外掛:</p>
<ul>
<li>  WordPress</li>
<li>  Elementor</li>
<li>  ContactForm7</li>
<li>  Tracking Code Manager 各種追蹤都能埋</li>
</ul>
<p><a href="https://wordpress.org/plugins/tracking-code-manager/">https://wordpress.org/plugins/tracking-code-manager/</a></p>
<p>產品銷售型使用 WooCommerce pixelyoursite 這隻外掛來埋入 Facebook Pixel，能追蹤像素才是電商的靈魂，一般客人加到購物車還是會進行比價，一頁式網站沒有購物車可以追蹤，WooCommerce 才能透過像素去持續追蹤潛在客戶。</p>
<p><a href="https://wordpress.org/plugins/pixelyoursite/">https://wordpress.org/plugins/pixelyoursite/</a></p>
<p>一頁式文案都是圖，在不同裝置上比較好控制版面，最下面通常會有行動訴求，透過表單搜集名單，目前行情是一個有效報名名單 500~700 元不等。UI 設計的好廣告轉換成本會下降，像是兩個人以上報名可以給優惠，吸引大家揪團報名，另外再透過網站的效能優化以容納更多在線人數。</p>
<p>另外關於主題或外掛的來源要非常留意，盜版外掛會被植入木馬，要測試的話用原廠提供的免費版本，要商業使用的話就一定要購買，大部分的外掛都不貴，跟被駭客植入後門外洩客戶資料的後續處理成本相比，購買正版相對安全的多。</p>
<p>WooCommerce 的設定細節：貨幣小數位數記得要設 0，不然金流不會過，台幣沒有小數點。</p>
<p>現場示範五千筆資料，每頁 1-100 筆，使用無痕 + 4G 網路約在一秒內載入，使用 Firefox 的開發者工具來檢查，檢視指標是 DOMContentLoaded。</p>
<p>使用 <a href="https://loader.io/">Loader.io</a> 這套壓力測試工具進行模擬，可以看到連線人數與載入時間的即時圖表化呈現。</p>
<p><img src="https://i0.wp.com/oberonlai.blog/wp-content/uploads/2019/02/image.png?fit=1024,591&ssl=1"></p>
<p>要上線前一定要測試再測試，每種付款方式、物流、折扣優惠都要確保有測試到且正常運作，不然等開賣時才出包對品牌形象有害。</p>
<p>最後結論保持思考、馬上行動！</p>
<p>QA: 一頁式網站的 SEO 圖片用替代文字設定，複製貼上會扣分，有外掛可以一次修正。如果只是要把 WooCommerce 當成產品管理並且作為展示目錄，可以參考 WooCommerce Catalog Mode 這支外掛。</p>
<p><a href="https://wordpress.org/plugins/yith-woocommerce-catalog-mode/">https://wordpress.org/plugins/yith-woocommerce-catalog-mode/</a></p>
<h2 id="WP-Rocket-外掛實作"><a href="#WP-Rocket-外掛實作" class="headerlink" title="WP Rocket 外掛實作"></a>WP Rocket 外掛實作</h2><p><img src="https://oberonlai.blog/wp-content/uploads/2019/02/img_7986.jpg"></p>
<p>講師 Tonny 大大是資安方面的專家，每次有資安相關的問題我第一時間就是去煩他XD，他都非常有耐心的解答我的疑難雜症，也分享了許多關於伺服器優化的建議跟教學給我，但我偷懶都還沒拜讀，一整個就是擺著求心安的概念…</p>
<p>Tonny 大大今天分享的是一套付費的快取外掛 WP Rocket，這套我自己也有在用，但裡面許多細部的設定涉及到很多網路的技術，基本上我就是啟用後就擺著不理他了，經過 Tonny 大大的介紹有稍微多理解一些，但很多關於 Preload、預先取得 DNS 請求、HEARTBEAT 以及 Varinsh 快取都還是一知半解，看來只能等 Tonny 大大再來介紹各種類型的快取技術以及怎麼實作了~(亂許願XD)</p>
<p>重點摘錄如下：</p>
<p>覺得網站跑起來慢慢的時候，第一首要先確認自己的網路連線速度，測速度的工具推薦Speedtest，先排除是自己網路連線速度的問題再來找主機的異常。</p>
<p><a href="https://www.speedtest.net/">https://www.speedtest.net</a></p>
<p>確保自己的主機環境是 WordPress 官方推薦的規格，建議最佳環境為 php7.3、mysql5.6 or maria 10.0 、https support，這些是要讓網站能跑得快的最基本條件</p>
<p>使用 Health check &amp; troubleshooting 做網站環境健檢，他會幫你列出合格與待改進的項目，此外還提供方便的外掛除錯功能，可以讓你在網站正常運作下找出有問題的外掛，當外掛發生衝突時就能派上用場。</p>
<p><a href="https://tw.wordpress.org/plugins/health-check/">https://tw.wordpress.org/plugins/health-check/</a></p>
<p>如果要購買 WP Rocket 外掛有個隱藏技巧，原價要付費 49 鎂，下單之後先不要結帳，他們為了要鼓勵客戶完成結帳動作，會提供優惠來吸引你完成訂單，很棒的行銷，讓買的客戶也感受到賺到了。</p>
<p>CDNplanet 查看網站使用的 CDN 業者。<br><a href="https://www.cdnplanet.com/tools/cdnfinder/">https://www.cdnplanet.com/tools/cdnfinder/</a></p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>會後的分組討論也非常有趣，可以依照自己感興趣的議題加入小組討論，我亂入了接案/業務問題小組，雖然我自己現在根本沒在接洽業務XD，但看著有好多新人準備或是已經在投入網站接案的這塊市場，就在思考著是不是要把當年的接案血淚史來做個小分享，讓想要入這行的朋友少踩點雷，想著想著就失眠了@@</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>2019 台灣資安大會 Day1</title>
    <url>/tw/2019-cybersec/</url>
    <content><![CDATA[<p><img src="https://i2.wp.com/oberonlai.blog/wp-content/uploads/2019/03/IMG_8004.jpg?fit=1024,768&ssl=1"></p>
<p>後兩天沒空，所以應該只會有 Day1 的心得XD</p>
<p>生平第一次參加由 iThome 所主辦的台灣資安大會，規模之大讓我大開眼界，整個研討會分為三天，除了上午大會堂的主講演講外，下午更有十軌的議程在同步進行，橫跨台北會議中心與世貿一館二樓的多間教室，廠商展覽攤位也是非常熱鬧，令我眼花繚亂@@</p>
<p>但一方面覺得可能是自己跑錯棚，或是根本沒待過相關產業，在這台灣 IT 產業這麼大的盛事裡，我竟然沒有看到半位認識的人，驚覺自己實在太渺小，也讚嘆台灣 IT 產業鍊之大，讓我這井底之蛙能以全新的視野來看待自己每天在處理的業務，也算是開了眼界。</p>
<p>一整天聽不懂的東西比聽進去的東西還多，雖然很多都是來賣藥的，但對於身兼半個網管的我似乎沒太大吸引力，唯一一場覺得比較有社群分享交流的講座是「IT 人專職資安人的起手式」，講師幽默風趣又分享許多免費資源，是一整天聽下來覺得賣藥意味比較不那麼強烈的內容，但賣藥歸賣藥，加減還是有學到一些東西，整理紀錄如下：</p>
<h3 id="超連結時代下的資安協議與回應"><a href="#超連結時代下的資安協議與回應" class="headerlink" title="超連結時代下的資安協議與回應"></a>超連結時代下的資安協議與回應</h3><p>這是接著小英總統致詞後的第一場開幕演講，講師 Bruce Schneier，大有來頭，世界知名的密碼學專家，出版過許多知名著作，<a href="https://www.schneier.com/">部落格</a>也有非常多隱私議題相關的文章，會後的新書簽名會也是大排長龍，算是今天認識到最重量級的人物。</p>
<p>在什麼都能連線的年代，資訊安全變得爆炸困難，每天隨身攜帶的手機、家裡的冰箱、上班開的汽車全都有可能會成為駭客攻擊的目標，講師提到六個課題是現在 IT 從業人員所必須面對的：</p>
<ol>
<li> 軟體的開發流程要納入安全性測試，讓參與人員能擁有安全意識。</li>
<li> 現在很大一部分的漏洞修補都是在彌補早期網路技術所衍伸出的問題。</li>
<li> 如何確保每一個使用者的裝置都能保持在最新狀態，但對於消費者而言，更新之後有很多功能根本就不是他們想要的。</li>
<li> 系統的複雜性造成安全防護的困難。</li>
<li> 互相相連的裝置變成了一個巨大的網際網路，其中一個被植入非常容易傳染給其他裝置。</li>
<li> 第六點沒聽懂，好像是關於密碼這事…</li>
</ol>
<p>潛在的個人資料被竄改也是很危險的事，像是醫院裡面的病歷被竄改、汽車電子鎖被入侵，手機更是非常危險的裝置，裡面有所有與你相關的個人機密。</p>
<p>資訊安全已經是國際間的問題，現在證明這問題基本上是無解，講師的建議是在軟體開發時就要把安全防護機制一併開發進去，在開發流程中就要有安全意識，而各國政府也要開始思考安全策略，從整體面來著手資訊安全問題。</p>
<h3 id="恐懼的總和"><a href="#恐懼的總和" class="headerlink" title="恐懼的總和"></a>恐懼的總和</h3><p>講師為資安業界非常資深的張裕敏協理，現職為趨勢科技全球核心技術部，他帶來很精彩的分享內容，首先就駭客攻擊國家基礎設施的案例開頭。</p>
<p>3/7 委內瑞拉大停電，主因是水利設施被攻擊，停止運轉所以造成無法發電，其他國家也發生過污水處理廠被攻擊，而紐約則是發生過水壩控制中新被入侵後將水導入其他城市。駭客攻擊的目的不外乎是希望造成損失、霸佔資源或是當做正式攻擊前的練習。</p>
<p>駭客的攻擊手法有植入後門、社交工程、透過內部員工取得機密資訊等等，去年講師預測過未來有可能發生的攻擊事件，結果準確預測後引來大批國外媒體採訪，因為被誤認為是攻擊者，所以今年就不做預測了…</p>
<p>國家關鍵基礎設施有明確定義，影響民生妨礙國家安全都算基礎建設，一共有八大類，鍵基礎設施被駭實例有污水處理廠、水壩、核電廠、偷取上市公司未公開的財報資訊等等。</p>
<p>駭客的火力支援，要漏洞有漏洞，因為網路上都查得到，<a href="https://ics-cert.us-cert.gov/advisories">https://ics-cert.us-cert.gov/advisories</a></p>
<p>駭客要工具有工具，github 上面就一堆 ICS 開源工具，駭客要方法有方法，參考 <a href="https://attack.mitre.org/matrices/enterprise/">https://attack.mitre.org/matrices/enterprise/</a>，目的是要控制與損害關鍵設備。</p>
<p>駭客要目標有目標，使用 Shodan 搜尋引擎來找攻擊目標<br><a href="https://www.shodan.io/">https://www.shodan.io</a><br><a href="https://ics-radar.shodan.io/">https://ics-radar.shodan.io</a>  </p>
<p><a href="https://www.shodan.io/"></a>駭客眼中的新玩具：關鍵基礎設施，主要為網路基礎設施、金流基礎設施以及資訊媒體。使用 DNS 劫持讓訪客連到駭客指定的網站，因此設定 DNSSEC 就非常重要。路由器劫持，會造成偽造流量、封包路由異常。Public wifi 藉由外部入侵、實體入侵或是偽冒 AP，公眾 wifi 的路由器可能會被植入木馬。最後是 4G/5G 假基地台，會造成蓋台、通訊協定漏洞。</p>
<p>金融基礎設施的攻擊包含後端資訊系統攻擊、外部入侵、帳戶清除，另外還有放置假 ATM 機偷吃提款卡與密碼，如果提款機左右兩邊是看的到機器本體一定是假的，真的機器有規定三面都一定是要密封的，避免有任何人為的植入行為。</p>
<p>最新釋出的 ATM 惡意程式會讓提款機顯示畫面出現俄羅斯方塊、拉 BAR 等小遊戲，中獎時會吐鈔票。</p>
<p>資訊媒體基礎設施的攻擊包含電視、網路、社群媒體等等，攻擊的主要目的是為了資訊操控、散播假資訊、資訊再加工，背後有特定目標及人士進行組職。最嚴重的資訊媒體入侵事件發生在 2013 年首爾的 darkseoul 事件。<br><a href="http://blog.xecure-lab.com/2013/03/darkseoul-apt.html">http://blog.xecure-lab.com/2013/03/darkseoul-apt.html</a>  </p>
<p>入侵資訊媒體基礎設施可以讓駭客有穩定的收入來源，有心人士也能更好操作輿論。最後試想萬一哪一天下班，捷運暫停行駛、要開車去加油結果油價漲了 2000 倍、路上的交通號誌全部是綠燈、手機 GPS 沒訊號、智慧門禁沒電進不了家門、廣播電視完全沒有訊號、無法刷卡、ATM 無法提款、假消息、陰謀論，這會是世界末日的場景？</p>
<p>終極防禦之術？政府要多參考其他國家是如何防禦基礎設施，資訊安全是大家的事，如果哪天在等公車看到有人在對電子公車看板上下其手、毛手毛腳，立即通知相關單位，那人有很有可能就是在尋找實體入侵的 USB 接口。</p>
<h3 id="當代資安的迷思與數位韌性"><a href="#當代資安的迷思與數位韌性" class="headerlink" title="當代資安的迷思與數位韌性"></a>當代資安的迷思與數位韌性</h3><p>講師為韋萊韜悅台灣分公司企業風險與保險經紀的吳明璋協理，著有鋼索上的管理課 韌性管理一書，分享關於企業如何做好韌性管理，第一次聽到原來還有資安保險這種東西，以及做筆記的時候一直把韌性打成任性XD</p>
<p>資安的難題與挑戰，通常來自你我未知的領域，講師透過 jothari window 周哈里窗來描述資安的現況：我知你也知是開放、我知你不知是隱藏、你知我不知是盲點、你不知我也不知就是未知，而資安風險就是要盡可能消弭未知的存在，透過交流學習來避免未知。</p>
<p>ISO 27001 是一套資訊安全管理系統驗證，許多企業努力取得該驗證，但還是有不少企業遭受到攻擊，所以引發了業界討論關於 ISO 27001 的有效性。關於資安常見的迷思：公司門禁森嚴還需要資安嗎？請人「測試」系統來跟老闆爭取經費？資安保險有必要嗎？</p>
<p>資安風險的典範移轉正在進行中，發生攻擊事件是無法百分之百避免的，所以要聚焦在風險可接受的範圍、風險如何移轉、以及風險發生時如何減少損失，而韌性管理已成為國際資安領域中的顯學，因為資安而造成的損失金額並不會低於天災。</p>
<p>數位韌性 ( Cyber-Resilience ) 的定義也就是當遭受攻擊時企業能夠應變的程度，並且能把損失控制在可接受範圍，避免骨牌效應的產生，數位韌性的執行三步驟：Assessment、 Protection、Quantified。</p>
<p>資安保險的承保範圍包括數位資產的遺失、資料外洩、網路斷線以及網路勒索均能理賠。</p>
<h3 id="It-人專職資安人的起手式"><a href="#It-人專職資安人的起手式" class="headerlink" title="It 人專職資安人的起手式"></a>It 人專職資安人的起手式</h3><p><img src="https://i0.wp.com/oberonlai.blog/wp-content/uploads/2019/03/574669285.330213-2.jpg?fit=576,1024&ssl=1"></p>
<p>講師非常有趣，因為怕被查水表以及所屬公司未允許在公開場合簡報，所以帶著駭客組織 Anonymous 匿名者專用的 V 怪客面具，讓我非常期待會有什麼大爆料的精彩簡報，聽完後簡報收穫很多，但完全沒爆料啊XDD</p>
<p>講師吳明蔚現為奧義智慧共同創辦人，是業界非常知名的白帽駭客，他講話速度非常快，聽完後只覺得 30 分鐘根本不夠而且意猶未盡，難怪這一堂課教室大爆棚，滿到根本沒地方坐，分享內容以免費的資安工具介紹為主軸，還小噹了一下教室外面在賣的資安產品，這講師的風格完全對我的胃口XD</p>
<p>使用 Open Source 有相對應的風險，萬一東西壞了沒有客服讓你問，只能自己下去修，log 也要自己爬、疏理不同格式的日誌，最麻煩的就是更新與相容性問題，爆炸了一樣只能自己下去修，所以會花很多時間去處理 Open Source 工具所衍伸出來的問題。</p>
<p>要做好資訊安全第一間最重要的事，就是先盤點現有的所有機器，包含公司的電腦、路由器、伺服器等設備，並嚴查 Internet 的出入口，也就是 Port 號要嚴格控管，另外有人登入主機要能夠發通知給管理者，以防主機被登入都不知道。</p>
<p>使用 Nmap 來檢查主機狀態與對外開的 port 號<br><a href="https://blog.gtwang.org/linux/nmap-command-examples-tutorials/">https://blog.gtwang.org/linux/nmap-command-examples-tutorials/</a>  </p>
<p>盤點資產用軟體 OCS inventory<br><a href="https://www.ocsinventory-ng.org/en/">https://www.ocsinventory-ng.org/en/</a>  </p>
<p>使用 The Dude 來圖像式整理網路設備<br><a href="https://mikrotik.com/thedude">https://mikrotik.com/thedude</a>  </p>
<p>做好盤點之後，接下來就是來決定這些設備的重要性，存有客戶資料的機器很重要，老闆電腦的 D 槽也是非常重要XD，可以使用新竹市稅務局的資訊資產盤點表做為範本，裡面有有非常詳盡的格式來記錄所有資訊資產。<br><a href="https://www.informationsecurity.com.tw/article/article_print.aspx?aid=5796">https://www.informationsecurity.com.tw/article/article_print.aspx?aid=5796</a>  </p>
<p>盤點與紀錄都完成後，剩下的就是每個月的例行事務，像是使用 Nmap 每個月掃一次看看有沒有被開奇怪的 port，如果有被開但問人卻抓不到是誰，很簡單，把 port 關了在用的人就會來叫了。</p>
<p>至於平日主機的監控，可以使用 Zabbix，他可以做到主機登入偵測，在手機上都可以看到主機被登入的警報，另外還可以做多台主機的叢集式管理，登入警報有個 Windows 作業系統的雷，因為某些執行緒會觸發登入行為，所以會被誤認為是主機登入，如果警報太多就沒有意義了，有跟沒有一樣。<br><a href="https://www.zabbix.com/">https://www.zabbix.com</a>  </p>
<p>另外可以使用 fail2ban 來做惡意 IP 的排除，在 Windows 上用的叫做 wail2ban<br><a href="http://www.fail2ban.org/wiki/index.php/Main_Page">http://www.fail2ban.org/wiki/index.php/Main_Page</a><br><a href="https://github.com/glasnt/wail2ban">https://github.com/glasnt/wail2ban</a>  </p>
<p>傳統防火牆跟應用程式防火牆 (WAF) 最大的差異是傳統防火牆只會分辨識是文旦還是榴槤，判斷是文旦後就把文旦放在籃子裡，但無法分辨出放進籃子的文旦有沒有發霉或是爛掉，而 WAF 就好比 X 光機可以掃描文旦，看他的內部有沒有出問題。</p>
<p>也就是以 OSI 模式來說，傳統防火牆只能偵測第三層的封包，也就是網路層 TCP/IP 協定的封包，而應用程式防火牆可以偵測第七層也就是應用層的封包，現在很多攻擊都是從應用層下手，而 WAF 主要就是防範這類的攻擊。</p>
<p>WAF 可以看成一個反向代理伺服器，直接在源頭就把可疑封包給過濾掉，連讓他進主機的機會都沒有，可以使用 Nginx 做反向代理。</p>
<p>萬一真的被入侵了，不要急著砍掉重練，先把被入侵的資料做備份後再做處理，要抓兇手也要先留下證據，第一時間就重灌的話什麼證據都沒有了。</p>
<h3 id="狙擊駭客，拯救網站安全"><a href="#狙擊駭客，拯救網站安全" class="headerlink" title="狙擊駭客，拯救網站安全"></a>狙擊駭客，拯救網站安全</h3><p>講師為虛擬主機捕夢網雲端架構師陳建宏，講題內容主要在介紹他們所代理的 WAF 產品 dotDefender，涵蓋許多網站層面的防護。</p>
<p>之前流行的勒索病毒是透過公司內部的 45 port 進行散播的，這代表企業內部的資安意識不足，而被攻進了內網。為了加強網站的安全性，在開發流程就要把資安檢測項目一併納入測試流程之中，最好的情況可以用分散式架構來分散網站、資料都在同一台主機的風險，另外也可以購買資安產品來加強防護。</p>
<p>除了開發者的資安意識外，也要將使用者納入安全防護圈中，近年來電商網站講究購物便利，所以都會幫客人記住帳密然後自動登入，結果這些資料用明碼的方式存在 Cookie 中，有心人士就能直接登入竊取信用卡資訊。</p>
<p>網站被入侵要先備份，千萬不可直接還原，才能診斷原因，進而找出漏洞的根源，漏洞補完後，要去檢討修補成效，也就是要進行複測，確保漏洞已被修補。</p>
<p>平時就要定好被攻擊後的應變方法，通報該通報的單位，說明事情的起因以及處理方式，在台灣，企業都很害怕被別人知道自己網站被入侵，應該要仿效歐美的方式，把事發經過整理出來讓同業交流。</p>
<p>WAF 有分為硬體式、軟體式以及雲端式，dotDefender 為軟體式，可以部署在自己的主機中。雲端式 WAF 的缺點是 DNS 要指過去，軟體式的好處是可以依照系統架構來安裝，比較彈性也好管理。</p>
<p>中國菜刀木馬程式<br><a href="https://fly8wo.github.io/2018/08/17/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E4%B9%8B%E5%86%99%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%8F%98%E5%BD%A2/">https://fly8wo.github.io/2018/08/17/中国菜刀之写一句话木马变形/</a>  </p>
<p>電子商務網站提供給客戶的訂單查詢功能要小心，訂單號要記得加隨機亂碼，不然被猜出訂單邏輯其他客戶的訂單就會被看光光。</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>看到很多廠商都在賣 WAF，這是今年資安界的趨勢嗎？</p>
]]></content>
      <categories>
        <category>Host</category>
        <category>TCP/IP</category>
      </categories>
  </entry>
  <entry>
    <title>205 條規則破解 Google 搜尋名秘密</title>
    <url>/tw/205-%E6%A2%9D%E8%A6%8F%E5%89%87%E7%A0%B4%E8%A7%A3-google-%E6%90%9C%E5%B0%8B%E5%90%8D%E7%A7%98%E5%AF%86/</url>
    <content><![CDATA[<p>  日前看到專門研究 SEO 網站 Backlinko 的長年神級文章：Google’s 200 Ranking Factors: The Complete List，作者 Brian 從官方釋出的新聞、訪談，再加上自己的實驗，整理出這兩百條可能會或直接影響 Google 排名的因素，並從五個面向來說明，包含網址、頁面、全站、反向連結、使用者互動、社群、品牌等等因素，文末還提供檢查清單來協助你的網站是否有符合這些規則。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1497384423701890” display=”yes” title=”MjA1IOaineimj+WJh+egtOinoyBHb29nbGUg5pCc5bCL5ZCN56eY5a+G” body=”5pel5YmN55yL5Yiw5bCI6ZaA56CU56m2IFNFTyDntrLnq5kgQmFja2xpbmtvIOeahOmVt+W5tOelnue0muaWh+eroO+8mkdvb2dsZeKAmXMgMjAwIFJhbmtpbmcgRmFjdG9yczogVGhlIENvbXBsZXRlIExpc3TvvIzkvZzogIUgQnJpYW4g5b6e5a6Y5pa56YeL5Ye655qE5paw6IGe44CB6Kiq6KuH77yM5YaN5Yqg5LiK6Ieq5bex55qE5a+m6amX77yM5pW055CG5Ye66YCZ5YWp55m+5qKd5Y+v6IO95pyD5oiW55u05o6l5b2x6Z+/IEdvb2dsZSDmjpLlkI3nmoTlm6DntKDvvIzkuKblvp7kupTlgIvpnaLlkJHkvoboqqrmmI7vvIzljIXlkKvntrLlnYDjgIHpoIHpnaLjgIHlhajnq5njgIHlj43lkJHpgKPntZDjgIHkvb/nlKjogIXkupLli5XjgIHnpL7nvqTjgIHlk4HniYznrYnnrYnlm6DntKDvvIzmlofmnKvpgoTmj5DkvpvmqqLmn6XmuIXllq7kvobljZTliqnkvaDnmoTntrLnq5nmmK/lkKbmnInnrKblkIjpgJnkupvopo/liYfjgII=” pid=”3161”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>30 seconds of code</title>
    <url>/tw/30-seconds-of-code/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>ACF Preview Problem with wp_insert_post()</title>
    <url>/tw/acf-preview-problem-with-wp-insert-post/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2020/01/CleanShot-2020-01-08-at-21.10.57.jpg"></p>
<p>狀況是這樣：寫了 ajax 前台發文並能切換文章狀態，當 wp_insert_post() 發文後，如果是使用草稿狀態的話 preview link 會無法正常顯示內容，但切換成發佈狀態是可以正常顯示，而且 acf 的 欄位都有進去，但如果又切換成草稿，則會不顯示任何內容，</p>
<p>必須要去後台點選預覽按鈕或是儲存草稿後，preview link 才能正常顯示，插入文章的寫法如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;**
  * 建立新文章
  *&#x2F;
if($is_new_post &#x3D;&#x3D;&#x3D; &#39;new&#39;)&#123;
  $author_id &#x3D; $_POST[&#39;author_id&#39;];
  $my_post &#x3D; array(
    &#39;post_title&#39;    &#x3D;&gt; $post_title,
    &#39;post_name&#39;   &#x3D;&gt; $post_title,
    &#39;post_status&#39;   &#x3D;&gt; $post_status, &#x2F;&#x2F; 取得 select 值
    &#39;post_author&#39;   &#x3D;&gt; $author_id,
    &#39;post_category&#39; &#x3D;&gt; $post_category
  );
  $new_post_id &#x3D; wp_insert_post( $my_post );
  $post_id &#x3D; $new_post_id;
  update_field(&#39;storage&#39;,$storage_field,$new_post_id);
  wp_save_post_revision($new_post_id);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然後預覽按鈕的 URL 是這樣組：</p>
<pre class="line-numbers language-none"><code class="language-none">document.querySelector(&#39;#btnPreview a&#39;).href &#x3D; &#96;$&#123;insert_params.siteurl&#125;?p&#x3D;$&#123;jsonData.postId&#125;&amp;preview&#x3D;true&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>一直以為是不開給作者進 wp-admin 的權限所導致的，或是 Gutenberg 造成的錯誤，爬了文查到這是 wp_insert_post 的機制造成的 -&gt; <a href="https://support.advancedcustomfields.com/forums/topic/saved-drafts-not-displaying-custom-fields/page/2/">https://support.advancedcustomfields.com/forums/topic/saved-drafts-not-displaying-custom-fields/page/2/</a></p>
<blockquote>
<p>Could not figure out what was causing it but when i remove preview=true from the uri it works again.</p>
</blockquote>
<p>嘗試了在預覽網址後面不要帶 preview 的參數，結果可以順利預覽了。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>All In One 懶人行銷工具包</title>
    <url>/tw/all-in-one-%E6%87%B6%E4%BA%BA%E8%A1%8C%E9%8A%B7%E5%B7%A5%E5%85%B7%E5%8C%85/</url>
    <content><![CDATA[<p>  七種願望一次滿足！今天分享的服務就是這麼神奇～GetSiteControl 提供電子報訂閱、聯絡表單、促銷 Banner、意見調查、社群追縱、社群分享以及線上客服七種功能，還能即時追縱這些工具的使用狀況，自訂顏色、出現頻率、預約發佈，更佛心的是還有出 WordPress 外掛可直接安裝使用，一次整合到位！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1447473838692949” display=”yes” title=”QWxsIEluIE9uZSDmh7bkurrooYzpirflt6XlhbfljIU=” body=”5LiD56iu6aGY5pyb5LiA5qyh5ru/6Laz77yB5LuK5aSp5YiG5Lqr55qE5pyN5YuZ5bCx5piv6YCZ6bq856We5aWH772eR2V0U2l0ZUNvbnRyb2wg5o+Q5L6b6Zu75a2Q5aCx6KiC6Zax44CB6IGv57Wh6KGo5Zau44CB5L+D6Yq3IEJhbm5lcuOAgeaEj+imi+iqv+afpeOAgeekvue+pOi/vee4seOAgeekvue+pOWIhuS6q+S7peWPiue3muS4iuWuouacjeS4g+eoruWKn+iDve+8jOmChOiDveWNs+aZgui/vee4semAmeS6m+W3peWFt+eahOS9v+eUqOeLgOazge+8jOiHquiogumhj+iJsuOAgeWHuuePvumgu+eOh+OAgemgkOe0hOeZvOS9iO+8jOabtOS9m+W/g+eahOaYr+mChOacieWHuiBXb3JkUHJlc3Mg5aSW5o6b5Y+v55u05o6l5a6J6KOd5L2/55So77yM5LiA5qyh5pW05ZCI5Yiw5L2N77yB” pid=”3052”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>Android Slide Screen-視覺化資訊流桌面系統</title>
    <url>/tw/android-slide-screen-%E8%A6%96%E8%A6%BA%E5%8C%96%E8%B3%87%E8%A8%8A%E6%B5%81%E6%A1%8C%E9%9D%A2%E7%B3%BB%E7%B5%B1/</url>
    <content><![CDATA[<p>之前要換手機時總在考慮Android OS，絕對不是因為用過一陣子的tattoo覺得它好用而習慣它，純粹只是因為沒有足夠的銀彈去砸iphone，曾經去門市試玩過HTC的Legend、Desire，以及Samsung的i9000，說真的，要花這樣的價格去買這樣永遠看起來都卡卡的介面，還不如再多貼幾千塊去享受iphone的流暢， 或是只花個幾千塊來把玩一下android OS!?所以最後我敗了這一支TWM T1 <a href="http://goo.gl/AZBI"><img src="https://oberonlai.blog/wp-content/uploads/2010/10/mobile01-84486775aad3248aed31971d5529b3a2-e1287069608355.jpg" alt="twm t1" title="圖片來自mobile01"></a> 知道這支手機的人可能不多，當初續約加3990空機價入手，android 1.6，聽說和HTC Legend是同一顆CPU，在mobile01 actt大大等人的努力下，把這支絲毫不起眼的手機變成CP值超高的入門機種，甚至到後來小賣店還一度漲價兩到三成，現在因為T2出了，這支應該也已經停產了。</p>
<span id="more"></span>
<p>→TWM T1 ROOT(取得最高權限)： <a href="http://www.mobile01.com/topicdetail.php?f=586&t=1615199&p=1">http://www.mobile01.com/topicdetail.php?f=586&amp;t=1615199&amp;p=1</a> →TWM T1 APP2SD(將APP安裝置記憶卡，沒錯！原廠不行！)： <a href="http://www.mobile01.com/topicdetail.php?f=586&t=1622589&last=22087056">http://www.mobile01.com/topicdetail.php?f=586&amp;t=1622589&amp;last=22087056</a> 小弟在此獻上最高的敬意!!! 手機便宜的好處，在於你可以盡情的蹂躪它、操爆它，玩壞了就直接送醫院@@，出院後再繼續蹧踏，誰叫它天生就是命賤，所以像當做AP，或是更換開機畫面，都在mobile01各位先賢的努力下，變得像是基本功能一樣，就看自己要不要去挖掘。 在經歷了這段改機的歲月中，發現到一支手機的特色，除了手機的外觀，最最最重要的就是UI操作介面，在android系統中最有名的應該就屬HTC sense了， <img src="https://oberonlai.blog/wp-content/uploads/2010/10/01.jpg"> 主頁的HTC天氣時鐘，已經成為他們象徵性的設計元素，左右滑動切換頁面、可自訂各分頁的內容、兩點觸碰縮小產生所有分頁縮圖、小工具等，都是HTC sense的主要特色， 我買的這隻台哥大的自有品牌機種T1，介面當然不可能像HTC sense一樣漂亮、流暢，但主要介面配置還是由此延伸， <img src="https://oberonlai.blog/wp-content/uploads/2010/10/02.jpg"> 整體的操作邏輯不外乎就是一主頁，以及可左右切換放置小工具的分頁，螢幕下方的箭頭用來展開app列表，因為用過HTC，所以這介面非常容易上手，幾乎不用任何的學習。 但身為一位視覺設計師，這樣的介面用起來雖順手，但看起來就是給它非常不爽，實在是一點都不美觀，在經過google大神的介紹下，得知有另外幾款桌面系統像是<a href="http://goo.gl/eNeA">HelixLauncher</a>、<a href="http://www.launcherpro.com/">Launcher Pro</a>、<a href="http://soft.sj.91.com/pandadesk/">熊貓桌面</a>等等各種不同的桌面應用程式，因為我這支是版本比較舊的1.6，第一次裝Launcher Pro被打槍，後來找到了<a href="http://goo.gl/VTgt">ADW Launcher</a>，整個就是驚為天人!!! 不僅畫面比原本的流暢八百倍，APP列表的呈現方式非常精彩，用透視的動態視覺fade in and out，更可以調整速度以及畫面到定位時的反彈程度，要有幾頁分頁也都可以自訂，甚至還有方便的擴展覽，當做快速工具列，整體而言，ADW Launcher不僅在視覺效果上有突出的表現，更簡化了快捷列的操作流程，以及讓使用者自行劃分出應用程式的重要次序性， 在應用程式俯拾皆是的手機環境中，應用程式會因為其功能而有不同的使用順序，有些是無聊的時候看的，有些是緊急時刻才需要的，有些是你以為會非常重要但卻從來沒再開過的，手機UI的課題，就是能夠提供一個絕佳的自訂載具，讓使用者依照生活習慣來進行app的排序，  Iphone沒有可更換的桌面UI，也或許是因為本身就做的太好了，根本不需要其它人來開發，亦或是受限於系統的門檻，總之在這部份，android充分展現它的開放性，也因為這樣的自由度，讓我這支手機有了完全不同的使用者經驗。 然而在仔細觀察過許多不同的廠牌的UI設計，會逐漸發現到模式已經是固定了，像iphone是直接第一層就可以看到所有的app，以左右滑動進行切換，而android是有小工具的概念，讓使用者不需進入app就可以先看到內容，譬如像是facebook、plurk等等的桌面插件，要再進行第二步驟才開啟app，這之間的設計差別，推測是因為系統多功可否的緣故，導致這樣的設計結果。 Apple讓使用者專注在每一個app上，體驗每一個app所帶來的驚喜，Google則偏向商務的即時性，讓使用者可快速在不同的工具間進行切換，同步處理多重任務，雖然iphone現行也能多工，但其基本邏輯依舊不變。 然而能進行左右滑動來瀏覽app或桌面小工具，是兩間大廠的共同模式，縱使android已開發出這麼多套不同的桌面系統，但都大致離不開這樣的操作方式，今天無意間發現了一套新的應用程式，完全打破了這樣的概念，它的名字叫做<a href="http://slidescreenhome.com/">Slide Screen</a> <img src="https://oberonlai.blog/wp-content/uploads/2010/10/03.jpg" title="slide screen"> 它給我的感覺，比較像是Rss Reader，而且嚴格來說，它實在是不怎麼好用… 請看以下示範畫面  既然都說不好用了，幹麻還要介紹呢？因為它有兩個主要的系統，讓我不得不為它大書特書 &lt;一&gt;資訊流系統 以往介面的設計，都是必須透過左右滑動分頁來得到資訊，有些像是比較佔空間的小工具，可能一個就要佔掉一頁分頁，Slide Screen以天氣時鐘為分水嶺，一分為二，以我的角度來看，上方是更新頻率較低的工具項目，像是未接來電、簡訊通知、Gmail、Goolge calendar等功能，下方就屬比較即時性的應用程式，有Google Reader、facebook、股票、twitter， 當你拖曳天氣時鐘的欄位時，整個版面的區塊比例會隨之重新分配，動的節奏、韻律十分美麗，當有新訊息進來時，也是以動態的插入效果呈現，點擊某則Google Reader的文章，會進入黑底白字的閱讀模式，十分容易閱讀，當把天氣時鐘置頂或置底時，只單純呈現某一工具之所有訊息，可再進行切換， 而當某則訊息你已閱讀完畢想要將之移除非常簡單，只要往右一拉，訊息立刻被抽掉，隨之下一則訊息遞補而上，非常直覺化的操作方式。 &lt;二&gt;色彩系統 這部份是我認為Slide Screen最高招的設計手法，每個不同的工具，各自有不同的色系代表，但色塊所佔面積又剛剛好，以一豎置左直線，當版塊在移動時，線的高度也隨之變化，非常直覺且優雅的呈現出變動後的區塊各是隸屬於那些工具的訊息； 此外，當有新訊息進來的提示符號，色系也與其自身色彩統一，資訊流的呈現方式，最困難的就是如何解決資訊過多分類不清的問題，Slide Screen設計的非常出色，清楚明白的呈現資訊分類。 有別於以往的分頁模式，Slide Screen在一頁之中就把所有的訊息做清楚的呈現，不用再切換就能一覽所有訊息大綱，這是我認為最直覺的瀏覽方式，但畢竟這樣的作法和以往有很大的落差，使用之前的學習時間較長，除此之外，還有以下缺點 無法自行定義小工具項目，目前只能使用它內建的工具 點Email會啟動gmail app，而不是直接查看郵件內容 Google Reader的圖片讀取速度過慢 天氣時鐘置頂或底時，切換工具的提示非常不明顯 APP列表無新意 整體而言，以操作介面的資訊架構，從資訊呈現做了不一樣的角度切入，以更直覺的設計流程，讓使用者更快速的掌握好友動態，或是最新更新文章，而且是”同時”掌握，Slide Screen以資訊而不是應用程式的觀點來做介靣規劃，希望未來他們會提供更多的自訂功能，或是開放API，讓其它軟體也能進入它們的資訊洪流，藉此滿足更多使用者的需求。</p>
]]></content>
      <categories>
        <category>使用者介面</category>
      </categories>
  </entry>
  <entry>
    <title>Become the big decision maker by Dan Martell</title>
    <url>/tw/become-the-big-decision-maker-by-dan-martell/</url>
    <content><![CDATA[<p><a href="https://www.youtube.com/watch?v=eYNlpPe7J9g">https://www.youtube.com/watch?v=eYNlpPe7J9g</a></p>
<p>Recently, I found a fact which is I was a totally different person with my co-worker, especially in the “Big Decision” I thought. I have the idea about the LEAN spirit, try quickly and fail quickly. But I can’t try it without any research or information. For me, it’s like a blind walk into street.</p>
<p>I prefer to define the testing goals, how to test, and how can I evaluate the testing result. I will not test if I don’t have enough information. The video I watched today help me to figure out how to make the decision objectively.</p>
<ol>
<li> Define the problem - figure out what’s the specific problem behind it</li>
<li> Research the solution space - use google image to search visual framework about your solution</li>
<li> Connect with your mentor - ask the mentor which you want to be</li>
<li> Verify with your peers - confirm the decision with your partner or co-worker</li>
<li> Decide and Adjust - wrong decisions is better than no decisions</li>
</ol>
<p>Use the JFDI ( Just F**king Do It! ) if you still can’t make the decisions after above steps.</p>
]]></content>
      <categories>
        <category>saas</category>
      </categories>
  </entry>
  <entry>
    <title>企業集團形象網站設計風格參考</title>
    <url>/tw/coperationwebdesign/</url>
    <content><![CDATA[<p><a href="https://oberonlai.blog/wp-content/uploads/2013/09/web02-1.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/09/web02-1-1024x511.jpg" alt="web02-1"></a> 以企業內、外部形象圖片作為網站主視覺，直接展示集團各公司業務內容。 <a href="http://www.sj-fukuoka.or.jp/">http://www.sj-fukuoka.or.jp/</a>     <a href="https://oberonlai.blog/wp-content/uploads/2013/09/web03.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/09/web03-1024x511.jpg" alt="web03"></a> 透過插畫元素呈現集團子公司，利用透視法交錯象徵集團核心。 <a href="http://www.bandainamco-ba.co.jp/">http://www.bandainamco-ba.co.jp/</a>     <a href="https://oberonlai.blog/wp-content/uploads/2013/09/web04.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/09/web04-1024x511.jpg" alt="web04"></a> 以企業標誌延伸網站主視覺，達成整體一致性。 <a href="http://dbrain.co.jp/">http://dbrain.co.jp/</a>     <a href="https://oberonlai.blog/wp-content/uploads/2013/09/web05.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/09/web05-1024x511.jpg" alt="web05"></a> 以案例作品為主，並針對作品所露出之媒介設計相關之呈現元素。 <a href="http://higherandhigher.com/">http://higherandhigher.com/</a>     <a href="https://oberonlai.blog/wp-content/uploads/2013/09/web06-1.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/09/web06-1-1024x511.jpg" alt="web06-1"></a> 以案例圖像為主，並輔以輪播動畫增加畫面豐富性。 <a href="http://www.vin-blue.com/">http://www.vin-blue.com/</a>     <a href="https://oberonlai.blog/wp-content/uploads/2013/09/web07.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/09/web07-1024x511.jpg" alt="web07"></a> 以滿版圖像為主，左方編號可切換子公司代表性案例或形象圖片。 <a href="http://www.thailandtravel.or.jp/zooming/">http://www.thailandtravel.or.jp/zooming/</a>     <a href="https://oberonlai.blog/wp-content/uploads/2013/09/web08-1.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/09/web08-1-1024x511.jpg" alt="web08-1"></a> 以文案為主的視覺風格，下方搭配案例小圖。 <a href="http://ikebe-a.com/">http://ikebe-a.com/</a>     <a href="https://oberonlai.blog/wp-content/uploads/2013/09/web09.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/09/web09-1024x511.jpg" alt="web09"></a> 以單頁式頁面介紹企業資訊，搭配捲軸滾動呈現互動式動畫效果。 <a href="http://adamrudzki.com/">http://adamrudzki.com/</a></p>
]]></content>
      <categories>
        <category>網站企劃</category>
      </categories>
  </entry>
  <entry>
    <title>詹健一建築事務所/築里館空間設計 網站設計</title>
    <url>/tw/cross-leisure/</url>
    <content><![CDATA[<ul>
<li>  專案名稱 : 詹健一建築事務所/築里館空間設計 網站設計</li>
<li>  設計項目：網站識別標誌設計、版面設計、導覽系統設計、後臺系統建置</li>
<li>  設計理念 : 以著重手感的紋理紙材為背景，旨在傳達作品的溫度，簡單大膽的版面構成，利用手繪建築稿做為網站的特色，更能予人一種家的溫馨感。</li>
</ul>
<p>網站首頁-簡單的手繪圖，傳達出設計師的專業 <img src="https://oberonlai.blog/wp-content/uploads/2011/10/cross00.jpg" title="網站首頁-簡單的手繪圖，傳達出設計師的專業"> 網站內頁-隨處可見的手稿，沒有冷冰的線條 <img src="https://oberonlai.blog/wp-content/uploads/2011/10/cross01.jpg" title="站內頁-隨處可見的手稿，沒有冷冰的線條"> 公司作品列表 <img src="https://oberonlai.blog/wp-content/uploads/2011/10/cross02.jpg" title="公司作品列表"> 展示室內設計成品 <img src="https://oberonlai.blog/wp-content/uploads/2011/10/cross03.jpg" title="展示室內設計成品"> 網站連結 : <a href="http://www.cross-leisure.com/">http://www.cross-leisure.com/</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Divi 主題針對 Page Speed 優化</title>
    <url>/tw/divi-%E4%B8%BB%E9%A1%8C%E9%87%9D%E5%B0%8D-page-speed-%E5%84%AA%E5%8C%96/</url>
    <content><![CDATA[<p>  前天分享 Google 會將 Page Speed 的評分列為 SEO 排序權重之一，這代表很多規範都要符合它的要求，其中之一就是必須壓縮網站的靜態資源，像是 CSS 與 JavaScript 檔案，同常除非你熟悉網站開發的自動化流程工具，或是有使用 WordPress 外掛，不然手動壓縮會檔案非常難以維護。   幸好最新版的 Divi 主題加入了壓縮 CSS 與 JavaScript 功能，而且是內建其中，完全不需要額外設定，就能符合 Page Speed 的標準，有使用 Divi 主題的朋友更新後就能享受到這樣的功能，還不知道什麼是 Divi 的朋友可以參考 Hellowp 的介紹—&gt;<a href="https://hellowp.cc/how-to-create-your-restaurant-website-step2/">https://hellowp.cc/how-to-create-your-restaurant-website-step2/</a></p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1405926906180976” display=”yes” title=”RGl2aSDkuLvpoYzph53lsI0gUGFnZSBTcGVlZCDlhKrljJY=” body=”5YmN5aSp5YiG5LqrIEdvb2dsZSDmnIPlsIcgUGFnZSBTcGVlZCDnmoToqZXliIbliJfngrogU0VPIOaOkuW6j+asiumHjeS5i+S4gO+8jOmAmeS7o+ihqOW+iOWkmuimj+evhOmDveimgeespuWQiOWug+eahOimgeaxgu+8jOWFtuS4reS5i+S4gOWwseaYr+W/hemgiOWjk+e4rue2suermeeahOmdnOaFi+izh+a6kO+8jOWDj+aYryBDU1Mg6IiHIEphdmFTY3JpcHQg5qqU5qGI77yM5ZCM5bi46Zmk6Z2e5L2g54af5oKJ57ay56uZ6ZaL55m855qE6Ieq5YuV5YyW5rWB56iL5bel5YW377yM5oiW5piv5pyJ5L2/55SoIFdvcmRQcmVzcyDlpJbmjpvvvIzkuI3nhLbmiYvli5Xlo5PnuK7mnIPmqpTmoYjpnZ7luLjpm6Pku6Xntq3orbfjgILlubjlpb3mnIDmlrDniYjnmoQgRGl2aSDkuLvpoYzliqDlhaXkuoblo5PnuK4gQ1NTIOiIhyBKYXZhU2NyaXB0IOWKn+iDve+8jOiAjOS4lOaYr+WFp+W7uuWFtuS4re+8jOWujOWFqOS4jemcgOimgemhjeWkluioreWumu+8jOWwseiDveespuWQiCBQYWdlIFNwZWVkIOeahOaomea6lu+8jOacieS9v+eUqCBEaXZpIOS4u+mhjOeahOaci+WPi+abtOaWsOW+jOWwseiDveS6q+WPl+WIsOmAmeaoo+eahOWKn+iDve+8jOmChOS4jeefpemBk+S7gOm6vOaYryBEaXZpIOeahOaci+WPi+WPr+S7peWPg+iAgyBIZWxsb3dwIOeahOS7i+e0uS0tLT5odHRwczovL2hlbGxvd3AuY2MvaG93LXRvLWNyZWF0ZS15b3VyLXJlc3RhdXJhbnQtd2Vic2l0ZS1zdGVwMi8=” pid=”2933”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>Divi 教學資源</title>
    <url>/tw/divi-%E6%95%99%E5%AD%B8%E8%B3%87%E6%BA%90/</url>
    <content><![CDATA[<p>感謝 @[100001654533818:2048:Gary Yang] 大大介紹的 Divi 教學網站，裡面有非常豐富的實務架站教學，從最基本的形象網站，到電子商務購物車網站，甚至是部落格的建置，站長都非常詳細的錄製教學影片，雖然是英文的內容，但看影片操作還是可以很直覺得的熟悉操作步驟，有使用 Divi 的朋友不要錯過，如果你不知道什麼是 Divi，也可以參考想點創意的服務 Hellowp，可以直接提供給你一個完整的 WordPress 架站環境。</p>
<p><a href="https://hellowp.cc/">https://hellowp.cc</a></p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1396900197083647” display=”yes” title=”RGl2aSDmlZnlrbjos4fmupA=” body=”5oSf6KydIEBbMTAwMDAxNjU0NTMzODE4OjIwNDg6R2FyeSBZYW5nXSDlpKflpKfku4vntLnnmoQgRGl2aSDmlZnlrbjntrLnq5nvvIzoo6HpnaLmnInpnZ7luLjosZDlr4znmoTlr6bli5nmnrbnq5nmlZnlrbjvvIzlvp7mnIDln7rmnKznmoTlvaLosaHntrLnq5nvvIzliLDpm7vlrZDllYbli5nos7znianou4rntrLnq5nvvIznlJroh7PmmK/pg6jokL3moLznmoTlu7rnva7vvIznq5nplbfpg73pnZ7luLjoqbPntLDnmoTpjIToo73mlZnlrbjlvbHniYfvvIzpm5bnhLbmmK/oi7HmlofnmoTlhaflrrnvvIzkvYbnnIvlvbHniYfmk43kvZzpgoTmmK/lj6/ku6Xlvojnm7ToprrlvpfnmoTnhp/mgonmk43kvZzmraXpqZ/vvIzmnInkvb/nlKggRGl2aSDnmoTmnIvlj4vkuI3opoHpjK/pgY7vvIzlpoLmnpzkvaDkuI3nn6XpgZPku4DpurzmmK8gRGl2ae+8jOS5n+WPr+S7peWPg+iAg+aDs+m7nuWJteaEj+eahOacjeWLmSBIZWxsb3dw77yM5Y+v5Lul55u05o6l5o+Q5L6b57Wm5L2g5LiA5YCL5a6M5pW055qEIFdvcmRQcmVzcyDmnrbnq5nnkrDlooPjgIJodHRwczovL2hlbGxvd3AuY2M=” pid=”2920”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>Divi 新功能介紹</title>
    <url>/tw/divi-%E6%96%B0%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<p>  Divi 的功能越來越強大，也碰到很多朋友不太會操作的問題，想必 Divi 團隊也知道這問題，所以這次的更新加入了操作說明，在前台編輯的時候可以根據哪邊，就跳出相對應的提示，據創辦人表示這些提示是動態的，會根據目前正在編輯的內容進行教學，相信對剛入門 Divi 的朋友會非常有幫助！只是我們的中文翻譯又有得忙了，應該新增了超多新的句子Orz…   還不知道什麼是 Divi 可以參考我們的服務 Hellowp，七天免試用開給你玩個夠XDD   <a href="https://hellowp.cc/">https://hellowp.cc</a></p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1390139961093004” display=”yes” title=”RGl2aSDmlrDlip/og73ku4vntLk=” body=”RGl2aSDnmoTlip/og73otorkvobotorlvLflpKfvvIzkuZ/norDliLDlvojlpJrmnIvlj4vkuI3lpKrmnIPmk43kvZznmoTllY/poYzvvIzmg7Plv4UgRGl2aSDlnJjpmorkuZ/nn6XpgZPpgJnllY/poYzvvIzmiYDku6XpgJnmrKHnmoTmm7TmlrDliqDlhaXkuobmk43kvZzoqqrmmI7vvIzlnKjliY3lj7Dnt6jovK/nmoTmmYLlgJnlj6/ku6XmoLnmk5rlk6rpgorvvIzlsLHot7Plh7rnm7jlsI3mh4nnmoTmj5DnpLrvvIzmk5rlibXovqbkurrooajnpLrpgJnkupvmj5DnpLrmmK/li5XmhYvnmoTvvIzmnIPmoLnmk5rnm67liY3mraPlnKjnt6jovK/nmoTlhaflrrnpgLLooYzmlZnlrbjvvIznm7jkv6HlsI3liZvlhaXploAgRGl2aSDnmoTmnIvlj4vmnIPpnZ7luLjmnInluavliqnvvIHlj6rmmK/miJHlgJHnmoTkuK3mlofnv7vora/lj4jmnInlvpflv5nkuobvvIzmh4noqbLmlrDlop7kuobotoXlpJrmlrDnmoTlj6XlrZBPcnouLi7pgoTkuI3nn6XpgZPku4DpurzmmK8gRGl2aSDlj6/ku6Xlj4PogIPmiJHlgJHnmoTmnI3li5kgSGVsbG93cO+8jOS4g+WkqeWFjeippueUqOmWi+e1puS9oOeOqeWAi+WkoFhERGh0dHBzOi8vaGVsbG93cC5jYw==” pid=”2912”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>Don&#39;t Make Me Think 書摘</title>
    <url>/tw/dont-make-me-think/</url>
    <content><![CDATA[<p><a href="https://oberonlai.blog/wp-content/uploads/2015/06/s4357645.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2015/06/s4357645.jpg" alt="s4357645"></a> 第一次讀到這本關於使用者體驗的經典書籍大概是四年前的事了，當時看完後不知道借給了那位朋友，就再也沒有回來過了，日前逛三民書局的簡體中文館發現了新版的它，除了原有的內容還更新了例子，甚至還加上行動裝置體驗的章節，二話不說立刻敗入，為了以防那天又被人借走回不來，趕緊寫下文章備份。   本書分為四個大方向： 一、基本原則 二、網站導航系統的重要性 三、簡易使用性測試 四、行動體驗 以下就各章節做重點摘錄。</p>
<span id="more"></span>
<h2 id="一、基本原則"><a href="#一、基本原則" class="headerlink" title="一、基本原則"></a>一、基本原則</h2><p> </p>
<blockquote>
<p>「Don’t make me think」不要設計出會讓使用者感到困惑或猶豫不曉得要點那裡的介面。網站分類要明確，選單出現於固定位置、使用統一名稱、使用常見名稱、按鈕要像按扭、系統的回饋要符合使用者所預期的。</p>
</blockquote>
<p>  使用者在網站上的每一次錯誤點擊，雖然不致於造成立即性的客戶流失，但使用者體驗是會堆疊的，只有做好每一個細節，使用者才能在極短的時間感受到企業要傳達的東西，這對於品牌的建立是關鍵。   使用者體驗檢查清單：</p>
<ul>
<li>  我在什麼位置</li>
<li>  我從那裡開始好</li>
<li>  他們把XX放在什麼地方了</li>
<li>  這個頁面上最重要的是什麼</li>
<li>  為什麼他們把這個項目叫做這個</li>
<li>  這是廣告還是網站的內容</li>
</ul>
<p>  <strong>使用者看網頁是用掃描的，眼裡只會出現他們感興趣與最想找的關鍵字</strong>，他們不會花時間去選擇最正確的答案，而是第一眼看到有相關性的就會點擊，所以保留瀏覽器上的返回按鈕是非常重要的。   使用者不在乎運作原理，只要能滿足他們的需求，就會一直使用它。因此介面要符合使用者的瀏覽習慣來製作，以掃描式閱讀來設計，而非以雜誌或書籍閱讀的方式來設計。   參考做法： （一）盡量利用慣例 任何東西要讓人能瞬間理解，遵循習慣和慣例是一種好方法，譬如 LOGO 出現在左上角、主選單在網頁的上方或左邊，視覺元素的外觀、播放影片的 icon、搜尋、社群分享。如果想創新慣例，要確保使用者容易理解以及一併提供他們熟悉的慣例。   （二）建立視覺上的層次 越重要的部份越突出、邏輯相關的內容在視覺上也要相關、邏輯上屬於子分類的項目在視覺上可以用包圍的方式。   （三）把頁面劃分成明確定義的區域 可以讓使用者說出：這是今日頭條的連結、這是這個公司銷售的產品、他們正在向我推銷東西、這是連到其它頁面的選單。Banner Blindness ：為了可以快速找到他們想要的，使用者發展出一種會忽略看起來像是廣告的技能，<strong>所以重要的內容不要做得像廣告，而廣告可以做成像內容。</strong>   （四）明顯標示可以點擊的地方 統一可以點擊的視覺元素，譬如底線、顏色，如果底線代表的是連結，那在內容強調文字時就不要使用底線。   （五）將可能會干擾掃描的元素最小化 <strong>如果所有東西都要強調，就等於沒有東西在強調。</strong>   （六）幫內容設計清楚易掃描的格式 充分使用標題、保持每個段落的簡潔、使用符號列表、強調關鍵字詞。   使用者的點擊次數常規法則：三次不用思考、結果正確的點擊，所花費的心力相當於一次需要思考的點擊，<strong>所以重點不是在追求幾次點擊內讓使用者找到想要的內容，而是每一次的點擊有沒有更接近他們想要的。</strong>   省去多餘的歡迎詞、說明文字，只在有需要的時候以最精簡的方式呈現。  </p>
<h2 id="二、網站導航系統的重要性"><a href="#二、網站導航系統的重要性" class="headerlink" title="二、網站導航系統的重要性"></a>二、網站導航系統的重要性</h2><p><img src="https://oberonlai.blog/wp-content/uploads/2015/06/medium_2KIcZWinamB5poa6WLdn0zFH40HrYpiMX4fG8aINHbY.jpg" alt="二、網站導航系統的重要性"> 如果在網站上找不到方向，使用者就會離開你的網站。使用者進入網站後通常是為了特定目標，他們可能會使用搜尋功能或是選單進行瀏覽。   在網站上瀏覽感覺不到大小、感覺不到方向、感覺不到位置，所以瀏覽器的書籤以及返回上一頁是非常重要的功能。網站選單可以告訴使用者我們這裡有什麼內容、如何開始使用網站、表達出網站管裡者是否了解自己的網站，進而影響到使用者的信心。   全站導覽要出現在每一頁，提供使用者最可靠的方向依尋。主要包含網站 LOGO、內頁連結、常用工具連結、站內搜索。   <strong>大部份網站很少對內頁中的內頁的選單給予足夠的重視，因為開發時是由上往下進行頁面規劃，但使用者對於內頁選單的依賴程度與全站導覽是同等重要。</strong>   每個頁面都需要一個名稱，並且出現在合適且相同的位置，設計上要顯眼，進入該頁面的按鈕文字必須與頁面名稱相同，才不會造成使用者誤會。   選單要能標示出使用者的現在位置，透過視覺上的明顯差異化來呈現。   麵包屑亦能提供使用者了解所在位置，通常置於頁面最上方，使用大於符號進行間隔，強調最後一個項目來標示現在位置，並且不用增加連結。   網站選單測試清單：</p>
<ul>
<li>  這是什麼網站(網站 LOGO)</li>
<li>  我在那個內容裡面？(網頁名稱)</li>
<li>  這個網站主要的內容有那些？(網站選單)</li>
<li>  在這個頁面中我還可以去那？(內頁選單)</li>
<li>  我在這個網站中的那裡？(所在位置)</li>
<li>  站內搜尋在那？</li>
</ul>
<p>  網站的首頁要能夠快速回答使用者五個問題： （一）這是什麼網站？ （二）網站有些什麼內容？ （三）我能在這邊得到什麼？ （四）為什麼我現在這一頁？ （五）從那邊開始？   網站首頁要能正確傳達給使用者網站想表達的內容，不然使用者會以模糊錯誤的認知來繼續使用這個網站，進而發生更多錯誤的理解。   由於社群與搜尋引擎的發達，使用者入站大多已不是首頁，因此上述四個問題也要盡可能在內頁中傳達清楚，但當使用者對於這網站的內容有興趣時，他們會返回首頁去看全站的內容，因此首頁的重要性還是不容忽視。   網站如何傳達企業整體形象？ （一）網站 slogan （二）主 Banner 放網站目標與內容介紹 （三）更多服務介紹的內容 （四）不要把老闆的精神訓話當成網站 slogan，因為這是給員工看的，而非你的使用者或客戶 （五）最直接的方法，進行使用者測試檢視是否有正確傳達  </p>
<h2 id="三、簡易使用性測試"><a href="#三、簡易使用性測試" class="headerlink" title="三、簡易使用性測試"></a><strong>三、簡易使用性測試</strong></h2><p><img src="https://oberonlai.blog/wp-content/uploads/2015/06/medium_2FMVo9keG9QRRgZKzVkKycdi6DKQ8b6XB9Rkd4XQiWo.jpg" alt="三、簡易使用性測試">   如何解決在會議上每個人對於網站內容、操作方式的不同看法？很簡單，拉個局外人來試試就好。<strong>為避免陷入無止盡的主觀意識爭論，我們的問題不該是「這邊是否該用下拉選單」，而是問：「在這頁面中，考量到使用者目的，使用下拉選單或是顯示的文字是否能帶給他們良好的體驗並導引到正確的結果？」</strong>   使用性測試的結果，往往不是證明開發小組中誰的意見對或錯，而是發現根本性的網站問題，就像是想問人到底要穿紅色的T恤還是白色的襯衫好，卻沒發現褲子根本還沒穿上。   焦點小組與使用性測試最大的不同點在於前者僅需要受測者說，而後者在於觀察受測者做了什麼。<strong>簡易使用性測試，目的是以最低的成本，來檢測網站開發過程中是否有依循正確的方向走下去。</strong>   簡易使用性測試 Q&amp;A： （一）應該多久進行一次測試？ 固定每個月上午為最佳測試時間，理由是開發人員上午比較有空(?)，以固定每月而非以開發時程的原因在於開發計劃常常會偏離或是改規格，如果用「第一版上線後」才進行使用性測試，很容易被額外工作階段所延誤，固定時間也能養成團隊開發人員參與的習慣。   （二）應該測試多少用戶？ 理想為三個，因為測試的目的不是在證明什麼，需要證明什麼才會要足夠的資料進行佐證，<strong>使用性測試的目的是發現問題，即使只測一位也好過不找任何人測試。</strong>   （三）如何選擇測試者？ 理想上，能找到我們的目標使用族群進行測試再恰當不過，但如果找非該網站領域的人也會有不錯的收獲，因為最大的使用性問題往往不是在於專業知識，而是把每位使用者當成初學者或是非領域的相關人員，讓不懂專業知識的人也能清楚明白，這對於有專業知識的人也會是非常友善的介面。   （四）怎麼找到測試者？ 透過社群、論壇、網站會員、隔璧鄰居、親朋好友，提供時薪、車馬費等等回饋這些願意付出時間提供意見給我們的朋友，或是透過線上服務進行使用性測試—&gt;<a href="http://www.usertesting.com/">http://www.usertesting.com/</a>   （五）在那裡測試？ 受測者可以在任何有電腦的地方，只要他操作電腦的畫面跟聲音可以傳到開發團隊的面前即可。實務上可以用像 <a href="https://www.teamviewer.com/zhTW/index.aspx">Teamviewer</a> 這樣的遠端桌面軟體進行觀察。   （六）應該由誰來引導測試？ 使用者測試需要一位主持人來引導開發團隊想要測試的功能與項目，最好是具有同理心、願意傾聽、看到別人犯錯誤時不會想要糾正他的人。主持人的目的是要協助受測者進行測試項目，並能鼓勵受測者勇於嘗試點擊，以及讓受測者說出目前的心理狀態。   （七）誰該進行觀察？ 所有與該專案相關的人員，從第一線的執行者到上層的決策人員，有預算的話買些吃吃喝喝在觀察的現場中，觀察室需要一面能即時看到受測者操作畫面的大螢幕，以及可以聽到受測現場聲音的喇叭，在測試期間，請觀察人員根據看他們所看到聽到的做筆記，並於測試結束後提出。   （八）何時該導入使用性測試？ <strong>越早越好，甚至還沒有網站的時候，就能針對同類型網站或競品網站進行測試</strong>，如果是需要網站改版，更可以針對現行網站進行測試，這樣就能知道那些功能需要保留或移除。在網站製作階段，從頁面草稿、線框圖、網站原型、mockup 等等，都能做使用者測試。   （九）如何制定測試任務？ 很簡單，看我們想要測試什麼。像是加入會員的流程、購買商品的步驟、如何找到網站中某個特定的資訊等等。在設計任務的同時，也可以預留一些空間讓受測者自由發揮，像是「找一本你想買的書」會比「找一本兩百塊以下的書」來得更能觀察到受測者的使用行為。   （十）使用性測試的 SOP</p>
<ol>
<li> 見面寒喧喇低賽。</li>
<li> 打開網站讓受測者隨意逛逛並鼓勵他說出他看到的內容</li>
<li> 開始任務，主持人告知任務內容，並請受測者完成。全程主持人不可詢問意見或引導性的提問，受測者卡關時不要協助他們，而是鼓勵他們說出卡關的點，主持人最主要的工作是發掘出任何使用上的問題給觀察室中的人了解。</li>
<li> 完成所有受測任務，主持人可向受測者提問測試中所發生的問題，以及提出事前開發人員委託詢問的問題。</li>
<li> 關門送客。</li>
</ol>
<p>  （十一）使用性測試中的典型問題：</p>
<ol>
<li> 受測者不明白這個內容或功能是什麼意思，或是完全理解錯誤。</li>
<li> 受測者找不到他們常用的字眼，這代表開發人員所用的字彙與受測者不同。</li>
<li> 明明就在顯眼的地方但受測者就是沒看到。</li>
</ol>
<p>  （十二）該如何決定修復那些問題？</p>
<ol>
<li> 收集問題列表，寫在白版上，紀錄相同的問題出現過幾次。</li>
<li> 挑出10個最嚴重問題，請大家表決那些問題最重要、最需要被優先解決，或是根據出現次數進行優先修改順序。</li>
<li> 問題評級，針對每項問題打分數，一到十分決定嚴重程度。</li>
<li> 建立修復清單，針對問題該如何修復、所需時間、負責人進行彙整。可針對快速解決的問題再列一份清單，並且<strong>盡量在不添加現有內容或功能的原則下來解決使用性的問題</strong>。另外不要太看重受測者所提出的新功能，因為這大多代表著他們所面臨的問題沒有被妥善解決，如果他們真的提出一個很棒的解決方案，身為專業開發人員的我們一定會知道。</li>
</ol>
<p>  （十三）那些理由讓人不做使用者測試？</p>
<ol>
<li> 沒時間—&gt;有測試可以避免冤枉路以及回過頭來花更多時間打掉重練。</li>
<li> 沒有錢—&gt;清潔阿姨都可以抓來做使用者測試了，測試的硬體成本一般公司的會議室、咖啡廳都能運用，不用再額外花錢。</li>
<li> 不知該何做—&gt;根據本書的方法多做幾次就能抓到技巧，<strong>重點是否有心從使用者身上學習還是只是把使用者體驗掛在嘴邊</strong>。</li>
<li> 沒有實驗室—&gt;只要有兩臺可以上網的電腦就行。</li>
<li> 不知如何解讀結果—&gt;最重要的問題誰都看得出來，如果沒人看出來那網站還是收收關了。</li>
</ol>
<p> </p>
<h2 id="四、行動體驗"><a href="#四、行動體驗" class="headerlink" title="四、行動體驗"></a>四、行動體驗</h2><p><img src="https://oberonlai.blog/wp-content/uploads/2015/06/c9e42240.jpg" alt="c9e42240">   行動體驗的設計原則： （一）允許縮放：不管是否有提供行動版網頁，能讓使用者自由縮放頁面大小非常重要，<strong>縱使我們覺得已將字體放到不能再大，還是會有人覺得字太小</strong>。 （二）導引到正確的網址：如果網頁的電腦版與手機版是分開製作，務必確認內頁的連結可以導引到正確的版本，而非回到首頁。 （三）提供完整網站的連結：不管行動內容設計得多完整、多豐富，<strong>使用者的經驗可能還停留在電腦版，他們會用電腦版的記憶來尋找他們想要的功能</strong>，所以務必提供版本切換的功能，慣例是在頁面底部。 （四）不要隱藏該有的介面線索：按鈕要看起來可以點，輸入框看起來可以輸入。 （五）介面需要容易學習並且可記憶性。   提高網站使用好感度的方式： （一）知道使用者想在我們的網站上做什麼，並讓他們不費吹灰之力達成他們想要的。 （二）告訴使用者他想知道的東西。 （三）減少達成目標的步驟。 （四）知道使用者可能那邊會碰到問題，並且提供解答。  </p>
<h2 id="個人心得"><a href="#個人心得" class="headerlink" title="個人心得"></a>個人心得</h2><p>在專案的過程中，總是會聽見業主許多對於網站設計的建議與想法，他們會根據自己的使用習慣來判斷公司網站也要以自己熟悉的方式來設計，這事實上也沒有對或錯，因為當網站完成後，最頻繁的訪問者可能就是老闆自己。   會關心到使用者體驗，就是當他發現網站沒有流量、沒有達成預期目標，才會開始在意是不是網站那裡沒做好，那裡沒有符合使用者的期待，而這一切都是一種學習的過程。衷心希望有越來越多的企業主能夠盡早體悟到<strong>使用者體驗跟業蹟是正相關，微不足道的小細節累積起來都能帶給使用者截然不同的感受</strong>，真正去了解他們並解決他們的問題，才是能讓公司長久經營之道。</p>
]]></content>
      <categories>
        <category>使用者介面</category>
      </categories>
  </entry>
  <entry>
    <title>三十秒, 看見你的理想網站</title>
    <url>/tw/everytheme-intro/</url>
    <content><![CDATA[<p>在超過七年的設計經驗裡，我們知道與客戶溝通的最好方式，就是能讓他們在第一時間「看到」他們心目中的網站，無論是視覺風格、互動模式，還是系統功能、呈現特效，   沒有什麼方法比讓客戶直接看到甚至實際操作來得更有效率，也因此我們總是會花許多的時間準備參考資料以及製作網站原型，目的就是能清楚了解客戶的真實需求。   <img src="https://oberonlai.blog/wp-content/uploads/2014/10/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2014-10-15-%E4%B8%8B%E5%8D%889.02.09-1024x621.png" alt="http://bm.straightline.jp/"></p>
<span id="more"></span>
<p>日本優秀網站參考—&gt;<a href="http://bm.straightline.jp/" title="http://bm.straightline.jp/">http://bm.straightline.jp/</a>   但因企業文化的差異以及對於視覺感受的認知，在蒐集資料的同時較無法面面俱到，總是只能找一些大方向後再透過反覆的討論來進行確認，   尤其是未經過視覺設計專業訓練的一般企業而言，要能清楚描述出希望的設計風格更是難上加難，有些客戶會自行去找範例網站，但常常是國外的、或是單純是老闆喜歡但網站調性完全不適合該企業，   為了跟客戶解釋不合適的原因，我們常常會把客戶的企業標誌和範例網站合成一張靜態圖片，人是視覺的動物，只要看不順眼立刻可以分辨出來。   於是我們開始反思，有沒有什麼更方便的流程或工具可以讓客戶知道適合他們企業的網站範例，也讓負責人員能與主管或是設計師進行更有效的溝通，減少彼此的誤會與摩擦。   經過幾個月的討論與實作，我們開發了一套線上工具：EveryTheme—&gt;<a href="http://everytheme.com.tw/" title="everytheme">http://everytheme.com.tw/</a>   <img src="https://oberonlai.blog/wp-content/uploads/2014/10/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2014-10-15-%E4%B8%8B%E5%8D%889.04.50-1024x560.png" alt="everytheme-main"> 主要的功能是可以快速搜尋符合企業風格的網頁範例，選定後更可以直接購買該網頁版型做為網站建置基礎，其它特色如下：  </p>
<h3 id="lt-一-gt-企業標誌合成"><a href="#lt-一-gt-企業標誌合成" class="headerlink" title="&lt;一&gt;企業標誌合成"></a>&lt;一&gt;企業標誌合成</h3><p>從我們的經驗得知，能將客戶相關設計物與網站範例做結合，更能有效確認其網站調性是否符合該企業， 因此 EveryTheme 配置 LOGO 大小、位置調整功能，因此客戶在前期不需任何設計人員，即可簡易合成網頁版型。   <img src="https://oberonlai.blog/wp-content/uploads/2014/10/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2014-10-15-%E4%B8%8B%E5%8D%889.07.15-1024x609.png" alt="everytheme-upload">  </p>
<h3 id="lt-二-gt-產業、顏色分類"><a href="#lt-二-gt-產業、顏色分類" class="headerlink" title="&lt;二&gt;產業、顏色分類"></a>&lt;二&gt;產業、顏色分類</h3><p>依據台灣產業特性進行分類，讓各行各業都能找到相關網站；顏色分類可依企業標誌主色進行搜尋。 <img src="https://oberonlai.blog/wp-content/uploads/2014/10/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2014-10-15-%E4%B8%8B%E5%8D%889.09.44-1024x611.png" alt="everytheme-color">   <img src="https://oberonlai.blog/wp-content/uploads/2014/10/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2014-10-15-%E4%B8%8B%E5%8D%889.08.18-1024x635.png" alt="everytheme-industry">  </p>
<h3 id="lt-三-gt-版型即時預覽"><a href="#lt-三-gt-版型即時預覽" class="headerlink" title="&lt;三&gt;版型即時預覽"></a>&lt;三&gt;版型即時預覽</h3><p>除了靜態合成示意圖外，亦可載入實際網站畫面進行操作，並可選擇不同裝置調整預覽畫面，以測試網站瀏覽效果。 <img src="https://oberonlai.blog/wp-content/uploads/2014/10/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2014-10-15-%E4%B8%8B%E5%8D%889.13.16-1024x547.png" alt="everytheme-livepreview">   透過以上搜尋功能，進行交叉比對搜尋條件，藉此縮小搜尋範圍，以便快速找尋合適版型。目前站內版型與 <a href="http://themeforest.net/">Themeforest</a> 合作，挑選具設計感與實用功能之網頁版型，未來將陸續開發中文主題以及與第三方廠商合作，藉以提供更多元化的版型選擇。   <img src="https://oberonlai.blog/wp-content/uploads/2014/10/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2014-10-15-%E4%B8%8B%E5%8D%889.15.17-1024x555.png" alt="everytheme-list">   使用上有任何建議都可以留言給我們，希望這樣的工具能幫助到大家 ^^ EveryTheme—&gt;<a href="http://everytheme.com.tw/" title="everytheme">http://everytheme.com.tw/</a></p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>Facebook</title>
    <url>/tw/facebook/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>FB Messenger 直接取代線上即時客服</title>
    <url>/tw/fb-messenger-%E7%9B%B4%E6%8E%A5%E5%8F%96%E4%BB%A3%E7%B7%9A%E4%B8%8A%E5%8D%B3%E6%99%82%E5%AE%A2%E6%9C%8D/</url>
    <content><![CDATA[<p>近日 Facebook 釋出了可以直接在自己網站上進行聊天的小工具，只要兩個步驟就可以快速加入，而且完全免費！</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1513791502061182” display=”yes” title=”RkIgTWVzc2VuZ2VyIOebtOaOpeWPluS7o+e3muS4iuWNs+aZguWuouacjQ==” body=”6L+R5pelIEZhY2Vib29rIOmHi+WHuuS6huWPr+S7peebtOaOpeWcqOiHquW3see2suermeS4iumAsuihjOiBiuWkqeeahOWwj+W3peWFt++8jOWPquimgeWFqeWAi+atpempn+WwseWPr+S7peW/q+mAn+WKoOWFpe+8jOiAjOS4lOWujOWFqOWFjeiyu++8gQ==” pid=”3225”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>FB2WP 整合貼文外掛設定方法</title>
    <url>/tw/fb2wp-%E6%95%B4%E5%90%88%E8%B2%BC%E6%96%87%E5%A4%96%E6%8E%9B%E8%A8%AD%E5%AE%9A%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>  上次在這邊跟大家分享過 FB2WP 這支可以把粉絲團貼文拉回自己的 WordPress 網站的外掛，自己在使用時因為 FB 的關係，導致在設定上有點複雜，想說應該可以整理一篇詳細步驟設定的文章，幸好有先問一下 Google 大神，果然有神人已經整理好了，在設定上有遇到問題可以參考這篇文章！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1383767258396941” display=”yes” title=”RkIyV1Ag5pW05ZCI6LK85paH5aSW5o6b6Kit5a6a5pa55rOV” body=”5LiK5qyh5Zyo6YCZ6YKK6Lef5aSn5a625YiG5Lqr6YGOIEZCMldQIOmAmeaUr+WPr+S7peaKiueyiee1suWcmOiyvOaWh+aLieWbnuiHquW3seeahCBXb3JkUHJlc3Mg57ay56uZ55qE5aSW5o6b77yM6Ieq5bex5Zyo5L2/55So5pmC5Zug54K6IEZCIOeahOmXnOS/gu+8jOWwjuiHtOWcqOioreWumuS4iuaciem7nuikh+mbnO+8jOaDs+iqquaHieipsuWPr+S7peaVtOeQhuS4gOevh+ips+e0sOatpempn+ioreWumueahOaWh+eroO+8jOW5uOWlveacieWFiOWVj+S4gOS4iyBHb29nbGUg5aSn56We77yM5p6c54S25pyJ56We5Lq65bey57aT5pW055CG5aW95LqG77yM5Zyo6Kit5a6a5LiK5pyJ6YGH5Yiw5ZWP6aGM5Y+v5Lul5Y+D6ICD6YCZ56+H5paH56ug77yB” pid=”2888”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>FS 程式開發日誌</title>
    <url>/tw/fs-%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/</url>
    <content><![CDATA[<h3 id="2019-12-03"><a href="#2019-12-03" class="headerlink" title="2019/12/03"></a>2019/12/03</h3><p>重刻編輯器的 UI ，JS 的部分比想像中要來得棘手，改了 DOM 之後噴一堆錯，看來還是習慣用 getElementById 比較安全，querySelector 太依賴 DOM 結構。然後意外發現 CSS 的 calc 竟然可以先乘除後加減，對於要計算 100vh 的比例很方便。</p>
<pre class="line-numbers language-none"><code class="language-none">height: calc( ((100vh - 102px) &#x2F; 5) &#x2F; 3.5 );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2019-11-29"><a href="#2019-11-29" class="headerlink" title="2019/11/29"></a>2019/11/29</h3><p>「開始設計你的影像故事吧！頁面管理可以讓你新增、刪除、編輯頁面，還可以使用拖曳的方式來改變順序，在開始製作前不妨先把影像故事的頁面結構先建立完成，說一個好故事就從大綱開始！」這是在設計頁面管理的介面時，寫下的使用教學說明文字，在重新整理介面時，發現到一件事，這工具的背後，是不是該從教使用者如何寫出一個好故事開始？想要打造品牌，沒有一個好故事要從這麼競爭激烈的環境中脫穎而出實在困難，除非商品有獨特性或是獨佔性，但一般的業者可能很難有這樣的資源，業者的素材不好、品牌沒有深度、產品沒有靈魂，相反的，每次看旅遊雜誌總是介紹許多台灣努力在地深耕的品牌，其品質、包裝、行銷能力完全不輸國外品牌。希望這工具，可以幫助有心要經營品牌的業者，幫助他們把他們的理念可以傳達給更多人。</p>
<h3 id="2019-11-28"><a href="#2019-11-28" class="headerlink" title="2019/11/28"></a>2019/11/28</h3><p>搞定頁面排序功能，比想像中碰到的阻礙小，要注意的地方就是重新排序完畢之後，要更新 data-slide 的數值，因為這會關係到 slide 的切換順序</p>
<pre class="line-numbers language-none"><code class="language-none">setPageOrder()&#123;
  this.vars.pageNav.addEventListener(&#39;stop&#39;,e&#x3D;&gt;&#123;
    let orderArray &#x3D; [];
    Array.from(this.vars.pageNav.querySelectorAll(&#39;li a&#39;)).forEach(element &#x3D;&gt; &#123;
      orderArray.push(&#96;$&#123;element.dataset.page&#125;&#96;)
    &#125;)
    for (let i &#x3D; 0; i &lt; orderArray.length; i++) &#123;
      this.vars.pageNav.querySelectorAll(&#39;li a&#39;)[i].dataset.slide &#x3D; i;
      this.vars.slideshowPage.querySelector(&#39;.uk-slider-items&#39;).append(document.querySelector(&#96;li[data-page&#x3D;$&#123;orderArray[i]&#125;]&#96;))
    &#125;
    Array.from(this.vars.pageNav.querySelectorAll(&#39;li a&#39;)).forEach(element &#x3D;&gt; &#123;
      setTimeout(() &#x3D;&gt; &#123;
        element.classList.remove(&#39;active&#39;);
      &#125;, 600);
    &#125;);
  &#125;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>開始著手進行編輯器的 UI 調整，先用 Sketch 設計，讓左側主選單有順序性，引導使用者照步驟操作，第二層選單改用 tab 來設計，緊靠著主選單來暗示關聯性，比較麻煩的地方就是小工具的地方需要改寫不少 code，變成不能用 offcanvas 來做而是要用 toggle，這樣的調整在 class 方面可能會造成某些無法預期的問題，封面設定的部分捨棄讓人困惑的 Google 搜尋結果頁，改以單純的頁面來顯示，輔以文字說明，在視覺線索上可以多強調這張圖是封面的意涵。</p>
<h3 id="2019-11-27"><a href="#2019-11-27" class="headerlink" title="2019/11/27"></a>2019/11/27</h3><p>在改變小工具的尺寸後，右邊的設定項會噴錯這件事過關了，不是原本 moveable 的寫法有問題，而是在 script.js 裡面有做一個取得 config 的點擊事件，因為取到的 e.target 包含範圍太廣，造成在拖曳 moveable 也會觸發到偵聽事件，而 moveable node 並沒有 data-config 的屬性，所以導致 config 噴錯，處理方式是把這一個事件拿掉，但又會造成背景的 config 取不到，所以再寫了一個點擊事件來取得背景圖的 config。因為這件事學到了怎麼從 class 裡面把需要的東西傳出來，只要在建構式的時候先取好要拿的東西的變數名，然後指派值給他，這樣他就會變成這個類別的屬性，接下來只要 new 出實體後就可以用 . 取得該屬性的值。</p>
<pre class="line-numbers language-none"><code class="language-none">Array.from(document.querySelectorAll(&#39;li a[data-config^&#x3D;page]&#39;)).forEach(element &#x3D;&gt; &#123;  &#x2F;&#x2F; 點擊內頁底圖取得 config
    element.addEventListener(&#39;click&#39;,(e)&#x3D;&gt;&#123;
      config &#x3D; e.currentTarget.dataset.config;
    &#125;)
  &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>開發上遇到小低潮，根本原因是找不到現階段自己開發的目標是什麼？原本希望 11 月底就可以完成編輯器的部分，但遇到 UI 需要大幅度的調整，需要重新思考這工具的操作邏輯應該會是在何種使用情境底下，或是去類比既有的設計模式來進行調整，如果是以部落客為主要使用對像，操作方式可能會是類似文章發布系統，或是社群網站貼文的模式。如果是以大眾都熟悉的軟體，可能比較像是 Power Point，但真要這樣改下去整個 UI 都要重弄了，懊惱自己開發前為何不多做點研究以及使用 Prototype 做 user test，只能從現有的邏輯中先去調整看看了。</p>
<p>所以有一種走了三個月又要從頭來過的感覺，想放棄的念頭就這樣冒了出來，再加上對於產品方向的不確定性，開始懷疑這一切是不是做白工？一覺睡起來，看著已經完成的 task 有 109 個，程式碼行數超過萬行、開發總小時數超過 300 個小時，學會了 js 的 class 運用、不依賴 jQuery 全寫原生 js、如何使用 localStorage 儲存複雜的資料、如何開發各種頁面小工具、drag＆drop、ajax insert post…，以一個 Side Project 的練習量來看好像已經足夠了XD。</p>
<p>接下來呢…？進入撞牆期了，依照網站開發十多年的經驗，最好的解決辦法就是閉上嘴，專注在每一個 task 上面，其他，都不用想了。</p>
<h3 id="2019-11-25"><a href="#2019-11-25" class="headerlink" title="2019/11/25"></a>2019/11/25</h3><p>這件事情卡關，在改變小工具的尺寸後，右邊的設定項會噴錯，原因是因為當點擊縮放控制點時，用來判斷要改變的對象 config 變數被清空了，所以需要在點擊縮放控制點時，要設定 config 為當前小工具的 data-config，於是寫了下面這一段，想要放在類別裡面，但 config 變數是在最外層的建立的，因此下面這段必須放在外層，又因為他是非同步事件，無法使用 return 的方式來回傳值，只能做成 function 寫在外層的 dataInput function 裡面</p>
<pre class="line-numbers language-none"><code class="language-none">Array.from(document.querySelectorAll(&#39;.wrap-moveable.active .moveable-control&#39;)).forEach(element &#x3D;&gt; &#123;
  element.addEventListener(&#39;click&#39;, e &#x3D;&gt; &#123;
    config &#x3D; e.currentTarget.parentNode.previousElementSibling.dataset.config;
  &#125;)
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>紀錄一下頁面拖曳改變順序的思路：左側選單當完成拖曳後，會依照現在的選單的順序組成一個 Array，去抓 data-page-name，組成 [“page0”,”page1”,”page2”]，然後中間的區塊會用迴圈的方式來 append innerHTML，用 getElementById 取得 node，然後依序 append。</p>
<p>點擊複製網址功能，input 不能是在 disabled 的狀態下才有作用，但又不想讓 user 可以修改 input 裡面的內容，所以從 css 下手，用 pointer-events 讓 user 選不到 input field</p>
<pre class="line-numbers language-none"><code class="language-none">vars.btnCopyEmbedCode.addEventListener(&#39;click&#39;, () &#x3D;&gt; &#123;
  vars.embedCode.select();
  vars.embedCode.setSelectionRange(0, 99999)
  document.execCommand(&quot;copy&quot;);
  vars.btnCopyEmbedCode.textContent &#x3D; &quot;已複製！&quot;
  setTimeout(() &#x3D;&gt; &#123;
    vars.btnCopyEmbedCode.textContent &#x3D; &quot;複製程式碼&quot;
  &#125;, 2000);
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>FB &amp; Line share url</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;facebook.com&#x2F;sharer.php?u&#x3D;&lt;?php the_permalink(); ?&gt;&quot; target&#x3D;&quot;_blank&quot;&gt;&lt;img src&#x3D;&quot;&lt;?php echo get_template_directory_uri(); ?&gt;&#x2F;img&#x2F;01_newspopup_fb.svg&quot; width&#x3D;&quot;9&quot;&gt;&lt;&#x2F;a&gt;
&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;lineit.line.me&#x2F;share&#x2F;ui?url&#x3D;&lt;?php the_permalink(); ?&gt;&quot; target&#x3D;&quot;_blank&quot;&gt;&lt;img src&#x3D;&quot;&lt;?php echo get_template_directory_uri(); ?&gt;&#x2F;img&#x2F;01_newspopup_line.svg&quot; width&#x3D;&quot;16&quot;&gt;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2019-11-23"><a href="#2019-11-23" class="headerlink" title="2019/11/23"></a>2019/11/23</h3><p>新增了 Bookend 的 CTA button，結果又發生逗號問題而讓 Bookend 噴錯，實在受夠了，乖乖把 Bookend 的 JSON 改用 PHP 的 Array 來組，最後再用 json_encode 來餵給 js，一開始組都還沒問題，但卡在 bookend link 這個地方，因為 as 要求的格式為 {},{}，但因為適是用陣列組出來的，所以 php 會變成 [{},{}]，多了外面的中括號 bookend 又會 GG，試著把 php array 轉成 object，但 encode 就還是會出現中括弧，一度想去 slack 裡面抱怨哪有人把多筆資料設計成 {},{} 這樣的格式，應該都是要用陣列才對，然後再想想問題提出了後面還要跟進與討論，覺得好懶好花時間，最後用了很爛的招： str_replace 四次來處理掉中括號以及多餘的逗號問題，希望未來有工程師看到我現在的解法，能想出更好的解決方案了。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;?php echo str_replace(&#39;,&quot;,&#39;,&#39;,&#39;,str_replace(&#39;&#125;&quot;,&#39;,&#39;&#125;,&#39;,str_replace(&#39;&#125;,&quot;&#39;,&#39;&#125;,&#39;,str_replace(&#39;\&quot;&#39;,&#39;&quot;&#39;,json_encode( $bookend,JSON_UNESCAPED_UNICODE ))))); ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>另外修改好了 sidebar 的 style，多加了可顯示或關閉 sidebar 的設定項，讓不需要使用 sidebar 的人就能把它關閉，加了重整頁面時會跳出未儲存檔案的提醒、根據文字小工具選到的字型動態載入 Google font。</p>
<h3 id="2019-11-22"><a href="#2019-11-22" class="headerlink" title="2019/11/22"></a>2019/11/22</h3><p>把 Bookend 做了一個整理，加了品牌介紹的區塊，然後徹底檢查會造成 Bookend error 的各種狀況，會有 error 是因為 Bookend 必須是 JSON 格式，少或多一個逗號都會造成錯誤，當 user 沒有填 Bookend 的所有項目資料為空時，逗號的判斷沒有寫好所以造成各種錯誤，後來想想這個區塊不應該這樣寫，而是先用 PHP 組成陣列之後，再用 json_encode 去產出 bookend 需要的東西，這樣就不用擔心逗號的問題，未來有時間再處理了。</p>
<p>另外增加了 uploadcare 的檔案上傳限制，容量限制為 4 MB，檔案型態只允許 jpg png gif mp3 mp4 ，其他全鎖，避免有心人士上傳了惡意腳本來亂。</p>
]]></content>
      <categories>
        <category>老人碎念</category>
      </categories>
  </entry>
  <entry>
    <title>Git 修改遠端 remote url</title>
    <url>/tw/git-change-remote-url/</url>
    <content><![CDATA[<p>感謝微軟買了 Github，開放了私有 Repo 的功能，雖然自己寫的不是什麼多了不起的程式碼，但畢竟是客戶的東西還是不好意思直接公開，</p>
<p>就直接從 Bitbuket 跳槽回 Github 吧，本地的檔案只要修改最後要 push 的遠端地址就好，其他都不用變動～</p>
<p>1、先檢查目前的 remote 名稱</p>
<pre class="line-numbers language-none"><code class="language-none">git remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2、幹掉現有的 remote 名稱</p>
<pre class="line-numbers language-none"><code class="language-none">git remote remove origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3、新增新的 remote url</p>
<pre class="line-numbers language-none"><code class="language-none">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;m615926&#x2F;myrepo.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>4、push 前記得要先 commit</p>
<pre class="line-numbers language-none"><code class="language-none">git add .
git commit -m ‘跳槽啦～&#39;
git push --set-upstream origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>人生也有 Git 就好了...</title>
    <url>/tw/git-essentials/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2019/01/img_7899.jpg"></p>
<p>回想當年第一次接觸 Git ，是在開發線上旅遊照片整理服務「Mr.Travelo 我的旅遊書」的時候，當時夥伴找到了一位來自美國的工程師來協助我們進行後端程式的開發，我的 Git 就是在這位工程師的指導下，第一次用 Git 實戰在專案之中。</p>
<p>但英文聽力弱弱的我，再加上自己那時候非常習慣用 Dropbox 來做檔案的同步與備份，要學一個新的版本控制方法讓我頭非常痛，光是要把 Git 的環境安裝起來就卡了非常多關，更不用說後來開發時遇到衝突、檔案還原等狀況，卻只能用終端機指令模式來操作的方式，讓我非常不適應 Git。</p>
<p>將近十年過去了，除了比較沒那麼害怕終端機外，也慢慢習慣在每個專案採用 Git 作為版本控制，但總覺得對 Git 的認識還是停留在當年懵懂的階段，於是在圖書館逛到這本，就還是乖乖借回來 K 了～</p>
<p>本書分為七個章節，從基礎到進階的知識，再到實用的設定方法以及工具介紹，算是滿全面的，而且還有說明怎麼從 SVN 移轉到 Git 的方法，實務上還滿常碰到 SVN 的環境，但可能是翻譯書，有些部分不太像中文，或是專有名詞的翻法跟一般見到的不太一樣，市面上有許多其他 Git 的出版，第一次接觸的朋友可能還是買台灣工程師寫的書讀起來比較好理解些。</p>
<p>以下就我自己覺得實用的部分做個紀錄：</p>
<h2 id="零、實用的基本指令"><a href="#零、實用的基本指令" class="headerlink" title="零、實用的基本指令"></a>零、實用的基本指令</h2><p>git remote add upstream <a href="https://xxx.xx/">https://xxx.xx</a> 可以跟被 fork 的程式碼保持同步<br>git reset HEAD<del>1 回到前一次的提交<br>git reset Head</del>1^1 回到前一次的分支提交<br>git reset –hard HEAD~N 回到前N次的提交<br>git log -2 查看最近兩筆的 commit 紀錄<br>git reflog 查看所有 git 的操作記錄<br>git fetch 只是抓回遠端檔案還沒有進行合併，需要再執行 git merge<br>git fetch + git merge = git pull<br>git stash 把東西先打包起來，在還沒做完卻又必須切換分支的情況下適用<br>git merge 跟 git rebase 後者不會留下 commit 紀錄<br>git diff 比對檔案差異</p>
<h2 id="一、Github-Flow-的介紹"><a href="#一、Github-Flow-的介紹" class="headerlink" title="一、Github Flow 的介紹"></a>一、Github Flow 的介紹</h2><p>因為沒有待過大型的開發團隊，在我自己開發上很少用到分支這個功能。最完整且最全面的分支管理模式，應該是分為五條的 GitFlow，從分出 delevop、release，再到 feature 以及 hotfix，沒實戰過但感覺起來是滿複雜的，</p>
<p>書中介紹的由 Github 提出的 Flow 就相對單純的多，主要規則如下</p>
<ol>
<li> 在 master 分支的任何東西是可部署的：也就是自己在合併前都能確保程式無誤，不會害 master 爆炸</li>
<li> 建立有清楚描述的分支：以開發的功能會處理的具體事項作為分支命名，團隊中要能訂定分支的命名規則，方便其他人辨識。譬如 new-user-creation</li>
<li> 經常推送分支：頻繁地將分支推送到遠端伺服器，讓團隊成員透過 git fetch 可以看到活躍分支的狀態</li>
<li> 隨時建立 Pull Request：利用 Github 特有的 PR 功能來讓其他人檢視你的程式碼並提供改進建議</li>
<li> 只有在經過 Pull Request 通過後才進行合併，確保程式都是有被審核過的</li>
<li> 審查通過後立即部署</li>
<li> 此流程對於需要頻繁更新的網站專案非常適合，即時且高效</li>
</ol>
<h2 id="二、Git-Config-的設定"><a href="#二、Git-Config-的設定" class="headerlink" title="二、Git Config 的設定"></a>二、Git Config 的設定</h2><p>Git 可以依照自己的使用習慣設定許多便利的功能，像是別名、自動修正錯別字等等，config 設定的影響範圍分為三種層級</p>
<ol>
<li> 系統層級 –system: 這代表設定的影響範圍會包含此電腦中的所有使用者以及使用 Git 做版控的專案資料夾</li>
<li> 使用者層級 –global: 只給當前的系統使用者使用，最常用的選項是這個</li>
<li> 儲存庫層級 –local: 只作用在當前的工作目錄</li>
</ol>
<p>git config –global help.autocorrect 10 當拼字有誤時，自動修正 git 指令的功能。設定別名的方式：輸入 git config –global alias.別名名稱 “要取代的指令”，像是設定 git config –global alias.ad “add .”，之後只要打 git ad 就可以完成加入檔案追蹤的動作。其他實用別名設定如下：</p>
<p>git config –global alias.last “log -1 HEAD” —&gt; 查看最新的 commit 訊息<br>git config –global alias.undo “reset HEAD~1”—&gt;回到上一動<br>git config –global alias.cm “!git add . &amp;&amp; git commit -m”—&gt;使用驚嘆號來執行外部指令，只要輸入 git cm 直接完成 commit</p>
<p>可以用這方法去組合更多讓自己工作更加快速的別名。</p>
<h2 id="三、良好的-Git-Message-撰寫習慣"><a href="#三、良好的-Git-Message-撰寫習慣" class="headerlink" title="三、良好的 Git Message 撰寫習慣"></a>三、良好的 Git Message 撰寫習慣</h2><p>這部分是我認為這本書最棒的地方，以往都想說 message 只有自己看，所以大概都會亂打一些英文，連中文都懶得打，然後 commit 很隨便，常常推上去後才發現有東西沒改到，所以就會出現 “修改介面-1”、”修改介面-2” 這樣重複堆疊上去的訊息，簡單說我根本是把 Git 當成 FTP 在用，書中提到的重點完全讓我重新審視自己寫的 message，並且運用在專案之後，一整個覺得考試都考一百分了喔喔喔～</p>
<ol>
<li> 在紙上先將工作事項拆解成小任務：這跟看板方法提到的準備作業很像，先拆分準備要做的事，書中更具體的提到一個蕃茄鐘 25 分鐘可以完成的工作為一個小任務，有這個先決條件就很好拆分任務內容了。</li>
<li> 先寫下小任務的提交訊息再開始寫程式碼：這點非常驚人，先寫下要提交的訊息除了可以確保訊息是有意義外，更重要的是他可以讓你專注在這個任務，只開啟跟這個任務相關的檔案，如果改了其他無關的檔案，立刻就會發現這不是我現在要做的事情，就會回頭乖乖做現在該做的事。</li>
<li> 每完成一個小任務進行提交：小任務完成後就提交很有爽快感，每次小任務的提交都能離完成大任務更近一步。</li>
<li> 別做出斷斷續續的提交：要保持開發的完整性，萬一真的寫到一半被抓去救火，先用 git stash 的功能把目前的進度封存起來。</li>
<li> 說明功能變化而非實作細節修 bug 的話先描述問題或是原始需求：訊息以動詞開頭，像是新增、修改、除錯什麼什麼功能或介面，以非工程師也能看得懂的淺顯文字進行撰寫。</li>
</ol>
<p>現在的網頁編輯器越來越先進，直接整合 Git 版控，只要在工作目錄有 git init，設好 git remote，它就可以抓到有修改的檔案，並且自動 git add 到索引，然後在介面中輸入 message，直接 commit 完成，也能推送到遠端，甚至是做視覺化的 git diff。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/01/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-01-24-%E4%B8%8B%E5%8D%8811.14.49.jpg"></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/01/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-01-24-%E4%B8%8B%E5%8D%8811.11.19.jpg"></p>
<p>我現在都是用 Visual Studio Code 作為主力開發編輯器，強大的功能、豐富的外掛生態以及還能維持很不錯的效能，真的是微軟這幾年最偉大的發明之一也不為過～</p>
<h2 id="個人感想"><a href="#個人感想" class="headerlink" title="個人感想"></a>個人感想</h2><p>依照這態勢 Git 應該還是會繼續紅下去，更不用說微軟把 Github 原本需要付費的 private repo 功能給完全開放，讓我從 bitbucket 跳槽回 Github，不知道還要亂打什麼感想，十一點半了來洗洗睡了…</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>Git History 動畫</title>
    <url>/tw/git-history-%E5%8B%95%E7%95%AB/</url>
    <content><![CDATA[<p><img src="https://i2.wp.com/oberonlai.blog/wp-content/uploads/2019/02/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-02-09-%E4%B8%8A%E5%8D%8810.17.33.jpg?fit=1024,563&ssl=1"></p>
<p>非常有趣的一個服務 -&gt; <a href="https://githistory.xyz/">https://githistory.xyz</a>，可以使用 Timeline 的方式看到一個檔案的 commit 紀錄，拿來做教學示範應該是滿實用的，使用方法也很簡單，進到 github repo 的檔案裡面，把網址裡面的 github.com 換成 githistory.xyz 就可以了喔喔喔～</p>
<p>例如 <a href="https://github.com/m615926/wp_local/blob/master/docker-compose.yml">https://github.com/m615926/wp_local/blob/master/docker-compose.yml</a> 換成<a href="https://githistory.xyz/m615926/wp_local/blob/master/docker-compose.yml">https://githistory.xyz/m615926/wp_local/blob/master/docker-compose.yml</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>【 心得 】一天四小時工作術</title>
    <url>/tw/how-i-manager-projects/</url>
    <content><![CDATA[<blockquote>
<p>專案成果是否能滿足客戶的期望，關鍵不是在客戶希望的時間內完成所有的任務，而是在這段期間內能否解決客戶最在意的問題，只要客戶最痛的問題處理好了，剩下的工作縱使沒有在預期時間內完成也沒關係，只要安排好後續的執行時間並且傳達給客戶知道，這樣就能擺脫每天被死線追殺的苦逼人生了…</p>
</blockquote>
<p>自從改變自己的工作模式後已經過了半年的時間，這六個月的案量還算穩定 (感謝各位信任我的朋友)，現在手頭上的狀態是每天有計時的工作時數大概是四個小時左右，並且同時有四個案子在同步執行中。</p>
<p><strong>「一天只做四個小時卻能同時接案四個案子!?」</strong></p>
<p>如果在半年前有人跟我這樣說，我會覺得這人一定是在唬爛。以前我的極限是一個月兩個案子，然後每天工時至少八小時，常常做到晚上加班加到十、十二小時也是家常便飯，為了要讓專案趕在某個約定好的日期完成，就是只能一直拼命的做做做。</p>
<p>現在回過頭來看待以前的自己覺得好不可思議，每天忙得跟狗一樣卻沒什麼成就感，心情又很容易受到客戶意見的影響，尤其是做好的功能又說要改，規格一變動工時的爆增就無法避免。因此想把自己這半年來的轉變記錄下來，同時也提醒自己絕對別再走回頭路。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2021/01/CleanShot-2021-01-15-at-15.47.40.jpg"></p>
<p>每日的風景</p>
<span id="more"></span>

<h2 id="這個專案要多久？"><a href="#這個專案要多久？" class="headerlink" title="這個專案要多久？"></a>這個專案要多久？</h2><p>常遇到客戶來信說他需要一個網站，然後接下來的問題就是多少錢以及要做多久，有時候也會在 FB 的接案社團裡面的看到業主的發案文，簡略描述了案件需求後就希望徵求報價與開發時程，然後就會看到留言區蓋起私訊牆，其中還不乏說已私訊報價與製作時間。</p>
<p>我每次看到我心裡都會有一個大問號：「在根本還不了解客戶需求的具體工作事項前，這個價格與時間都是怎麼評估出來的？」事實上我知道答案，因為我以前也是這樣報價的：假設客戶要一個購物網站，根據過去專案的經驗大概需要兩個月，如果時間是兩個月，我就把我的生活成本以及想要賺的部分加好後作為報價。</p>
<p>所以接下來為了要在兩個月完成這個案子，一定要花上所有的時間把它做完，因為沒做完我就賠錢了，案子多拖一個月，就等於多賠一個月的生活費，而且最重要的是我想努力把案子結掉，所以根本沒有心思或時間再去接洽新的案子，因為只要接了另外一個案，同樣要在約定的時間內做完讓我壓力山大。</p>
<p>所以一個月同時進行兩個案子就已經是我的極限，光是要釐清客戶需求、規劃程式架構、功能開發、測試，就讓我精疲力盡，而且這樣的估時法完全沒考量到客戶的商業情境，因為當功能真正實作出來之後，老闆看到後會覺得好像應該再加些什麼，老闆的老闆也會有想法，所以當做好後要再加東西總是會讓我火冒三丈，心裡種是有 OS 說為何不一開始提出來？但冒完後就還是往肚裡吞，繼續默默的修改。</p>
<p>這樣造成的結果就是每天工時拉長，兩個月內要完成的話，每一週都會有必須要完成的進度，如果稍微延遲了，加班把進度追回來是一定要的，但如果是客戶需求變動而造成工作量增加，還是要想辦法把在時程內完成。喔，對了，等待客戶回覆的時間也是算在時程內喔~</p>
<h2 id="月底一定要準時上線！"><a href="#月底一定要準時上線！" class="headerlink" title="月底一定要準時上線！"></a>月底一定要準時上線！</h2><p>現在，如果客戶希望某項功能可以在某個日期前完成，我絕對不敢答應日期，取而代之的是我會用工作事項來評估加總工作小時，然後根據最近的時間安排來確認該功能在一個工作天之中我能花多久時間來處理，譬如說如果總工時我評估需要 10 個小時，而我現在每天可以分配兩個小時來做它，那麼至少需要五個工作天。</p>
<p>所以關鍵在「工作事項」，特別是規模稍大一點的開發專案，在初期的評估根本無法預料到底會花多久時間，因為從想法到具體實作之間還存在著大量的空白需要被填補，很多細節是客戶甚至是我都沒想到的狀況，因此在專案初期就要能訂出準確的開發時程，這基本上就只是在瞎猜，猜完後讓客戶安心而已，最後等到時程爆炸再來檢討原因。</p>
<p>因此我通常會回覆客戶說等專案進行了一個月後，我們再來確認是否有可能在他們希望的時間內完成，當開始執行後就會知道需要實作的細節以及可能會花比較多時間的工作項目在哪裡，進而討論這些工作項目是否要在該階段開發，如果這些工程都要完成，以小時數換算成工作天，再來估算最後完成日才是有根據的開發時程規劃。</p>
<p>但在實務經驗上，就我接觸過的公司來說，會嚴格遵守「預定上線時間」的客戶少之又少，大部分都是開案時講得十萬火急，然後開始執行後才發現到有許多不可控因素在影響專案時程，因此控制「工作事項」比控制「時間」來得重要。具體的說：</p>
<p><strong>把焦點放在能「解決客戶關鍵問題」的工作事項上才是重點</strong>。</p>
<h2 id="今天要處理好喔，再麻煩了"><a href="#今天要處理好喔，再麻煩了" class="headerlink" title="今天要處理好喔，再麻煩了!"></a>今天要處理好喔，再麻煩了!</h2><p>理解客戶的期待是在於「解決問題」而非準時交出為了趕上線而寫得亂七八糟的程式碼後，就能從被時程追殺的壓力中釋放出來，至於會接到客戶的緊急電話說這個東西今天一定要處理好，有兩種可能性：</p>
<p>第一種是公司有重要的商業決策需要執行，而這決策因為外在環境的變動所以來得非常臨時且突然，接到這種需求下我會把目前手上正在進行的工作事項提醒客戶，說明本週預計執行的項目是否要延後，同時評估新功能需要的工作時數，有了具體的待辦清單可以讓客戶很清楚的了解這功能不是按下一個 Enter 鍵就能搞定的。</p>
<p>因此客戶就會開始思考如果今天就要完成的話可以先做哪些他真正需要的，或是根據工作時數來推遲下決策的時間，譬如從一天變三天，也可以評估是否需要尋找其他外包廠商進行協助。</p>
<p>第二種可能性是公司內部在忙其他專案，很多功能已經開發完成但還沒驗收，然後某天老闆想到這個專案，就開始追 PM 專案進度，而 PM 可能當下也在忙別的專案，被老闆追殺後再來追殺外包廠商，這種情況下就會出現所謂的「緊急會議」。</p>
<p>每次參與這種會議壓力都很大，因為 PM 會在會議前把累積的待測試項目一口氣測完，然後測試有問題就會被挑戰，或是成品跟他們的認知有所落差，最後結論就是壓時間，要在期限內全部修改完畢。</p>
<p>遇到這種情況我會擇期再約，一來當天手上都有既定的工作要完成，二來在會議前的這段時間，透過專案管理工具來提醒 PM 該驗收的項目，並請他們提出修改需求，讓專案可以重新動起來，動起來後召開的會議就比較能聚焦在解決問題上。</p>
<h2 id="四小時工作法的前提"><a href="#四小時工作法的前提" class="headerlink" title="四小時工作法的前提"></a>四小時工作法的前提</h2><p>這半年來我嘗試了很多，發現到不是所有類型的案子都適合自己的工作方法，像是一頁式需要快速完成切版或是大型專案要配合其他人員時程的案子我就無法承接，相反的，既有網站的功能修改、新創平台或是剛起步的網站開發比較適合我，而且看到因為我的協助而讓客戶的業績蒸蒸日上讓我可以從中得到成就感。</p>
<h3 id="我的工作方法如下："><a href="#我的工作方法如下：" class="headerlink" title="我的工作方法如下："></a>我的工作方法如下：</h3><ol>
<li> 固定時段收信，把待處理事項安排時間處理。非必要不開任何通訊軟體、社群網站，聯繫管道只有電子郵件、專案管理工具與電話聯繫。</li>
<li> 切割工作時段，配合作息。開電腦時間為 09:00~19:00，一天兩班制，早上為 11:00~13:00，下午為 4:00~6:00，工作時段就是專注解決待辦事項，其他零碎時間就能寫部落格、收發電子郵件以及運動。</li>
<li> 晚上下班後檢視本週的剩餘天數的工作安排，並把今日新收到與未完成的項目做分配，看是要安排在本週處理還是下週。</li>
<li> 細分工作項目，盡力讓每件事都能被追蹤，尤其是是在同一討論串提及的需求，要隨時整理成獨立的待辦工作事項，否則東西一多很容易漏掉。</li>
<li> 新增的每一項工作都要評估預計花費小時數，這關係到客戶的預算以及該功能有沒有辦法在預期內做出來的判斷標準，估越多才能越了解自己，越了解自己才能幫助客戶越準確的評估。</li>
</ol>
<p>雖然工作方法很明確，但有時候還是會破了戒，像是晚上加班、一天工作十小時，所以我幫自己訂了以下的原則：</p>
<ol>
<li> 不要接十萬火急的案子，這是加班的元兇，解法是試想接了這樣的案子會失去些什麼</li>
<li> 不要為了討好客戶隨口答應時間，這是我的老毛病，解法是仔細評估時間再回覆</li>
<li> 不要開當天才通知的會議，會被殺個措手不及，解方是一律回絕當天會議，另約時間</li>
<li> 需求確認後立刻寫進專案管理工具，不要等到累積很多再來整理</li>
</ol>
<h3 id="我的專案管理工具"><a href="#我的專案管理工具" class="headerlink" title="我的專案管理工具"></a>我的專案管理工具</h3><p>當每個任務都要拆分成很細的時候，就免不了會有非常多瑣碎的項目，再加上同時有多個案件在進行的話，很容易就會漏掉或是沒有跟進到，長久累積下來就會造成溝通的落差，所以好的遠端非同步協作專案管理工具就非常重要。</p>
<p>我選擇使用 <a href="https://ora.pm/">Ora</a>，當初會找到它是因為我需要一套可以用行事曆來管理待辦事項的工具，後來接觸更多<a href="https://oberonlai.blog/tw/scrum-kanban/">看板管理方法</a>後，才發現 Ora 能滿足我的需求，於是就一直用下去了。</p>
<p>當有新專案時我的流程是這樣：</p>
<ol>
<li> 在 Ora 新增 Project 並套用根據自己工作流程所設計的範本</li>
</ol>
<p><img src="https://oberonlai.blog/wp-content/uploads/2021/01/how-i-manager-projects-1.jpg"></p>
<ol start="2">
<li> 邀請客戶加入該專案</li>
</ol>
<p><img src="https://oberonlai.blog/wp-content/uploads/2021/01/how-i-manager-projects-2.jpg"></p>
<ol start="3">
<li> 預設範本我設定六個 Board</li>
</ol>
<p><img src="https://oberonlai.blog/wp-content/uploads/2021/01/how-i-manager-projects-3-1024x565.jpg"></p>
<p><strong>衝刺工作項目</strong>：我會把案件開始前評估的工作項目加到這邊，如果之後有新增任何需求也都會直接寫在這個 Board，在加入 Task 的同時也會把預估時數加進去，在執行時就能確保時數用量。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2021/01/how-i-manager-projects-5-1.jpg"></p>
<p><strong>預備 - 分析及文件製作</strong>：這裡面的項目會從衝刺工作項目拉進來，分配接下來準備要做的工作，Board 名稱有 (2)，代表的是 WIP（ Work In Progress ） ，意思是這個 Board 最多只能放兩個 Task，再多的話就要排隊或是插隊了。</p>
<p><strong>開發 - 進行中</strong>：確認要做的工作後，我就會把 Task 拉到這邊，並且開始計時，同樣的後面也有 (2)，也就是如果進行中的工作超過兩項，剩下的就要排隊了。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2021/01/how-i-manager-projects-7-1.jpg"></p>
<p><strong>開發 - 完成</strong>：當 Task 完成後我會停止計時，由於大部分時候我都在本機開發，所以在還沒部署到測試機上的項目我會先放在這邊，等到累積到一定數量或是完整的功能都完成時才會進行部署。</p>
<p>**測試(1)**：這邊放已經部署到測試機的完成項目，也是需要請客戶驗收的項目，確認沒問題後就可以打勾，即代表該項目製作完成，如果有問題可以透過下方的留言區進行討論，並確認花費時數，如果有需要修改的地方，那麼這個 Task 就會回到預備的 Board，如果留言中有提到新的需求，再把它獨立成新的 Task。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2021/01/how-i-manager-projects-6-1.jpg"></p>
<p><strong>發佈</strong>：已經完成的工作事項，作為歸檔的用途。</p>
<ol start="4">
<li> 每週固定檢視當月的累積時數並寄送 Email 通知客戶，信中除了時數外，還會列出上週的完成事項，以及本週預計要執行的 Task，當發現客戶沒回應，就要積極主動追蹤工作事項，以及確認本週優先執行的事項。</li>
</ol>
<p><img src="https://oberonlai.blog/wp-content/uploads/2021/01/how-i-manage-project-mail.jpg"></p>
<ol start="5">
<li> 每個月的最後一天工作日使用 Ora 的報表功能進行請款，除了圖表外它還可以匯出 CSV 檔做更詳細的列表，並詢問該月的專案進度是否有需要調整的地方，總之就是盡可能的做到隨時保持溝通，有問題盡快釐清。</li>
</ol>
<p>Ora 的通知功能很完整，每個操作客戶都會收到 Email 通知，而它也有推出桌面版的 App，有新消息都會跳出推播，雖然惱人了一點，但我相信這能保持專案的透明度，如果真的覺得太瑣碎，都能透過設定來進行關閉，而我則是用自己另外包的 App，可以隱藏小鈴鐺的圖標顯示，等到空檔再打開回覆。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2021/01/how-i-manage-projects-bell.jpg"></p>
<p>常被問到我的估時跟實際花費時數是否吻合，就經驗來看要視專案規模的大小，從無到有開發的平台比較難估得準，因為常會有一開始沒想到的新功能要加入，但如果是開發一些小功能或是修改調整就比較準確，因為問題很明確。</p>
<p>所以遇到比較複雜的專案我會把每個 Task 都控制在一開始預估的時間內，如果一做下去發現會比當初預期的超過很多，我會先暫停並跟客戶討論，看是要繼續處理還是另外用比較簡單的方法做，得到共識之後再繼續進行。</p>
<h2 id="一天工作四小時的心得"><a href="#一天工作四小時的心得" class="headerlink" title="一天工作四小時的心得"></a>一天工作四小時的心得</h2><p>可以不用一整天被工作塞滿滿，就能騰出時間來研究新技術、改善工作流程以及寫寫部落格跟運動，能不斷的學習並提升自己是我覺得身為自由工作者最重要的任務，學到新東西的同時還能運用在專案中是再好也不過的，希望未來的接案之路可以順遂一些，認識更多志同道合的朋友！</p>
]]></content>
      <categories>
        <category>老人碎念</category>
        <category>專案</category>
        <category>專案即生活</category>
      </categories>
      <tags>
        <tag>ora</tag>
        <tag>專案管理</tag>
        <tag>時程</tag>
        <tag>工作時數</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress主題選購指南</title>
    <url>/tw/how-to-buy-wordpress-theme/</url>
    <content><![CDATA[<p>最近觀察了許多部落格、粉絲團或討論區，以及身旁週遭的友人，大家對於 wordpress 的接受度越來越高，尤其是針對剛起步的中小企業，也都慢慢知道 wordpress 不僅僅是部落格工具，更是能架出企業形象網站的好幫手，原因不外乎是它所提供的主題設計質感佳，以及多數可以免費下載，這對於不需要太多功能的企業主而言，是非常適合的架站工具。   而所謂的 wordpress 主題可以把它想像成是網站的外觀，因為這幾年來網頁標準化的推行，網站的功能與外貌可以分開設計，也因此就有許多設計師針對 wordpress 的架構來設計不同的風格，只要下載回來安裝使用，只要十秒，整個網站就能煥然一新！   <a href="https://oberonlai.blog/wp-content/uploads/2013/11/011.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/11/011.jpg" alt="how-to-buy-wordpress-theme-img" title="how-to-buy-wordpress-theme-img"></a> 剛安裝完成的 wordpress 就有內建兩款主題可供選擇，其它免費主題也可透過「安裝佈景主題」功能進行搜尋。   而有免費的 wordpress 主題，想當然也會有付費的，他們之間的差異性主要是在於網站架構的完整度與後臺操作功能的便利性，付費的主題往往會根據消費者的使用意見，去逐步完善產品內容，再加上可能光是首頁，付費的主題就會貼心的提供數款不同呈現方式的 slidershow ，或是部落格的版型也會先設計好不同的風格，使用者都可以在後臺自行做變更，這是免費主題所沒有的。  </p>
<h2 id="付費的-wordpress-主題那裡買？"><a href="#付費的-wordpress-主題那裡買？" class="headerlink" title="付費的 wordpress 主題那裡買？"></a>付費的 wordpress 主題那裡買？</h2><span id="more"></span>
<p>  在國外，針對 wordpress 主題已經有像現在智慧型手機 app 下載市集類似的商業模式，可以直接上去挑選合適的商品，像 <a href="http://themeforest.net/?ref=oberonlai" title="Themeforest">Themeforest</a> 就是目前非常受歡迎的平臺，商品數目也非常之多，而且分類很細，幾乎各行各業都能在上面找到相對應的主題。他們開放全球的設計師投稿，因為競爭十分激烈，許多設計師無不攪盡腦汁設計出最棒的視覺風格、最彈性的豐富內容、最直覺的操作介面，常常會看到許多最新的技術在上面出現，透過這樣的良性競爭，不僅對開發者能獲得利潤，對企業主而言也能買到全球頂尖設計師的優秀作品。   另外一種市集模式，相較於 Themforest 就顯得較為封閉，譬如像 <a href="http://www.elegantthemes.com/gallery/">Elegantthemes</a> ，他們雇用設計師來設計商品，產品的數量較少、功能或介面也不一定是最新的，但好處是只要付一次費用，就能使用他們全站的 86 款 wordpress 主題，再加上中央式的管理，買到的主題比較好容易上手操作，不會像在 Themeforest 買到的主題，常常不同設計師做的就會有不同的操作邏輯，在學習上的時間成本較能有效減少。   但考量到企業主對於現階段架站需求多為一次性，再加上有足夠的商品數量較有機會找到合適的主題，因此本篇文章先就 Themeforest 的商品內容做介紹。  </p>
<h2 id="茫茫主題大海如何尋？"><a href="#茫茫主題大海如何尋？" class="headerlink" title="茫茫主題大海如何尋？"></a>茫茫主題大海如何尋？</h2><p>  Themeforest 目前擁有 wordpress 主題的商品數約為 3500 個，如果沒有目的性盲目搜尋，很容易就會被他們美不勝收的照片與炫麗的新穎功能給迷惑，建議是在選擇前能清楚明白網站的目標，這樣在選擇上才會有個方向，也才能看出來那些新功能對我們的網站是有加分的作用，其它選購前的事前準備可以參考<a href="https://oberonlai.blog/wordpress/wordrpess-for-business">這篇文章</a>。   通常如果是單純要介紹公司內容、企業文化、聯絡我們的企業形象網站，可以從 creative 和 corportate 這兩個類別開始下手，而這兩者的差別是， creative 會比較多需要大張、有質感的圖像做為網站主視覺，或在色彩上較為繽紛、比較跳 Tone 的設計方式，如果公司的企業文化比較偏屬這一類的，就可以從該類別去選購，   <img src="https://oberonlai.blog/wp-content/uploads/2013/11/how-to-buy-wordrpess-theme-img1.jpg" alt="how-to-buy-wordrpess-theme-img1">   相較之下，如果是需要較穩重、專業形象的企業網站，從 corportate 類別進行選購會是比較好的方向，另外進入類別頁面後右側還會有子分類，可以再進行更精準的類別篩選，目前他們沒有提供以顏色篩選的功能，如果想針對企業標準色進行搜尋還沒辦法，另外也無法針對網站功能進行篩選，而且每件商品都必須進入頁面後點選 demo 才能看到全貌，應該在列表時就要有提供捷徑更能方便瀏覽。   <img src="https://oberonlai.blog/wp-content/uploads/2013/11/how-to-buy-wordrpess-theme-img2.jpg" alt="how-to-buy-wordrpess-theme-img2">   另外還有一種篩選方式，就是可以透過不同的篩選條件進行列表排序，其中以 sales 銷售量進行排序我認為最有參考價值，雖然條件中有 rating 評價的篩選條件，以實際銷售量還是能最準確看出這主題好不好用，以及他們的售後服務做的好不好，因為目前好像還沒有提供退款的功能，所以一定要慎選再慎選。   <a href="https://oberonlai.blog/wp-content/uploads/2013/11/how-to-buy-wordrpess-theme-img3.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/11/how-to-buy-wordrpess-theme-img3.jpg" alt="how-to-buy-wordrpess-theme-img3"></a>  </p>
<h2 id="商品說明霧煞煞？"><a href="#商品說明霧煞煞？" class="headerlink" title="商品說明霧煞煞？"></a>商品說明霧煞煞？</h2><p>  我相信簡單的英文大家一定都看的懂，但是網站的專業術語可能就不那麼平易近人，再加上隔行如隔山，沒有行內人解釋可能光 Google 也找不到個白話文的解答，在這邊以 <a href="http://themeforest.net/item/avada-responsive-multipurpose-theme/2833226?WT.ac=category_thumb&WT.seg_1=category_thumb&WT.z_author=ThemeFusion&ref=oberonlai" title="Wordpress Themeforest Avada">Avada</a> 這款在 Themeforest 創下銷售奇蹟的商品說明做為範例，希望大家以後看到這幾個關鍵字就能判斷這商品的重點功能與相關特色。   <a href="https://oberonlai.blog/wp-content/uploads/2013/11/how-to-buy-wordrpess-theme-img4.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/11/how-to-buy-wordrpess-theme-img4.jpg" alt="how-to-buy-wordrpess-theme-img4"></a>    </p>
<h3 id="lt-一-gt-100-Responsive-amp-Retina-Ready"><a href="#lt-一-gt-100-Responsive-amp-Retina-Ready" class="headerlink" title="&lt;一&gt; 100% Responsive &amp; Retina Ready"></a>&lt;一&gt; 100% Responsive &amp; Retina Ready</h3><p>Responsive 是最近這幾年網頁開發非常流行的技術，簡單說就像上圖右邊的範例，只要一個網站（傳統是要區分電腦版、手機版網站），就能在桌機、平版、手機改變其網頁寬度，再也不會因為捲來捲去頁面而不方便瀏覽；而 Retina Ready 指的是因為現在手機、平版解析度越來越好，甚至超過桌上型電腦的螢幕解析度，所以這款主題已先針對高解析度的裝置進行圖像優化，不然就會非常模糊，甚至根本看不清楚而無法瀏覽。  </p>
<h3 id="lt-二-gt-Premium-Sliders-5-Header-Designs"><a href="#lt-二-gt-Premium-Sliders-5-Header-Designs" class="headerlink" title="&lt;二&gt; Premium Sliders, 5 Header Designs"></a>&lt;二&gt; Premium Sliders, 5 Header Designs</h3><p>Sliders 在台灣俗稱輪播廣告、Banner 廣告，就是一進首頁常會看到的最大圖片，而所謂的 Premium 就是有提供更多的進階功能，除了基本的換圖外，像是可以設定輪播方式、輪播速度、輪播效果，或是開啟自動播放等附加功能；Header 通常指的是網頁最上方包含 logo、主選單、搜尋欄等功能的區塊，而在這主題中設計師設計五種不同的配置方式供使用者自行切換。  </p>
<h3 id="lt-三-gt-WooCommerce-Integration"><a href="#lt-三-gt-WooCommerce-Integration" class="headerlink" title="&lt;三&gt;WooCommerce Integration"></a>&lt;三&gt;WooCommerce Integration</h3><p><a href="http://www.woothemes.com/woocommerce/">woocommerce</a> 是 wordpress 目前非常熱門的一套購物車外掛，這款主題已經將程式的功能調整為適合這套外掛使用，也就是說如果買了這套主題，以後要擴建成購物網站也不是難事。  </p>
<h3 id="lt-四-gt-Intelligent-Admin-Panel"><a href="#lt-四-gt-Intelligent-Admin-Panel" class="headerlink" title="&lt;四&gt; Intelligent Admin Panel"></a>&lt;四&gt; Intelligent Admin Panel</h3><p>Admin Panel 指的是 wordpress 的後臺管理系統，這些付費主題往往會自行開發專門控制他們主題的後臺選項，像是換背景圖、改字大小顏色等等，讓使用者不用去修改程式就能自行變更網站的設定，有主題的修改選項多達上百種，有些不超過十種，選項越多代表可自定的空間就越大。  </p>
<h3 id="lt-五-gt-Custom-Options-amp-Shortcodes"><a href="#lt-五-gt-Custom-Options-amp-Shortcodes" class="headerlink" title="&lt;五&gt; Custom Options &amp; Shortcodes"></a>&lt;五&gt; Custom Options &amp; Shortcodes</h3><p>cuustom options 就是上述提到的部份，而所謂的 shortcodes ，就是設計師會把一大串需要寫程式的功能，用一個很簡單的代碼來取代，讓使用者只要輸入代碼，就能得到想要的效果。譬如說我想增加一個漂亮的大按鈕，設計師會把按鈕的樣子預先設定好，然後設定好關鍵字，像這樣 [漂亮的大按鈕] ，通常會用中括號和英文，然後按儲存發表後，去前臺就能看到原本輸入 [漂亮的大按鈕] 的地方會變成一顆按鈕。  </p>
<h3 id="lt-六-gt-Unlimited-Colors-amp-Fonts"><a href="#lt-六-gt-Unlimited-Colors-amp-Fonts" class="headerlink" title="&lt;六&gt; Unlimited Colors &amp; Fonts"></a>&lt;六&gt; Unlimited Colors &amp; Fonts</h3><p>這代表可以換顏色和改字體，關於 Fonts ，指的是字型，但因為是國外的主題，所以只能針對英文字，而中文字要能更換字型，可能就要等有志之士的努力了，但如果對中文字型很在意的人，可以先使用 <a href="http://www.justfont.com/">Just Font</a> 這套國人開發的服務看看，但他們尚未開發 wordpress 外掛，希望未來會有(亂許願)。  </p>
<h3 id="lt-七-gt-Includes-PSD’s-Support"><a href="#lt-七-gt-Includes-PSD’s-Support" class="headerlink" title="&lt;七&gt; Includes PSD’s + Support"></a>&lt;七&gt; Includes PSD’s + Support</h3><p>PSD 是著名影像編輯軟體 <a href="http://www.adobe.com/tw/products/photoshop.html">Photoshop</a> 的原始檔案，通常設計師在設計網頁的版面、圖像、元素時，都會透過 Photoshop 來創作，有了這原始檔案，日後網站如果想在現有的版面架構下進行重新設計，就能把 PSD 提供給網頁設計師進行修改，減少全部重新設計的時間。 Support 指的是這套主題的設計師願意提供售後服務，安裝或設定上有問題都能獲得解答。  </p>
<h3 id="lt-八-gt-HTML5-CSS3-Cross-Browser"><a href="#lt-八-gt-HTML5-CSS3-Cross-Browser" class="headerlink" title="&lt;八&gt; HTML5, CSS3, Cross Browser"></a>&lt;八&gt; HTML5, CSS3, Cross Browser</h3><p>HTML5 與 CSS3 指的是目前最新規格的網頁技術， Cross Browser 指的是用不同的瀏覽器像 IE、Chrome、Firefox 都能正常呈現網頁內容，因為每家瀏覽器是由不同廠商或團體開發的，早期網頁標準規範尚未制定明確，各家瀏覽器都有自己的脾氣，有些程式 A 瀏覽器認他，但 B 卻覺得他是私生子， 所以當時的網頁設計師很辛苦，為了討好後宮(？)，都要針對每個瀏覽器各別寫程式，現在的情況有好一些，至於測試這套主題在不同瀏覽器能否正常瀏覽，最快的方式就是開啟它的 demo 網站測試看看，或是商品頁面的右下角都會說明支援的瀏覽器。   <a href="https://oberonlai.blog/wp-content/uploads/2013/11/how-to-buy-wordrpess-theme-img5.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/11/how-to-buy-wordrpess-theme-img5.jpg" alt="how-to-buy-wordrpess-theme-img5"></a>  </p>
<h2 id="單頁式的網站好像很流行，能買嗎？"><a href="#單頁式的網站好像很流行，能買嗎？" class="headerlink" title="單頁式的網站好像很流行，能買嗎？"></a>單頁式的網站好像很流行，能買嗎？</h2><p>  Themeforest 設計師對於這產業的趨勢敏銳度相當高，時下流行的網頁設計風格都會成為他們商品的賣點，像是 <a href="http://www.apple.com/tw/iphone-5s/">iPhone</a> 式的產品說明頁面，採用單頁呈現商品特點，搭配高質感產品圖，不用切換頁面的瀏覽模式吸引許多設計師將其做為 wordpress 主題商品，只要在 Themeforest 搜尋 parallax 就可以找到<a href="http://themeforest.net/browse/tags/default/parallax">很多</a>。   像 <a href="http://themeforest.net/item/vortex-one-page-parallax-flat-wordpress-theme/5968745?WT.ac=solid_search_item&WT.seg_1=solid_search_item&WT.z_author=Lesya&ref=oberonlai" title="wordpress themeforest vortex">Vortex</a> 這一套主題就是標準的單頁式設計。   <a href="https://oberonlai.blog/wp-content/uploads/2013/11/how-to-buy-wordrpess-theme-img6.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/11/how-to-buy-wordrpess-theme-img6.jpg" alt="how-to-buy-wordrpess-theme-img6"></a>   這類型網站的特色就是頂部會有選單，點擊後不會開啟其它頁面，而是會一直自動滾動捲軸到相對應的區塊，豐富的動態效果很能吸引使用的注意，再加上不用等待換頁的時間，許多這類型的產品網站就直接在最下方擺放購買連結，一氣呵成的銷售方式不讓消費者有太多的思考空間。   而也因為單頁式網站的瀏覽方式，如果要新增頁面的話，很容易受到限制，新增的頁面勢必要開啟新的網頁來載入，因為單頁式的主題都是一個蘿蔔(選單)一個坑(要捲動到的區域)，對於日後要進行網站架構上的調整會非常困難，建議是可以把單頁式的呈現方式做為網站的其中一個頁面，這樣在更新上會較為彈性。   像 <a href="http://themeforest.net/item/the7-responsive-multipurpose-wordpress-theme/5556590?WT.ac=solid_search_item&WT.seg_1=solid_search_item&WT.z_author=Dream-Theme&ref=oberonlai" title="wordpress themeforest the7">The7</a> 就是一套非常彈性的佈景主題，光首頁的設計它就預先歸劃了六大類，每大類還有三到五種的排版示範，另外 Slidershow 有五款、Blog 有六種、商品呈現版面也有八套…，這樣的商品會比較容易調整成符合自己需求的版面。   <a href="https://oberonlai.blog/wp-content/uploads/2013/11/how-to-buy-wordrpess-theme-img7.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/11/how-to-buy-wordrpess-theme-img7.jpg" alt="how-to-buy-wordrpess-theme-img7"></a>  </p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>wordpress 主題切換的功能，可以很方便的套用網站的外觀，而付費的主題，提供的功能多更多，在如此眾多的選擇下，根據自己的需求與了解商品特色說明，才能購買到合適的佈景主題，不然很容易就被漂亮的圖片或是炫麗的功能給迷惑了XD~  </p>
<h2 id="還找不到適合自己企業風格的主題嗎？"><a href="#還找不到適合自己企業風格的主題嗎？" class="headerlink" title="還找不到適合自己企業風格的主題嗎？"></a>還找不到適合自己企業風格的主題嗎？</h2><p>  Themeforest 商品眾多，且全數都是英文，往往很容易忽略中文的排版是否能正確顯示。另一方面該 wordpress 主題是否適合我們的企業風格，只看展示頁面與實際狀況仍存有很大差異，又不可能每一套都買來試裝看看，因此我們開發了一套解決方案。   EveryTheme 是一套快速尋找 WordPress 主題的產品，除了可以依產業別、色系來搜尋 Themeforest 的商品外，更可以透過影像合成技術，將企業標誌與主題展示畫面進行合成，讓我們在挑選 WordPress 主題時更能想像最終完成的效果。想了解更多關於 EveryTheme 可以參考這一篇文章—&gt;<a href="https://oberonlai.blog/everytheme-intro/" title="編輯「三十秒, 看見你的理想網站」">三十秒, 看見你的理想網站</a>，或   <a href="http://everytheme.com.tw/">試試 EveryTheme</a></p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>themeforest</tag>
        <tag>wordpress theme</tag>
        <tag>wordpress主題</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress主題購買後如何安裝成像展示的一樣？</title>
    <url>/tw/how-to-install-themeforest-theme/</url>
    <content><![CDATA[<p>曾經有購買過 wordpress 主題的朋友們都知道，花錢買了一套主題就是看上它展示的範例，無論是精美炫麗的 slider 效果，還是各種已設計完成的頁面配置，甚至是聯絡我們、地圖顯示等進階功能，都是吸引我們購買的原因。   但如果是第一次使用 wordpress 的朋友，可能會發現到買回來的檔案有許多的資料夾，到底那個是可以安裝、那個是說明書，對於 wordpress 主題比較不熟悉的朋友可能會有些困惑，因此整理這篇文章簡單說明 wordpress 付費主題商品的相關內容，以及該如何安裝成像它展示的 demo 網站一樣漂亮。(本篇以 <a href="http://themeforest.net/?ref=oberonlai" title="Themeforest">Themeforest</a> 主題商品為例，如果不了解什麼是 Themeforest 可以參考<a href="https://oberonlai.blog/wordpress/how-to-buy-wordpress-theme/" title="WordPress主題選購指南">這篇文章</a>。)  </p>
<h2 id="第一步：下載所有文件及檔案"><a href="#第一步：下載所有文件及檔案" class="headerlink" title="第一步：下載所有文件及檔案"></a>第一步：下載所有文件及檔案</h2><p>  各位朋友於 Themeforest 網站上購買付費 wordpress 主題商品後，會進入以下的下載頁面，建議是選擇 All Files &amp; documentation 進行下載，通常這份檔案會包含 wordpress 主題壓縮檔、外掛程式、範例資料，以及主題的使用說明書。   <img src="https://oberonlai.blog/wp-content/uploads/2013/11/how-to-install-themeforest-theme-img1.jpg" alt="how-to-install-themeforest-theme-img1"></p>
<span id="more"></span>
<p>下載完成後，將檔案解壓縮，通常可以看到如下的資料夾內容：   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/how-to-install-themeforest-theme-img2.jpg" alt="how-to-install-themeforest-theme-img2">   <strong>dt-pressocre_v.2.0.1.zip</strong> : 佈景主題安裝檔，直接可從 wordpress 後臺上傳後進行安裝，或是可將其解壓縮後上傳到 wp-content/theme 的目錄中，再由後臺啟用即可。 <strong>Dummy</strong> : 展示網站中的網頁資料，通常為一份 xml 的檔案格式，可以由 wordpress 後臺進行匯入，稍後將說明如何匯入。 <strong>Licensing</strong> : 此商品的版權與使用限制說明。 <strong>PSDs</strong> : 一般設計師在設計介面時，都會採用 <a href="http://www.adobe.com/tw/products/photoshop.html">Adobe Photoshop</a> 進行創作，而 psd 檔就是 photoshop 的檔案格式。如果購買回來的主題需要進行較大幅度的畫面修改，可聘請專業的網頁設計師來處理，這時就可以把 psd 檔交由他們設計，這樣就能以現行的網頁架構進行調整，縮短實際製作上的時間。 <strong>User Guide</strong> : 佈景主題的英文使用說明書，通常都會詳述主題該如何安裝、頁面如何修改、功能如何使用等等。  </p>
<h2 id="第二步：安裝主題及外掛"><a href="#第二步：安裝主題及外掛" class="headerlink" title="第二步：安裝主題及外掛"></a>第二步：安裝主題及外掛</h2><p>  確認過解壓縮的內容有 .zip 的佈景主題安裝檔後，我們就可以進入 wordpress 後臺進行安裝，安裝方式與一般佈景主題一樣， 登入 wordpress 後臺 &gt; 外觀 &gt; 佈景主題 &gt; 安裝佈景主題 &gt; 上傳   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/how-to-install-themeforest-theme-img3.jpg" alt="how-to-install-themeforest-theme-img3">   上傳完成後並啟用該佈景主題，基本上就已經完成一半了，接下來要安裝的是這主題有使用到的外掛，我購買的這套有自動安裝的功能，只要勾選確定安裝就能完成。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/how-to-install-themeforest-theme-img4.jpg" alt="how-to-install-themeforest-theme-img4">     如果購買的主題沒有這樣方便的功能，通常在第一步解壓縮檔案的時候還會多一個 plugins 的資料夾，讓我們可以手動把這些外掛用 ftp 的方式上傳到 wp-content/plugins 的目錄下。  </p>
<h2 id="第三步：匯入資料"><a href="#第三步：匯入資料" class="headerlink" title="第三步：匯入資料"></a>第三步：匯入資料</h2><p>  接下來我們要把範例網站的資料匯入，讓我們的網站也能像他們展示的網站有一樣的效果，這樣修改起來就會方便許多。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/how-to-install-themeforest-theme-img5.jpg" alt="how-to-install-themeforest-theme-img5"> 進入 wordpress 後臺，點選左方選單 工具 &gt; 匯入，進入頁面後點選 wordpress 安裝匯入程式。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/how-to-install-themeforest-theme-img6.jpg" alt="how-to-install-themeforest-theme-img6"> 點選立刻安裝。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/how-to-install-themeforest-theme-img7.jpg" alt="how-to-install-themeforest-theme-img7"> 安裝完成後點選「啟用外掛與執行匯入程式」。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/how-to-install-themeforest-theme-img8.jpg" alt="how-to-install-themeforest-theme-img8"> 接下來把我們解壓縮後 dummy 資料夾裡的 xml 檔案上傳，選擇好檔案位置後點選「上傳檔案並匯入」。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/how-to-install-themeforest-theme-img9.jpg" alt="how-to-install-themeforest-theme-img9"> 這步驟是要選擇所有匯入文章與頁面的作者是誰， 可以選擇為系統管理員 admin 即可，下方的 Import Attachments 是匯入所有附件檔案，建議可以不用勾選以省下匯入時間，確定後點選「Submit」。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/how-to-install-themeforest-theme-img10.jpg" alt="how-to-install-themeforest-theme-img10"> 成功匯入後會出現一堆 Failed to  import 媒體的訊息，這是因為我們剛剛沒有勾選匯入附件的原因。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/how-to-install-themeforest-theme-img11.jpg" alt="how-to-install-themeforest-theme-img11"> 接下來再到頁面或文章列表，就可以看到所有的範例頁面，這時我們就可以比對範例去修改成我們要的內容文字。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/how-to-install-themeforest-theme-img12.jpg" alt="how-to-install-themeforest-theme-img12"> 最後再到 設定 &gt; 閱讀，選擇首頁要顯示的頁面即可。  </p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>  到 Themeforest 購買 wordpress 主題商品後記得選擇下載所有文件跟檔案，並將檔案解壓縮後把 .zip 安裝檔於 wordpress 後臺進行上傳，成功完成安裝並啟用後，依照指示再安裝相關的外掛功能，如無提示則自行由 FTP 上傳安裝，最後再將壓縮檔內 xml 檔進行匯入，並設定首頁顯示頁面，即可將範例網站的內容成功建立在自己的網站中。  </p>
<h2 id="還找不到適合自己企業風格的主題嗎？"><a href="#還找不到適合自己企業風格的主題嗎？" class="headerlink" title="還找不到適合自己企業風格的主題嗎？"></a>還找不到適合自己企業風格的主題嗎？</h2><p>  Themeforest 商品眾多，且全數都是英文，往往很容易忽略中文的排版是否能正確顯示。另一方面該 wordpress 主題是否適合我們的企業風格，只看展示頁面與實際狀況仍存有很大差異，又不可能每一套都買來試裝看看，因此我們開發了一套解決方案。   EveryTheme 是一套快速尋找 WordPress 主題的產品，除了可以依產業別、色系來搜尋 Themeforest 的商品外，更可以透過影像合成技術，將企業標誌與主題展示畫面進行合成，讓我們在挑選 WordPress 主題時更能想像最終完成的效果。想了解更多關於 EveryTheme 可以參考這一篇文章—&gt;<a href="https://oberonlai.blog/everytheme-intro/" title="編輯「三十秒, 看見你的理想網站」">三十秒, 看見你的理想網站</a>，或 <a href="http://everytheme.com.tw/">試試 EveryTheme</a></p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>HP12-網站流量分析活動參後感</title>
    <url>/tw/hp12/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2010/10/gaff.gif" alt="網站流量分析"> 今晚參與了<a href="http://www.hpx-party.com/hpx-events/hp12">網站企劃輕鬆聚的第12次活動-網站流量分析</a>的活動，因為今天下班有點晚，再加上下雨天，稍微小小遲到了十分鐘，到現場時繳了報名費後，發現主持人是平常在攝影的Scaler，剛剛回到家後才知道網站企劃輕鬆聚的創辦人<a href="http://www.facebook.com/frichard">Richard</a>，今晚因身體不適高掛免戰牌，希望他能早日康復。 今晚的主題，是我期待非常久的網站流量分析，之所以會期待，是因為之前在工作的時候，一直很想要把這樣的機制引入到公司網站的經營之中，藉此來驗證網站的實際使用情形，那時學習的管道，就是拜讀連啟佑先生所著一書「[網站績效分析與管理](<a href="http://www.books.com.tw/exep/prod/booksfile.php?item=0010329981">http://www.books.com.tw/exep/prod/booksfile.php?item=0010329981</a> target=)」， 那時邊看書邊摸索，從理解名詞，到如何呈現資料讓其他部門了解，都花了許多功夫在研究，尤其是在網路技術的問題上，碰到了許多瓶頸，因而向Richard進行求救，他也完全不吝嗇的給我許多直接的實務建議，因此從獨自的封閉學習，到今日有專門的聚會分享這個主題，當然要把握到機會，好好的給他偷學個夠， 這次一共邀請了<a href="http://www.hpx-party.com/hpx-events/hp12">五位講者</a>，每位在實務上都有豐富的經驗，第一位的Jenny以B2B的角度來看待網站流量分析這門學問，讓我認識了MarCom這個專有名詞(Market and Communication)，業務範圍包含了各類行銷活動，包含B2B產業最常舉辦的參展，以及開記者會或是發新聞稿， 在網站的經營上，從曝光-&gt;訪客造訪-&gt;點擊率-&gt;詢問率-&gt;索取樣品-&gt;訂單，整個流程就像是一個漏斗，篩選到最關鍵的成交，都需檢視其成效，她加入公司的初期，正面臨網站改版的階段，透過了解公司產品以及各別部門溝通，重新規劃網站主題，並且放棄使用SEO效果差的flash網頁，透過量化的數據來呈現網站改版後的成果，讓老闆了解，並爭取更多的行銷資源。 Phoebe是我參加網站企劃讀書會的夥伴之一，她的經驗往往讓我大開眼界，因處於旅遊網站公司，所有的網站規劃都由她一人所負責，她一直在強調一個重點，就是先做了研究想清楚看清楚後，再執行的成果，往往會比趕著上架發現不敷使用再重做，來得省成本及時間， 從Google Analytics的流量來源中，她們發現產品頁的曝光率不足，因而產生了強調關鍵字的策略，最後從分析結果中得知流量的成長，發現問題→產生目的→研究策略→具體執行→檢視成效→發現問題，這是一個循環的過程，每個網站都可以透過這樣的步驟來調整修改，改善網站的瀏覽品質。 Laurence的分享生動逗趣，他以自己工作中實際會使用到GA的狀況，來做一說明。他強調GA的時間觀點非常重要，很多數據是要透過比較來了解其重要性，而且盡量使用四週當做時間維度，避開六日的低流量， 他以日前世界杯足球賽爆紅的的奶機妹為引子，從當初的創造名詞，到新聞媒體的大量報導，造成爆衝的網站流量，一切是因為掌握話題的創造，他解釋，因為他們是以新聞為內容的網站，範圍過廣，不像一般的專業網站有固定的關鍵字，因而他們決定以創造關鍵字來增加曝光， 除此之外，網站流量來源以社群顯得較為強勢，希望主打搜尋引擎的他們，便可透過這樣的資料來加強關鍵字的優化，而地區性的流量爆漲不是他們的重點，如果是搜尋引擎的流量成長，才是他們關注的焦點，不同類型的網站會有不一樣的關鍵指標。 透過推薦網站連結，會發現到常連到自己家的網站，通常都是屬於同性質的網站，甚至還會發現山寨網站；另外為了增加回應，從GA中得知plurk的來源居多，他們便使用plurk API，把plurk上的留言替代成網站中的回應內容，實際上去看後發現有點慢XD， 如果要用網站活動分析，一定要把頁面中的相同連結，設為不同的網址，不然GA會把所有一樣按鈕的點擊百分比，計算成一樣的比率。此外除了相當令人懷疑的Alexa以外，還有<a href="http://www.google.com/trends">Google Trends</a>、<a href="http://www.quantcast.com/">quantcast</a>等服務來觀察其它網站之流量概況。 接續的Hotrank也是令我大開眼界，原來國內也有如此專業的網站分析軟體開發公司，仔細回想，在很多台灣的網站中，可以看到有掛Hotrank的icon，他們是以網路媒體的角度為切入點，來進行流量統計，相較於GA的報表以及可自行設定參數，Hotrank提供較直接的資料來讓客戶了解網站流量結果，不用再自行設定。 而網頁停留時間一般的統計軟體是採用頁面差的時間，而且此數據應著重在停留的總時數，而不是平均值；網站統計最危險的就是陷入數據的迷思，好的分析是要依照業主的需求來做規劃，有些業主只求曝光度而不求轉換率就是最好的例子。 最後非常專業的小黑，從了解為何需要流量統計開始，原因是為得知網站使用情況、網站使用品質、轉換率及使用者習慣為出發點，關鍵績效指標應該是有時間性的相對百分比數據，譬如像是在上一個月中網站的瀏覽率提高了20%，帶來了30%的新訪客成長。 而GA可以下參數_setVar來區分使用者是訪客、會員還是客戶，再從自定報表中來檢視每種流量來源的轉換率，達到追縱的目標；此外，還可以使用<a href="http://www.google.com/support/analytics/bin/answer.py?hl=en&answer=55578">URL Builder</a>，來針對無法辨識來源的情況下(MSN、PTT、yahoo關鍵字廣告)，來進行追縱。 透過這工具的使用，我們可以來測驗不同版本的廣告頁面所收到的成效，放置_UTM不同參數的連結，讓GA可以判別連結的來源，藉此達到廣告投放的追縱。 今晚因各位分享者實在太有料，讓整場時間稍微延後一點點，但無損於內容的精彩度，而今日所學到的觀念及工具，可立即應用在工作上，我想這是今晚最大的收穫，而透過各位的分享，未來如果在流量分析上碰到問題，看來有更多的高手可以求救了!</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>從新學習HTML5 (四) 語意元素</title>
    <url>/tw/html-tag/</url>
    <content><![CDATA[<p>section - 表示文件中的特定區塊，裡面可以下 h1~h6</p>
<p>article - 表示文件中與其他內容沒有關聯的獨立區塊，通常會放一段文字</p>
<p>aside - 表示文件中與其他內容有輕微關係的區塊，多用於側邊欄的標籤</p>
<p>header - 頁首或是 section 的頁首</p>
<p>hgroup - 區塊內容的標題區域，裡面會有多個 h1~h6 標籤</p>
<p>footer - 頁尾或是 section 的頁尾</p>
<p>nav - 表示帶有導覽功能的區塊</p>
<p>figure - 帶有說明的圖像元素</p>
<p>figcaption - figure 區塊的標題</p>
<p>與以上無相關的區塊就還是使用 div，有需要大綱編排層級的內容就用 section。</p>
<h2 id="HTML-5-元素分類"><a href="#HTML-5-元素分類" class="headerlink" title="HTML 5 元素分類"></a>HTML 5 元素分類</h2><p>Metadata content - <head> 裡面的東西</p>
<p>Flow content - 文件內大部分的內容皆屬此類</p>
<p>Sectioning content - 帶有層級的大綱</p>
<p>Heading Content - 定義 section 的標題</p>
<p>Phrasing content - 文字內容的標籤元素</p>
<p>Embedded content - 外部匯入的內容至目前網頁</p>
<p>Interactive content - 支援使用者的互動的元素</p>
<h2 id="大綱-Outline"><a href="#大綱-Outline" class="headerlink" title="大綱 Outline"></a>大綱 Outline</h2><p>瀏覽器會根據使用的 h1~h6 標籤輸出大綱來讓搜尋引擎更能理解整個網頁內容的架構，大綱就如同一本書的目錄，所以是以標題標籤來進行劃分，所以如果每個區塊有獨立的標題層級，要用 section 來進行分隔，並且都是從 h1 開始以方便辨識。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;
&lt;h1&gt;Title&lt;&#x2F;h1&gt;
&lt;section&gt;
  &lt;h1&gt;Section Title&lt;&#x2F;h1&gt;
&lt;&#x2F;section&gt;
&lt;section&gt;
  &lt;h1&gt;Section Title&lt;&#x2F;h1&gt;
&lt;&#x2F;section&gt;
&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
  </entry>
  <entry>
    <title>寫給網頁設計師-如何整合html頁面至Wordpress（一）</title>
    <url>/tw/html2wordpress-1/</url>
    <content><![CDATA[<p>身為一位視覺設計師與前端設計師，之所以會選擇wordpress來做為內容管理系統，基上有三個原因，第一是它很漂亮，第二是它非常漂亮，第三是它超級漂亮，</p>
<p>從事靠視覺的職業，先看外表是首要條件，雖然醜的東西有很多也好用，但既然有又漂亮又好用的東西，為何不選它？ </p>
<p>wordpress最讓我驚豔的是，它已從早期blog管理系統的定位，逐漸走向真正的內容管理系統之路，許多改良過後的功能與介面，非常適合像我這種完全不會程式語言又只會看外表的設計師～</p>
<span id="more"></span>
<p>在wordpress中，光是免費又漂亮的主題就早已是<a href="http://www.smashingmagazine.com/2011/07/05/free-wordpress-themes-2011-edition/">堆</a>‧<a href="http://free4w.com/free-wordpress-themes/20-free-wordpress-cms-themes.html">積</a>‧<a href="http://www.yourdigitalspace.com/2011/01/100-awesome-free-wordpress-themes-for-2011/">如</a>‧<a href="http://www.webdesignerdepot.com/2011/03/50-new-wordpress-themes-march-2011/">山</a>，</p>
<p>而需要付費的就更不用講，<a href="http://www.woothemes.com/themes/">woothemes</a>、<a href="http://www.studiopress.com/themes">studiopress</a>、<a href="http://themeforest.net/">themeforest</a>，還有我最愛的<a href="http://www.elegantthemes.com/gallery/">elegantthemes</a>，它可以直接在前端畫面中，切換背景顏色、底圖、pattern，最么壽的是，他們將近百種主題，一年只要繳39塊美金就可以使用，在台灣要花2000塊請人設計網站，大概只能找學生吧。</p>
<p><a href="http://www.woothemes.com/themes/">woothemes</a> <img src="https://oberonlai.blog/wp-content/uploads/2011/10/theme1.jpg" alt="woothemes" title="theme1"> <a href="http://www.studiopress.com/themes">studiopress</a> <img src="https://oberonlai.blog/wp-content/uploads/2011/10/theme2.jpg" alt="studiopress" title="theme2"> <a href="http://themeforest.net/">themeforest</a> <img src="https://oberonlai.blog/wp-content/uploads/2011/10/theme3.jpg" alt="themeforest" title="theme3"> <a href="http://www.elegantthemes.com/gallery/">elegantthemes</a> <img src="https://oberonlai.blog/wp-content/uploads/2011/10/theme4.jpg" alt="elegantthemes" title="theme4"> </p>
<p>但回過頭來看，這些主題既漂亮又便宜，功能又完整，叫吃我們這行飯的人混屁啊???</p>
<p>好友阿毛寫了一篇<a href="http://ah-mow-studio.tumblr.com/post/7379064305">十個讓設計師不被取代的能力</a>，就客觀的生存條件而言，他寫的非常好，適合所有剛踏進這一行的人學習；</p>
<p>但我就比較蠢了，寫不出這麼多大道理來，很單純的就只是覺得「案!我也要搞出這樣漂亮的網頁」，會讓我從事這行，也就是這麼簡單，腦海中的想法可以實現出來，那爽度絕對是比在草原上騎馬並「已經滿了」還要爽。</p>
<p>而能夠不用會程式，還能架出後臺管理系統，這實在是有一種當神的快感(事實證明，這樣非常危險，還是要有一位工程師朋友較為安全)，可以狂安裝模組完成各種功能，這爽度也絕對不會輸給在草原上騎馬並「漫出來」，當時就在想，如果能夠設計自己的主題不就爽翻天了，於是開始立刻動手了解wp(wordpress)的主題架構，結果東搞稿西稿稿，得到的成果是….死機。 </p>
<p>從無到有的自己生一套主題出來，實在是不符合網路世界中的分享精神，是地，沒錯，就是跟你想的一樣，去抓別人的來改，啟動修改大師機制，我找到了這一套主題-<a href="http://coding.smashingmagazine.com/2010/02/07/simplefolio-a-free-clean-portfolio-wordpress-theme/">SimpleFolio</a>，使用說明「The theme is released under GPL. You can use it for all your projects for free and without any restrictions. You may modify the theme as you wish.」 馬都停在你眼前了，那有不騎的道理(是草原上的馬)，</p>
<p>我花了好大一番工夫(約十分鐘)才把裡面的樣式全部清光光，成為一個空白的主題web_templates，使用上非常簡單，與一般的主題安裝方法一樣，安裝完成後，我們就來開始整合設計好的html頁面與wordpress吧! 請享用 下載<a href="https://oberonlai.blog/wp-content/uploads/2011/10/web_templates.zip">web_templates</a></p>
<h2 id="基本觀念"><a href="#基本觀念" class="headerlink" title="基本觀念"></a>基本觀念</h2><p>在我小時的印象，變形金鋼是可以合體的，不知為何現在的真人版不行，反正現在都是一隻隻獨幹，沒有合體變超強的觀念，小時候的機器人卡通沒有合體就不可能贏得了敵人，而且要合體才夠帥，不然只靠獨幹都是廢渣一群； </p>
<p>網頁程式的架構也是如此，一頁頁的做雖然還不到是廢渣，但建置所有頁面的html著實非常累人，以前的我傻傻不懂，一頁一頁慢慢建，當要修改所有頁面的slogan，不多，一個30頁的小網站，改一次大概二十分鐘，但如果瘋狂的改來改去，這二十分鐘就和二十年一樣久，滿腹的委屈和怒氣隨時會發洩在草原的馬身上。 </p>
<p>這時就需要來個大無敵合體，頭龜歸頭、腳歸腳、手歸手，各自負責合體機器人的每個部份，萬一頭殼壞了，不用全部拆掉修理，只要修頭就好，這就是俗稱的頭痛醫頭，腳痛醫腳，但前題是你的身體體質要好，不然合在一樣沒祿用。 </p>
<p>網頁程式架構的概念就是這樣說的(亂凹)，先把統一會出現在所有頁面的元素抽離出來，像是選單、小功能等，然後有組織的安排，與原有的良好體質做結合，就是一臺超強的<a href="http://blog.yam.com/ken8286/article/35727295">六神無主</a>了，當要修改時，只要針對架構中的選單做修改即可，再也不用每一頁都要改，一次搞定，又開始覺得很爽了嗎?</p>
<h2 id="準備好你的基本html-css"><a href="#準備好你的基本html-css" class="headerlink" title="準備好你的基本html+css"></a>準備好你的基本html+css</h2><p>這是廢話， 不然是鬼要跟wordpress整合嗎!?我目前都是使用dreamweaver的範本功能，只要用簡單的標籤，就可以把重覆的區塊獨立出來，相關的使用方式可以參考<a href="http://help.adobe.com/zh_TW/Contribute/4.1/help.html?content=con_pages_pg_28.html">官方說明</a>…..對，很難看，有需要的話我再寫一篇我是如何使用的，</p>
<p>但依照本人部落格的更新速度，很趕的你還是問谷姐的哥哥先。 總之在還沒認識wordpress之前，我都是用dreamweaver範本先做，但現在有wordpress也可以用它來發展頁面，只是要先定義清楚架構的元素，其餘部份就好辦事了。</p>
<p>基本上你至少要先做首頁和一頁內頁，首頁基本上版型都會長得跟內頁不同，所以要先獨立做出來，而內頁就是要定義你這網站中所有頁面共同的元素，像次選單、次功能之類的區塊。</p>
<h2 id="認識資料夾結構"><a href="#認識資料夾結構" class="headerlink" title="認識資料夾結構"></a>認識資料夾結構</h2><p>wordpress的資料夾結構是把所有關於主題的內容，放在wp-content\themes\web_templates，而在templates的根目錄中一定要有一份css來做對應， web_templates的內容很簡單，有兩個資料夾images和js，顧名思義的放就對了，整個模版最主要的檔案是index.php，</p>
<p>它是定義整個網站所有頁面的主架構，也就是合體金鋼的身體， 有了這架構，才可以把各區塊像頭-header.php、手-pages.php等給拉進來，index.php的程式不會太難懂，如果你是本格派的html編輯員，大概就可以了解它在幹麻，簡單說就是把各部份給呼叫進來，</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2011/09/011.jpg" alt="wordpress的index" title="index.php"> </p>
<p>頭尾依序呼叫header.php、sidebar.php、footer.php，是整站部落格的首頁 至於其它部份我大概稍微解釋一下 header.php — 控制所有頁面<head></head>之間的東西，而在這邊我是把主選單和logo的div放在這個檔案之中，</p>
<p>老話一句，只要你做網頁是手寫html的人，這部份不難懂，都可以自行再調整，如果不是的話，那就先去<a href="http://www.w3schools.com/">w3school</a>上上課吧。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2011/09/header011.jpg" alt="控制所有頁面的title" title="header01"> </p>
<p>這邊是控制所有頁面的title <img src="https://oberonlai.blog/wp-content/uploads/2011/09/header02.jpg" alt="控制連結檔案js、css" title="header02"> </p>
<p>這邊是控制外部檔案的連結路徑 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/header03.jpg" alt="自己寫的div header部份" title="header03"> </p>
<p>通常我都是把自己寫的header部份放在這邊，比較需要注意的部份，就是點LOGO返回首頁的路徑可採用這樣的寫法(日後會常用到)，還有就是我把主選單也是放在這邊，關於選單的做法wp有非常高明的解決辦法，稍後將會提到如何製作選單；</p>
<p>最後則是要記得該檔案不用把div標籤做結尾，它的結尾出現在footer.php裡面。 sidebar.php — 控制側邊欄位的區塊，可以從後臺的 外觀 &gt; 模組來做新增。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2011/09/sidebar.jpg" title="sidebar"> </p>
<p>在這頁面中除了可以看到Sidebar widget之外，還可以看到下方有一個Home widget，這跟我們待會要使用的模版有關係，稍後將會解釋。 footer.php — 控制頁尾資訊。 functions.php — 控制所有的功能，</p>
<p>這邊非常危險，沒事不要往裡面跑，會出人命的。 page.php — wp內建的網誌分頁模版，通常我都直接當成”網頁”來理解它，因為所有的頁面都是由它構成，另外它有呼叫Sidebar，只要在模組中有增加功能，都會在page中呈現。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2011/09/page.jpg" alt="page.php的內容" title="page"> </p>
<p>以下兩個檔案是<a href="http://coding.smashingmagazine.com/2010/02/07/simplefolio-a-free-clean-portfolio-wordpress-theme/">SimpleFolio</a>獨有的，而它們也是建立頁面的關鍵 template-fullwidth.php — 網誌分頁的模版，稍待在新增頁面的時候會需要它，它是控制所有內頁區塊中的相同元素。聰明的你可能會想到它跟page.php有何不同，</p>
<p>簡單說，page.php有呼叫sidebar而它沒有，所以在一些不想要有sidebar或是想自行設計側邊欄的頁面上，就可以使用這套模版。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2011/09/nosidebar.jpg" alt="沒有側邊欄" title="nosidebar"> </p>
<p>沒有側邊欄 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/withsidebar.jpg" alt="有側邊欄" title="withsidebar"> </p>
<p>有側邊欄 template-home.php — 這是<a href="http://coding.smashingmagazine.com/2010/02/07/simplefolio-a-free-clean-portfolio-wordpress-theme/">SimpleFolio</a>的客製化首頁，包含一個slider banner和可以用模組控制的首頁區塊。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2011/09/template-home.jpg" alt="客製化首頁" title="template-home"> </p>
<p>首頁輪播橫幅以及區塊顯示 Home widget — 此功能與Sidebar完全相同，差別在於它是控制template-home.php首頁的下方區塊。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2011/09/homewidget.jpg" alt="homewidget" title="homewidget"> </p>
<p>可以套用現成外掛功能或是自行新增html定義標籤。</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>寫給網頁設計師-如何整合html頁面至Wordpress（二）</title>
    <url>/tw/html2wordpress-2/</url>
    <content><![CDATA[<h2 id="lt-三-gt-建立所有頁面html"><a href="#lt-三-gt-建立所有頁面html" class="headerlink" title="&lt;三&gt;建立所有頁面html"></a>&lt;三&gt;建立所有頁面html</h2><p>在這邊我遇過的有兩種可能，第一種是全部的頁面你都已經用html全部寫完了，剩下的要把它們都倒進wordpress裡面去；第二種是只完成基本的頁面，譬如首頁或單一內頁，而內容需要從wordpress進行建置。這兩種情況都會發生，而且是夾雜在開發過程中， 原因在於縱使你寫好所有的頁面的html，可能會因為某些功能需要安裝外掛，而這外掛原有的設計風格跟你的網站差了十萬八千里，所以要把外掛的介面做調整，而後者的情況則更為常見，處理這些情況的首要條件，就是先把網站地圖中的頁面用新增網誌分頁的方式建立出來，再把html寫入， 在這一階段只要記住一個要點，那就是只要考慮html結構的正確性，css的部份先拋諸腦後吧!以下是實作範例：</p>
<span id="more"></span>
<p>1. <strong>攤開你的網站架構圖</strong> — 釐清該有的頁面與程式功能 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/sitemap.jpg" alt="範例說明的網站地圖" title="sitemap"> 原則上，盡量先把已確定頁面建置完成，然而在實務上，變動性總是可能會有，因此假設目前我們只有第一層的頁面項目來進行建置。關於我們與服務項目通常多為html即可，而企業部落格是為了要展現用wordpress架設部落格有多麼的簡單(它本身就是BLOG系統)，最後的聯絡我們則是要示範採用外掛的功能如何整合在我們的設計之中。 2. <strong>安裝SimpleFolio</strong> — <a href="https://oberonlai.blog/wp-content/uploads/2011/10/web_templates.zip">由此下載</a> 將稍早下載的web_templates.zip安裝於佈景主題中，安裝完成後可以在後臺選單中看到theme options。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/themeoptions.jpg" alt="SimpleFolio的選項" title="themeoptions"> 這些選項主要在控制主題的title、meta、ico等相關資訊，但基本上我很少從這邊修改這些資訊，大部份還是從程式碼直接改，而這頁的設定完全不用理會它也無所謂，我們要的只是它的模版功能。 3. <strong>安裝filosofo-home-page-control外掛</strong> — <a href="https://oberonlai.blog/wp-content/uploads/2011/10/filosofo-home-page-control.zip">由此下載</a> 這是控制網站的首頁以及部落格該由那一頁分頁呈現。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/homepagecontrol21.jpg" alt="控制首頁的外掛" title="homepagecontrol"> 在一般的情況下，wordpress的首頁都會是index.php，而這首頁是以部落格的方式來呈現，現在我們不需要它來當做我們的首頁，而是用我們自己新增的分頁來當作首頁，就可以用這外掛來設定，另外它還可以指定原本部落格首頁的路徑，是非常方便的工具。 2011-10-28新增—感謝<a href="http://sofree.cc/">香腸炒魷魚</a>的香腸大大告知，原來在設定 &gt; 閱讀裡面，就直接有可以變更網站首頁的功能，現在才知道原來就有內建，這樣就不需要再搞外掛了，再次感謝香腸大大的提供! <img src="https://oberonlai.blog/wp-content/uploads/2011/10/3333-e1319765875205.jpg" title="設定首頁"> 4. <strong>新增網誌分頁</strong> —將以上前置作業完成後，接下來就開始增加頁面，根據前的架構圖，我們要增加的頁面有：網站首頁、關於我們、服務項目與聯絡我們，而企業部落格就是原本wordrpess的部落格，所以無須再新增分頁。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/addpage.jpg" alt="新增網站首頁" title="addpage"> 在左側選單點選網誌分頁的新增網誌分頁，並在標題欄的地方輸入網站首頁，再把你想要插入的html寫在如圖示中，記得要把右上角的頁籤切換到html上。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/addpage-tpl.jpg" alt="選擇分頁模版" title="addpage-tpl"> 另外要注意的地方，就是在右側有模版的選項，預設模版指的是page.php，也就是有包含sidebar.php的分頁，而Home則是SimpleFolio的客製化首頁，也就是上述template-home.php的模版，最後的空白模版則是沒有sidebar.php的template-fullwidth.php。 如果你已經有寫好完整的首頁html，可以選擇空白模版來把它們貼進去，我現在手上沒東西，所以就選擇Home來當我的首頁。 5. <strong>增加其它頁面</strong>-–以此類推，關於我們和服務項目也是依照這樣的方式來建置，然後依照你的需求來選擇模版，上述未提到的Portfolio和Redirect應用面較少，故無詳加解釋，最後的聯絡我們需要套用外掛程式，步驟與其它頁面雷同 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/pagecontact.jpg" alt="新增聯絡我們頁面" title="pagecontact"> 一樣的步驟新增網誌分頁 接下來，我們來安裝我用過最強大的表單外掛-Contact Form 7，<a href="https://oberonlai.blog/wp-content/uploads/2011/10/contact-form-7.zip">由此下載。</a> <img src="https://oberonlai.blog/wp-content/uploads/2011/09/contactform7.jpg" alt="表單外掛的介面" title="contactform7"> 安裝完成後，可以在左方工具列找到聯絡表單&gt;編輯的選項，即可進入表單的設計頁面 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/contactform72.jpg" alt="建立新聯絡表單" title="contactform72"> 第一步，先找到上方桃紅色的按鈕-建立新聯絡表單 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/contactform73.jpg" alt="選擇表單語言" title="contactform73"> 選擇將樣新增的表單語系，如果是中文的話，就直接點選建立新聯絡表單 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/contactform74.jpg" alt="輸入標題" title="contactform74"> 幫這個表單取個名字，完成後點選右邊的儲存 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/contactform75.jpg" alt="複製程式碼到分頁中" title="contactform75"> 完成後會看到這個畫面，接下來只要把這一段複製下來 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/contactform76.jpg" alt="貼到聯絡我們頁面中" title="contactform76"> 貼到分頁聯絡我們中，這樣表單功能就能完成了，回到聯絡表單的部份，我們來把欄位好好設定一下 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/contactform78.jpg" alt="編輯表單欄位" title="contactform78"> 在編輯表單的欄位中，左方為html的區域，右方則是要新增的表單欄位 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/contactform79.jpg" alt="編寫html欄位" title="contactform79"> 在這欄位中，先把要呈現的html寫在這邊，通常是欄位名稱，或是必填欄位的註記，而有[]的部份，則是會從右側的標籤產生器產出 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/contactform710.jpg" alt="標籤產生器" title="contactform710"> 文字欄位，可設定是否為必填欄位、讓css辨識的id或class等，當相關欄位設定好時，再把咖啡色中的代碼複製起來，貼到左方的html區塊，這樣就完成了第一個文字輸入欄位。 這外掛還有提供其它表單欄位，像是下拉選單、文字區塊、checkbox等各種欄位，甚至連驗證碼功能都有，一般表單能想的到的功能，幾乎都全部包辦了，這就是我為什麼會強力推薦此套外掛的原因，它實在是太強大了啊!!! 接著我們要設定發送出的郵件內容，Contact Form 7 提供發送至兩組電子郵件，可惜有點少，能夠無限制新增的話就更完美了，但基本需求至少能夠用，有時間的話我看能不能再修改出可以選擇同時發送更多數量的電子郵件。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/contactform711.jpg" alt="郵件發送設定" title="contactform711"> 這邊是設定收件人與寄件人欄位，收件人可以寫自己的mail，其它欄位它會自行帶入相對應的參數，如無特別需求可以不用到到它。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/contactform712.jpg" alt="填寫郵件內容" title="contactform712"> 而右邊的部份則是填寫我們收到的郵件的內容，同樣的基本內容它都會帶入原有的參數，我們只要針對郵件內文進行編輯即可。 以上步驟都完成後，記得要點選頁面最右下方的儲存，這樣就大功告成了，一開始貼進分頁聯絡們的參數完全不用動，我們只要在這邊修改完儲存後，自動會在聯絡我們的頁面進行更新，表單設計就完成了。</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>從新學習HTML5 (三) 事件</title>
    <url>/tw/html5-event/</url>
    <content><![CDATA[<h2 id="Clipboard-API"><a href="#Clipboard-API" class="headerlink" title="Clipboard API"></a>Clipboard API</h2><p>捕捉使用者在頁面剪下、複製、貼上的動作</p>
<p>copy/oncopy 偵測複製行為</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;p id&#x3D;&#39;text&#39;&gt;這邊是即將要被複製的文字&lt;&#x2F;p&gt;
&lt;script&gt;
  var text &#x3D; document.querySelector(&#39;#text&#39;)
  text.oncopy &#x3D; function(e)&#123;
    alert( &quot;你剛剛複製了～&quot; );
    return false; &#x2F;&#x2F; 多這行禁止複製文字
  &#125;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>cut/oncut 偵測剪下行為</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;p id&#x3D;&#39;text&#39;&gt;這邊是即將要被剪下的文字&lt;&#x2F;p&gt;
&lt;script&gt;
  var text &#x3D; document.querySelector(&#39;#text&#39;)
  text.oncut &#x3D; function(e)&#123;
    alert( &quot;你剛剛剪下了～&quot; );
    return false; &#x2F;&#x2F; 多這行禁止剪下文字
  &#125;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>paste/onpaste 偵測貼上行為，使用 clipboardClip.getData(‘Text’) 來取得貼上的內容</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;p id&#x3D;&#39;text&#39;&gt;這邊是即將要被貼上的文字&lt;&#x2F;p&gt;
&lt;p id&#x3D;&#39;msg&#39;&gt;&lt;&#x2F;p&gt;
&lt;script&gt;
  var text &#x3D; document.querySelector(&#39;#text&#39;),
      msg &#x3D; document.querySelector(&#39;#msg&#39;)
  text.onpaste &#x3D; function(e)&#123;
    alert( &quot;你剛剛貼上你複製的文字了&quot; );
    msg.innerHTML &#x3D; e.clipboardData.getData(&#39;Text&#39;)
  &#125;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Drag-amp-Drop-API"><a href="#Drag-amp-Drop-API" class="headerlink" title="Drag&amp;Drop API"></a>Drag&amp;Drop API</h2><p>拖曳與置放元素的動作，要完成 drag &amp; drop 需經過以下步驟</p>
<p>1. 使用 dataTransfer 取得 DataTransfer 物件來設置拖曳資訊</p>
<p>2. 初始化事件 ondragstart 使用 dataTransfer.clearData() 來清空資訊以及 dataTransfer.setData() 紀錄開始拖曳的元素的資料</p>
<p>3. 感應被拖曳的元素移動到可置放的元素使用 ondragover 來偵測</p>
<p>4. 最後的置放使用 ondrop 來觸發，並用 dataTransfer.getData() 來取得拖曳元素，再用 appendChild 來把元素加入到目標元素中</p>
<p>相關事件有：</p>
<p>dragstart - 開始拖曳時觸發<br>drag - 拖曳過程中觸發<br>dragenter - 拖曳進入目標元素時被觸發<br>dragleave - 拖曳離開目標元素時被觸發<br>dragover - 拖曳經過目標元素時被觸發<br>drop - 置放至目標元素時被觸發<br>dragend - 結束拖曳操作時被觸發</p>
<p>相關物件：</p>
<p>dataTransfer.setData() - 寫入拖曳元素資料<br>dataTransfer.getData() - 取得拖曳元素資料<br>dataTransfer.clearData() - 清空拖曳元素資料  </p>
<h2 id="History-API"><a href="#History-API" class="headerlink" title="History API"></a>History API</h2><p>透過 JS 來控制頁面的上下頁跳轉以及指定瀏覽歷程</p>
<p>window.history.forward() - 下一頁<br>window.history.back() - 上一頁<br>window.history.go(pageIndex) - 前往指定的頁面</p>
<p>控制瀏覽歷程以及改變網址列的網址結構</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 改變現有網址不換頁
window.history.pushState(null, null, &quot;&#x2F;new&#x2F;&quot;);

&#x2F;&#x2F; 作用同上，但不會把瀏覽歷程加到歷史紀錄中
window.history.replaceState(null, null, &quot;&#x2F;new&#x2F;&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Selector-API"><a href="#Selector-API" class="headerlink" title="Selector API"></a>Selector API</h2><p>熟悉 jQuery 的話用它當選擇器會很方便</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;p class&#x3D;&#39;ele&#39; id&#x3D;&#39;ELE-a&#39;&gt;aa&lt;&#x2F;p&gt;
&lt;p class&#x3D;&#39;ele&#39; id&#x3D;&#39;ELE-b&#39;&gt;bb&lt;&#x2F;p&gt;
&lt;script&gt;
document.querySelect(&#39;#ELE-a&#39;).innerHTML;
var ele &#x3D; document.querySelectAll(&#39;ele&#39;).innerHTML;

&#x2F;&#x2F; 要取出值時要用迴圈去拿
for(var i&#x3D;0; I&lt; ele.length; i++)&#123;
  alert(ele.innerHTML)
&#125;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
  </entry>
  <entry>
    <title>從新學習HTML5 (二) 表單</title>
    <url>/tw/html5-form/</url>
    <content><![CDATA[<p>上一篇在這邊—&gt;<a href="https://oberonlai.blog/html5-intro/">從新學習HTML5 (一) 概觀</a></p>
<p>HTML5 在處理表單的部分有很大的躍進，以前最喜歡用 jQuery Validation Plugin 來處理各種表單欄位的驗證，但現在 HTML5 內建許多 API，初步看來，實務上的表單需求應該都能不透過外掛而用 API 達成，在瀏覽器的支援程度上也算完整，已經算是可以實戰的階段。</p>
<p>關於表單的章節本書先從 input 新增的屬性介紹，還有一些可以更彈性使用 <form> 標籤的屬性，新增的 type 類型直接自動幫你判斷輸入文字是否符合規則，還有不知道什麼時候派得上用場的輸入文字選取 API，以及最實用的 input 驗證 API。希望學到這些以後可以把表單秒刻完啊啊啊～</p>
<h2 id="input-相關屬性"><a href="#input-相關屬性" class="headerlink" title="input 相關屬性"></a>input 相關屬性</h2><p>顧名思義就是給 <input> 標籤專用的屬性，可以直接運用屬性來給輸入欄位下條件，很大幅度省下利用 js 來定義限制條件的時間，當然，比較複雜的條件就還是只能自己寫了。</p>
<p><strong>autocomplete</strong> - 讓瀏覽器記憶曾經輸入過的文字，下次輸入時會自動提示，沒有特別定義這個屬性的話，預設狀態是開啟的，如果要關閉它再寫 autocomplete=off。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- 停用自動提示功能 --&gt;
&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; autocomplete&#x3D;&quot;off&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>size</strong> - 控制輸入文字的顯示長度，但不會限制字數，有點不知要用在什麼地方，能輸入幾個字元不就是告訴使用者限制的字數嗎？</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- 可輸入無限多位元，但只會出現六位數 --&gt;
&lt;input type&#x3D;&quot;text&quot; size&#x3D;6 &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>maxlength</strong> - 限制輸入字數，這個很常用  </p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- 只能輸入六個位元 --&gt;
&lt;input type&#x3D;&quot;text&quot; maxlength&#x3D;6 &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>required</strong> - 必填欄位，一個單字搞定</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input type&#x3D;&quot;text&quot; required &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>readonly</strong> - 顯示唯讀狀態，不得輸入任何內容</p>
<p><strong>min/max</strong> - 設定輸入日期或數字的最大值與最小值，也適用在設定 type=range 滑桿控制的範圍</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- 輸入介於 2~10 的數字 --&gt;
&lt;input name&#x3D;day type&#x3D;number min&#x3D;2 max&#x3D;10&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>step</strong> - 設定更改數量或滑桿時的級距</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- 每次修改必須以 2 為單位 --&gt;
&lt;input type&#x3D;number min&#x3D;1 max&#x3D;100 step&#x3D;2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>pattern</strong> - 使用正規表達式來驗證輸入資料</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- 只允許輸入大寫英文字母一個 --&gt;
&lt;input type&#x3D;text pattern&#x3D;&quot;[A-Z]&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>autofoucs</strong> - 指定頁面載入時預設停留的 input，除了 input 外，select 與 button 也支援該屬性</p>
<p><strong>multiple</strong> - 輸入資料至少要兩組以上，以逗號分隔</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- 至少要輸入兩組以上的 email --&gt;
&lt;input type&#x3D;email multiple&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="與-標籤相關的屬性"><a href="#與-標籤相關的屬性" class="headerlink" title="與  標籤相關的屬性"></a>與 <form> 標籤相關的屬性</h2><p>自己遇過一個問題，有時候為了排版的考量，表單裡面的欄位沒辦法包在 <form> 標籤裡面，這時候用 form 屬性就可以不受限制，另外還新增了可以複寫 action、method 等屬性的用法，只是又不知道這是什麼時候用得到…</p>
<p><strong>form</strong> - submit 傳送時讓沒有包在 <form> 裡面的欄位也可以取得其值，但要先給 <form> 一個 id，然後把 form 屬性放在 input 裡面並指定要對應表單的 id</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;form id&#x3D;&quot;myform&quot;&gt;
  &lt;button type&#x3D;submit&gt;SEND&lt;button&gt;
&lt;&#x2F;form&gt;
&lt;!-- input 不用在表單裡面 --&gt;
&lt;input type&#x3D;text form&#x3D;&quot;myform&quot; required &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>formaction</strong> - 用在 submit button 裡面，複寫 <form> 本身的 action 屬性</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;form&gt;
  &lt;input type&#x3D;submit formaction&#x3D;&quot;abc.url&quot;&gt;
&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>formmethod</strong> - 用在 submit button 裡面，複寫 <form> 本身的 method 屬性</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;form&gt;
  &lt;input type&#x3D;submit formmethod&#x3D;&quot;post&quot;&gt;
&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>formtarget</strong> - 用在 submit button 裡面，複寫 <form> 本身的 target 屬性</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;form&gt;
  &lt;input type&#x3D;submit formtarget&#x3D;&quot;_blank&quot;&gt;
&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>formnovalidate</strong> - 用在 submit button 裡面，取消欄位驗證功能</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;form&gt;
  &lt;input type&#x3D;submit formnovalidate&gt;
&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="新增的-input-type-類型"><a href="#新增的-input-type-類型" class="headerlink" title="新增的 input type 類型"></a>新增的 input type 類型</h2><p>這些新增的 type 可以更方便的去指定驗證欄位條件，因為都內建的，常見的電子郵件或是 URL 都能判斷，更進階的還有日期選擇器、顏色選擇器，但瀏覽器支援差，還是要靠外掛處理了。</p>
<p><strong>type=search</strong> - 同 input=text，但 chrome 上會多一個 X 可以清除已輸入文字</p>
<p><strong>type=tel</strong> - 代表電話，驗證條件為純文字</p>
<p><strong>type=url</strong> - 代表網址，驗證條件為前方要帶有 http:// 開頭的文字</p>
<p><strong>type=email</strong> - 代表電子郵件，驗證條件為 @ 符號</p>
<p><strong>type=password</strong> - 代表密碼，會自動以星號取代輸入文字</p>
<p><strong>type=datetime 相關</strong> - 日期選擇器，但瀏覽器支援弱，不實用</p>
<p><strong>type=number</strong> - 代表數值，驗證條件為數字</p>
<p><strong>type=range</strong> - 使用滑桿輸入數字</p>
<p><strong>type=color</strong> - 顏色選擇器，每個瀏覽器的選擇介面都不太一樣，不好自訂</p>
<h2 id="input-文字選取的-api"><a href="#input-文字選取的-api" class="headerlink" title="input 文字選取的 api"></a>input 文字選取的 api</h2><p>用來取得 input 裡面文字被選取的狀態，當用滑鼠把文字選取起來時，可以得知是從第幾個字元開始被選取，也可以取得最後一個被選取的字元，還可以指定要自動選取的範圍，完全沒概念這要怎麼應用…</p>
<p><strong>selectionStart</strong> - 文字選取屬性，表示被選取文字第一個字的索引值</p>
<p><strong>selectionEnd</strong> - 文字選取屬性，表示被選取文字結束的索引位置</p>
<p><strong>selectionDirection</strong> - 文字選取屬性，偵測選取文字時是向前還向後選取</p>
<p><strong>select()</strong> - 文字選取方法</p>
<p><strong>setSelectionRange(start,end, direction)</strong> - 程式設定選取範圍，最後一個 direction 選填</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;text-box&quot; size&#x3D;&quot;20&quot; value&#x3D;&quot;1234&quot;&gt;
&lt;button onclick&#x3D;&quot;selectText()&quot;&gt;選取2跟3&lt;&#x2F;button&gt;
&lt;script&gt;
function selectText() &#123;
  var input &#x3D; document.getElementById(&#39;text-box&#39;);  
  input.focus();
  &lt;!-- end 索引值是指被選到文字的下一個 --&gt;
  input.setSelectionRange(1, 3); 
&#125;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="input-驗證-API"><a href="#input-驗證-API" class="headerlink" title="input 驗證 API"></a>input 驗證 API</h2><p>驗證 API 是本章節的重點，在很多情況下，根本不會有 submit 傳送事件的觸發，尤其是現在常見的 ajax 應用，以及熱門的 js 框架，都採用非同步的方式去處理資料傳遞，所以學會如何使用 API 去控制驗證輸入欄位是非常重要的。</p>
<p><strong>willValidate</strong> - 判斷欄位是否帶有驗證條件，如果有的話值是 true，這邊驗證條件指的是內建的 type 類型所判斷的條件，自己寫的條件無用，BUT…..</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input id&#x3D;&quot;hadValid&quot; type&#x3D;email&gt;
&lt;input id&#x3D;&quot;hadNoValid&quot; type&#x3D;text&gt;
&lt;button onclick&#x3D;&quot;check()&quot;&gt;CHECK&lt;&#x2F;button&gt;
&lt;script&gt;
function cheeck()&#123;        
  alert(document.querySelector(&quot;#hadValid&quot;).willValidate)
  alert(document.querySelector(&quot;#hadNoValid&quot;).willValidate)
&#125;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我以為第一個 alert 是 true，第二個是 false，想不到第二個也是 true，後來爬到說 willValidate 唯一會 false 的情況，只有在 input 被設為 disabled 的時候，而且設了 disabled 不管 type 是什麼，全都是 false，這個屬性應該改名叫做 <strong>isDisabled</strong> 才對吧….Orz</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input id&#x3D;&quot;hadValid&quot; type&#x3D;email disabled&gt;
&lt;input id&#x3D;&quot;hadNoValid&quot; type&#x3D;text disabled&gt;
&lt;button onclick&#x3D;&quot;check()&quot;&gt;CHECK&lt;&#x2F;button&gt;
&lt;script&gt;
function check()&#123; 
  &lt;!-- 兩個都回傳 false，無言.... --&gt;
  alert(document.querySelector(&quot;#hadValid&quot;).willValidate)
  alert(document.querySelector(&quot;#hadNoValid&quot;).willValidate)
&#125;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>checkValidity()</strong> - 判斷欄位是否有通過驗證，有的話回傳 true，如果在未輸入任何值得情況下，這個方法也是會過，所以要用他判斷最好要再加上檢查 value 是否為空，或是給 input required 屬性會比較準確</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!--  注意！沒設必填的話空值也會驗證成功 --&gt;
&lt;input id&#x3D;&quot;check&quot; type&#x3D;email required&gt; 
&lt;button onclick&#x3D;&#39;checkValid()&#39;&gt;CHECK&lt;&#x2F;button&gt;
&lt;script&gt;
function checkValid()&#123;
  if( document.getElementById(&#39;check&#39;).checkValidity() )&#123;
    alert(&quot;我成功啦～&quot;)
  &#125; else &#123;
    alert(&quot;我失敗啦～&quot;)
  &#125;
&#125;    
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>validity</strong> - 用來顯示錯誤狀態的一個物件 ValidityState，可以根據取得的結果來做相對應的動作，取得的結果有以下幾種，可以很精準的判斷錯誤狀態以提供使用者正確的回饋訊息：</p>
<p>(一) validity.valueMissing – 有必填欄位未填的話返回 true</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input id&#x3D;&quot;check&quot; type&#x3D;text required&gt; 
&lt;button onclick&#x3D;&#39;checkValid()&#39;&gt;Send&lt;&#x2F;button&gt;
&lt;script&gt;
function checkValid()&#123;
  if (document.querySelector(&quot;#check&quot;).validity.valueMissing) &#123;
    alert(&quot;必填欄位未填&quot;)
  &#125; else &#123;
    alert(&quot;驗證成功&quot;)
 &#125; 
&#125;    
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(二) validity.typeMismatch – 輸入格式不對的話返回 true，像是 type=email 沒有 @xx.xx，或是 type=url 沒有 http://</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input id&#x3D;&quot;check&quot; type&#x3D;email required&gt; 
&lt;button onclick&#x3D;&#39;checkValid()&#39;&gt;Send&lt;&#x2F;button&gt;
&lt;script&gt;
function checkValid()&#123;
  if (document.querySelector(&quot;#check&quot;).validity.typeMismatch) &#123;
    alert(&quot;格式有誤&quot;)
  &#125; else &#123;
    alert(&quot;驗證成功&quot;)
 &#125; 
&#125;    
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(三) validity.patternMismatch – 正規表示法的驗證沒過返回 true</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input id&#x3D;&quot;check&quot; type&#x3D;text pattern&#x3D;&quot;[A-Z]&#123;3&#125;&quot; required&gt; 
&lt;button onclick&#x3D;&#39;checkValid()&#39;&gt;Send&lt;&#x2F;button&gt;
&lt;script&gt;
function checkValid()&#123;
  if (document.querySelector(&quot;#check&quot;).validity.patternMismatch) &#123;
    alert(&quot;格式有誤&quot;)
  &#125; else &#123;
    alert(&quot;驗證成功&quot;)
 &#125; 
&#125;    
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(四) validity.tooLong – 超過 maxlength 設定的上限值回傳 true，但 Chrome / Safari 似乎不支援，測試了老半天都無法取得 true，還是只好乖乖的用 length 去判斷了</p>
<p>(五) validity.rangeUnderflow – 小於 min 屬性的下限值回傳 true</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input id&#x3D;&quot;check&quot; type&#x3D;number min&#x3D;10&gt; 
&lt;button onclick&#x3D;&#39;checkValid()&#39;&gt;Send&lt;&#x2F;button&gt;
&lt;script&gt;
function checkValid()&#123;
  if (document.querySelector(&quot;#check&quot;).validity.rangeUnderflow) &#123;
    alert(&quot;數字不得低於10&quot;)
  &#125; else &#123;
    alert(&quot;驗證成功&quot;)
 &#125; 
&#125;    
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(六) validity.rangeOverflow – 大於 max 屬性的上限值回傳 true</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input id&#x3D;&quot;check&quot; type&#x3D;number max&#x3D;10&gt; 
&lt;button onclick&#x3D;&#39;checkValid()&#39;&gt;Send&lt;&#x2F;button&gt;
&lt;script&gt;
function checkValid()&#123;
  if (document.querySelector(&quot;#check&quot;).validity.rangeOverflow) &#123;
    alert(&quot;數字不得大於10&quot;)
  &#125; else &#123;
    alert(&quot;驗證成功&quot;)
 &#125; 
&#125;    
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(七) validity.stepMismatch – 不符合 step 變量時回傳 true</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input id&#x3D;&quot;check&quot; type&#x3D;number min&#x3D;2 max&#x3D;10 step&#x3D;2 value&#x3D;2&gt; 
&lt;button onclick&#x3D;&#39;checkValid()&#39;&gt;Send&lt;&#x2F;button&gt;
&lt;script&gt;
function checkValid()&#123;
  if (document.querySelector(&quot;#check&quot;).validity.stepMismatch) &#123;
    alert(&quot;增加數值要是 2 的倍數&quot;)
  &#125; else &#123;
    alert(&quot;驗證成功&quot;)
 &#125; 
&#125;    
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(八) validity.customError – 判斷是否有設定 setCustomValidity 自訂錯誤訊息文字，有的話為 true</p>
<p>(九) validity.valid – 僅顯示驗證是否有通過，有的話為 true，驗證沒過為 false</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input id&#x3D;&quot;check&quot; type&#x3D;text required&gt; 
&lt;button onclick&#x3D;&#39;checkValid()&#39;&gt;Send&lt;&#x2F;button&gt;
&lt;script&gt;
function checkValid()&#123;
  if (document.querySelector(&quot;#check&quot;).validity.valid) &#123;
    alert(&quot;驗證成功&quot;)
  &#125; else &#123;
    alert(&quot;驗證失敗&quot;)
 &#125; 
&#125;    
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>setCustomValidity(message)</strong> - 自訂驗證未過時的錯誤訊息，並且用 inputElement.validationMessage 取得自訂的錯誤訊息</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input id&#x3D;&quot;input&quot; type&#x3D;&#39;text&#39; required&#x2F;&gt;
&lt;p id&#x3D;&#39;msg&#39;&gt;&lt;&#x2F;p&gt;
&lt;button onclick&#x3D;&#39;check()&#39;&gt;SEND&lt;&#x2F;button&gt;
&lt;script&gt;
  var input &#x3D; document.querySelector(&#39;#input&#39;);
  var msg &#x3D; document.querySelector(&#39;#msg&#39;);
  function check()&#123;
    if( input.validity.valueMissing ) &#123;
       &#x2F;* 設定錯誤顯示文字   *&#x2F;
      input.setCustomValidity(&#39;我錯啦～&#39;)
      &#x2F;* 因為有自訂錯誤訊息，所以是 true *&#x2F; 
      alert(input.validity.customError ) 
      &#x2F;* 取得錯誤顯示文字 *&#x2F;
      msg.innerHTML &#x3D; input.validationMessage 
    &#125;
  &#125;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="可用在-Input-的新事件"><a href="#可用在-Input-的新事件" class="headerlink" title="可用在 Input 的新事件"></a>可用在 Input 的新事件</h2><p>完整的新事件的部分將在下一章中介紹，這邊先介紹兩個跟 input 欄位相關的，一個是 oninput 另一個是 oninvalid。</p>
<p>oninput 可以解決因為 onkeyup 跟 onkeydown 造成輸入判斷不精準的問題，而 oninvalid 顧名思義就是當驗證未過時觸發的事件，我們把上面 setCustomValidity 的寫法改用這兩個事件來處理。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- 用事件設定錯誤訊息，在輸入時要清空，在驗證未過時設定 --&gt;
&lt;form action&#x3D;&quot;&quot;&gt;
  &lt;input type&#x3D;&#39;text&#39; oninput&#x3D;&quot;setCustomValidity(&#39;&#39;);&quot; oninvalid&#x3D;&quot;setCustomValidity(&#39;我錯啦～&#39;);&quot; required&#x2F;&gt;
  &lt;input type&#x3D;&#39;submit&#39; &#x2F;&gt;
&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這樣整理並且實作下來，發現還是有些屬性跟想像中的用法不一樣，雖然書上的文字描述好像很清楚，但實際用 jsfiddle 去 run 才發現根本不是這麼一回事，另外瀏覽器支援度也是個問題，在用的時候要先查清楚才行。</p>
<p>下一篇繼續整理 HTML5 的新事件。</p>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
  </entry>
  <entry>
    <title>從新學習HTML5 (一) 概觀</title>
    <url>/tw/html5-intro/</url>
    <content><![CDATA[<p><img src="https://i2.wp.com/oberonlai.blog/wp-content/uploads/2019/03/IMG_7996.jpg"></p>
<p><img src="https://i1.wp.com/oberonlai.blog/wp-content/uploads/2019/03/CleanShot-2019-03-11-at-21.54.26.jpg?ssl=1"></p>
<p>第一次完整學習 HTML 是在剛入行的時候，算一算也有十幾個年頭了，這些日子以來，對於 HTML5 只有著片段的知識，每當卡關去爬 Stackoverflow 時，才會驚訝的發現原來還有這些新東西可以用，所以在圖書館看到這本時，應該是老天爺叫我要好好的來重新認識 HTML 了。</p>
<p>看完幾個章節以後，有一種在看說明書的感覺。就像電器用品一樣，不用看說明書就可以用得順手，然後哪天在整理東西時發現冷氣機的說明書，隨手翻了一下，才驚喜的發現原來家裡的冷氣除了會冷以外，還有除濕、暖氣、烘乾、洗衣、脫水、無線分享器、播音樂等各種功能(?)，而且有些還真的非常實用，在看這本 HTML5 的時候就是這種感覺，每翻一頁處處都是驚喜，許多新功能立馬能在工作上派上用場，滿滿的意外收穫～</p>
<p>但這本書實在太厚了，根本就是整個 W3C 文件的濃縮版，涵蓋的面向非常完整，從 HTML5 的歷史介紹、介面設計、通訊功能、影像資料處理，到本地資料儲存機制應有盡有，而且不是草草帶過，書裡介紹完整屬性並搭配實作範例，真的是 HTML5 參考書不為過。</p>
<p>怕自己沒辦法一次整理完這麼龐大的資料量，只好分篇來紀錄，本文以 HTML5 的入門概觀為主，重點摘要整理如下：</p>
<h2 id="HTML5-的歷史"><a href="#HTML5-的歷史" class="headerlink" title="HTML5 的歷史"></a>HTML5 的歷史</h2><p>記得學生時代用 Dreamweaver 設計網頁時，在檢視原始碼的模式下，有時候都會看到最上面有類似這一段的開頭：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD XHTML 1.0 Strict&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2002&#x2F;08&#x2F;xhtml&#x2F;xhtml1-strict.dtd&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>落落長的內容裡面寫著 XHTML ，心想這應該就是 HTML 的標準形式吧，在還是 DW 的年代，完全不知道怎麼寫 HTML，只會用現成的介面來產出網頁。直到後來才知道，原來還有一種叫 XHTML 的東西準備要來取代 HTML…</p>
<p>HTML 最早是在西元 1990 年由網際網路發明人 Tim Berners-Lee 所制定的，並組成了 W3C (World Wide Web Consortium) 來維護 HTML，到了西元 1999 年進化到第四版，也就是 HTML5 的前身 HTML4.01，但由於 HTML4 本身架構以及語法的問題，遲遲無法進行改良，因此 W3C 決定以 XML 語言基礎，打掉重練 HTML 並開發 XHTML。</p>
<p>直到 2003 年有新技術出現，原有的 HTML4 可以升級了並進行擴充了，於是由 Apple、Mozilla、Opera 組成的 WHATWG 來制定下一版的 HTML，但 W3C 也已經花了不少時間在著手 XHTML 的開發，所以情勢即將變成各玩各的規範，苦的就是瀏覽器廠商以及廣大的網站開發者。</p>
<p>幸好在 2007 年，W3C 也加入了 WHATWG，一起參與下一代 HTML 的開發，雖然 W3C 並未放棄 XHTML 的計畫，但至少 HTML 可以繼續的被使用下去。到了 2010 年 HTML5 訂出草稿，最後在西元 2014 年 10/28 發表，雖然當時還是 Flash 橫著走的年代，直到 <a href="https://chinese.engadget.com/2010/04/29/steve-jobs-publishes-some-thoughts-on-flash-many-many-thou/">Steven Jobs 力推 HTML5 並抵制 Flash</a>，HTML5 才逐漸發揚光大，成為現今主流的網頁技術。</p>
<p>這幾年各家瀏覽器對於 HTML5 的支援越來越完整，有興趣的朋友可以到 <a href="https://html5test.com/">https://html5test.com</a> 看看自己使用的瀏覽器的支援程度，個人覺得有點意外的是，macOS Safari 的支援度有點低，當年最早在制定 H5 的公司不就是 Apple 嗎？反倒是 Chrome 的支援度較完整。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/03/CleanShot-2019-03-09-at-21.55.24.png"></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/03/CleanShot-2019-03-09-at-21.55.55.png"></p>
<h2 id="HTML5-的主要內容"><a href="#HTML5-的主要內容" class="headerlink" title="HTML5 的主要內容"></a>HTML5 的主要內容</h2><p>廣義來說，HTML5 主要包含以下七大項的新增內容，當使用到其中一項內容時，我們便可以說該網頁是使用 HTML5 技術所開發的：</p>
<h4 id="ㄧ-語意標籤-semantic"><a href="#ㄧ-語意標籤-semantic" class="headerlink" title="(ㄧ) 語意標籤 semantic"></a>(ㄧ) 語意標籤 semantic</h4><p>使用更具有意義的 HTML 標籤，讓搜尋引擎或是爬蟲機器人可以更方便與快速的了解網頁的內容，也讓開發人員有更ㄧ致的準則來使用適合內容的標籤。像是頁首使用 <header>、主要區塊使用 <section>、側邊欄使用 <aside> 等等。</p>
<h4 id="二-離線儲存-offline-amp-storage"><a href="#二-離線儲存-offline-amp-storage" class="headerlink" title="(二) 離線儲存 offline&amp;storage"></a>(二) 離線儲存 offline&amp;storage</h4><p>透過快取技術、本地儲存與 Index DB，讓裝置在沒有網路的環境下，依舊可以瀏覽網站的內容，這對於裝置行動化的趨勢來說，是非常實用的功能。</p>
<h4 id="三-裝置存取-Device"><a href="#三-裝置存取-Device" class="headerlink" title="(三) 裝置存取 Device"></a>(三) 裝置存取 Device</h4><p>隨著手機出貨量超越桌上型個人電腦，手持裝置變成是瀏覽網站最主要的來源，HTML5 可以取得使用裝置硬體的權限，讓網站可以像原生 APP 一樣，做到許多原本無法做到的功能，像是透過瀏覽器啟用相機、取得手機地理位址等等，大大加強了網站的應用性。</p>
<h4 id="四-連結性-Connectivity"><a href="#四-連結性-Connectivity" class="headerlink" title="(四) 連結性 Connectivity"></a>(四) 連結性 Connectivity</h4><p>HTML5 讓網站之間傳輸資料更即時，非常適合做即時通訊或手機推播等功能。</p>
<h4 id="五-效能與整合性-Perfermence-amp-Integrate"><a href="#五-效能與整合性-Perfermence-amp-Integrate" class="headerlink" title="(五) 效能與整合性 Perfermence&amp;Integrate"></a>(五) 效能與整合性 Perfermence&amp;Integrate</h4><p>整合 XMLHttpRequest 2 非同步載入技術，以及 Web Workers 支援網頁多工執行的特性，讓動態網頁從伺服器端請求資料更即時，使用體驗也更好。</p>
<h4 id="六-2-3D-圖形與特效-2-3D-Graphic-amp-Effects"><a href="#六-2-3D-圖形與特效-2-3D-Graphic-amp-Effects" class="headerlink" title="(六) 2/3D 圖形與特效 2/3D Graphic&amp;Effects"></a>(六) 2/3D 圖形與特效 2/3D Graphic&amp;Effects</h4><p>以前 Flash 之所以能稱霸網路，就是因為透過 Action Script 可以開發出各種 2D 或 3D 的視覺動態呈現，為了補足這一塊，HTML5 開發了 Canvas、SVG、WebGL 讓設計人員可以在不需要安裝任何瀏覽器外掛的情況下，製作出具有高水準的影像或動畫。</p>
<h4 id="七-多媒體-multimedia"><a href="#七-多媒體-multimedia" class="headerlink" title="(七) 多媒體 multimedia"></a>(七) 多媒體 multimedia</h4><p>Flash 最麻煩且最棘手的地方，就是在於他需要安裝瀏覽器套件才能使用，播放影音也不例外，所以 HTML5 直接內建影音播放功能，不需要任何的套件安裝就可以讓用戶可以看到內容。</p>
<h2 id="HTML-基礎知識"><a href="#HTML-基礎知識" class="headerlink" title="HTML 基礎知識"></a>HTML 基礎知識</h2><h4 id="一-文件物件模型-Document-Object-Model-Tree"><a href="#一-文件物件模型-Document-Object-Model-Tree" class="headerlink" title="(一) 文件物件模型 Document Object Model Tree"></a>(一) 文件物件模型 Document Object Model Tree</h4><p>網頁內容是由 DOM Tree 的節點組成，每個 html 的標籤都會轉換成一個物件，以巢狀的方式紀錄每個標籤的父子關係，參考下圖的對應關係，左邊是 HTML 的標籤內容，右邊是轉換後的文件物件模型。  </p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;網頁&lt;&#x2F;title&gt;
  &lt;&#x2F;head&gt;
  &lt;body&gt;
    &lt;h1&gt;文章標題&lt;&#x2F;h1&gt;
  &lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">DOCTYPE
html
├── head
│   └── title
├── body
│   └── h1

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="二-HTML-根元素"><a href="#二-HTML-根元素" class="headerlink" title="(二) HTML 根元素"></a>(二) HTML 根元素</h4><p>HTML 跟元素是整份文件最上層的節點，擁有兩個屬性，一個是 manifest，專門設定來讀取網站快取清單的路徑，範例如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;html manifest&#x3D;&quot;cache.manifest&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第二個是 lang，用來設定網頁所使用的語系：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;html lang&#x3D;&quot;zh-tw&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="三-head-元素"><a href="#三-head-元素" class="headerlink" title="(三) head 元素"></a>(三) head 元素</h4><p>head 元素主要放網頁描述資料的區塊，也就是中介資料，常用的有以下幾種：</p>
<title> 網頁的標題，js 使用來取得網頁標題 document.title

<base> 設定網站的基準網址，讓需要取得路徑的地方寫相對路徑即可，範例如下：

<pre class="line-numbers language-none"><code class="language-none">&lt;base href&#x3D;&#39;https:&#x2F;&#x2F;abc.com&#39;&gt;
&lt;a href&#x3D;&#39;about.html&#39;&gt;Link&lt;&#x2F;a&gt;
&#x2F;&#x2F; 點擊 Link 網址是 https:&#x2F;&#x2F;abc.com&#x2F;about.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<style> 放置 CSS 樣式的標籤

<link> 引入媒體檔案的標籤，通常放在外部的 CSS 檔或使用它來引入

<pre class="line-numbers language-none"><code class="language-none">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;style.css&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<script> 引入外部 JavaScript 檔案的標籤，HTML 5 新增加了兩種讀取模式：

預設：DOM 跑到就執行，會等 js 載完才會繼續往下跑  
async：DOM 跑到就執行，不等 js 載完繼續往下跑  
defer：DOM 跑到不執行，等 DOM 全部載完 js 最後才執行  

<noscript> 不支援 JavaScript 情況下所顯示的文字

<meta> 設定頁面的描述資料，使用 http-equiv 可設定 http 回應標頭狀態，主要分為三種：

content-type 編碼宣告

<pre class="line-numbers language-none"><code class="language-none">&lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html&quot; charest&#x3D;&quot;UTF-8&quot;&gt; 

&#x2F;&#x2F; H5 中可直接由 charset 取代
&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

default-style 預設樣式 - 指定預設要讀取哪一個 CSS 檔

<pre class="line-numbers language-none"><code class="language-none">&lt;meta http-equiv&#x3D;&quot;Default-Style&quot; content&#x3D;&quot;Blue Style&quot; &#x2F;&gt;
&lt;link rel&#x3D;&quot;alternate stylesheet&quot; href&#x3D;&quot;&#x2F;css&#x2F;green.css&quot; type&#x3D;&quot;text&#x2F;css&quot; title&#x3D;&quot;Green&quot; &#x2F;&gt;  
&lt;link rel&#x3D;&quot;alternate stylesheet&quot; href&#x3D;&quot;&#x2F;css&#x2F;blue.css&quot; type&#x3D;&quot;text&#x2F;css&quot; title&#x3D;&quot;Blue&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

refresh 重整頁面

<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 隔 30 秒後跳轉到 redirect.html
&lt;meta http-equiv&#x3D;&quot;fresh&quot; content&#x3D;&quot;30;URL&#x3D;redirect.html&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

## 實用新增標籤

前面提到 HTML5 新增的內容包含語意標籤、影音功能等等，因此也新增了不少新標籤來定義這些內容，這邊以三個面向進行分類，並挑選實用的標籤來進行說明：

#### (一) 影音相關

<video> 播放影片使用的標籤，可放入多個 source 來源，當瀏覽器不支援該影片格式時，可以向下相容

<pre class="line-numbers language-none"><code class="language-none">&lt;video width&#x3D;&quot;400&quot; controls&gt;
  &lt;source src&#x3D;&quot;mov_bbb.mp4&quot; type&#x3D;&quot;video&#x2F;mp4&quot;&gt;
  &lt;source src&#x3D;&quot;mov_bbb.ogg&quot; type&#x3D;&quot;video&#x2F;ogg&quot;&gt;
  你的瀏覽器不支援 HTML5 播放器
&lt;&#x2F;video&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<audio> 播放音檔使用的標籤

#### (二) 文本相關

<mark> 文字重點強調

<progress> 顯示進度條

<pre class="line-numbers language-none"><code class="language-none">&lt;progress value&#x3D;&quot;22&quot; max&#x3D;&quot;100&quot;&gt;&lt;&#x2F;progress&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<meter> 顯示水平量表

<pre class="line-numbers language-none"><code class="language-none">&lt;meter value&#x3D;&quot;3&quot; min&#x3D;&quot;0&quot; max&#x3D;&quot;10&quot;&gt;十分之三&lt;&#x2F;meter&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<time> 顯示時間

<wbr> 讓過長的文字在指定的地方斷行

#### (三) 介面相關

<details><summary> 內建的 accordion 功能

<pre class="line-numbers language-none"><code class="language-none">&lt;details&gt;
  &lt;summary&gt;標題&lt;&#x2F;summary&gt;
  展開內容
&lt;&#x2F;details&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<datalist> 讓 input text 可以依照使用者搜尋文字跳出相關建議詞

<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; input 的建議字使用 id 為 keyword 的 datalist 裡面的內容
&lt;input list&#x3D;&quot;keyword&quot; &#x2F;&gt;

&#x2F;&#x2F; 定義相關字詞
&lt;datalist id&#x3D;&quot;keyword&quot;&gt;
  &lt;option value&#x3D;&quot;Google&quot;&gt;
  &lt;option value&#x3D;&quot;Yahoo&quot;&gt;
  &lt;option value&#x3D;&quot;Bing&quot;&gt;
&lt;&#x2F;datalist&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

## 新增全域屬性

除了新的標籤以外，也有許多新的屬性可以使用，有了這些屬性，可以讓標籤更靈活的運用，此外還能擴充更多自訂屬性：

contenteditable：可以讓任何標籤變成可輸入文字的 input text 狀態

<pre class="line-numbers language-none"><code class="language-none">&lt;p id&#x3D;&quot;msg&quot; contenteditable&gt;輸入內容&lt;&#x2F;p&gt;
document.getElementById(&#39;msg&#39;).innerHTML); &#x2F;&#x2F; 取得輸入內容文字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

data-\*：自訂資料屬性，讓標籤可以擴充自己定義的屬性

<pre class="line-numbers language-none"><code class="language-none">&lt;div id&#x3D;&quot;products&quot; data-price&#x3D;450 data-name&#x3D;&quot;books&quot; data-name-en&#x3D;&quot;books-en&quot;&gt;&lt;&#x2F;div&gt;
document.getElementById(&quot;products&quot;).dataset.price &#x2F;&#x2F; 450
document.getElementById(&quot;products&quot;).dataset.name &#x2F;&#x2F; books
document.getElementById(&quot;products&quot;).dataset.nameEn &#x2F;&#x2F; books-en 用駝峰寫法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

draggable/dropzone：標記可拖曳/置放標籤

hidden：隱藏標籤

spellcheck：拼字檢查

## 小結

整理完 HTML5 的由來以及新增的功能之後，接來深入介紹 HTML5 在介面設計上新增的標籤以及 CSS3 的各項功能。]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
  </entry>
  <entry>
    <title>Icon Font in Taiwan</title>
    <url>/tw/icon-font-in-taiwan/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>素材</category>
      </categories>
  </entry>
  <entry>
    <title>illustration Builder</title>
    <url>/tw/illustration-builder/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>素材</category>
      </categories>
  </entry>
  <entry>
    <title>independent-publisher-2-wpcom</title>
    <url>/tw/independent-publisher-2-wpcom/</url>
    <content><![CDATA[<p>.entry-author .author-bio {font-style:normal}</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>買網址租主機外加安裝Wordpress只要7分鐘又18秒24</title>
    <url>/tw/install-wordpress-in-7-minutes/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-0.jpg" alt="install-wordpress-in-7-minutes-0"> 如果你是一位講師，要分享教材跟文章卻只投稿到別人的資訊平台 如果你是一位創作者，要分享作品卻只把作品上傳到別人的相簿服務平台 如果你是一位咖啡店老闆，要分享咖啡知識卻只透過 Facebook 貼文 以上的做法都是把自己努力的成果放在別人的平台上，為什麼不架自己的網站呢？</p>
<span id="more"></span>
<p> </p>
<h2 id="要準備什麼？"><a href="#要準備什麼？" class="headerlink" title="要準備什麼？"></a>要準備什麼？</h2><p>你或許會說：「架網站好麻煩，我又不會寫程式，也找不到朋友可以幫忙…」，如果你這樣認為，那麼這篇文章就是為你而整理的，但要請你準備一些東西：  </p>
<ol>
<li> 每年燃燒三千塊左右的新台幣：這是租用網站主機與購買一個只屬於你自己的網址費用，坊間有更便宜甚至是免費的主機可以使用，但免費的多半有廣告，會讓你的網站看起來很不專業，而且萬一網站連不上會求助無門，最保險的方法還是找專業的主機公司放你的網站，而且一天只要 10 塊錢。</li>
<li> 願意花時間經營的心：所有告訴你 10 分鐘可以變成行銷大師、網站專家、爆紅部落客等等的課程，一定都是騙人的，有自己的網址與網站，僅僅是一個開始，一步步累積自己的文章與內容，不害怕去學習了解新的事物，這才是你的品牌能長久經營的唯一之道。(本篇號稱 7 分鐘又 18 秒 24 完成是經小弟按碼錶實測出來的結果XD)</li>
</ol>
<p> </p>
<h2 id="步驟有那些？"><a href="#步驟有那些？" class="headerlink" title="步驟有那些？"></a>步驟有那些？</h2><p>我們第一步會去台灣專業的網站主機商租用網址與主機，本篇介紹的是採用<a href="https://twnoc.net/whmcs/aff.php?aff=1092">遠振主機</a>，因小弟接案多年，幾乎都是使用這一家公司做為網站主機，好處是客服速度快，有問題寫信給他們都能在一小時內回覆，網站連線的品質也還算穩定，費用算同業中便宜的，壞處就是他們的客服不會跟你聊天XD   第二步就是安裝 Wordpress，為什麼要用 Wordpress 的可以參考這ㄧ篇—&gt;<a href="https://oberonlai.blog/wordrpess-for-business/">WordPress部落格是中小企業架公司網站的解決方案？</a>，大概了解我們即將要做的事情後，接下來就正式開始吧！  </p>
<h2 id="買網址與租主機"><a href="#買網址與租主機" class="headerlink" title="買網址與租主機"></a>買網址與租主機</h2><p>先想好你的網站要叫什麼名字，然後租一個與你網站相關的英文網址，相信我，這是最最困難的一步，通常會想個三天三夜也不為過，而且明天起來可能會全部翻盤，所以這個步驟沒有包含在 7 分鐘又 18 秒 24 之內，如果你想到了絕佳的名字，恭喜你！但接下來最機車的是你要看有沒有人跟你想到一樣的網址名稱…   如果你想好了話，來到這一頁–&gt;<a href="https://host.com.tw/%E5%8F%B0%E7%81%A3%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9FSSD%E4%B8%8D%E9%99%90%E7%B6%B2%E5%9F%9F">https://host.com.tw/台灣虛擬主機SSD不限網域</a>，點選下面圖示的地方。 <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-1.jpg" alt="install-wordpress-in-7-minutes-1">   然後會來到這個畫面，把你想到的網址輸入進去看看。 <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-22.jpg"> <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-3.jpg" alt="install-wordpress-in-7-minutes-3"> <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-4.jpg" alt="install-wordpress-in-7-minutes-4">   命名網址的 know how 多到可以寫成好幾本書，但我們不是要成為買網址的專家，只要記住一個重點，網址簡單好記就可以了。接下來會來到這個畫面： <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-5.jpg" alt="install-wordpress-in-7-minutes-5">   接下來要輸入你的基本資料，欄位有點多，但為了我們的建國大業，只好忍耐一下… <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-7.jpg" alt="install-wordpress-in-7-minutes-7"> <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-8.jpg" alt="install-wordpress-in-7-minutes-8">   完成訂購之後，會出現如下的畫面請你付款，或是用手機驗證取得 15 天的試用期，當然有試用就一定要試的啊～ <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-9.jpg" alt="install-wordpress-in-7-minutes-9">   點擊後會另一個視窗，請你輸入手機號碼。 <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-10.jpg" alt="install-wordpress-in-7-minutes-10"> <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-11-2.jpg"> <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-12-2.jpg">   申請網址與租用主機的流程在此告一段落，也許日後遠振的申請流程會有所變動，但基本的操作邏輯大概就是這樣，真心希望他們可以把表單欄位、電話驗證的流程再更精簡一點。  </p>
<h2 id="安裝-Wordpress"><a href="#安裝-Wordpress" class="headerlink" title="安裝 Wordpress"></a>安裝 Wordpress</h2><p>接下來的重頭戲就是安裝 Wordpress，在成功申請主機後，你的 email 應該會收到催你繳錢的通知跟主機開通信，開啟主機開通信找到裡面一個 cPanel 的連結，然後使用裡面的帳號密碼進行登入： <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-13-2.jpg"> <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-14.jpg" alt="install-wordpress-in-7-minutes-14">   登入 cPanel 後會看到一堆功能，cPanel 的功能簡單說就是控制網站主機的後臺，裡面有許多的設定可以去調整，但我們只要安裝 Wordpress 即可，找到最下面的 Web Applications，然後點選瀏覽更多 <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-15.jpg" alt="install-wordpress-in-7-minutes-15"> <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-16-1024x627.jpg" alt="install-wordpress-in-7-minutes-16"> <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-17-1024x660.jpg" alt="install-wordpress-in-7-minutes-17">   點選安裝後會看到許多的欄位，那些預設值都不用理它，日後等我們更熟悉之後都可以回來調整，唯一我們需要注意的欄位就是管理員用戶名管理員密碼，這是我們網站後臺的登入資訊，取一個你自己好記但別人不容易猜到的，或是用它預設的帳密進行登入，但記得寫下來！ <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-18-1024x685.jpg" alt="install-wordpress-in-7-minutes-18"> <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-19-1024x530.jpg" alt="install-wordpress-in-7-minutes-19">   接下來就會開始進行 Wordpress 的安裝，網路上有很多教學文說明如何新增資料庫、設定資料庫帳密，在這邊的做法完全不需要，因為 cPanel 全部把它自動化了。 <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-20-1024x528.jpg" alt="install-wordpress-in-7-minutes-20"> <img src="https://oberonlai.blog/wp-content/uploads/2015/07/install-wordpress-in-7-minutes-21-1024x497.jpg" alt="install-wordpress-in-7-minutes-21">   做到上面的畫面之後，就大功告成了，點選第一個網址，就會進入你自己的網站了，而這所有的內容，你都可以從管理後臺網址進行更新，恭喜你踏出第一步了！    </p>
<h2 id="接下來該作什麼？"><a href="#接下來該作什麼？" class="headerlink" title="接下來該作什麼？"></a>接下來該作什麼？</h2><p>當然是來學習怎麼使用 Wordpress 的後臺囉，網路上有許多熱心人士整理出 <a href="https://www.google.com.tw/search?client=safari&rls=en&q=wordpress+%E5%BE%8C%E8%87%BA%E6%95%99%E5%AD%B8&ie=UTF-8&oe=UTF-8&gfe_rd=cr&ei=8witVbefH4PRmQXHz5iYDA">Wordpress 的使用教學</a>，或是書店裡也有一些關於 Wordpress 的書籍，最基礎的概念就是會常常更新的內容，就使用文章來製作，像最新消息、部落格、個人動態就適合，如果是不常更新的資訊，就可以使用頁面來製作，像是關於我們、聯絡我們等等。   其次可以大玩特玩的就是外掛，因為有太多人在使用 Wordpress，所以各種千奇百怪的工具幾乎都能免費下載。從常用的<a href="https://wordpress.org/plugins/contact-form-7/">聯絡表單</a>、<a href="https://wordpress.org/plugins/slider-image/screenshots/">輪播廣告</a>、<a href="https://wordpress.org/plugins/custom-facebook-feed/screenshots/">整合Facebook小工具</a>、<a href="https://wordpress.org/plugins/nextend-facebook-connect/">FB登入</a>，到一些服務的整合，像是<a href="https://wordpress.org/plugins/gallery-voting/screenshots/">想辦個線上投票</a>、<a href="https://wordpress.org/plugins/google-analytics-for-wordpress/">加入 Google Analytics</a>、<a href="https://wordpress.org/plugins/wordpress-backup-to-dropbox/">把網站備份到 Dropbox</a>、<a href="https://wordpress.org/plugins/woocommerce/">購物車</a>等等，當然，有免費的也會有付費的，主要是差在付費的外掛功能更多，有興趣的朋友可以參考<a href="http://codecanyon.net/category/wordpress?ref=oberonlai">這邊</a>，另外我們也整理過這兩支非常好用的外掛：<a href="https://oberonlai.blog/wordpress-royalslider/">RoyalSlider</a>、<a href="https://oberonlai.blog/wordpress-for-business-website-tool/">Visual Composer</a>。   在你外掛還玩不完的當下，另一個重點就是換網站的外觀，也就是俗稱的佈景主題，跟外掛一樣有，有<a href="https://wordpress.org/themes/browse/new/">免費的</a>跟<a href="https://oberonlai.blog/wordpress-also-can-do/">付費的</a>，差別一樣是後台設定的選項多寡，如果後臺可以設定的選項越多，就代表我們可以連一句程式碼都不用碰就能完成一個「看似專業」的網站了。  </p>
<h2 id="所以還有必要學程式嗎？"><a href="#所以還有必要學程式嗎？" class="headerlink" title="所以還有必要學程式嗎？"></a>所以還有必要學程式嗎？</h2><p>站在開發者的角度，當然是希望你能把 HTML、CSS、Javascript、PHP 學個精通，但我們架網站不是為了成為專業的網頁設計師，而是能把自己辛苦創造的內容累積起來，如果你非常重視這個網站，能請專業團隊協助設計當然是再好也不過，但也請不要因此誤會因為 Wordpress 已經架好，所以只要花幾千塊就能找到「專業人士」幫忙，無論是否有現成的架構、或是有免費的佈景主題可以套用，專業的團隊還是會就你的需求進行評估與客製化開發，這些都是時間的成本與經驗的價值。   當然，如果你覺得你的需求沒有很複雜，那就自己動手來吧，最基本的 HTML、CSS 不會很困難，搞定這兩個，你想要的版面設計就差不多能掌握八成了，坊間有超級多的書，花點時間用現成的佈景主題邊看邊改，很快就會有親手打造自己網站的成就感。  </p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在 Facebook 發達的年代，很多人都會覺得何必還需要網站，事實上 Facebook 就像個百貨公司，在裡面設櫃就是要遵循他們的遊戲規則，如果不開自己的店，當他們結束營業或改變規則時，就只能受他人控制。在網路上，除了自己網站以外的地方，其它地方就是通路，而 Facebook 就只是通路之一而已，所以要經營個人品牌，有自己的網站就如同開自己的店一樣。   一個品牌的成功不一定要有一個網站，但一個成功的品牌往往都有網路發言的影響力，而要發揮這樣的影響力，第一步就是從自己的網站開始。希望透過這篇簡單的分享可以幫助到想要經營自己品牌的朋友，有任何的問題大家一起交流吧！</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>iPhone6 產品網頁設計缺失</title>
    <url>/tw/iphone6-web-desgin/</url>
    <content><![CDATA[<p>每天忍受著誘惑，不看任何的小道消息或是流出來的產品照片，就是為了等到正式發表會有驚喜的感覺。雖然我不是那種會熬夜看發表會的蘋果迷，但我的習慣是隔一天早，從官網來了解新產品的優勢跟特色，學習 Apple 是如何透過網站的設計來販售產品。   另一方面， Apple 新產品的頁面往往會採用許多最新的呈現技術，也會帶起網路業界的一股設計風潮。   今早第一次打開 Apple 網站是使用 iPad2，赫然發現整個網站改版了，拿掉所有的陰影跟漸層，朝 iOS 系統的平面化風格看齊。   <a href="https://oberonlai.blog/wp-content/uploads/2014/09/apple-new-website.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2014/09/apple-new-website.jpg" alt="apple-new-website"></a></p>
<span id="more"></span>
<p>  但因為拿掉了陰影與漸層，上方的主導覽列辨識度有些下降，再加上多了 Watch 以及把購買拉進去，選單數量爆增到八顆，個人覺得購買、支援服務、搜尋可以另外整合成下拉選單或其它方式，讓產品選項優先跳出來，這樣在主導覽列上才會有層次，不會像現在這樣一片平平的感覺。   輪播廣告的部份是把感應區設為整個畫面，在點選左右箭頭切換的同時，萬一沒準確點到箭頭，或是不小心點到頁面空白處，很容易就誤擊直接進入產品頁，下方 bullet navgation 就有考慮到這個問題，按鈕的週圍都沒有設感應區，誤擊的情況較少發生。   另外還可以加強的地方是在 iPad 上瀏覽，可以支援手勢滑動切換圖片的功能，畢竟類似的效果已非常普遍，在平版裝置的使用上可以多多提升其操作便利性。   <a href="https://oberonlai.blog/wp-content/uploads/2014/09/iphone6-web-typo.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2014/09/iphone6-web-typo.jpg" alt="iphone6-web-typo"></a>   當我用 iPad 看到這頁時，發現到竟然有標題掉字跟內文字體過大且行距不足的情況，我就在想是不是因為沒考慮到 iPad 的相容性所以排版走位，當我換到 MAC 上使用 Safari 瀏覽，竟然也發生一樣的情況…   <a href="https://oberonlai.blog/wp-content/uploads/2014/09/iphone6-web-typo-2-v2.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2014/09/iphone6-web-typo-2-v2.jpg" alt="iphone6-web-typo-2-v2"></a>   同樣掉字的情況不說，解析度數字的字距也過於擁擠，看起來就像是 1334 x 1920，再加上產品圖過大與資訊過多，整個頁面傳達重點失焦，另外內文的連結範圍過大，很容易造成誤擊，許多人瀏覽網頁都有邊看邊選取文字的習慣。   <a href="https://oberonlai.blog/wp-content/uploads/2014/09/iphone6-web-typo-3.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2014/09/iphone6-web-typo-3.jpg" alt="iphone6-web-typo-3"></a>   一樣的又是掉字，以及右方規格區塊因容器寬度不足，導致 M8 掉落在第二排，另外產品圖跟文字說明無法出現在同一視窗中，瀏覽到一半會有一種圖文不連貫的違合感，就像是圖片與文字各自存在，互不相關。   <a href="https://oberonlai.blog/wp-content/uploads/2014/09/iphone6-web-button.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2014/09/iphone6-web-button.jpg" alt="iphone6-web-button"></a>   功能說明的部份，可以點選的地方不明顯，感覺一樣是內文說明，不知道原來是可以點選的按鈕。產品圖沒有置中，畫面失去平衡。   <a href="https://oberonlai.blog/wp-content/uploads/2014/09/iphone6-web-movie.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2014/09/iphone6-web-movie.jpg" alt="iphone6-web-movie"></a>   影片展示的部份，當點選畫面中播放圖示時，並無影片載入中的相關提示，尤其在較慢的網路環境，就會重覆點選播放按鈕，變成暫停播放影片，非常容易造成使用者混淆。   <a href="https://oberonlai.blog/wp-content/uploads/2014/09/iphone6-web-layout.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2014/09/iphone6-web-layout.jpg" alt="iphone6-web-layout"></a>   一樣的狀況，產品圖與說明文字無法同一個視窗中同時呈現，左右箭頭又沒置中&gt;&lt;   <a href="https://oberonlai.blog/wp-content/uploads/2014/09/apple-new-web-movie.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2014/09/apple-new-web-movie.jpg" alt="apple-new-web-movie"></a>   點選觀看影片，會展開燈箱效果進行影片播放，當播放完時關閉影片後，會發現頁面停留在影片清單頁而非原本在瀏覽的產品頁面，一時之間會搞不清楚自己在什麼地方。   以上提到的問題，在歐美語系的 Apple 官網比較沒那麼嚴重，標題與內文字體的比例、行距的設定，都比台灣官網來得合理且適合閱讀，不知這次改版是否乃為了因應 Bigger than bigger 的訴求，所以把字體都變超大XDD，但還是希望基本的掉字問題可以解決，比較符合 Apple 的品牌形象。  </p>
<p>2014/09/11 更新：</p>
<p>感謝 Even Wu 大大的精闢解說加無償 debug，找到字體嵌入錯誤的問題所在</p>
<p>-–&gt;<a href="https://www.facebook.com/evenwu/posts/10152287978620718">https://www.facebook.com/evenwu/posts/10152287978620718</a>，整個修改後的結果感覺才是正常的 Apple。</p>
]]></content>
      <categories>
        <category>使用者介面</category>
      </categories>
  </entry>
  <entry>
    <title>文件關鍵字的擴展及延伸</title>
    <url>/tw/keywords-extending/</url>
    <content><![CDATA[<p>1.網站資料文件已從如何歸類文件進化到如何描述文件。 2.舉凡可形容檔案特性之描述文件，均可稱作為中介資料，此等描述乃協助系統進行資料判別，譬如meta、title、alt等等描述性資料。 3.控制詞彙是指用來描述文件的整體系統，底下包含了同義詞環圈、權威檔案、分類體系、彙編詞彙。 3-1.同義詞環圈是指某個主題的平等同義字，譬如iphone4、iphone 4、apple、預購、破解、appstore等關鍵字，這些關鍵字中並無階層關係，它們的地位平等，一般網站的搜尋結果應該要可以提供同義詞環圈的搜尋結果，但為避免出現太多不相干結果，有兩種做法，其一是搜尋結果包含同義字環圈，再提供精確搜尋選項，另一種相反之，藉此避免搜尋結果太過模糊或是太少。 3-2.權威檔案指的是同義詞環圈中包含優先術語，譬如優先術語是iphone4，其變異述語就可能是iphone 4，這樣的發展架構是從某個特定的關鍵字進行延伸，但在實務中，非常難以決定何者為優先術語，因而會從關鍵字的流量來進行操作。 3-3.分類體系是把權威檔案中的優先術語進行階層分類，像是3C&gt;智慧型手機&gt;ipone4，使用者可以透過分類後的搜尋結果，來得到更多更大範圍的資訊。 3-4.彙編詞彙是結合上述所有關係的模式，再多增加對於優先術語的聯想，它包含階層式的較寬術語以及較窄術語，也有對等式的變異術語，更多了對於優先術語的聯想，譬如優先術語是iphone4，較寬術語就是智慧型手機，較窄術語是iphone4 32G，變異術語就是iphone 4、iphone，聯想就是上班族、富士康。而較窄術語又可以變成優先術語，再發展一套自己的彙編詞彙。彙編詞彙做越多，對於使用者的需求將能包含的更完整，進而提供更完善的使用者經驗。 4.彙編詞彙依照完整度分為三種類型：典型式、索引式、搜尋式，最佳情況為典型式，所有的變異術語均可對照到優先術語，並可提供索引、相關詞結果、分類階層結果，提供最豐富的搜尋體驗；索引式是在無法進行同義詞搜尋結果，而僅能建立優先術語索引的情況下，所產生的方式；而搜尋式可能是因網站內容由用戶產生而無法建立索引的情況下所產生的方式。 5.階層關系有三種子類型：分類子分類、整體不可分割、實例實體，如果是以汽車為比喻的話，分類子分類就是汽車的類型，像是休旅車、跑車、卡車；而整體不可分割的部份，就是引擎、輪胎等汽車零件，對於汽車而言，它是不能單獨拆開販售的，汽車有這些零件才是一台完整的汽車：實例實體就是真正的汽車品牌，像是toyota的wish。 6.聯想關係也有許多子類別：研究領域及研究對象-心臟病學 心藏；程序及其媒介-白蟻防治 農藥；概念及其屬性-毒物 毒性；行動及行動之產物-飲食 消化不良；因果關系-節慶 除夕夜。 控制詞彙整體對內部而言，可以是溝通時的參考依據，以及對於文件的系統化管理工具，對外部而言，則是關鍵字行銷的策略地圖，無論功能為何，它提供了一種思考模式，讓人或系統更能了解對於文件的認識，但在實務經驗中，甚少對於該領域的知識，目前僅有同義詞環圈較為普遍，此作法乃是使用tag的方式來幫文章下標籤，如能提供更完整的彙編詞彙，將有助於使用者經驗。</p>
]]></content>
      <categories>
        <category>網站企劃</category>
      </categories>
  </entry>
  <entry>
    <title>Laravel mix 加入 svg sprite 並設計成 vue component</title>
    <url>/tw/laravel-mix-svg-sprite-for-vue/</url>
    <content><![CDATA[<p>Svg Sprite 可以非常方便的合併多張向量圖，讓 request 能少一些，之前純 Vue 的環境下是採用 svg-sprite-loader，無奈丟進 Laravel 裡面不理我，只好找別的解決方案。</p>
<p>測試之後找到它—&gt;svg-spritemap-webpack-plugin，個人覺得他比 svg-sprite-loader 優秀，優秀的點在於它不會一開始就把 svg sprite 塞進來，只有在需要他時再呼叫就好，</p>
<p>以下紀錄設定方法：</p>
<p>一、先移除舊版的 svg-spritemap-webpack-plugin，再裝新的，新版本要在 laravle-mix 4.0 以上才可以用</p>
<pre class="line-numbers language-none"><code class="language-none">npm uninstall svg-spritemap-webpack-plugin
npm install svg-spritemap-webpack-plugin --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>二、在 webpack.mix.js 宣告來源以及編譯後的路徑</p>
<pre class="line-numbers language-none"><code class="language-none">const SVGSpritemapPlugin &#x3D; require(&#39;svg-spritemap-webpack-plugin’); &#x2F;&#x2F; 引入
const svgSourcePath &#x3D; &#39;resources&#x2F;js&#x2F;icons&#x2F;svg&#x2F;*.svg&#39;;
const svgSpriteDestination&#x3D; &#39;&#x2F;svg&#x2F;sprite.svg’; &#x2F;&#x2F; 不用加 public<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>三、webpackConfig 加入 plugin 相關設定</p>
<pre class="line-numbers language-none"><code class="language-none">.webpackConfig(&#123;
    plugins: [
        new SVGSpritemapPlugin(
            svgSourcePath, &#123;
                output: &#123;
                    filename: svgSpriteDestination,
                    svgo: true
                &#125;,
            &#125;
        )
    ]
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>四、新增 vue icon 元件，在 components 裡面新增一個資料夾 icon，裡面新增 index.vue，元件內容如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;
  &lt;svg :width&#x3D;&quot;width&quot; :height&#x3D;&quot;height&quot;&gt;
    &lt;use :xlink:href&#x3D;&quot;iconName&quot;&#x2F;&gt;
  &lt;&#x2F;svg&gt;
&lt;&#x2F;template&gt;

&lt;script&gt;
export default &#123;
  name: &#39;Icon&#39;,

  props: &#123;
    type: &#123;
      default: &#39;sad&#39;
    &#125;,

    width: &#123;
      default: 50
    &#125;,

    height: &#123;
      default: 50
    &#125;
  &#125;,

  computed: &#123;
    iconName () &#123;
      return &#39;&#x2F;svg&#x2F;sprite.svg#sprite-&#39; + this.$props.type
    &#125;
  &#125;
&#125;
&lt;&#x2F;script&gt;

&lt;style scoped&gt;
svg &#123;
  fill: currentColor;
  overflow: hidden;
&#125;
&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>五、在 icons 的資料夾底下也就是 svg 檔案的地方，新增一個 index.js，內容如下：</p>
<pre class="line-numbers language-none"><code class="language-none">import Vue from &#39;vue&#39;
import Icon from ‘..&#x2F;components&#x2F;icon&#39;
Vue.component(&#39;icon&#39;, Icon)
&#x2F;&#x2F; requires and returns all modules that match
const requireAll &#x3D; requireContext &#x3D;&gt; requireContext.keys().map(requireContext)
&#x2F;&#x2F; import all svg
const req &#x3D; require.context(&#39;.&#x2F;svg&#39;, true, &#x2F;\.svg$&#x2F;)
requireAll(req)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>六、在 app.js 引入 icons/index，把所有的 svg 一次引入到各個頁面，省去每次重複引入的麻煩</p>
<pre class="line-numbers language-none"><code class="language-none">import &#39;.&#x2F;icons&#x2F;index’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>七、在 vue 裡面就可以使用:</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;icon type&#x3D;“svgfilename” width&#x3D;‘xxx’ height&#x3D;‘xxx’&gt;&lt;&#x2F;icon&gt; 了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>LINE 的分享功能可以在電腦上運作啦！</title>
    <url>/tw/line-%E7%9A%84%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD%E5%8F%AF%E4%BB%A5%E5%9C%A8%E9%9B%BB%E8%85%A6%E4%B8%8A%E9%81%8B%E4%BD%9C%E5%95%A6%EF%BC%81/</url>
    <content><![CDATA[<p>  來幫 WordPress 文章加入 LINE 的社群外掛吧，把程式碼複製後即貼即用！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1492704347503231” display=”yes” title=”TElORSDnmoTliIbkuqvlip/og73lj6/ku6XlnKjpm7vohabkuIrpgYvkvZzllabvvIE=” body=”5L6G5bmrIFdvcmRQcmVzcyDmlofnq6DliqDlhaUgTElORSDnmoTnpL7nvqTlpJbmjpvlkKfvvIzmiornqIvlvI/norzopIfoo73lvozljbPosrzljbPnlKjvvIE=” pid=”3148”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>Luckymary 美妝保養品 網站設計</title>
    <url>/tw/luckymary/</url>
    <content><![CDATA[<ul>
<li>  專案名稱 : Luckymary 美妝保養品 網站設計</li>
<li>  設計項目：網站企劃、關鍵字規劃、網頁設計、購物車系統、會員系統</li>
<li>  設計理念 : 本產品消費族群集中在熟齡女性階層，品牌理念為希望能帶給熟齡女性美麗與自信，因而在視覺的呈現上，以光影線條的運用，建構產品印象，並搭配保養品成份的詳細說明，為該產品賦予專業與信任感，進而獲得消費者認同；全站搭配購物車功能，協助消費者即時進行線上購物。</li>
</ul>
<p>網站首頁-運用產品形象圖，確立網站屬性與主題，並傳達品牌形象訴求 <img src="https://oberonlai.blog/wp-content/uploads/2012/05/lm01.jpg" title="網站首頁-運用產品形象圖，確立網站屬性與主題，並傳達品牌形象訴求"> 網站內頁-透過醫師形象，加強產品專業度與信任感 <img src="https://oberonlai.blog/wp-content/uploads/2012/05/lm02.jpg" title="網站內頁-透過醫師形象，加強產品專業度與信任感"> 網站內頁-運用代言人結合產品形象 <img src="https://oberonlai.blog/wp-content/uploads/2012/05/lm03.jpg" title="網站內頁-運用代言人結合產品形象"> 互動功能-透過互動小測驗協助消費者做膚質調查，並導引至適合之產品介紹頁面 <img src="https://oberonlai.blog/wp-content/uploads/2012/05/lm04.jpg" title="互動功能-透過互動小測驗協助消費者做膚質調查，並導引至適合之產品介紹頁面"> 網站連結 : <a href="http://www.luckymary.com.tw/">http://www.luckymary.com.tw</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Media with FTP 外掛開發</title>
    <url>/tw/media-with-ftp/</url>
    <content><![CDATA[<p>第一次練習開發 WordPress 外掛，心得紀錄如下：</p>
<h1 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h1><ol>
<li> 提交 github 修改</li>
<li> 整合 cmb2 到 plugin</li>
<li> 開後台設定欄位</li>
<li> 上架 <a href="http://wordpress.org/">wordpress.org</a> svn</li>
</ol>
<h2 id="如何修改別人-Repo-的流程"><a href="#如何修改別人-Repo-的流程" class="headerlink" title="如何修改別人 Repo 的流程"></a>如何修改別人 Repo 的流程</h2><p>先 fork 到自己的帳號，clone 到本機，remote 增加原始專案的 upstream，然後開分支處理，本機開發隨時 pull upstream，然後 push 到分支，完成後再開 pull request</p>
<pre class="line-numbers language-none"><code class="language-none">$ git clone myfork

$ git remote add upstream &lt;others repo&gt;

$ git checkout -b &lt;branch name&gt;

$ git commit -am &quot;message&quot;

$ git pull upstream &lt;branch name&gt;

$ git push origin &lt;branch name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="CMB2-的一些雷"><a href="#CMB2-的一些雷" class="headerlink" title="CMB2 的一些雷"></a>CMB2 的一些雷</h2><ul>
<li>  放在 theme or plugin 的資料夾直接引入if ( file_exists( dirname( <strong>FILE</strong>) . ‘/cmb2/init.php’ ) ) { require_once dirname( <strong>FILE</strong>) . ‘/cmb2/init.php’; } elseif ( file_exists( dirname( <strong>FILE</strong>) . ‘/CMB2/init.php’ ) ) { require_once dirname( <strong>FILE</strong>) . ‘/CMB2/init.php’; }</li>
<li>  取得 option page 的值使用 cmb2_get_option，至少要帶兩個參數 key 與 idecho cmb2_get_option(‘wfm_options’,’wfm_port’)</li>
</ul>
<p>cmb2 API → <a href="https://cmb2.io/api/index.html">https://cmb2.io/api/index.html</a></p>
<h2 id="本地化外掛流程"><a href="#本地化外掛流程" class="headerlink" title="本地化外掛流程"></a>本地化外掛流程</h2><ul>
<li>  主程式註解宣告的地方要有 Text domain 跟 Domain Path/* Plugin Name: Wp-ftp-media-library Plugin URI: <a href="http://wordpress.stackexchange.com/questions/74180/upload-images-to-remote-server">http://wordpress.stackexchange.com/questions/74180/upload-images-to-remote-server</a>Description: Let’s you upload images to ftp-server and remove the upload on the local machine. Version: 0.1 Author: Pontus Abrahamsson Author URI: <a href="http://pontusab.se/">http://pontusab.se</a>Text Domain: wp-ftp-media-library Domain Path: /languages */</li>
<li>  用 wp cli 建立 pot 檔，進到外掛目錄，跑下面這段 cli，在寫 __e 的時候第二個參數 text domain 不能用變數，要寫死才行，不然 wp cli 會爬不到需要翻譯的字串$ wp i18n make-pot . languages/my-plugin.pot</li>
<li>  mo 檔一定要跟 Text Domain 一樣，{text-domain}-{locale}.mo</li>
<li>  外掛主程式載入翻譯檔function wfm_load_text_domain() { load_plugin_textdomain( ‘wp-ftp-media-library’, false , basename( dirname( <strong>FILE</strong>) ) . ‘/languages’ ); } add_action(‘plugins_loaded’, ‘wfm_load_text_domain’);</li>
</ul>
<h2 id="FTP-刪除遠端圖片"><a href="#FTP-刪除遠端圖片" class="headerlink" title="FTP 刪除遠端圖片"></a>FTP 刪除遠端圖片</h2><ul>
<li>  使用 ftp_delete，使用流程一樣先 connect 再 login，然後利用 wp_get_attachment_url 取得原始圖路徑，再用 wp_get_attachment_metadata 取得縮圖路徑，hook 用 delete_attachment</li>
<li>  開發外掛時檢查變數值的小技巧，用 error_log 把變數印在 error.log 訊息裡面</li>
<li>  較大張的圖片會產生一張 wp_get_attachment_metadat 抓不到的縮圖圖片，</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">$file_year &#x3D; substr(wp_get_attachment_metadata($args)[&#39;file&#39;],0,8); $file_original &#x3D; str_replace($settings[&#39;cdn&#39;].&#39;&#x2F;&#39;,&quot;&quot;,wp_get_attachment_url($args)); $file_thumb &#x3D; $file_year.wp_get_attachment_metadata($args)[&#39;sizes&#39;][&#39;thumbnail&#39;][&#39;file&#39;]; $file_medium &#x3D; $file_year.wp_get_attachment_metadata($args)[&#39;sizes&#39;][&#39;medium&#39;][&#39;file&#39;]; $file_large &#x3D; $file_year.wp_get_attachment_metadata($args)[&#39;sizes&#39;][&#39;large&#39;][&#39;file&#39;]; $file_post &#x3D; $file_year.wp_get_attachment_metadata($args)[&#39;sizes&#39;][&#39;post-thumbnail&#39;][&#39;file&#39;]; error_log($file_year, 0); ftp_delete($connection,$file_original); ftp_delete($connection,$file_thumb); ftp_delete($connection,$file_medium); ftp_delete($connection,$file_large); ftp_delete($connection,$file_post); ftp_close($connection);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="外掛上架流程"><a href="#外掛上架流程" class="headerlink" title="外掛上架流程"></a>外掛上架流程</h2><ul>
<li>  外掛命名</li>
<li>  header comment</li>
<li>  text domain 命名</li>
<li>  readme.txt</li>
</ul>
<p><a href="https://blog.wpjam.com/article/listing-your-plugin-at-the-wordpressorg-plugin-directory/">如何发布插件到 WordPress 官方插件站</a></p>
<h2 id="Composer-安裝管理"><a href="#Composer-安裝管理" class="headerlink" title="Composer 安裝管理"></a>Composer 安裝管理</h2><ul>
<li>  使用 composer init 初始化</li>
<li>  composer install 安裝套件</li>
<li>  要引入別人寫的套件寫在 compser.json 裡面的 require 定義，然後 require_once vendor/autoload.php</li>
</ul>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>使用 Vuex 來控制燈箱效果狀態</title>
    <url>/tw/modal-popup-with-vuex/</url>
    <content><![CDATA[<p><img src="https://i2.wp.com/oberonlai.blog/wp-content/uploads/2019/02/Carbonize-2019-02-19-at-9.59.07-PM.png?fit=1024,807&ssl=1"></p>
<p>今天碰到一個難題，我把每一個燈箱的顯示視窗獨立成元件，我想要用 A 元件裡面的按鈕去觸發燈箱元件的顯示，然後再用燈箱元件裡面的關閉按鈕來隱藏它，這就牽涉到一些問題：</p>
<ol>
<li> 燈箱元件如果是 A 元件的子組件，我可以用 props 去傳值給燈箱，但問題在於關閉的時候必須要從燈箱元件去控制父元件的參數，似乎可以用 $emit 但感覺好像又行不通</li>
<li> 如果燈箱元件跟 A 元件並不是父子關係，props 就無用了</li>
<li> 我的燈箱元件不只一個，而且 B 燈箱裡面會有觸發 C 燈箱的按鈕</li>
</ol>
<p>好吧，事實上我心裡早就有逃不掉用 Vuex 的打算了，只是因為一直看不懂它，所以就能閃則閃，研究了一天後，大概只了解了三成，但也夠我解決問題了，剩下的部分就等有遇上再說吧。</p>
<p>我的目標流程是這樣：</p>
<ul>
<li>  一個主要模板 Layout.vue，用來引入燈箱 A、燈箱 B 以及 Header.vue</li>
<li>  Header.vue 裡面有按鈕，點擊後會觸發燈箱 A</li>
<li>  燈箱 A 裡面有按鈕，點擊後會關閉燈箱 A 並且開燈箱 B</li>
</ul>
<p>Vue 最大好處是中國人開發的，有很多中文資料，但他們的中文我真的有看沒有懂，雖然也有很多資料是繁體中文的整理，但大部分就是把官方文件繁體化，語意還是原本的簡中版本，所以還是看得霧煞煞。</p>
<p>經過一天的實驗以及碰壁後，總算釐清了一些關於 Vuex 的基本概念，以下是我自己理解的繁中白話文解釋：</p>
<ul>
<li>  Vuex 是把變數變成全域的元件，相較於寫在元件裡的 data 只能給元件自己用，Vuex 的變數是所有元件都能存取</li>
<li>  state 就等於元件裡面的 data，可以是物件</li>
<li>  mutation 是唯一能改變 state 的方法，元件不能直接修改 state，會噴錯</li>
<li>  modules 是可以把 state、mutations 這些 Vuex 的狀態變成物件，萬一有一堆東西要用 Vuex 來管理才不會超亂</li>
<li>  store.js 是引入 modules 的母檔案，而主要全站入口 app.js 會引入 store.js，所以所有的元件都能讀到 state 裡面的變數</li>
<li>  元件裡面是用 computed 來取得 state 值，因為我是用 v-model 來決定燈箱狀態，所以需要設 get 與 set function，不然會噴 Computed property “modalState” was assigned to but it has no setter 這個錯誤</li>
<li>  至於 actions、getters、namespace 那些還看不懂…</li>
</ul>
<p>接下來進行實作，首先是增加一個 module 叫做 modals.js，裡面是控制所有燈箱的顯示狀態布林值，以及修改狀態的 mutations，然後把 store.js 引入到全站入口 app.js，接著去 A 燈箱使用 computed 去讀取 state、使用 methods 去定義 mutations，最後在 header.vue 也加入 mutations 方法，讓相對應的按鈕 click 後觸發。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;** modals.js **&#x2F;
export const modals &#x3D; &#123;
  state: &#123;
    isModalaActive: false, &#x2F;&#x2F; Ａ燈箱狀態
    isModalbActive: false, &#x2F;&#x2F; B燈箱狀態
  &#125;,
  mutations: &#123;
    &#x2F;&#x2F; 切換登入彈跳視窗狀態
    modalAToggle ( state ) &#123;
      state.isModalAActive &#x3D; !state.isModalAActive &#x2F;&#x2F; 當 isModalAActive 為 false 時變成 true，反之為 true 時變成 false
    &#125;,
    &#x2F;&#x2F; 切換登入彈跳視窗狀態
    modalBToggle ( state ) &#123;
      state.isModalBActive &#x3D; !state.isModalBActive
      state.isModalAActive &#x3D; false &#x2F;&#x2F; 出現 B 燈箱時就要隱藏 A 燈箱
    &#125;,
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下來是把 modal.js 引入到 store.js</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;** store.js **&#x2F;

&#x2F;&#x2F; 給 IE11 用的 polyfill
require (&#39;es6-promise&#39;).polyfill()

import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;

Vue.use( Vuex )

&#x2F;&#x2F; 我的 modal.js 是放在 modules 資料夾底下
import &#123; modals &#125; from &#39;.&#x2F;modules&#x2F;modals.js&#39;

export default new Vuex.Store(&#123;
  &#x2F;&#x2F; 引入 modal.js
  modules: &#123;
    modals
  &#125;
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再把 store.js 引入到全站入口 app.js</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;** app.js **&#x2F;

&#x2F;&#x2F; 略...
import store from &quot;.&#x2F;store.js&quot;;

new Vue(&#123;
  router,
  store
&#125;).$mount(&#39;#app&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 A 燈箱元件加入 state 與 mutations，framework 我是用 uikit 的 vue 版本 <a href="https://vuikit.js.org/">vuikit</a>，原始版本用得很開心，但 vuikit 很多元件都沒整合，很多 UI 不是要自己刻就是要另外找套件，vk-modal 是它的燈箱元件，使用 :show.sync 去決定顯示與否。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;template lang&#x3D;&#39;pug&#39;&gt;
  div
    vk-modal.modal-small-width.modal-remove-padding(:show.sync&#x3D;&#39;modalState&#39;, center, stuck)
      vk-modal-close(@click&#x3D;&#39;modalAToggle&#39;)
      a.text-dark.link-underline(href&#x3D;&#39;#&#39; @click&#x3D;&#39;modalBToggle&#39;) 連到 B 燈箱的按鈕
&lt;&#x2F;template&gt;
&lt;script&gt;
export default &#123;
  computed: &#123;
    &#x2F;&#x2F; modalState 是儲存從 store 裡面拿到的 state 值，寫法是 this.$store.state.module名.變數名，這邊卡超久@@
    modalState: &#123;
      &#x2F;&#x2F; 沒有 set 會出錯，get 記得要有 return
      get()&#123;
        return this.$store.state.modals.isModalAActive
      &#125;,
      set()&#123;
        this.$store.state.modals.isModalAActive
      &#125;
    &#125;
  &#125;,
  methods: &#123;
    &#x2F;&#x2F; 註冊 mutations 事件，就可以給元件使用
    modalAToggle()&#123;
      this.$store.commit(&#39;modalAToggle&#39;);
    &#125;,
    modalBToggle()&#123;
      this.$store.commit(&#39;modalBToggle&#39;);
    &#125;,
  &#125;,
&#125;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最後是 Header.vue，幫它也加入 modalAToggle 的 methods，這邊不需要 computed，因為沒有要取得燈箱狀態的功能，只要有 mutations 可以改變它就好。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;template lang&#x3D;&#39;pug&#39;&gt;
  div
    a(href&#x3D;&#39;#&#39; @click&#x3D;&#39;modalAToggle&#39;) 要開啟 A 燈箱的按鈕
&lt;&#x2F;template&gt;
&lt;script&gt;
export default &#123;
  methods: &#123;
    modalAToggle()&#123;
      this.$store.commit(&#39;modalAToggle&#39;);
    &#125;,
  &#125;,
&#125;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>用 Vuex 就可以很有組織的完成這些需要參數傳來傳去的複雜問題，元件之間的溝通也容易了許多，相信再多用一陣子也逃不了要面對 actions 跟 getters 了啊啊啊～</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>娜普菈股份有限公司 網站管理系統建置</title>
    <url>/tw/napla/</url>
    <content><![CDATA[<ul>
<li>  專案名稱 : 娜普菈股份有限公司 網站管理系統建置</li>
<li>  設計項目 : 版面重製、導覽系統重製、網站管理系統建置</li>
<li>  設計理念 : 深耕於日本超過五十年之專業美髮產品品牌，來台跨國經營，提供多樣化產品資訊予美髮沙龍通路，加強與通路間之聯繫管道。</li>
</ul>
<p>網站首頁 <img src="https://oberonlai.blog/wp-content/uploads/2012/05/np01.jpg" title="網站首頁"> 網站內頁 <img src="https://oberonlai.blog/wp-content/uploads/2012/05/np02.jpg" title="網站內頁"> 網站內頁2 <img src="https://oberonlai.blog/wp-content/uploads/2012/05/np05.jpg" title="網站內頁2"> 網站管理系統 <img src="https://oberonlai.blog/wp-content/uploads/2012/05/np03.jpg" title="公司作品列表"> 網站連結 : <a href="http://www.napla.com.tw/">http://www.napla.com.tw/</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>電子商務網站金流方案比較</title>
    <url>/tw/onlinecreditcard/</url>
    <content><![CDATA[<p>從網路上蒐集了各類型線上刷卡的方案資訊，並說明其優缺點，以及相關成本比較。  </p>
<h3 id="交易方式一：線上刷卡-特約商店"><a href="#交易方式一：線上刷卡-特約商店" class="headerlink" title="交易方式一：線上刷卡-特約商店"></a>交易方式一：線上刷卡-特約商店</h3><p>申請資格</p>
<p>1.資本額登記 500萬元以上商家 2.須公司設立登記滿半年以上。 3.個人無法申辦</p>
<p>第一次開通費用</p>
<p>10000元 (一次費用)</p>
<p>固定費用</p>
<p>18800元 / 年</p>
<p>保證金</p>
<p>無</p>
<p>抽成費用</p>
<p>每筆成交金額2~3%</p>
<p>優點</p>
<p>1.發票上有自己公司的抬頭 2.款項是直接收到自己公司的帳戶裡</p>
<p>缺點</p>
<p>1.申請門檻較高 2.文件較繁瑣 3.如果銷售業績不好，固定費用容易虧本，適合有一定規模的店家</p>
<span id="more"></span>
<p> </p>
<h3 id="交易方式二：線上刷卡-代收代付"><a href="#交易方式二：線上刷卡-代收代付" class="headerlink" title="交易方式二：線上刷卡-代收代付"></a>交易方式二：線上刷卡-代收代付</h3><p>申請資格</p>
<p>1.資本額無限制 2.設立時間無限制。 3.個人無法申辦</p>
<p>第一次開通費用</p>
<p>無</p>
<p>固定費用</p>
<p>10500元 / 年</p>
<p>保證金</p>
<p>30000元（期滿可退還）</p>
<p>抽成費用</p>
<p>每筆成交金額2.8~3.5%</p>
<p>優點</p>
<p>1.申請門檻較低 2.產品種類限制較少</p>
<p>缺點</p>
<p>1.款項是先進金流公司的戶頭，依照金流公司的付款週期客戶才能拿到款項 2.發票上是金流公司的抬頭，看起來不專業 3.如果銷售業績不好，固定費用容易虧本，適合有一定規模的店家</p>
<p>   </p>
<h3 id="交易方式三：線上刷卡-PayPal"><a href="#交易方式三：線上刷卡-PayPal" class="headerlink" title="交易方式三：線上刷卡-PayPal"></a>交易方式三：線上刷卡-PayPal</h3><p>申請資格</p>
<p>有email帳號即可</p>
<p>第一次開通費用</p>
<p>無</p>
<p>固定費用</p>
<p>無</p>
<p>保證金</p>
<p>無</p>
<p>抽成費用</p>
<p>每筆抽成依交易金額比例不同 NT$0 ~ NT$99,000 =&gt; 3.9% + NT$10 NT$99,001 ~ NT$33,000 =&gt; 3.4% + NT$10 NT$330,001 ~ NT$3,300,000 =&gt; 3.2% + NT$10 NT$3,300,000 =&gt; 2.9% + NT$10 *提領至台灣的銀行：單筆新台幣 5,000 元以上免手續費，未滿新台幣 5,000 元手續費新台幣 35 元。 *超過5000元paypal免手續費但台灣的銀行會收取200~500元的手續費。</p>
<p>優點</p>
<p>1.完全不用設定費 2.沒有固定成本開銷 3.沒有paypal帳號的消費者也能線上刷卡</p>
<p>缺點</p>
<p>匯率風險</p>
<p> </p>
<h3 id="交易方式四：ezship超商取貨付款"><a href="#交易方式四：ezship超商取貨付款" class="headerlink" title="交易方式四：ezship超商取貨付款"></a>交易方式四：ezship超商取貨付款</h3><p>申請資格</p>
<p>申請人不需要有公司行號或營業登記， 只要是中華民國國民並且在銀行或郵局有開立存款帳戶者，就可以申請。</p>
<p>第一次開通費用</p>
<p>無</p>
<p>固定費用</p>
<p>1.帳戶維護費 1200元 / 年 2.物流公司送到便利商店的運費 每週代收筆數第 1 ~ 30 件：每筆運費為 46 元 每週代收筆數第 31 ~ 300 件：每筆運費為 43 元 每週代收筆數第 301 件 以上：每筆運費為 40 元 3.客戶寄送商品至物流公司運費（新北市新店區）</p>
<p>保證金</p>
<p>無</p>
<p>抽成費用</p>
<p>代收金額 * 1.5%，至今年底前優惠為代收金額 * 0.8%，不足 3元 依 3元 計算</p>
<p>優點</p>
<p>便利商店代收的款項，週週結算，並且自動將代收款項匯給客戶</p>
<p>缺點</p>
<p>代收金額上限為4,000元</p>
<p>   </p>
<h3 id="交易方式五：東拓物流公司超商配貨"><a href="#交易方式五：東拓物流公司超商配貨" class="headerlink" title="交易方式五：東拓物流公司超商配貨"></a>交易方式五：東拓物流公司超商配貨</h3><p>申請資格</p>
<p>無限制</p>
<p>第一次開通費用</p>
<p>選擇便利商店程式串接設定費 10000元</p>
<p>固定費用</p>
<p>客戶寄送商品至物流公司運費（新北市新店區）</p>
<p>保證金</p>
<p>無</p>
<p>抽成費用</p>
<p>每筆42元，隨便利商店調整而有異動，推薦全家，7-11價格較高</p>
<p>優點</p>
<p>7-11、全家、萊爾富、OK均有配送</p>
<p>缺點</p>
<p>超過4000塊高單價商品建議宅配</p>
<p>  Excel彙整 <a href="http://goo.gl/av1QdZ">http://goo.gl/av1QdZ</a>  </p>
<h4 id="資料來源："><a href="#資料來源：" class="headerlink" title="資料來源："></a>資料來源：</h4><p>金流服務比較表：<a href="https://neticrm.tw/resources/255">https://neticrm.tw/resources/255</a> 線上刷卡的特約商店與代收代付差異性：<a href="http://webok.tw/2010/09/credit-card-pay.html">http://webok.tw/2010/09/credit-card-pay.html</a> 只有商家才能收信用卡嗎？：<a href="http://goo.gl/HuxfMH">http://goo.gl/HuxfMH</a> 購物網站的金流：<a href="http://tw.knowledge.yahoo.com/question/question?qid=1607082005267">http://tw.knowledge.yahoo.com/question/question?qid=1607082005267</a> 金流公司服務：<a href="http://www.ecpay.com.tw/m_apply500.php">http://www.ecpay.com.tw/m_apply500.php</a></p>
]]></content>
      <categories>
        <category>網站企劃</category>
      </categories>
  </entry>
  <entry>
    <title>PageSpeed 分數列為 SEO 排序權重之一</title>
    <url>/tw/pagespeed-%E5%88%86%E6%95%B8%E5%88%97%E7%82%BA-seo-%E6%8E%92%E5%BA%8F%E6%AC%8A%E9%87%8D%E4%B9%8B%E4%B8%80/</url>
    <content><![CDATA[<p>  今早看到這篇文章說明 Page Speed 的分數與 Google 自然搜尋排名的關係，尤其是在行動裝置上，所以有可能的話還是盡量符合 Page Speed 的規範來取得高分，作者分享了五種方式來提優化網站：   1、啟用 AMP 2、使用 HTTP2 3、使用 PHP7 4、使用 CDN 或快取來增加連線速度 5、優先顯示與使用者主要操作有關的內容</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1403283073112026” display=”yes” title=”UGFnZVNwZWVkIOWIhuaVuOWIl+eCuiBTRU8g5o6S5bqP5qyK6YeN5LmL5LiA” body=”5LuK5pep55yL5Yiw6YCZ56+H5paH56ug6Kqq5piOIFBhZ2UgU3BlZWQg55qE5YiG5pW46IiHIEdvb2dsZSDoh6rnhLbmkJzlsIvmjpLlkI3nmoTpl5zkv4LvvIzlsKTlhbbmmK/lnKjooYzli5Xoo53nva7kuIrvvIzmiYDku6XmnInlj6/og73nmoToqbHpgoTmmK/nm6Hph4/nrKblkIggUGFnZSBTcGVlZCDnmoTopo/nr4Tkvoblj5blvpfpq5jliIbvvIzkvZzogIXliIbkuqvkuobkupTnqK7mlrnlvI/kvobmj5DlhKrljJbntrLnq5nvvJox44CB5ZWf55SoIEFNUDLjgIHkvb/nlKggSFRUUDIz44CB5L2/55SoIFBIUDc044CB5L2/55SoIENETiDmiJblv6vlj5bkvoblop7liqDpgKPnt5rpgJ/luqY144CB5YSq5YWI6aGv56S66IiH5L2/55So6ICF5Li76KaB5pON5L2c5pyJ6Zec55qE5YWn5a65” pid=”2929”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>Plesk 下找出大容量資料夾或檔案</title>
    <url>/tw/plesk-find-huge-file-or-folder/</url>
    <content><![CDATA[<p><img src="https://i2.wp.com/oberonlai.blog/wp-content/uploads/2019/02/Carbonize-2019-02-27-at-2.15.52-PM.png?fit=1024,429&ssl=1"></p>
<p>主機硬碟的空間超過一半了，沒足夠容量做整台主機的全量備份，只好手動找出是哪些大檔再吃硬碟，幾個關鍵容易肥大的資料夾先掃一掃。</p>
<p>第一個是 /tmp 資料夾，如果是用 Plesk 的備份套件來搬家的話，搬完後這邊都會有暫存檔，如果是大站的這邊很容易會爆肥，記得要清。使用指令來撈出檔案最大的前五筆，筆數可自行調整。</p>
<pre class="line-numbers language-none"><code class="language-none">du -ah &#x2F;tmp  sort -n -r  head -n 5 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第二是 /var/lib/psa/dumps/domain，這是 Plesk 每個 domain 的備份目錄，我習慣都是備份到 Dropbox 上面，所以本機不會留備份檔，但有時後 Dropbox 備份失敗，Plesk 就會把備份檔存在這個目錄，所以檢查這邊有沒有肥大的備份檔是第二個地方。</p>
<p>--max-depth 是要往下找到第幾層資料夾，以 plesk 的路徑來說是 /var/lib/psa/dumps/domains/<a href="http://www.aaa.bbb,domain/">www.aaa.bbb，domain</a> 裡面放的就是該網址的備份檔，所以 –max-depth 設為一就好。</p>
<pre class="line-numbers language-none"><code class="language-none">du -ah &#x2F;var&#x2F;lib&#x2F;psa&#x2F;dumps&#x2F;domains --max-depth&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第三是 /var/www/vhosts/，這就是網站的主要路徑，裡面放的是運行中的網站，底下第一層就是 domain，所以一樣撈出第一層就好。</p>
<pre class="line-numbers language-none"><code class="language-none">du -ah &#x2F;var&#x2F;www&#x2F;vhosts&#x2F; --max-depth&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>篩選出肥大的網站之後，再進去查看是哪些資料夾肥大，以 WordPress 來說正常肥大的是 wp-content/uploads，這邊放的是圖檔，所以網站經營久了，自然會肥大，只能考慮圖床或是其他方案。</p>
<p>可以砍的像是 snapshots 資料夾，這是在升級或更新 WordPress 前自動做的快照，以防有狀況時可以隨時還原，有固定備份的話這個資料夾的東西就可以砍了。</p>
<p>其他再檢查有沒有不需要的網站，或是為了搬家留下的壓縮檔，就只能一個一個檢查了，清完後空間還是不夠，就確認可以升級硬碟空間了。</p>
]]></content>
      <categories>
        <category>Host</category>
      </categories>
  </entry>
  <entry>
    <title>發出挑戰書！互動式益智問答產生器</title>
    <url>/tw/question-generator/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2017/11/question-generator.jpg"> 在製作網路行銷活動的時候，可以設計益智問答競賽並挑戰高分來發送獎勵，基本框架用 Goolge 表單或許可以完成，但要運用到計分機制還能客製作活動頁面可能就沒辦法了。Barndquiz 這套線上服務就是專門為這類型的活動所設計的。   <img src="https://oberonlai.blog/wp-content/uploads/2017/11/question-generator-2-1024x658.jpg">   它提供多套模版，分別可以製作計分賽、問卷調查、簡易問答等三種類型的互動方式，編輯畫面可以自行加入標題、文字、圖片，並且可以自由拖曳進行排版，另外還有多種答題選項，適合各種類型型的互動方式。產出的問答也完全支持手機版，很適合在社群網站中進行曝光。   <img src="https://oberonlai.blog/wp-content/uploads/2017/11/question-generator-3.jpg">   服務連結： <a href="https://www.brandquiz.io/">https://www.brandquiz.io/</a></p>
]]></content>
      <categories>
        <category>網路行銷</category>
      </categories>
  </entry>
  <entry>
    <title>Replace jQuery to Vanilla JavaScript</title>
    <url>/tw/replace-jquery-to-vanilla-javascript/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>響應式網頁設計 - 響應式選單設計模式</title>
    <url>/tw/responsivewebdesign-navigation/</url>
    <content><![CDATA[<p><a href="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-5.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-5.jpg" alt="responsiveNav-5"></a>   接續上週<a href="https://oberonlai.blog/responsivewebdesignforplanning/">響應式網頁設計主題</a>，本週將繼續探討在響應式網頁中導覽系統設計的模式，並分析其優缺點與適用情況，以快速應用於實際工作流程之中。  </p>
<h3 id="響應式選單設計的限制"><a href="#響應式選單設計的限制" class="headerlink" title="響應式選單設計的限制"></a>響應式選單設計的限制</h3><p>有別於桌上型螢幕的大尺寸，手機的顯示空間往往不到其二分之一，雖然可以透過互動的方式來操作選單，但越高的互動性意謂著更高的使用門檻，在行動裝置使用普及率高的環境下，很難保證每一位使用者都有能力來進行操作，因此保持越簡單、越直觀的選單，才能確保更高的可用性。   其次是高互動性往往需要更複雜的程式來執行，對於網路速度較慢的且硬體等級較低的行動裝置會有難以操作的風險，因此響應式選單設計不宜過度參考手機原生應用程式(APP)的導覽模式，仍應就網頁的架構下進行思考。</p>
<span id="more"></span>
<p> </p>
<h3 id="響應式選單的常見類型"><a href="#響應式選單的常見類型" class="headerlink" title="響應式選單的常見類型"></a>響應式選單的常見類型</h3><p>本文根據 Brad Frost 的文章 <a href="http://bradfrostweb.com/blog/web/responsive-nav-patterns">Responsive Navigation Patterns</a> 為基礎，並加入我們的實務經驗來說明各類型選單的優缺點與適用情況。以下類型為目前網站較常採用之設計模式: 1.頂部導覽 2.底部導覽 3.下拉選單 4.收合選單 5.浮動選單 6.移除選單  </p>
<h4 id="一-頂部導覽"><a href="#一-頂部導覽" class="headerlink" title="(一)頂部導覽"></a>(一)頂部導覽</h4><p>最單純的導覽形式，把選單直接置於頁面頂部，依照畫面寬度自動縮小選單文字，如選單數量超過螢幕寬度則自行換行。</p>
<p> <a href="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-1.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-1.jpg" alt="responsiveNav-1"></a> <a href="http://trentwalton.com/">http://trentwalton.com/</a></p>
<p>    優點 : 不需改變任何版面配置的形式，也不用寫 javascript 來設計互動效果，只需要設定均分每個選單的寬度百分比，就能依照螢幕寬度進行縮放，在使用上也較為直觀，不用進行任何點擊就能找到選單。   缺點 : 如果選單過多則內容容易被往下擠，導致無法在第一眼可視畫面中找到網頁內容；而在不同的裝置、瀏覽器中所採用的預設字體不同，在開發時針對特定裝置進行調整，但無法確保在所有裝置中都能維持希望的版面配置，譬如字體過大而造成選單字斷行；另外因為螢幕變小可點擊範圍也會因此縮小，對於手指較癡肥的使用者可能會造成誤擊選單。   適用情況 : 選單數量少、架構單純的網站，或是將功能導覽採用該模式設計，方便使用者一眼就能找到。  </p>
<h4 id="二-底部導覽"><a href="#二-底部導覽" class="headerlink" title="(二)底部導覽"></a>(二)底部導覽</h4><p>將選單移至頁面底部，而頂部可用錨點連結的方式將頁面帶往底部進行導覽。</p>
<p> <a href="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-2.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-2.jpg" alt="responsiveNav-2"></a> <a href="http://contentsmagazine.com/">http://contentsmagazine.com/</a></p>
<p>    優點 : 不需要使用 javasctipt ，並單純使用 css 即可進行調整，節省網站使用資源。   缺點 : 因為直接跳到頁面底部，會讓使用者對於頁面空間產生混淆，而且視覺效果很突兀，沒有美感。   適用情況 : 相對於頂部導覽的位置，在頁尾增加多層級的複雜選單較無空間上的限制，適合已有設計底部胖選單的網站，再加上選單在頁面底部，能讓使用者看完頁面內容後協助他們往下一個地方去，建議是不需要在頂部設計錨點連結，以避免使用者產生混淆，直接於頁尾中置入選單即可。  </p>
<h4 id="三-下拉選單"><a href="#三-下拉選單" class="headerlink" title="(三)下拉選單"></a>(三)下拉選單</h4><p>將原有選單轉換為表格輸入中的下拉選單，利用瀏覽器本身的表單組件進行導覽。</p>
<p> <a href="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-3.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-3.jpg" alt="responsiveNav-3"></a> <a href="http://viljamis.com/">http://viljamis.com/</a></p>
<p>    優點 : 非常節省顯示空間，是使用者易於辨認且熟悉的互動方式，行動裝置瀏覽器的內建下拉選單組件，讓使用者可以輕易完成任務。   缺點 : 需使用 javascript 來轉換，另外下拉選單是輸入表單資料所採用的元件，可能會造成使用上的混淆。   適用情況 : 可以運用在含有多階層的選單之中，但在可用 javascript 的環境之下，有其它更好及更易於辨識的作法來設計導覽系統。  </p>
<h4 id="四-收合選單"><a href="#四-收合選單" class="headerlink" title="(四)收合選單"></a>(四)收合選單</h4><p>運用 javascript 來呈現選單，各種不同的選單展開方式提升互動性與美觀度。</p>
<p><a href="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-4.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-4.jpg" alt="responsiveNav-4"></a> <a href="https://oberonlai.blog/">https://oberonlai.blog/</a></p>
<p>  優點 : 節省空間，且並不會讓畫面跳動而造成頁面瀏覽混淆，以及可以設計符合整體風格樣式，達成使用體驗一致性，實際製作上也很容易，可輕易達成豐富的互動性選單。   缺點 : 越豐富的呈現效果，依賴 javascript 的程度也越深，對於硬體效能不佳的行動裝置而言，會導致使用體驗降低。   適用情況 : 架構從簡單至稍微有規模的網站幾乎都能勝任，或是想提供更豐富使用體驗的網站都能採用此類型做法。  </p>
<h4 id="五-浮動選單"><a href="#五-浮動選單" class="headerlink" title="(五)浮動選單"></a>(五)浮動選單</h4><p>從APP延伸而來的選單設計方式，將選單覆蓋至螢幕三分之二的大比例。</p>
<p><a href="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-5.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-5.jpg" alt="responsiveNav-5"></a> <a href="http://mmenu.frebsite.nl/examples/responsive/index.html">http://mmenu.frebsite.nl/examples/responsive/index.html</a></p>
<p>優點 : 非常優雅的呈現方式，並且可以把選單層級一次展開，全部檢視所有項目，又能節省許多空間。   缺點 : 使用者可能會被內容與選單區塊所混淆，並且在不同解析度的裝置下無法確保能完整的呈現選單。   適用情況 : 適合有許多層級選單的中大型規模網站。  </p>
<h4 id="六-移除選單"><a href="#六-移除選單" class="headerlink" title="(六)移除選單"></a>(六)移除選單</h4><p>考量到行動裝置上不需要桌面版的導覽系統，僅留下所需之功能選單。</p>
<p> <a href="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-6.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-6.jpg" alt="responsiveNav-6"> http://www.authenticjobs.com/</a></p>
<p>    優點 : 沒有任何選單會佔使用者的螢幕空間。   缺點 : 容易讓使用者迷路。   適用情況 : 對於行動裝置使用者的目的性非常明確，不提供他們不需要的選單以降低干擾。  </p>
<h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>對於行動裝置使用者而言，短暫、快速、片段的使用特性，往往影響他們瀏覽網頁的行為模式，因此如何讓使用者快速找到內容，以及如何透過導覽系統協助他們，此乃響應式選單設計的目標，然而除了全域導覽外，亦可利用區域導覽吸引使用者瀏覽更多內容，或是併用各類型的模式，來設計更多樣化的使用體驗。</p>
]]></content>
      <categories>
        <category>使用者介面</category>
      </categories>
  </entry>
  <entry>
    <title>響應式網頁設計開發實戰 - 設計面</title>
    <url>/tw/responsivewebdesign-psddesign/</url>
    <content><![CDATA[<p>本週進入響應式網頁設計主題的第三篇，前兩篇請參考 <a href="https://oberonlai.blog/responsivewebdesign-navigation/" title="響應式網頁設計 – 響應式選單設計模式">響應式網頁設計 – 響應式選單設計模式</a> <a href="https://oberonlai.blog/responsivewebdesignforplanning/" title="https://oberonlai.blog/responsivewebdesignforplanning/">響應式網頁設計開發實戰 – 企劃面</a>   關於響應式網站的設計面，我想從設計師最常用的設計工具photoshop開始談起。  </p>
<h3 id="根本就沒有「網頁設計」軟體！？"><a href="#根本就沒有「網頁設計」軟體！？" class="headerlink" title="根本就沒有「網頁設計」軟體！？"></a>根本就沒有「網頁設計」軟體！？</h3><p>開發網站的成員之中，企劃人員常用的工具是word、PowerPoint，進階一點的還會用到網站原型繪製軟體，像<a href="http://blog.planism.com/archives/2008/06/05/1557/%E5%A5%BD%E7%89%A9%E6%8E%A8%E8%96%A6-%E7%95%AB-prototype-%E7%9A%84%E5%A5%BD%E5%B7%A5%E5%85%B7-axure-rp-pro" title="Axure rp">Axure rp</a>；而工程師會用notepad++、visual studio、或是最近非常火紅的<a href="http://goo.gl/0SFtmK" title="sublime text 2">sublime text2</a>，   至於設計師，多半用photoshop做圖像與版面的設計，縱使是習慣用向量創作的設計師，最終也是要將圖像點陣化，才能在網頁上順利呈現，然而這些再平常不過的慣用工具，在響應式網頁設計中會碰到許多麻煩，最主要的原因是photoshop為平面設計工具，網頁與平面看似相同，但卻有著本質上的巨大差異。 <a href="https://oberonlai.blog/wp-content/uploads/2013/08/011.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/08/011-1024x627.jpg" alt="01"></a></p>
<span id="more"></span>
<h4 id="1、文件尺寸"><a href="#1、文件尺寸" class="headerlink" title="1、文件尺寸"></a>1、文件尺寸</h4><p>在Photoshop中，當一份新檔案被建立時，它的尺寸就被固定了，在響應式網頁中，能隨行動裝置調整版面尺寸是主要特徵，在Photoshop中完全無法在這樣的環境下進行設計，因為它是給「固定尺寸」的平面設計而用。  </p>
<h4 id="2、文件解析度"><a href="#2、文件解析度" class="headerlink" title="2、文件解析度"></a>2、文件解析度</h4><p>承上，文件解析度也是在檔案新建時就被決定，但在行動裝置上，網路速度決定使用體驗，而影響的主因之一，就是圖像的解析度，在小螢幕的手機上瀏覽網頁不需要高解度的圖像來延緩下載速度。  </p>
<h4 id="3、文件互動性"><a href="#3、文件互動性" class="headerlink" title="3、文件互動性"></a>3、文件互動性</h4><p>平面作品完成後需要輸出，而網頁則是要能在螢幕上讓使用者以滑鼠進行互動，在Photoshop上無法即時呈現互動的元素，因為它是平面設計軟體。</p>
<p>上述的差異性，讓Photoshop不適合成為網頁設計的唯一工具，那該用什麼來做呢？平面設計最終的產出工具是印表機，而網頁設計最終的產出工具是…沒錯！就是瀏覽器。既然最終的成品會在瀏覽器上呈現，它又能符合文件在各種裝置下的情境，以及達成即時互動功能，沒有任何一套軟體比瀏覽器來得更適合了。   因此要完成這件事，網頁設計師一定要會html、css，這不是工程師的責任，而是身為一位設計師想把作品做到完美兒要了解印刷的知識一樣，是非常基本且必要的。  </p>
<h3 id="所以Photoshop再也不需要？"><a href="#所以Photoshop再也不需要？" class="headerlink" title="所以Photoshop再也不需要？"></a>所以Photoshop再也不需要？</h3><p>前面提過，Photoshop是作為平面設計的主要工具，而網站也是充滿平面圖像的成品，所以如何讓Photoshop跟瀏覽器更好的進行合作，是本篇文章接下來分享的重點：   <a href="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-4.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/08/responsiveNav-4.jpg" alt="responsiveNav-4"></a>  </p>
<h4 id="lt-一-gt-使用Photoshop設計網站主視覺"><a href="#lt-一-gt-使用Photoshop設計網站主視覺" class="headerlink" title="&lt;一&gt;使用Photoshop設計網站主視覺"></a>&lt;一&gt;使用Photoshop設計網站主視覺</h4><p>雖然有很多撰寫CSS的方便工具，但還是不可能比Photoshop直接在螢幕上畫出元素來得更方便，許多細節的感受，沒有在畫面上直接看到是很難做調整的，更不用說風格的營造，Photoshop絕對是最強大的圖像製作工具，所以還是可以跟以前一樣，開一個固定尺寸的文件來設計主視覺與介面細節，而這尺寸也是桌面版網站的支援程度(通常是用1024px)，接下來再考慮到小裝置的尺寸。  </p>
<h4 id="lt-二-gt-使用Photoshop決定起點和終點"><a href="#lt-二-gt-使用Photoshop決定起點和終點" class="headerlink" title="&lt;二&gt;使用Photoshop決定起點和終點"></a>&lt;二&gt;使用Photoshop決定起點和終點</h4><p>第一步設計的桌面版頁面，可以把它看做是響應式變化的終點，至於起點就是，就是預定支援的最小畫面，通常是手機螢幕。設計方法是把桌面版中的主要框架元素截取出來，然後放到新開啟的小尺寸固定文件中(通常是用320px)，並針對行動裝置設計不同的導覽模式，如果不知該如何設計的話，可以參考這篇文章—&gt;<a href="https://oberonlai.blog/responsivewebdesign-navigation/" title="響應式網頁設計 – 響應式選單設計模式">響應式網頁設計 – 響應式選單設計模式</a>   而先設計桌面版的好處就在這邊，所有設計好的視覺元素可以縮小後給手機版面使用，如果是針對iPhone的視網膜解析度也不用擔心圖片不夠大而需重新設計，所以在做設計稿時建議是以桌面版為優先。  </p>
<h4 id="lt-三-gt-使用瀏覽器決定路線"><a href="#lt-三-gt-使用瀏覽器決定路線" class="headerlink" title="&lt;三&gt;使用瀏覽器決定路線"></a>&lt;三&gt;使用瀏覽器決定路線</h4><p>完成手機與桌面版的設計稿後，就到了該跟Photoshop說再見的時候了，因為我們又用瀏覽器來設計網頁從小到大的版面樣式，這過程十分有趣，因為不用去考慮裝置的大小，只要去想在什麼狀況下那種使用行為最優先，然後根據內容去調整版面的配置方式，真正的用CSS去設計出適合的結果，以符合使用者的閱讀模式。而這部份會牽涉到大量的CSS與微量的Javascript，所以放在下一篇文章來繼續探討。  </p>
<h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>Photoshop無法完全滿足響應式網頁設計的需求，但圖像的創造還是必須仰賴它，至於牽涉到網頁的部份，還是在瀏覽器中進行設計最實際，這也是身為網頁設計師必須要學會Html、CSS的主要原因。</p>
]]></content>
      <categories>
        <category>使用者介面</category>
      </categories>
  </entry>
  <entry>
    <title>響應式網頁設計開發實戰 - 企劃面</title>
    <url>/tw/responsivewebdesignforplanning/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><img src="https://oberonlai.blog/wp-content/uploads/2013/08/6020288_m_m.jpg" alt="6020288_m_m"> <a href="https://oberonlai.blog/wp-content/uploads/2013/08/6020288_m_m.jpg"></a> 網站的物種演進</p>
<p>  距離本人上一篇文章已相隔許久，這陣子輸入的多卻輸出的少，很多知識沒經過整理就像媽媽的嘮叨一樣，左耳進右耳出；另一方面，太久沒寫文章都快忘了寫作的樂趣，而這樂趣的來源，就是希望能夠幫助到真正有需要的朋友，所以我強迫自己每週一定要生一篇文章出來，鼓勵自己往這目標邁進。   為何會想寫響應式網頁設計這個主題，因為發現雖然相關技術很多，但很少有一套系統化的整理，也因為該技術不斷的在演進，還沒有一套標準的設計流程，基於這個出發點，我把曾經規劃的設計經驗，寫出來與大家分享，當然一定會有許多不足的地方，或是其它更好的做法，但我希望自己只是一個起點，能幫助到想學習的朋友，也獲其它先進的寶貴經驗，而這也是我寫這系列文章的主要目的。   關於響應式網頁設計，我想分成三個主題來說明，分別是企劃、視覺設計與前端技術來討論。</p>
<span id="more"></span>
<p> </p>
<h3 id="lt-一-gt-何謂響應式網頁設計"><a href="#lt-一-gt-何謂響應式網頁設計" class="headerlink" title="&lt;一&gt;何謂響應式網頁設計"></a>&lt;一&gt;何謂響應式網頁設計</h3><p>響應式網頁設計英文全名為Responsive Web Design，借用維基百科的解釋：「響應式網頁設計是一種網頁設計的技術做法，該設計可使網站在多種瀏覽裝置（從桌面電腦顯示器到行動電話或其他行動產品裝置）上閱讀和導航，同時減少縮放、平移和捲動。」但就我自己的觀察，這項技術只反應出版面呈現的變化，卻少了適應裝置的特性與使用體驗。   響應式網頁設計不該只是以調整畫面為終極目標，它應該是一套整體的設計觀念融入在網站的開發流程之中，更活的彈性版面、更豐富的互動模式，甚至是在不同裝置上有著不同的使用目的，或是不同平臺的行銷訴求，這些都必須在開發前就要有完整的深入規劃，才能徹底發揮它的威力。  </p>
<h3 id="lt-二-gt-誰需要響應式網站"><a href="#lt-二-gt-誰需要響應式網站" class="headerlink" title="&lt;二&gt;誰需要響應式網站"></a>&lt;二&gt;誰需要響應式網站</h3><p>那些類型的網站會需要響應式的做法，可以根據以下條件來做評估： 1.網站性能：在台灣4G網路發展停滯與3G使用人口爆炸的環境下，手機上網的速度還無法與家中有線寬頻來相比，所以行動裝置上的內容不宜太過複雜，盡可能減輕手機瀏覽器的載入負擔。如果知道自己公司的網站常常有人用行動裝置來瀏覽，那就有必要實際檢測使用3G網路的網站性能，如果過慢的話可能就要考慮設計手機版網頁，或是採用響應式網站的規劃概念，來重新檢視網站的架構與程式的撰寫方式，來加快網站的載入速度，這部份在談技術面時會提到更多。 2.使用情境：如果你的網站在電腦上與在行動裝置上的使用目的不同，也可以透過響應式網站來處理不同的使用行為，譬如旅遊類型的網站在電腦版中是所有地區的資訊，但在手機上可能就只需要根據所在位置提供週邊景點資料。 3.內容排序：行動訴求（Call To Action）在電腦版是位於重要的明顯位置，但如用小尺寸螢幕可能會被擠到下方或是第一眼可視範圍之外，在該種情況下就能使用響應式技術來做內容調整。 4.時間成本：如果你對於在行動裝置上有明確的行銷策略藍圖，但卻沒有足夠的預算來針對所有裝置設計不同的網站，那麼響應式技術就會是很好的解決方案。 5.品牌形象：在競爭的產業之中，能提供越多的服務越能讓消費者產生記憶點，亦是創造與消費者之間的共通話題，在手機應用程式開發門檻較高的情況下，使用響應式技術較易切入，也能初步獲得行動市場的需求，以做為未來開發行動應用程式的參考依據。  </p>
<h3 id="lt-三-gt-如何規劃響應式網站"><a href="#lt-三-gt-如何規劃響應式網站" class="headerlink" title="&lt;三&gt;如何規劃響應式網站"></a>&lt;三&gt;如何規劃響應式網站</h3><p>現行的響應式網站多是從技術的角度切入，把電腦版網站轉成小版面，對工程師而言，光要能在裝置上正確顯示，就已經一個頭兩個大，能否真正滿足使用者需求還有待商確。建議可以從以下角度進行思考 1.目標使用者是誰 2.現行網站有那些內容 3.如何簡化現行網站內容 4.關鍵的行動訴求或訊息是什麼 5.次要的訊息是什麼 6.內容的層級 將上述問題釐清後，接下來就要逐一檢視頁面內容，相關格式可參考「<a href="http://goo.gl/fIZ0VN">內容清單</a>」，當我們知道有那些頁面後，就可以針對它們進行「<a href="http://goo.gl/fXQjNr">頁面摘要</a>」，頁面摘要紀錄了每一頁的結構和關鍵訊息，用來幫助在不同的解析度下如何決定頁面順序的參考依據。 其次要來決定支援的平臺與設備，平臺目前以iOS與Android為大宗，設備可以從各家手機品牌的銷售量下手，當然最好的方法是查看現行網站的行動裝置瀏覽數據，來決定要支援的範圍；最後則是考量到裝置的使用體驗，是否要設計不同的手勢來瀏覽內容，或是使用裝置內建的功能來加強互動，像是GPS或是水平儀等功能。  </p>
<h3 id="lt-四-gt-響應式網站的線框圖與互動原型"><a href="#lt-四-gt-響應式網站的線框圖與互動原型" class="headerlink" title="&lt;四&gt;響應式網站的線框圖與互動原型"></a>&lt;四&gt;響應式網站的線框圖與互動原型</h3><p>有了企劃的表格後，就可以透過線框圖來決定區塊配置。我試過最好的方法，就是離開電腦，拿起美工刀跟一堆紙，把草稿畫在裁切好手機大小的白紙上，或是到<a href="http://interfacesketch.tumblr.com/">這個網站</a>去列印目前主流裝置的尺寸，要那種機型幾吋螢幕都可以，然後放在手機保護套裡面，實際進行功能測試，以及檢視內容的編排是否容易達成頁面目標。   <a href="https://oberonlai.blog/wp-content/uploads/2013/08/02.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/08/02.jpg" alt="02"></a>   與規劃電腦版網站不同的地方是，要注意按鈕的尺寸並實際進行測試，另外也要一併思考裝置的互動方式，而不僅止於滑鼠事件而已，關於響應式線框圖的繪製工具，我尙未找到最好的解決辦法，所以還是選擇最常用的photoshop來繪製灰色區塊來示意版面配置，快速完成後輸出成圖檔放在手機上檢視，來確認區塊的比例還有按鈕的大小是否恰當，使用它的好處是在做視覺設計的時候就能沿用這份線框圖來掌握正確的尺寸，避免做出過小的按鈕或錯誤的版面比例。至於互動原型的部份我直接採用Fire App來快速打造，這部份在之後會討論到。  </p>
<h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>基本上在企劃的過程中，雖然與規劃一般網站差不多，但要能更週全的考慮到行動裝置的使用者會想以什麼方式來瀏覽我們的網站，把自己投射在使用情境中或是找朋友測試都是不錯的方法，下一篇將會針對視覺設計的部份來做探討，這部份是我覺得與一般網站設計差距最大的地方。</p>
]]></content>
      <categories>
        <category>網站企劃</category>
      </categories>
  </entry>
  <entry>
    <title>Scroll Progress Indicator Implement</title>
    <url>/tw/scroll-progress-indicator-implement/</url>
    <content><![CDATA[<pre class="line-numbers language-none"><code class="language-none">#scrollIndicatior(style&#x3D;&quot;height:6px;background-color:#ffe403;width:0;&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">window.onscroll &#x3D; function () &#123; scrollIndicatior() &#125;;

function scrollIndicatior() &#123;
  var winScroll &#x3D; document.body.scrollTop  document.documentElement.scrollTop;
  var height &#x3D; document.documentElement.scrollHeight - document.documentElement.clientHeight;
  var scrolled &#x3D; (winScroll &#x2F; height) * 100;
  vars.scrollIndicatior.style.width &#x3D; scrolled + &quot;%&quot;;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a href="https://www.w3schools.com/howto/howto_js_scroll_indicator.asp">https://www.w3schools.com/howto/howto_js_scroll_indicator.asp</a></p>
]]></content>
      <categories>
        <category>F2E</category>
      </categories>
  </entry>
  <entry>
    <title>原來我以為的看板根本不是看板...</title>
    <url>/tw/scrum-kanban/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2019/01/3fcaf236-ee60-4696-b695-f9da5fde112b-2628-0000035174261442_file.jpg"> 很久沒有用 Trello 了，因為最近的專案一直找不太到適合的軟體來統整各方面的需求，於是就想說回頭用看看 Trello 來進行整理，基本的 Todo、In Process、Done 這幾個欄位也大概知道要怎麼用，但隨著進行的項目越來越多，Todo、In Process 越拖越長，卻不見 Done 的增加，開始懷疑是不是自己能力不足所以工作都消化不完 Orz… 直到上拜天去圖書館尋寶，找到這本 Ruddy 大大的大作「精實開發與看板方法」，才驚覺自己完全根本不知道什麼叫「看板」，還以為 Trello 就是看板，還以為只要會拖動卡片就是看板，真是搞笑了啊啊啊～ 本書分為八個章節，從基本介紹到看板設計，再到團隊與個人如何運用看板方法，最後還提到如何以系統思考來預測專案很難預知的各種變數，最有感覺的地方是看板一日遊的解說，非常契合自己以往在團隊中的開發經驗，以下就書中精華進行重點式摘要：</p>
<h1 id="精實軟體開發七大原則："><a href="#精實軟體開發七大原則：" class="headerlink" title="精實軟體開發七大原則："></a>精實軟體開發七大原則：</h1><p>1、消除浪費 Eliminate waste：製造浪費的最大兇手是 Bug，只要保持程式碼的簡單可以避免 Bug，但現在軟體開發的環境越來越複雜，保持簡單不是一件容易的事，所以要可以真正的去了解程式碼，一知半解最容易造成 Bug。時程的預估都只是瞎猜，只有當專案開始時才能慢慢的掌握開發時間。 如何判斷浪費發生：</p>
<p>一、半成品 Work In Process (WIP) 太多，控制在越小越好。</p>
<p>二、額外過程：對專案不會產生價值的業務， 像是過多的行政文件整理。</p>
<p>三、多餘功能：減少非必要的程式撰寫，新功能意味著新 bug 的可能。</p>
<p>四、任務調換：多工 is evil，思路被打斷要重新進入很浪費時間。</p>
<p>五、等待：等客戶的回應是必然的等待。OS: 這種等待真的是非常討厭，最近非常有感，一個問卷的評分方式請客戶提供結果等上了兩個禮拜，重點是還跟初期的規劃邏輯完全不同，一來一往就消耗超多時間。</p>
<p>六、移動：簡單說就是卡關了要花多少時間去解。OS: 平常要做好給自己看的文件，尤其是開發環境的配置，卡在環境配置真的滿累人的。</p>
<p>七、缺陷：就是 Bug，能越早找到越好。OS: 要開始練習寫測試案例了，不然都只是自己盲目的瞎測，給夥伴測試時也才有測試方向。</p>
<p>2、增強學習 Amplify learning：卡關時能學到的東西最多，別一知半解的找到答案後貼上就沒事了，多了解一下是怎麼解決的，然後整理成文件，另外在有盈餘時間時進行重構是最高效的學習方式。 測試是最好的回饋，回饋要及時，寫完一段後就要進行測試，透過寫單元測試來核對程式碼的邏輯，最重要的是可以及早給客戶展示收集回饋，進而調整接下來的開發方向。 3、盡量延遲決策 Decide as late as possible：狀況還沒搞清楚的情況下就做決策，容易白做工而造成浪費，所以決策能拖就拖，拖到不做決策的成本高於做決策時， 就該做出決策了。 4、盡快交付 Deliver as fast as possible：別等到全部做完才給驗收，會讓驗收時間不夠， 進而影響到修改時間，及早交付以才能分清楚接下來工作項目的輕重緩急，看是要先修改客戶在意的項目，還是繼續開發其他功能。 5、授權團隊 Empower the team：在適當的規範下，讓團隊自己做出決策。 6、嵌入完整性 Build integrity in：接受需求變更是常態，透過持續的客戶回饋設計出理想中的系統，並保持架構的靈活。 7、著眼整體 See the whole：設定團隊開發目標避免拘泥於細節。</p>
<h1 id="什麼是看板方法？"><a href="#什麼是看板方法？" class="headerlink" title="什麼是看板方法？"></a>什麼是看板方法？</h1><p>看板方法是半成品的約束系統，白話說就是要限制目前手頭正在做的工作數量，要等手上做的東西完成後，才能去拿新的工作來做，透過限制半成品的數量來找到最有效率的開發準則。 看板方法的實行步驟：整理現行工作流程 &gt; 把流程視覺化放進看板 &gt; 限制每個流程的半成品數量 &gt; 管理工作流程 &gt; 讓規則明確 &gt; 落實回饋循環 &gt; 由協助改善 經實驗演進 設計看板牆的三個基本元素：</p>
<ol>
<li> 範圍(整個工作的流程)</li>
<li> 工作項目粒度(大工作還是小工作)</li>
<li> 工作項目狀態(已完成 or 未完成)</li>
</ol>
<p>看板核心要素：</p>
<ol>
<li> 要有 WIP 限制</li>
<li> 採用拉動系統，東西處理完後才能做新東西</li>
<li> 有設定緩衝區</li>
<li> 完成的項目先別刪，可以留著檢討完後再一次刪除</li>
<li> 專案還沒開始時被要求估算時間，回答請再多給我一點時間進行評估</li>
</ol>
<h1 id="如何使用個人看板？"><a href="#如何使用個人看板？" class="headerlink" title="如何使用個人看板？"></a>如何使用個人看板？</h1><p>先把手邊的工作進行視覺化，依照待進行工作、準備中、今日工作、等待中、正在進行的工作、完成的這幾個項目來進行分類，個人專案看板的部分包含：衝刺工作項目、預備(分析及文件製作)、開發進行中、開發已完成、測試、發佈，原本我使用 Trello 來進行設計，但發現他沒有辦法跨看板來進行統整。 書中提到要可以有總覽的檢視介面來查看所有專案的狀態，試了幾套線上的服務，發現到 <a href="https://ora.pm/">Ora</a> 這套服務功能比較齊全，且介面是我比較過最美的，但可惜的是他沒支援 WIP 的設定，看在他介面這麼優的前提下，只好自己想辦法弄了～ <img src="https://oberonlai.blog/wp-content/uploads/2019/01/ora1.jpg" alt="Ora1.jpg"> 上圖是我自己的個人看板，主要紀錄專案以外的事，中間上方可以快速切換看板，看板欄位的標題顏色都可以自己設定，會設成黑黃純粹是個人喜好XD。 第二欄準備中後面有個括弧 2，指的就是我給自己設定的 WIP，也就是說在準備中的工作事項不能超過兩個，有空位的時候才能從待進行工作拉入新的工作事項。同理，正在進行的工作的 WIP 也是設為 1，我的個人事務在一個衝刺時間內只做一項。 Ora 特別的地方在於說他的 List 有分為四種狀態：分別是 Frozen、Open、Review、Closed/Compledte，前兩者主要是控制這個 List 內的工作事項在 My Tasks 中是否可見，切換成 My Tasks 可以看到已被拉入 Open 的工作事項： <img src="https://oberonlai.blog/wp-content/uploads/2019/01/ora2.jpg" alt="Ora2.jpg"> 我在 MyLife 中把「看板方法讀書心得」拉入了準備中的這個 List，而這 List 的狀態是 Open，所以「看板方法讀書心得」的工作事項就會出現在 My Tasks 的 Inbox 裡面，最後我再從 Inbox 移動到要哪一天進行，這樣就能分配我今天、明天甚至是後天要做什麼。 專案的部分概念相同，理論上會有一個產品待辦項目，來紀錄這個專案需要開發的所有功能，把產品待辦項目拆解後就會進入衝刺工作項目，也就是在設定好的一個工作週期要來進行的任務，當中專案負責人會依據客戶需求來決定衝刺工作項目的開發順序， <img src="https://oberonlai.blog/wp-content/uploads/2019/01/ora3.jpg" alt="Ora3.jpg"> 同樣的，在預備跟開發-進行中的 List 後面也都有 (2) 的提示，代表這兩個階段只能接兩個工作事項，到了開發完成後後面還有一個 List 是測試，測試的內容就是要根據預備階段時整理好的測試案例來進行功能測試，沒問題後就可以 Demo 給客戶驗收。 驗收的結果有可能是需要修改，這時候就專案經理就要詢問客戶的意見，看是要先修改這個剛完成的項目還是繼續開發其他功能，藉此來決定接下來是哪個工作事項要進入預備階段。 <img src="https://oberonlai.blog/wp-content/uploads/2019/01/ora4.jpg" alt="Ora4.jpg"> Ora 還有許多功能，像是有開啟計時的話就會有上圖的報告，它也可以設定 Sprint Points，就可以在 Spring Review 那邊看到數據，但我還不太了解 Sprint 的理論與應用方法，日後再行補上。 可惜的是，Ora 沒有提供 WIP 的設定，所以也就沒有書中提到最重要的「累積流程圖 CFD」，這圖可以看出專案有沒有失控，尤其是接了太多根本做不完的需求，或是從中發現 WIP 的設定是否恰當，但以個人的專案來說，這套工具算是還夠用。 在預備階段的文件製作，作者提到需要製作系統文件以及測試案例的資料，看了很久一直不知道到底該怎麼撰寫，結果在書末的附錄就有完整的示範，然後又在 Google 的時候直接發現作者 Ruddy 大大的<a href="https://ruddyblog.wordpress.com/2016/07/16/%E9%9C%80%E6%B1%82%E8%AE%8A%E5%8C%96%E5%A4%AA%E9%81%8E%E9%A0%BB%E7%B9%81/">這篇文章</a>，裡面提到一個工具叫做 <a href="https://www.featuremap.co/">FeatureMap</a> 可以非常容易的做出 User Story Mapping 的展開圖，實在是非常方便，這次的專案就打算用它來練習撰寫測試案例。</p>
<h1 id="個人心得"><a href="#個人心得" class="headerlink" title="個人心得"></a>個人心得</h1><p>看完這本書之後，告訴自己希望可以做到以下這些事：</p>
<ol>
<li> 找到答案複製貼上，不明白為何這樣寫，也許會造成其他問題也不知道， 還是要搞懂，然後把不需要的 code 拿掉</li>
<li> 每個功能的流程要搞清楚，梳理出文件來確保沒有遺漏的狀態</li>
<li> 常用的功能流程就差不多，沒做過的功能要特別注意</li>
<li> 要學會寫文件交接給自己</li>
<li> 從新檢視自己寫的東西進行重構，才能學到越多</li>
<li> 做完一個工作事項再拉一個進來，就能看到目前累積的工作量</li>
<li> 需要做決策時用七大原則來檢視目前的狀況</li>
<li> 從既有流程進行小規模改善</li>
<li> 功能一寫完就進行測試，別等到全部做完後再回來修改， 這樣可以提升交付程式的品質</li>
<li> 工作事項要完成的前提是要經過測試</li>
</ol>
<p>感謝 Ruddy 大大的這本好書，接下來就是要進攻自動化測試喔喔喔～ 附上老師的部落格，裡面超有料—&gt;<a href="https://ruddyblog.wordpress.com/">https://ruddyblog.wordpress.com</a></p>
]]></content>
      <categories>
        <category>專案即生活</category>
      </categories>
      <tags>
        <tag>Kanban</tag>
        <tag>Scrum</tag>
      </tags>
  </entry>
  <entry>
    <title>銀世代企業網站設計</title>
    <url>/tw/silver-web/</url>
    <content><![CDATA[<ul>
<li>  專案名稱 : 銀世代企業網站設計</li>
<li>  設計項目：網站識別標誌設計、版面設計、圖像設計、導覽系統設計</li>
<li>  設計理念 : 網站使用對象為企業主之會員，因搭配企業目標而建置該網站，主要內容以提供熟齡族生活資訊與互動交流的平臺，在版面的設計上盡量以柔和的配色並輔以清晰的字體大小呈現，避免造成閱讀上的困擾，在圖像與字型的設計上，辯識度與美觀性兼備，藉此吸引使用者目光。</li>
</ul>
<p>網站首頁，以大幅的展示區塊傳達網站訊息 <img src="https://oberonlai.blog/wp-content/uploads/2011/10/silver01.jpg" title="網站首頁，以大幅的展示區塊傳達網站訊息"> 網站內頁一，以清晰的圖編排，增加文字的閱讀性 <img src="https://oberonlai.blog/wp-content/uploads/2011/10/sliver02.jpg" title="網站內頁一，以清晰的圖編排，增加文字的閱讀性"> 志工資訊，以圖示介面增加操作上的易用性 <img src="https://oberonlai.blog/wp-content/uploads/2011/10/sliver031.jpg" title="志工資訊，以圖示介面增加操作上的易用性"> 志工資訊列表 <img src="https://oberonlai.blog/wp-content/uploads/2011/10/sliver04.jpg" title="志工資訊列表"></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Starting to learn digital marketing</title>
    <url>/tw/starting-to-learn-digital-marketing/</url>
    <content><![CDATA[<p><a href="https://www.youtube.com/watch?v=DoLzQN1m7sU">https://www.youtube.com/watch?v=DoLzQN1m7sU</a></p>
<ol>
<li> Build your own site</li>
<li> Make keyword research and find the top result in Google Search to be a competitor.</li>
<li> Use ubersuggest to research competitor’s top page, keywords, backlinks and social share.</li>
<li> Promote your page to the backlinks site of competitor’s top page with email template below to get the referral traffic.</li>
</ol>
<p><img src="https://i2.wp.com/oberonlai.blog/wp-content/uploads/2020/02/CleanShot-2020-02-10-at-11.55.05@2x.jpg?fit=1024,509&ssl=1"></p>
<p>5. the same in social media with email template below</p>
<p><img src="https://i0.wp.com/oberonlai.blog/wp-content/uploads/2020/02/CleanShot-2020-02-10-at-11.57.04@2x.jpg?fit=1024,528&ssl=1"></p>
<p>6. Collet email with <a href="https://www.hellobar.com/">Hello Bar</a></p>
<p>7. Use push notifications in your own site <a href="https://subscribers.com/">Subscriber</a></p>
<p>8. Start selling something</p>
<p>9. Do A/B test with <a href="https://www.crazyegg.com/">Crazyeggs</a></p>
]]></content>
      <categories>
        <category>Marketing</category>
      </categories>
  </entry>
  <entry>
    <title>HPX Life 網路 X 投資 如何在成熟產業中創業 / 財報狗 參後感</title>
    <url>/tw/statementdog/</url>
    <content><![CDATA[<p><a href="https://oberonlai.blog/wp-content/uploads/2013/08/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2013-08-16-%E4%B8%8A%E5%8D%8812.24.13.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/08/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2013-08-16-%E4%B8%8A%E5%8D%8812.24.13.jpg" alt="財報狗"></a>   今天參加了hpx life的分享會，主題是如何在成熟產業中創業，主角是<a href="http://statementdog.com/">財報狗投資數據理財網站</a>，他們以簡化的圖表來呈現複雜的投資數據，讓使用者可以輕易了解整體趨勢表現。   與會前稍稍研究了一下他們的網站，跟一般的理財網站比起來，他們簡直就是股市界網站的一道清流，沒有眼花撩亂的圖表轟炸我的雙眼，也沒有一堆無關緊要的最新快訊，有的只是一條簡單的搜尋框，和明確的行動訴求。   隨意試著搜尋一家上市公司，映入眼簾的是清爽配色的易讀圖表，而且配色非常用，有根據色彩心理來設計，這是一般投資網站很少會做的事，而且要能做到這樣的呈現，勢必要篩選整理許多資料，在資訊爆炸的今天，要能整理出一套有系統的知識，才會產生價值，而財報狗做到了，他們現行有四萬多的會員，成立超過三年而且穩定成長。   如果我沒參加今天的分享會，我想我對財報狗的了解也就僅只於此。開始前以為是會聽到他們怎麼靠做用戶研究、使用者測試來改善網站介面，想不到卻是完全意外的超展開XD</p>
<span id="more"></span>
<p>  以上的部分照共同創辦人小鄭所言，是創業1.0的部分，真正精彩的在後面，原以為靠著篩選投資資訊就能吸引消費者的想法，受到市場的殘酷考驗，在飽受質疑這網站是否存活的下來時，他們卻發現另外一項商機。   小鄭有張簡報說的很好，不要教育你的客戶，除非你的客戶有需要被教育的需求，他們發現很多人，對於財務報表的專有名詞理解不多，所以他們從教育的市場切入，教導客戶如何看懂那些公司值不值得投資，運用<a href="http://statementdog.com/blog/">部落格</a>進行有價值的文章分享，以培養忠實會員的信任感。   另外讓我驚訝的地方是，他們對於投資理財網站服務產業的認識，就像跟自己的老爸老媽一樣熟，因為非常熟悉，讓他們有能力在成熟產業中找到一塊屬於自己的餅，他們不闖成長期產業的高度競爭風險，不去搶已成熟產業中的主力市場，只針對散戶的客群，提供最有價值的資訊，進而建立起信賴，我想這是再強的技術也很難辦到的事。   會後聽小鄭分享，他坦承他們的技術很容易模仿，但他們最寶貴，是長期培養出的信任關係。投資不一定是金融商品，也可以是一群志同道合的朋友。</p>
]]></content>
      <categories>
        <category>網站企劃</category>
      </categories>
  </entry>
  <entry>
    <title>Wordpress文章發表按鈕變成送交審查</title>
    <url>/tw/submit-for-review/</url>
    <content><![CDATA[<p>最近中了頭獎，當然不是大樂透，而是 wordpress 的離奇懸案。 話說前天有 FU 想寫些文章，大概打了兩大段準備先儲存為草稿時，發現存的時間異常的久，於是想說算了，先直接發表文章看看會不會比較快，結果看到「發表」按鈕變成「送交審查」讓我下巴掉了下來。 <a href="https://oberonlai.blog/wp-content/uploads/2013/11/04.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/11/04.jpg" alt="04"></a> 這網站的管理員只有我一個人，我也從未修改過發表文章的權限，正在狐疑怎麼會變成這種情況的時候，另外一個更驚人的現象發生了， <a href="https://oberonlai.blog/wp-content/uploads/2013/11/01.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/11/01.jpg" alt="01"></a> <a href="https://oberonlai.blog/wp-content/uploads/2013/11/02.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/11/02.jpg" alt="02"></a>   所有的文章、頁面、分類、標籤全都變成零，進去列表的時候也發現所有文章都不見了，急急忙忙跑去前臺看，發現網頁的載入速度異常遲緩，好不容易載入完後發現唯一值得慶幸的事情，就是所有頁面、文章都還在。   Google 了之後只發現有對岸同胞在百度上提了這個問題，但並未有任何解決辦法，搜尋了 wordpress support，發現到幾篇類似相同症狀的文章， 1.<a href="http://wordpress.org/support/topic/a-cause-of-the-submit-for-review-problem?replies=3">A cause of the “submit for review” problem</a> 2.<a href="http://wordpress.org/support/topic/submit-for-review-no-publish-button">Submit For Review —- No Publish button</a> 3.<a href="http://goo.gl/IDj5Qq">Solve a “Submit For Review” issue on WordPress</a>   我嘗試過的方法如下： 1.進入 phpmyadmin 修復資料庫 2.進入 phpmyadmin 修改 wp_usermeta 裡 wp_capabilities 的值 3.新增資料庫使用者帳密，修改 wp_config.php 的值 4.執行 ALTER TABLE some_table AUTO_INCREMENT=1000 5.匯出所有頁面文章，再重新匯入（經實驗在這種情況下匯出的檔案只有 2KB，內容是 Hello World…） 6.上 wordpress taiwan 正體中文粉絲團求救 7.趕快洗澡睡覺祈求隔天一切完好如初…   如果您的 wordpress 也碰到這個問題，想必您一定也很著急解決辦法是什麼，我的解決辦法很簡單，那就是…</p>
<span id="more"></span>
<p> </p>
<h2 id="一切重來吧！"><a href="#一切重來吧！" class="headerlink" title="一切重來吧！"></a>一切重來吧！</h2><p>  沒錯，我重裝了一套 wordpress，從備份恢復頁面、文章，經過一番功夫總算是回歸正軌，所以小弟事實上完全沒解決這個問題，也無從釐清這問題的狀況是如何發生的，這實在是令人非常氣餒的一件事，但還是在此留個紀錄，讓將來有遇到這問題的朋友有個參考方向，進而解決它。</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>網路技術 101</title>
    <url>/tw/tcp-ip-101/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2019/02/CleanShot-2019-02-16-at-16.48.42.png"></p>
<p>做了近十年的網站，每每遇到網路的問題總是靠著 Google 來的片斷資訊來矇混過關，心虛感長年揮之不去，所以一直想把這方面的基礎知識好好加強一下，但在想省書本錢的心態下，去圖書館能借到的這類書籍都是好久以前的古董，最後硬著頭皮 K 的結果也是消化不良。</p>
<p>某天去逛誠品看到這本「機器博士帶你輕鬆看懂網路技術」，覺得日本人製作的電腦理論書籍真的非常厲害，透過豐富的插圖以及具體的生活比喻，翻了之後好像有比較理解一些，當下就忍住沒買直到在圖書館看到後立馬把它借回家(疑?)</p>
<p>全書分為七個章節，核心主題圍繞在 TCP/IP 的四個階層來逐一說明，還有附帶網路安全以及加密機制的圖說，看完後不敢說全懂，但至少有一點基礎概念以及相關名詞的認識，要再回去 Google 又多了一些關鍵字可以用了XD</p>
<p>以下就書中重點進行摘錄：</p>
<p>網路簡單說就是電腦們採用相同的通訊協定進行溝通以及傳輸資料，依據不同的規模，可以分成以下幾種網路：</p>
<ul>
<li>  Local Area Network (LAN) 區域網路 - 家庭、小公司使用</li>
<li>  Wireless Local Area Network (WLAN) 無線區域網路</li>
<li>  Wide Area Network (WAN) 廣域網路 - 跨國的網路</li>
<li>  Personal Area Network (PAN) 個人區域網路</li>
<li>  Metropolitan Area Network (MAN) 都會區域網路</li>
</ul>
<p>TCP/IP 是網路傳輸協定的統稱，裡面包含了各種不同的協定，所謂的協定就是電腦跟電腦之間約定好的溝通方式，此外，所有要被傳送的資料都會被分割為封包進行傳輸，除了萬一斷線方便續傳外，還可以減小傳輸體積以利於運送。</p>
<p>TCP/IP 傳輸協定主要有四個層級，不管是接收端還是傳送端都必須經過這四個階段：</p>
<ol>
<li> 電腦將輸入的資料轉換為網路共同的處理形式</li>
<li> 思考用哪種方法傳輸資料</li>
<li> 將資料分割為封包並決定傳送路徑</li>
<li> 將封包轉為位元流 01 碼再透過線路傳送出去</li>
</ol>
<p>四個階段有不同的階層，分別為應用層、傳輸層、網際層、網路介面層。</p>
<h2 id="一、應用層-Application-Layer"><a href="#一、應用層-Application-Layer" class="headerlink" title="一、應用層 (Application Layer)"></a>一、應用層 (Application Layer)</h2><p>應用層負責接收應用程式所輸入的資料，不同的軟體有不同的協定，常見的有以下這幾種：</p>
<p><strong>HTTP 協定</strong>：瀏覽器所使用的，包含了 HTTP 請求以及 HTTP 回應，HTTP 請求只會傳送標頭封包不會傳檔案，標題裡面包含 client 端的資訊以及需要的檔案，HTTP 回應會回傳代碼來顯示狀態，以及傳送被請求的檔案。在造訪網站的過程中，每個檔案像是 js、css、或是圖片等資源在沒有快取的情況下，都要經過請求與回應的溝通過程。</p>
<p>當使用者輸入網址要瀏覽一個網站時，會有一個 DNS 伺服器來告訴瀏覽器這個網址對應到的是哪個 IP 位址，萬ㄧ DNS 伺服器不知道的話，會去詢問名稱伺服器 (Name Server) ，詢問的邏輯會先從根網域伺服器開始，然後從網址由右至左開始依序查詢是哪一個名稱伺服器所有。</p>
<p><strong>SMTP 協定</strong>：發信軟體與發信伺服器之間的協定，一般的發信流程為發信軟體 &gt; 發信人網域的 SMTP Server &gt; 中繼 Server-暫放信件的地方 &gt; 收信人網域的 POP server &gt; 收信軟體擷取新郵件</p>
<p><strong>POP 協定</strong>：收信軟體與收信伺服器之間的協定，一般的收信流程為收信軟體 &gt; 收信 POP server &gt; 驗證身份 &gt; 取出 mail 到收信軟體。</p>
<p>信件在傳送時，客戶端軟體使用 MIME 的 base64 編碼來傳送帶有中文主旨的郵件，收信軟體會再解碼還原成中文，以解決亂碼的問題，</p>
<p><strong>IMAP 協定</strong>：另外一種收信的協定，好處是相較於 POP 協定，信件會持續保留在 IMAP Server 上，可以用不同裝置取得郵件，如果是 POP 協定則是 A 裝置收了信件後，B 裝置就無法再擷取到信件。</p>
<p><strong>Telent 協定</strong>：可以從本機電腦連線遠端主機的協定，但因安全性較弱，現多採用 SSH 協定進行連線。</p>
<h2 id="二、傳輸層-Transport-Layer"><a href="#二、傳輸層-Transport-Layer" class="headerlink" title="二、傳輸層 (Transport Layer)"></a>二、傳輸層 (Transport Layer)</h2><p>傳輸層主要負責決定要用哪種方式進行資料傳輸，並使用 port 號讓傳送的資料可以送給正確的應用層軟體，此外也負責節點間的數據傳送，此層主要的協定有兩種，TCP 與 UDP 協定。</p>
<p><strong>TCP 協定</strong>：是屬於連線型的網路連線，主要特點為安全可靠，連線步驟有建立連線 &gt; 將資料拆成帶有流水號的 Segment(區段) 並依序傳輸 &gt; 關閉連線，每個被傳送的Segment 都帶有標頭，而標頭中有 Flag 來表示連線狀態，一共有六種：</p>
<ul>
<li>  URG (Urgent) - 緊急優先</li>
<li>  PSH (Push) - 傳送到上一層</li>
<li>  SYN (Synchronize) - 請求連線</li>
<li>  ACK (Acknowledgement) - 確認需求</li>
<li>  RST (Reset) - 中斷連線</li>
<li>  FIN - 結束連線</li>
</ul>
<p>TCP 協定非常可靠的原因是會進行三次握手連線，傳送方發出 Syn 請求連線 &gt; 接收方發出 Ack 確認可連線 &gt; 傳送方發出 Ack 確認接收方可接收，也就是說會確認雙方都有正確的回應的狀況下才會開始傳送。</p>
<p>這邊補充四次揮手斷線，傳送方發送 Fin 結束連線請求 &gt; 接收方發送 Ack 告訴傳送方等下，先確保資料已經傳完 &gt; 接收方發送 Fin 確定中止連線 &gt; 傳送方再次發送 Ack 告知接收方已收到中止連線確認，在接收方還沒收到 Ack 前都還可以繼續傳。</p>
<p>連線逾時的情況則出現在遲遲沒有收到接收方的 Ack，傳送方送完後沒收到 Ack 就會再送一次，傳送方重傳多次都失敗就會發出 RST 中斷連線而造成連線逾時。</p>
<p>為了加速 Segment 傳送，可設定 Window Size 來決定一次要傳多少資料，接收端可視自身的處理狀況來告知傳送方應該要用多大的 Window Size 來進行 Segement 傳送。</p>
<p><strong>UDP 協定</strong>：屬於非連線型的網路連線，也就是不管接收方有沒有回應，傳送方就開始進行傳送，也因為不用等對方回應，所以傳送速度快，但最大缺點是完全不知道接收方有沒有收到，UDP 協定適合用在影音串流或是語音通訊服務，不用確保封包完整到達，只要可以堪用就好。</p>
<h2 id="三、-網際層-Network-Layer"><a href="#三、-網際層-Network-Layer" class="headerlink" title="三、 網際層 (Network Layer)"></a>三、 網際層 (Network Layer)</h2><p>網際層主要負責決定封包要怎麼走，傳到哪個路由，另外切割封包也是在這一層，網際層最重要的就是 IP 協定。</p>
<p><strong>IP 協定</strong>：主要使用 IP address 來確認要傳送的對象，IP address 為 32 位元的二進制數字，每 8 位元為一組(Octet)，共有四組，分為前段的網路編號與後端的主機編號，並使用子網路遮罩來決定怎麼分網路編號還是主機編號。</p>
<p>假設子網路遮罩是 255.255.255.0，被遮住的前三組為網路編號，最後一組為主機編號，另外還可以使用 Prefix 表示法：192.168.0.1/24 代表前 24 個位元是網路編號( IPv4 一共有 32 個位元 )。</p>
<p><strong>ICMP 協定</strong>：輔助 IP 的協定，萬一封包無法傳送到接收端，會通知傳送端封包傳送失敗，另外還可以做為診斷網路問題的工具。</p>
<p><strong>ARP 協定</strong>：協助 IP 協定可以透過 IP 位址找到目標節點的 MAC 位址，其運作原理為傳送端節點使用廣播的方式送出 ARP 封包，裡面記錄了目標 IP，當目標 IP 節點收到該封包後，會再回傳帶有 MAC 位址的 ARP 回應封包給傳送端節點，如此就能正確的傳送。</p>
<p>路由在 OSI 的第三層所以又叫第三層交換器，負責封包指路、中繼封包的裝置，路由到路由間的移動叫做 HOP 跳躍數。</p>
<p>幫電腦指派 IP 的方法有兩種，由網管人員手動分派 IP，另外一種是使用 DHCP 協定，DHCP 協定可以動態指定 IP 位址，自動指派閒置的 IP 給要用的電腦。</p>
<p>至於新加入到網路內的電腦還沒有被分派到 IP，所以預設為 0.0.0.0，DHCP server 的 IP 為廣播位址 255.255.255.255，所以通常能用的 IP 位址數量要扣掉這兩組。</p>
<p>至於如何讓私有 IP 去連上公有 IP 則是透過 NAT (Network Address Translator) 技術去進行 IP 位址轉譯成為對外 IP，NAT 是一對一的，也就是同時間只能有一個私有 IP 去轉譯成公有 IP，而使用 NAPT (Network Address Port Translator) 則是用 Port 號去轉譯，所以可以達成多個私有 IP 對應到一個公有 IP。</p>
<p>管理公有 IP 的單位為 ICANN，由這組織將 IP 分到各大洲，所以台灣分配到亞太地區的 IP，台灣管理 IP 單位為 TWNIC，TWNIC 再分配給 ISP 業者，ISP 業者再用動態公用 IP 來進行調度。</p>
<p>但 IP 已經不夠用了，所以有 IPv6，一組有 16 位元，總共 8 組 128 位元，用冒號相隔每一組，並有三種省略規則：</p>
<ul>
<li>  每組數字的第一個 0 可以省略，像是「0DB8」可以省略為「DB8」</li>
<li>  若整組皆為 0，則以 0 表示，像是「0000」則為「0」</li>
<li>  為連續出現的0000可以省略成「::」，整組 IP 只能出現一次「::」來省略 0</li>
</ul>
<h2 id="四、網路介面層-Physical-Layer"><a href="#四、網路介面層-Physical-Layer" class="headerlink" title="四、網路介面層 (Physical Layer)"></a>四、網路介面層 (Physical Layer)</h2><p>網路介面層為整個網路傳輸的出入口，也就是將位元流轉換為訊號的形式來進行資料的傳輸或接收。主要分為兩種介面：</p>
<ul>
<li>  通訊介面 - 主要是指實體的網路纜線</li>
<li>  網路介面 - 主要是指可以插網路纜線的接頭</li>
</ul>
<p>透過通訊介面相連的兩台電腦，也必須要採用相同的規範的通訊協定才能進行資料傳輸與接收，目前主流的通訊協定是乙太網路規範。而彼此透過網路線相連的電腦就可以稱作資料鏈路 (Data Link)。</p>
<p>資料鏈路構成的基本條件是被連結的裝置必須要有網路卡，而構成資料鏈路的電腦被稱作為節點，資料鏈路常見的有四種類型：</p>
<ul>
<li>  匯流排狀 (Bus) 由一條主線分岔出支線來連結節點，優點是方便新增節點，缺點是主線掛掉全部節點就跟著 GG</li>
<li>  環狀 (Ring) 像圓環一樣一條主線連到每個節點，優點是速度快， 因為每個節點都在主線上，缺點是主線或是其中其中一個節點掛掉就全部 GG</li>
<li>  星狀 (Star) 中心點有路由器或是集線器來連到各節點，優點是可以靠中心裝置來控制各個節點，缺點是中心裝置不能壞</li>
<li>  網狀 (Net) 各節點都有線路彼此相連，壞了其中一條或是節點都還可以從另外一條路繞道</li>
</ul>
<p>對於同個資料鏈路內，會使用 ＭAC 位址也就是網卡編號來辨識節點，但要把封包傳送到網際網路的另一端，不會是只有傳送端與接收端一對一這麼單純，中間會經過非常多的路由器來進行封包傳送的中繼，</p>
<p>以生活中的例子來表示，如果要從台灣寄包裹到美國，寄件者要先寫好收件者的地址 (IP)，拿到郵局寄出後，中間可能會有集貨站 (路由器)，長途的話可能不只一個集貨站，寄到集貨站之間也需要集貨站的地址 (MAC)，最後才會到達收件者的手上。</p>
<p>在網路介面層傳送的封包叫做訊框 (Frame)，如果是使用匯流排狀、環狀這樣的連結方式，就常常會遇到傳送訊框打架的情況，所以現在多採用路由器或是交換器的裝置，讓每個節點都有獨立的線路來進行訊框的傳遞，以減少等待或是發生衝突的狀況。</p>
<p>常見的資料鏈結層中繼裝置：</p>
<ul>
<li>  中繼器 (Repeater) 讓訊號可以增加傳送距離，放大訊號，但如果是毀損的訊號也會造照樣被放大</li>
<li>  集線器 (Hub) 把單一訊號分配給多個節點，另有中繼集線器，除了分配還可以順便加強訊號</li>
<li>  橋接器 (Bridge) 又名第二層交換器，用來橋接兩組不同的資料鏈路，並且會判斷訊框是否有毀損來決定是否要傳送</li>
<li>  交換式集線器 (Switching Hub) 橋接器的一種，也兼具集線器的功能</li>
</ul>
<p>常見的資料鏈路規範有以下幾種：</p>
<ul>
<li>  乙太網路 (Ethernet) 目前的主流，依據不同的規格傳輸速率以及纜線長度都有所不同，其中雙絞線可以進行全雙工，也就是同一線路可以同時進行傳送和接收，而半雙工則是只能進行傳送或接收的其中一種工作</li>
<li>  無線區域網路 (Wireless LAN) 無線上網的通訊規範，家用路由器就是將兩種不同的通訊規範進行橋接，讓彼此互相連結</li>
<li>  光纖分散式資料介面 (FDDI) 使用光纖線或是雙絞線的環狀資料鏈路，採用雙環線路，其中一條斷了另一條還可以運作</li>
<li>  非同步傳輸模式 (ATM)</li>
<li>  藍芽 (Bluetooth)</li>
<li>  HDMI</li>
</ul>
<p>這本書一路這樣看下來，真心覺得網路十分神奇，用很多無法想像的方式連結著全世界，也稍微多了解了一點每天自己離不開的網路是如何運作的，期待下次 Debug 會順利一些啊啊啊～</p>
]]></content>
      <categories>
        <category>TCP/IP</category>
      </categories>
  </entry>
  <entry>
    <title>The Five Strategies to Grow Traffic by Neil Patel</title>
    <url>/tw/the-five-strategies-to-grow-traffic-by-neil-patel/</url>
    <content><![CDATA[<p><a href="https://www.youtube.com/watch?v=idpg3IyTU10&amp;feature=emb%5C_title">https://www.youtube.com/watch?v=idpg3IyTU10&amp;feature=emb\_title</a></p>
<p>There are five methods to grow website traffic in this video made by Neil Pated.</p>
<ol>
<li> Pillar page and content clusters</li>
<li> Keeping update the old post</li>
<li> Land and expand the content with extend keywords that user need it</li>
<li> Internationalize your website</li>
<li> Building amazing marketing tool on your website</li>
</ol>
<p>In recent weeks, I start to write a post about the coding of WordPress Theme develop. The great example he mentions is MOZ’s post “<a href="https://moz.com/beginners-guide-to-seo">The Beginner’s Guide to SEO</a>“. It uses the pillar page to gather all the articles about the topic and all these sub articles backlink to pillar page. The page rank top when search keyword “SEO”. I will copy this structure to my post.</p>
<p>About updating the old post, I know this method before, but I didn’t keep doing that because of lazy or whatever reasons. I think it should be a schedule to implement this strategy.</p>
<p>The expand keywords strategy he has taught in another movie, and I have been executed in another site. Maybe I will check the GA after 1 or 2 months later.</p>
<p>I am practicing to write in English. Although I have studied Español for two years, I can’t remember anything at all Orz…</p>
<p>I love to build the tool. That’s what I do now. CodeCanyon is a great place to find any paid WordPress plugin or any kinds of program to build some tools.</p>
<p><a href="https://codecanyon.net/">https://codecanyon.net</a></p>
]]></content>
      <categories>
        <category>SEO</category>
      </categories>
  </entry>
  <entry>
    <title>Themeforest 教學</title>
    <url>/tw/themeforest-how-to-buy-theme-and-plugin/</url>
    <content><![CDATA[<p>本篇文章介紹目前國外提供最多 wordpress 付費主題、外掛的資源網站 <a href="http://themeforest.net/?ref=oberonlai" title="wordpress themeforest">Themeforest</a>，說明相關付款方式以及商品使用權限，讓想購買付費主題的朋友有更清楚的中文說明。  </p>
<h2 id="lt-一-gt-如何付費購買？"><a href="#lt-一-gt-如何付費購買？" class="headerlink" title="&lt;一&gt;如何付費購買？"></a>&lt;一&gt;如何付費購買？</h2><p>目前 Themeforest 的付費方案主要分為兩種，第一種是採用儲值購買，第二種是直接購買。   <img src="https://oberonlai.blog/wp-content/uploads/2014/03/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2017-08-22-%E4%B8%8B%E5%8D%8812.14.45.png"></p>
<span id="more"></span>
<p>1.儲值購買 (Buy with Prepaid Credit)： 儲值購買需一次支付固定費用，它們的定價方式很巧妙，能夠儲值的金額往往都比商品本身貴出 5 塊美金，因此如果是要購買主題而儲值的話，金額會比較高，但如果你是設計師或是工程師，未來還會繼續購買其它商品，推薦是以儲值的方式較為划算，儲值金額如下：   <a href="https://oberonlai.blog/wp-content/uploads/2014/03/11.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2017-08-22-%E4%B8%8B%E5%8D%8812.14.52.png"></a>   2.直接購買 (Buy Now via Paypal)： 直接購買就不會有儲值金剩餘未花完的問題， 但要多付 2 塊美金的手續費，比較適合僅需一次性購買的朋友使用。   目前的付費方式僅限信用卡，申請 paypal 帳號會更方便付款。   <a href="https://oberonlai.blog/wp-content/uploads/2014/03/12.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2017-08-22-%E4%B8%8B%E5%8D%8812.15.00.png"></a>  </p>
<h2 id="lt-二-gt-商品使用權限"><a href="#lt-二-gt-商品使用權限" class="headerlink" title="&lt;二&gt;商品使用權限"></a>&lt;二&gt;商品使用權限</h2><p>Themeforest 所販售之主題、外掛商品，主要分為兩種使用權限： 1.一般使用 (Regular License)： 一般使用指的是所購買的商品，在修改過成為最終產品後 (End Products) 可以使用一次在自己的網站或是客戶的專案中，並不得重覆使用在其它網站中。你可以將商品做成多份最終產品進行免費分享，但不得以此營利。   2.延伸使用 (Extended License)： 同一般使用權限，僅限一次使用在自己的網站或是客戶的專案中，差別在於可將修改後的最終產品進行再販售，進行營利行為。   以上兩種使用權限需要注意的是，不管是一般還是延伸，都只能將商品使用在同一網域下，使用在其它地方都是不允許的，除非再次進行購買。   其它相關介紹文章可參考： <a href="https://oberonlai.blog/wordpress/how-to-buy-wordpress-theme" title="https://oberonlai.blog/wordpress/how-to-buy-wordpress-theme/#more-1182">WordPress主題選購指南</a> <a href="https://oberonlai.blog/wordpress/how-to-install-themeforest-theme/" title="WordPress主題購買後如何安裝成像展示的一樣？">WordPress主題購買後如何安裝成像展示的一樣？</a> <a href="https://oberonlai.blog/wordpress/wordrpess-for-business/" title="WordPress部落格是中小企業架公司網站的解決方案？">WordPress部落格是中小企業架公司網站的解決方案</a>？</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>themeforest</tag>
        <tag>worpdress theme</tag>
      </tags>
  </entry>
  <entry>
    <title>走進用戶體驗的世界 - 用戶體驗創新流程</title>
    <url>/tw/user-experience-course-innovation/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2017/04/IMG_0927-1024x768.jpg">   好久沒在拜六的早上去上課，而且還有十二堂，上的是跟自己的專業沒有直接關係、但卻是在軟體開發職涯中想逃也逃不了的議題：用戶體驗設計。   在每個專案時間都爆趕、資源超級有限的情況下，跟業主提到使用者研究以及用戶體驗設計，十個裡面有八個都說好好好這一定要做，真正在執行上都還是以業主的主觀想法為最終依據，久而久之，專注在完成被交辦的項目已成為首要任務，自然而然也與最後實際使用的用戶漸行漸遠。   回顧自己的軟體開發歷程，從平面設計、自由接案者，到現在的前端工程師，對於用戶體驗也僅止於書中的概念，對於能實際應用在專案上的機會可說是少之又少，恰巧某天看到這個用戶體驗的系列課程，從做用戶研究到體驗設計，都請到產學界的知名大大來進行授課，於是下定決心掏出荷包來好好重新面對這個課題，雖然還是不抱持著能現學現用，但至少讓自己能重新審視目前所在的位置，藉此能開啟新的視野或是發現新的機會。   第一堂課為台灣使用者經驗設計協會的理事唐玄輝教授，主要把這一系列十二堂的課程做一個總覽，首先從關於要「如何創新」這件事情切入，除了人的需求與科技技術外，還要能達成商業上的永續性，再好的創新沒有商業模式終究無法持久，這三者的交會點才是真正的創新。  </p>
<h2 id="一、創新需要的材料"><a href="#一、創新需要的材料" class="headerlink" title="一、創新需要的材料"></a>一、創新需要的材料</h2><p>創新這件事真的非常非常困難，除了需求、技術、商業模式外，每個環節也都要真正導入創新這個元素，製造生產、組織行為、人機互動也都要能做到創新，不然就很容易陷入傳統組織的思維。   設計思維是打造創新產業的利器，透過用戶研究、問題定義、創意發想、原型製作、原型測試、取得回饋、修正原型來重覆循環以找到真正能解決使用者問題的產品。不管從事什麼職業，只要能運用設計思考的方法，就是真正的設計師，設計思考，就是不斷的嘗試找到最好的方案。   跨領域人才合作也是創新的必備條件，創新就跟攀登喜馬拉雅山一樣，因為非常困難，所以一定要結合不同的人專長。團隊通常有兩種人，一種是怪物通才，另一種是 T 型人，在專業的垂直領域上鑽研很深，又有能與他人協同工作的水平能力，關鍵在於要保持對於其它領域的興趣。  </p>
<h2 id="二、產品製造-gt-用戶體驗-gt-服務設計間的層次提升"><a href="#二、產品製造-gt-用戶體驗-gt-服務設計間的層次提升" class="headerlink" title="二、產品製造 &gt; 用戶體驗 &gt; 服務設計間的層次提升"></a>二、產品製造 &gt; 用戶體驗 &gt; 服務設計間的層次提升</h2><p>在現在的產品設計層次中，唐教授用了 Nokia、Blackberry、Apple 來做比喻，Nokia 無疑是二十世紀最好的手機「產品」，但當競爭者變多時，企業必須除了功能外，提供更多的體驗給用戶，Blackberry 的實體鍵盤與安全性就成了商業人士不同的「用戶體驗」，但 Apple 的體驗卻更超出了產品體驗，而是在產品發表會、零售店、使用產品前中後，各個環節都顧慮到用戶的感受而發展出的「服務設計」。   用戶體驗與服務設計的差異點在於「體驗」的環節，後者不僅是使用產品時的體驗，而是去思考到消費者與產品接觸的每個歷程，以及產品使用前中後的情境，與產品相關的利害關系人也要一併考量。   唐教授舉 IDEO 公司的一個釣具品牌案例，該品牌想推廣兒童釣魚，但遲遲無法打進這個市場，IDEO 研究消費者對於釣具的使用歷程，發現關鍵出在販售釣具場域的情境改變，以往都由專業小賣店販售釣具，老闆對於釣魚知識十分了解，但大賣場興起後，小賣店倒的倒收的收，於是能服務釣具客戶的，不是賣場的工讀生，就是對釣具不熟悉的店員，結果不懂釣魚的家長，為了在小孩面前表現出當家長的尊嚴，索性放棄選購比較需要專業知識的釣魚活動，轉而購買籃球或是其它較為方便使用的運動器材，有了這個洞見之後，該釣具品牌推出兒童專用的釣具，不需任何專業知識也能輕易使用的產品。   另一個案例是無線熨斗，為了解決燙衣服被電線卡住的問題，廠商開始研發可以用在熨斗上面的電池，但當時的電池技術不發達，所以開發出來的電池又大又重，而且使用一下就會開始變燙，因而最後打算放棄這個構想，但在此時該企業做了使用者研究，發現到一個關鍵的因素，就是平常人們在燙衣服的時候，平均每燙三十秒會休息十秒，有了這個洞見，廠商就不需要開發高電量的電池，只要置放架附有充電器，每充十秒就可以使用三十秒的電池就能解決這個問題。  </p>
<h2 id="三、如何瞭解使用者"><a href="#三、如何瞭解使用者" class="headerlink" title="三、如何瞭解使用者"></a>三、如何瞭解使用者</h2><p>關鍵句：「我們如何可以幫助使用者做什麼事情」，問對問題是解決問題的根本，譬如家用物聯網的研究問題定義：我們如何可以幫助使用者解決生活節奏失序的問題。通常使用 Persona 來描述人的需求，研究分成設計初期的研究、社會的趨勢研究、個人與產品的關係、現有產品的競品分析。   熟年的健康產品目前還並非是非常競爭的市場，熟年是指 45 歲到需要人照顧之前這段期間，這個階段的人常常沒意識到自己的身體已經不如年輕時，去滿是年輕肌肉猛男的健身房感覺又被羞辱，針對這樣的族群可以發掘新的創新產品。  </p>
<h2 id="四、情境發想"><a href="#四、情境發想" class="headerlink" title="四、情境發想"></a>四、情境發想</h2><p>大部份的創新都是從情境著手的，從情境中去發想現有的用戶可能會遇到的問題。所有的科技研發要有清楚的使用情境： 1.康寧科技玻璃，最後成為 iPhone 的材料。 2.Philippe Starck 的外星人榨汁機怎麼弄就是不會進杯子、腳墊容易壞，它是增進關係用的產品，主要功能並非是榨果汁機。 3.高價不實用的產品不一定是自用的，而是送禮文化的一種體現。 4.wii 從個人遊戲變成家中人人都能玩，全家市場 科技驅動創新、市場驅動創新、設計驅動創新，三種創新都必需要和情境有關才能被拿來商業應用。  </p>
<h2 id="五、回憶錄大富翁案例分享"><a href="#五、回憶錄大富翁案例分享" class="headerlink" title="五、回憶錄大富翁案例分享"></a>五、回憶錄大富翁案例分享</h2><p><a href="https://www.youtube.com/watch?v=pTezuG-03ek">https://www.youtube.com/watch?v=pTezuG-03ek</a>   今天第一次看到這個產品，覺得實在是非常有意義，透過觸控介面與遊戲機制，讓長者們回憶自己年輕的記憶，也藉此訓練大腦的運用以避免失智症的發生。   聽老師在分享這產品的開發過程實在是十分精彩，從最初期的草稿、紙上操作，到結合四台 iPad、到換成一大臺的觸控螢幕，搭配給職能訓練師的管理介面，以及延伸到實體活動、刊物出版，請長者的子女們一起參加，在在實踐了設計思考與服務設計的理念，看著每個介面細節的調整以及對於使用者意見的琢磨，感受的出來這個產品真的是開發者投入百分百參與其中，也重新燃起自己對於熟齡產業的熱情。   雖然最後尚未找到成熟的商業模式，但相信這樣的服務設計流程，已經為未來有志投入熟齡產業的朋友立下一個典範。  </p>
<h2 id="個人心得"><a href="#個人心得" class="headerlink" title="個人心得"></a>個人心得</h2><p>1.唐老師把十二堂系列課程做了非常好的破題，也點出了服務設計的趨勢以及應用產業的未來，非常期待接下來的實務課程，能學到關於更多服務設計的實作方法，當然也更希望能引進自己的工作流程之中，做出產品的差異化服務。 2.椅子有夠好坐，坐了兩小時屁股完全不會痛。 3.現場沒有提供無線網路有點困擾，用手機分享到沒電，下堂要記得帶充電線。  </p>
<p><strong><a href="//www.slideshare.net/drhhtang/ss-74727172" title="用戶體驗基礎課程">用戶體驗基礎課程</a></strong> from <strong><a href="//www.slideshare.net/drhhtang">Chinese Consumer Center</a></strong></p>
]]></content>
      <categories>
        <category>用戶體驗</category>
      </categories>
  </entry>
  <entry>
    <title>【 工具 】Mac 限定 WordPress 本機開發環境 Valet + ValetPress</title>
    <url>/tw/valetpress-setup/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自從在 2018 年 WordCamp Taipei 分享使用 <a href="https://2018.taipei.wordcamp.org/files/2018/10/how-to-use-the-docker-for-the-wordpress-localhost-environment-compressed.pdf">Docker + Kusanagi</a> 來搭建 WordPress 本機開發環境之後，我的小不點 MBP 硬碟就被 Docker 的 images 跟 volume 給塞爆了， 這才知道時間一久 Docker 超吃容量@@</p>
<p>後來就全部改用 <a href="https://localwp.com/">Local</a> ( Localhost by Flywheel )，用了幾個月不管是安裝還是效能上都很滿意，但某天發現硬碟又要爆了，就用 CleanMyMac 把一些大檔砍一砍，不砍還好，一砍發現我用 Local 開的站全都 GG…</p>
<p>追查下才發現我誤砍了 Local 要用的 VM，仔細看每個站都有獨立的 PHP、Nginx、MySql，所以 VM 超肥，只能乖乖的把已經做的差不多的案子先移掉，只留下正在進行中的 VM。</p>
<span id="more"></span>
<h2 id="什麼是-Valet？"><a href="#什麼是-Valet？" class="headerlink" title="什麼是 Valet？"></a>什麼是 Valet？</h2><p><img src="https://oberonlai.blog/wp-content/uploads/2020/02/xka1Yj-1024x576.jpg"></p>
<p>Valet 的中文是男僕，讓我想到黑執事這部漫畫，然後又是真人版崩壞…</p>
<p>在 2019 年底聽到這一集 <a href="https://yourwebsiteengineer.com/475-2020-version-apps-i-use-daily/">Podcast</a> ( 很不錯的 WordPress Podcast，大推！)，Dustin Hartzler 分享了他的 WordPress 開發環境是一套叫做 <a href="https://github.com/weprovide/valet-plus">Valet</a> <a href="https://github.com/weprovide/valet-plus">Plus</a> 的工具，Valet 是 PHP 框架 Laravel 推薦的 Mac 開發環境，很好的整合了 Nginx / PHP / MySql，然後重點是下面這句：</p>
<blockquote>
<p>In other words, a blazing fast Laravel development environment that uses roughly 7 MB of RAM. </p>
</blockquote>
<p>對記憶體&amp;硬碟小資族的我來說眼睛立馬為之一亮，它利用已經裝在 Mac 裡面的東西來生出本機網站來，所以再也不用像 Docker 或是 Local 一樣，只要一套 Nginx / PHP / MySql 就可以搞定，這超級省空間啊！</p>
<p>雖然這樣就無法針對不同站提供不同的環境，但如果真的要特別的環境就用 Local 開也是可以的，另外一個好處是他是用 <a href="https://en.wikipedia.org/wiki/Dnsmasq">DnsMasq</a> 來管理做網址對應，就不用 Host 檔在那邊改半天，</p>
<p>綜合上述理由， Valet 立馬成為我躍躍欲試的開發環境！</p>
<h2 id="Valet、Valet-Plus、ValetPress、ValetXXX"><a href="#Valet、Valet-Plus、ValetPress、ValetXXX" class="headerlink" title="Valet、Valet Plus、ValetPress、ValetXXX"></a>Valet、Valet Plus、ValetPress、ValetXXX</h2><p>最後一個是我亂掰的XD，研究下去發現有很多不同版本的 Valet，後來找到這一篇：<a href="http://aaronrutley.com/install-wordpress-in-under-5-seconds-with-valetpress/">Install WordPress locally in under 5 seconds with ValetPress</a>，號稱五秒就可以完成安裝一個新的 WordPress 網站，</p>
<blockquote>
<p>vp empty to create a empty WP site with the 2016 theme (4.7 seconds)<br>vp create to create a WP site from your starter git repo (~28 seconds)</p>
</blockquote>
<p>ValetPress 方便之處在於作者 Aaron Rutley 把一些常用的流程都寫好指令了，像是下載 WP、建 DB、設定帳號密碼等等，要改寫成自己的也非常容易，比照辦理就行，最常用的指令是 vp create，也就是新增一個站，輸入後就會用問答式的介面來引導你，</p>
<p>他的指令內容也非常淺顯易懂，節錄如下：</p>
<p>if [ $1 = “create” ]; then<br>cd ~/Sites<br>echo “${VP_BOLD}ValetPress, create new site ${VP_NONE}”<br>echo “${VP_YELLOW}Project Name:${VP_NONE}”<br>read project_name<br>mkdir “$project_name”<br>cd “$project_name”<br>mysql -uroot -e “create database \`$project_name\`“<br>wp core download<br>wp core config –dbname=”$project_name” –dbuser=root –dbhost=127.0.0.1<br>wp core install –url=”$project_name”.dev –title=”$project_name”.dev –admin_user=”$project_name”  –admin_password=password –admin_email=wordpress@wordpress.org<br>rm -rf wp-content<br>git clone <a href="https://aaronrutley@bitbucket.org/aaronrutley/turbo-light.git">https://aaronrutley@bitbucket.org/aaronrutley/turbo-light.git</a> wp-content<br>cd wp-content<br>rm -rf .git<br>git init<br>eval mv ~/Sites/“$project_name”/wp-content/themes/turbo-light ~/Sites/“$project_name”/wp-content/themes/“$project_name”<br>wp theme activate “$project_name”<br>wp plugin activate advanced-custom-fields-pro minimal-admin bulk-page-creator simple-page-ordering<br>wp plugin update –all<br>echo “${VP_GREEN}Success:${VP_NONE} Project Created: ${VP_UNDERLINE}http://$project_name.dev/${VP_NONE}”<br>echo “L: ${VP_UNDERLINE}http://$project_name.dev/wp-admin/${VP_NONE}”<br>echo “U: $project_name”<br>echo “P: password”<br>echo “${VP_GREEN}Success:${VP_NONE} Running NPM install”<br>cd ~/Sites/“$project_name”/wp-content/themes/“$project_name”<br>npm install<br>echo “${VP_GREEN}Success:${VP_NONE} Running Gulp (default)”<br>gulp<br>fi</p>
<p>關鍵是 git clone 那邊，你可以把你自己常用的 theme、plugin 整理成一包 wp-content 丟到 GitHub 或是其他版控服務上，然後下面他幫你用 WP CLI 啟用該啟用的東西、以及順便處理更新。</p>
<p>如果有用 NPM 還會自動 npm install，簡單說就是可以把平常自己的工作流程全都用這一支來進行自動化，這樣要建新的開發專案時只要下 vp create 之後就可以去泡茶了～</p>
<h2 id="ValetPress-安裝步驟"><a href="#ValetPress-安裝步驟" class="headerlink" title="ValetPress 安裝步驟"></a>ValetPress 安裝步驟</h2><p>相較於 Local，用指令安裝東西好卡關，主要是 MySql 的部分一直起不來，還有最後 valet 的部分要 link 才可以正確連線，詳細安裝步驟如下：</p>
<h3 id="一、安裝-Homebrew"><a href="#一、安裝-Homebrew" class="headerlink" title="一、安裝 Homebrew"></a>一、安裝 Homebrew</h3><p><a href="https://brew.sh/index_zh-tw">Homebrew</a> 是 MacOS 專用的套件管理系統，開啟終端機，輸入以下指令即可安裝</p>
<p>$ /bin/bash -c “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;">https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</a></p>
<p>安裝完成後，先確認 brew 可以正確執行，</p>
<p>$ brew update</p>
<p>如果執行 brew update 發生錯誤，要先把別名加入 .bash_profile，</p>
<p>$ open .bash_profile</p>
<p>輸入上面的指令後會打開一個文字檔，在檔案的最下面加入以下文字：</p>
<blockquote>
<p>export PATH=”/usr/local/bin:$PATH”</p>
</blockquote>
<p>確認 brew update 可以正確執行後就可以進入到下一步了！</p>
<h3 id="二、安裝-PHP-amp-Composer"><a href="#二、安裝-PHP-amp-Composer" class="headerlink" title="二、安裝 PHP&amp;Composer"></a>二、安裝 PHP&amp;Composer</h3><p>先使用 Homebrew 安裝 PHP，再安裝 PHP 套件管理系統 Composer：</p>
<p>$ brew install php</p>
<p>$ brew install composer</p>
<h3 id="三、安裝-MySql"><a href="#三、安裝-MySql" class="headerlink" title="三、安裝 MySql"></a>三、安裝 MySql</h3><p>Valet 官方文件是安裝 MySql 5.7，個人是習慣裝 Mariadb：</p>
<p>$ brew install mariadb</p>
<p>狀況來了，當我要 mysql -u root 的時候，會出現時 <strong>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’ (2)，</strong></p>
<p>爬了一堆解，試了一堆方法都還是行不通，於是找到出問題的 /tmp/mysql.sock 這個檔案，發現他只是一個連結並且沒有連到任何內容，所以我就把他砍了(?)，</p>
<p>再次登入 mysql -u root 出現 **’Access denied for user ‘root’@’localhost’**，查了之後說是權限不夠，可以用 sudo 來執行，但 ValetPress 的腳本我試過加 sudo 還是過不了，最後找到另一個解法：前往編輯 vi /usr/local/etc/my.cnf，加入下面這行後再重新啟動 Mariadb，才有辦法成功連線。</p>
<p>[mysqld]<br>skip-grant-tables</p>
<p>$ brew services restart MariaDB</p>
<h3 id="四、安裝-Valet"><a href="#四、安裝-Valet" class="headerlink" title="四、安裝 Valet"></a>四、安裝 Valet</h3><p>使用 composer 下載 valet 套件：</p>
<p>$ composer global require laravel/valet</p>
<p>下載依賴套件中…</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/02/CleanShot-2020-02-07-at-11.23.07.jpg"></p>
<p>上面那一堆跑完後開始安裝 Valet：</p>
<p>$ valet install</p>
<p>這時候出現 <strong>zsh: command not found: valet</strong> 的錯誤訊息，要讓 valet 可以全域使用，必須要 export 才行，我的環境是用 zsh，所以要打開 .zshrc 來加入設定：</p>
<p>$ open ~/.zshrc</p>
<p>系統會開啟一個文字檔，然後加入下方文字：</p>
<p>export PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/user/.composer/vendor/bin:$PATH</p>
<p>.zshrc 有任何修改記得要跑一次 source 才會套用更新：</p>
<p>$ source ~/.zshrc</p>
<p>加入後再次 valet install，會出現 <strong>stopping Nginx</strong> 的訊息，代表正在啟用 valet 中，但如果出現 <strong>Homebrew PHP appears not to be linked.</strong> 代表 Homebrew 沒有連結到正確的 PHP，輸入以下指令來產生連結：</p>
<p>$ brew link php –force</p>
<p>再次輸入 valet install 即可啟用 Valet。Valet 預設情況下它會在背景執行，所以如果要連上測試站的話，再也不用像以前啟用 MAMP、Docker、Local 要等上一段時間，只要一開機 Valet 就會自動啟用。</p>
<h3 id="五、安裝-WP-CLI"><a href="#五、安裝-WP-CLI" class="headerlink" title="五、安裝 WP-CLI"></a>五、安裝 WP-CLI</h3><p><a href="https://wp-cli.org/#installing">WP CLI</a> 是超強大又實用的指令工具，可以從系統底層對 WordPress 上下其手，可以參考官方的安裝方式也可以使用 Homebrew 來安裝：</p>
<p>$ brew install wp-cli</p>
<p>裝完後記得把 wp 關鍵字加入到個人設定檔中，這樣就可以用 wp –info 這樣的簡寫來操作它。</p>
<p>$ chmod +x wp-cli.phar<br>$ sudo mv wp-cli.phar /usr/local/bin/wp</p>
<h3 id="六、下載-ValetPress"><a href="#六、下載-ValetPress" class="headerlink" title="六、下載 ValetPress"></a>六、下載 ValetPress</h3><p>上面環境都完成後，主角 ValetPress 要登場了 。先在本機 user 目錄新開一個隱藏目錄叫做「 .valetpress」 與一般目錄 「Sites」 資料夾，前者是放 ValetPress 自動化腳本，後者是之後新建 WordPress 站的網站目錄。</p>
<p><a href="https://github.com/AaronRutley/valetpress/archive/master.zip">下載 ValetPress</a> <a href="https://github.com/AaronRutley/valetpress/archive/master.zip">原始</a><a href="https://github.com/AaronRutley/valetpress/archive/master.zip">檔</a>，解壓縮後放入這個 /yourmacusername/.valetpress 這個目錄中，然後 .zshrc 要引入這個 valetpress 這個檔案，先打開 zsh 設定檔</p>
<p>$ open ~/.zshrc</p>
<p>加入以下判斷式：</p>
<p>if [ -f ~/.valetpress/valetpress ]; then<br>    source ~/.valetpress/valetpress<br>else<br>    print “404: ~/.valetpress/valetpress not found.”<br>fi</p>
<p>一樣，設定檔改好後記得要跑 source 才會更新，如果你有自己改寫 valetpress 也記得要 soruce 一下：</p>
<p>$ source ~/.zshrc</p>
<h3 id="七、打完收工"><a href="#七、打完收工" class="headerlink" title="七、打完收工"></a>七、打完收工</h3><p>輸入指令以及專案名稱，接下來可以就享受秒速建置本機環境的爽快感啦～但前提是要先記得把你的 repo 換上，ValetPress 內建的是 Private Repo。</p>
<p>$ vp create</p>
<p>輸入後會出現問答式的安裝介面，安裝完成後，正當以為一切都已經搞定，結果連上測試網站的網址一直給我 <strong>404 not found</strong>…</p>
<p>查了之後才知道要做 link：先把目錄切換到 Sites/projectname，然後 valet link projectname，然後 valet restart 即可，這一步驟我自己是已經把它寫在 Valetpress 裡面了，另外還有網站加密，加入以下腳本：</p>
<p>echo “Valet Link Project”<br>cd ~/Sites/“$project_name”/<br>valet link $project_name<br>valet secure $project_name</p>
<p>在做 valet link 的時候會需要入 Mac 使用者密碼，輸入後就會自動完成連結，這樣就大功告成啦～</p>
<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>目前使用 ValetPress 在兩個專案中，還沒有發生什麼狀況，網站整體速度也不錯，最感動的是硬碟沒有日益增肥，希望它可以陪我長長久久，不想再為了本機環境燒腦了 Orz…</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>一些堪用的 Vue Components 套件</title>
    <url>/tw/vue-js-examples/</url>
    <content><![CDATA[<p><img src="https://i0.wp.com/oberonlai.blog/wp-content/uploads/2019/02/screely-1550626306459.jpg?fit=1024,651&ssl=1"></p>
<p>Vue.js Examples 這網站有點像是以前 jQuery Plugin Library 的概念，收集了很多各種封裝好的 UI 元件，內頁還有說明使用方法，但用了幾套後發現有些會跑不起來，可能是版本的問題，我把自己有用過的整理在這篇文章中。</p>
<h2 id="Simple-and-smooth-vue-accordion"><a href="#Simple-and-smooth-vue-accordion" class="headerlink" title="Simple and smooth vue accordion"></a><a href="https://vuejsexamples.com/simple-and-smooth-vue-accordion/">Simple and smooth vue accordion</a></h2><p><img src="https://oberonlai.blog/wp-content/uploads/2019/02/vue-faq-accordion.gif"></p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;* 安裝 *&#x2F;
npm i vue-faq-accordion

&#x2F;* 使用 *&#x2F;
&lt;template&gt;
  &lt;VueFaqAccordion 
    :items&#x3D;&quot;myItems&quot;
  &#x2F;&gt;
&lt;&#x2F;template&gt;

&lt;script&gt;
import VueFaqAccordion from &#39;vue-faq-accordion&#39;

export default &#123;
  components: &#123;
    VueFaqAccordion
  &#125;,
  data () &#123;
    return &#123;
      myItems: [
          &#123;
            title: &#39;標題&#39;,
            value: &#39;內文&#39;,
            category: &#39;Tab-1&#39; &#x2F;&#x2F; 有輸入 category 會自動分頁籤，不需要頁籤的話就拿掉它
          &#125;,
          &#123;
            title: &#39;標題2&#39;,
            value: &#39;內文2&#39;,
            category: &#39;Tab-2&#39;
          &#125;,
        ]
    &#125;
  &#125;
&#125;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>樣式的部分我是用 scss 直接去硬改，每個都下 !important 去覆寫它，它的 css 都是寫 inline，正規作法應該是要改了之後重新編譯它，但好麻煩，理論上可以用選擇器的權限去蓋過。</p>
<h2 id="Hooper-Slideshow"><a href="#Hooper-Slideshow" class="headerlink" title="Hooper Slideshow"></a><a href="https://baianat.github.io/hooper/">Hooper Slideshow</a></h2><p><img src="https://oberonlai.blog/wp-content/uploads/2019/02/CleanShot-2019-02-20-at-09.48.22.png"></p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;* 安裝 *&#x2F;
npm install hooper

&#x2F;* 使用 *&#x2F;
&lt;template lang&#x3D;&quot;pug&quot;&gt;
  div
    hooper(style&#x3D;&#39;height: calc( 750 &#x2F; 1920 *100% )&#39; :centerMode&#x3D;&#39;true&#39; :wheelControl&#x3D;&#39;false&#39;)
      slide( v-for&#x3D;&#39;slide in slides&#39; key&#x3D;&#39;slide.id&#39; )
        img(:src&#x3D;&#39;slide.img_url&#39;)
    .uk-container.layout
      h1 Search
&lt;&#x2F;template&gt;
&lt;script&gt;
import &#123; Hooper, Slide &#125; from &#39;hooper&#39;
import &#39;hooper&#x2F;dist&#x2F;hooper.css&#39;;
export default &#123;
  name: &#39;&#39;,
  data () &#123;
    return &#123;
      slides: [
        &#123;id: 1, img_url: &#39;..&#x2F;img&#x2F;slide1.jpg&#39;&#125;,
        &#123;id: 2, img_url: &#39;..&#x2F;img&#x2F;slide1.jpg&#39;&#125;
      ]
    &#125;
  &#125;,
  components: &#123;
    Hooper,
    Slide
  &#125;,
&#125;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果要用 v-for 迴圈去產出 slide 的話，記得要加 key，不然會噴錯。另外還可以設置 breakpoints，如果想做成 carousel ，可以下 breakpoints 來各別設定 :itemsToShow。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>書摘-網站這樣賣才有說服力</title>
    <url>/tw/web-planning/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2016/01/getImage.jpeg" alt="getImage"></p>
<h2 id="電子商務網站是線上的銷售員"><a href="#電子商務網站是線上的銷售員" class="headerlink" title="電子商務網站是線上的銷售員"></a>電子商務網站是線上的銷售員</h2><p>網路行銷：企業為了達到行銷目的在網路上展開的行銷活動 網路行銷漏斗：流量、諮詢、線索、訂單 企業做不好網路行銷的原因</p>
<span id="more"></span>
<p>1.有網站沒流量-競爭對手多，很難被找到 2.有流量沒諮詢-流量品質差、網站沒說服力  </p>
<h2 id="網站說服力的基本知識"><a href="#網站說服力的基本知識" class="headerlink" title="網站說服力的基本知識"></a>網站說服力的基本知識</h2><p>人的決策過程：需求確認 &gt; 方案蒐集 &gt; 方案評估 &gt; 克服決策壓力 &gt; 方案執行 人的決策過程是五個步驟的迴圈 決策壓力越大，越難進入下一個步驟迴圈 如何說服他人做出決策： 1.保持和決策者同步，不要輕易省略或跳躍某個步驟， 說服的第一步是幫助他確認需求 說服的第二步是幫助他人蒐集方案 說服的第三步是幫助他人對方案進行評估 說服的第四步是幫助他人克服決策壓力 2.說服不是將個人意識強加他人，人們需要自己做出決定 在進入下一階段前，必須透過提問的方式確認，不可以主觀地認為已經進入下一階段 3.公正的評估方案，誠懇地提供說明更容易說服目標  </p>
<h2 id="影響網站說服力的要素"><a href="#影響網站說服力的要素" class="headerlink" title="影響網站說服力的要素"></a>影響網站說服力的要素</h2><p>說服力在網站的表現上為三大能力，分別是<strong>理解力、可信度、行動力</strong>  </p>
<h3 id="理解力：讓訪客可以快速理解"><a href="#理解力：讓訪客可以快速理解" class="headerlink" title="理解力：讓訪客可以快速理解"></a>理解力：讓訪客可以快速理解</h3><p>具有說服力的網站可以快速地將以下資訊提供給對方：</p>
<ol>
<li> 我是誰</li>
<li> 我賣什麼產品跟服務</li>
<li> 我的產品跟服務能幫你解決什麼問題</li>
<li> 為什麼要選擇我而不是其它人</li>
<li> 為什麼我們現在就要合作</li>
</ol>
<p>電子商務網站要盡可能用最快的時間能讓用戶理解以上的事情，所以直白、簡單為準則 前三點可以透過 logo 跟 slogan 清楚的表達出來 對於一個有說服力的網站來說，在標頭區就能將以上資訊快速傳遞給訪客 標頭區就應該將你產品的優勢或特色表現出來  </p>
<h3 id="可信度：讓訪客相信你說的是真實的"><a href="#可信度：讓訪客相信你說的是真實的" class="headerlink" title="可信度：讓訪客相信你說的是真實的"></a>可信度：讓訪客相信你說的是真實的</h3><p>如何建立可信度：</p>
<ol>
<li> 成功案例展示</li>
<li> 客戶的評價</li>
<li> 內容公開透明呈現</li>
<li> 公開實績</li>
<li> 第三方機構獲獎認證</li>
</ol>
<p> </p>
<h3 id="行動力：讓訪客理解並信任我們後，還要有行動訴求"><a href="#行動力：讓訪客理解並信任我們後，還要有行動訴求" class="headerlink" title="行動力：讓訪客理解並信任我們後，還要有行動訴求"></a>行動力：讓訪客理解並信任我們後，還要有行動訴求</h3><p>主動提供合作意願給訪客 行動提示主要表現形式有按鈕、電話號碼、線上表單等等 網站說服力 = 理解力+可信度+行動力  </p>
<h2 id="電子商務網站的經營準則"><a href="#電子商務網站的經營準則" class="headerlink" title="電子商務網站的經營準則"></a>電子商務網站的經營準則</h2><p>1.清析的轉換目標 - 定位網站的目標 如何專注網站目標 問自己：這些對完成網站目標有幫助嗎？是必須的嗎？這句話或圖形是否能增加訪客對網站的理解和信任？是否能促使顧客採取我們所期望的行動？   2.明確的目標族群 - 定位網站的目標訪客 為了增加網站的說服力，網站應該是為了滿足特定的目標使用者而設計，而不是為所有顧客   3.高度的相關資訊 - 給訪客想要的資訊 訪客是以快速瀏覽的方式看你的網頁，找尋自己需要的關鍵字，確定找到關鍵字覺得有用，才會開始細看 如果資訊不相關，說服力再怎麼強也是白搭   4.簡潔的解決方案 - 給顧客簡單易行的方案 銷售產品或服務本質上是在銷售解決方案 優秀的業務員善於尋找客戶的問題，讓客戶意識到問題後，就可以很容易的把產品包裝成解決方案進行銷售   5.清晰的公開實績 - 增加網站可信度 說服力的核心問題是信任 隨時保持行銷意識，蒐集可增加網站信任的素材   6.明確的承諾保障 - 解決顧客決策壓力 企劃網站請思考：</p>
<ol>
<li> 能給客戶的承諾和保障是什麼？</li>
<li> 這個承諾能打消客戶的疑慮嗎？</li>
<li> 這個承諾的成本和收益那個大？</li>
<li> 怎麼為目標客戶準備一個明確的承諾？</li>
</ol>
<p>  7.有力的行動提示 - 主動提示客戶採取行動  </p>
<h2 id="電子商務網站的版面設計準則"><a href="#電子商務網站的版面設計準則" class="headerlink" title="電子商務網站的版面設計準則"></a>電子商務網站的版面設計準則</h2><p>好的購買環境會激發顧客的購買熱情 舒爽的頁面配置 舒爽的色彩搭配 愉悅的互動體驗 如客戶能閱讀越多網站上的內容，成交的機會就越大  </p>
<h3 id="什麼時候網站外觀會成為購買的主要理由"><a href="#什麼時候網站外觀會成為購買的主要理由" class="headerlink" title="什麼時候網站外觀會成為購買的主要理由"></a>什麼時候網站外觀會成為購買的主要理由</h3><ol>
<li> 決策者對要購買的產品缺乏專業能力判斷時，網站製作的細節會讓人聯想公司產品的用心程度</li>
<li> 網站內容大家都差不多的時候</li>
</ol>
<p>  通常取得客戶的聯絡方式比取得完整的資料來得更為重要（除非是要做 CRM），因此盡可能減少表單的欄位不讓訪客造成填寫的負擔 客戶的詳細資料可以再取得聯繫後再逐步獲得，線上表單唯一的目的就是盡可能取得正確的聯繫方式</p>
]]></content>
      <categories>
        <category>網站企劃</category>
      </categories>
  </entry>
  <entry>
    <title>讓你的線上產品或服務賣相提升八百萬戰鬥力</title>
    <url>/tw/webiste-app-mockup/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2017/11/webiste-app-mockup-1024x494.jpg">   當接案公司或是企業內部有新平台要發佈時，利用精美的合成效果來展示畫面能有效吸引使用者的注意。Mockup Generator 就是一套這樣的服務，不用請設計人員開啟 Photoshop 等影像處理軟體，直接把產品圖上傳，挑選裡面數百款的情競圖庫，並搭配標題以及下載圖示，不用三分鐘就可以完成一張非常有質感的產品發表圖。   <img src="https://oberonlai.blog/wp-content/uploads/2017/11/webiste-app-mockup-2-1024x678.png">   這服務完全免費，除了上傳產品圖還可以上傳其它 icon 或是 logo，已經可以把它當成一套簡易的線上排版軟體，下載檔案格式有分高畫質以及超高畫質，用在平面印刷上也不成問題！   <img src="https://oberonlai.blog/wp-content/uploads/2017/11/webiste-app-mockup-3-1024x521.jpg">   服務連結： <a href="https://theapplaunchpad.com/mockup-generator/">https://theapplaunchpad.com/mockup-generator/</a></p>
]]></content>
      <categories>
        <category>用戶體驗</category>
      </categories>
  </entry>
  <entry>
    <title>WooCommerce 如何開啟商品型錄模式</title>
    <url>/tw/woocommerce-category-mode/</url>
    <content><![CDATA[<p>WooCommerce 是 WordPress 最多人使用的購物車外掛，其商品管理以及購物功能也都非常完善，不管是賣實體還是數位商品都非常方便，國內各大第三方金流商也都有推出支援的外掛，可以快速整合物流或金流。但有時候我們只是想要使用他的商品管理功能而不使用結帳機制，來做為商品展示的用途，這時候就可以使用 YITH WooCommerce Catalog Mode 這款外掛，它可以讓 WooCommerce 關閉購物功能，把所有加入購物車的按鈕都隱藏不顯示，等未來需要購物功能時，再行開啟即可。 <img src="https://oberonlai.blog/wp-content/uploads/2018/06/woocommerce-category-mode-01.jpg"> <img src="https://oberonlai.blog/wp-content/uploads/2018/06/woocommerce-category-mode-02.jpg"> <img src="https://oberonlai.blog/wp-content/uploads/2018/06/woocommerce-category-mode-03.jpg"></p>
<p><a href="https://wordpress.org/plugins/yith-woocommerce-catalog-mode/">前往連結</a></p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WooCommerce 步驟結帳外掛</title>
    <url>/tw/woocommerce-step-checkout/</url>
    <content><![CDATA[<p>WooCommerce 預設的結帳頁面，是把登入/註冊會員、訂購人資訊、付款方式全都放在同一頁之中，如果欄位較少或是沒有太複雜的進階功能時，放在單頁之中還算方便使用，但如果今天公司需要比較多的結帳功能或是要填寫較詳細的付款資料，拆成獨立的頁面來處理可能對使用者會比較友善，WooCommerce Multi-Step Checout 這支外掛可以很方便的完成此功能，它可以設定哪些步驟需要拆成獨立的頁面，顧客在結帳時也能切換前後步驟，在手機上也能瀏覽，是一支可以改善顧客體驗的 WooCommerce 外掛。 <img src="https://oberonlai.blog/wp-content/uploads/2018/06/woocommerce-step-checkout.jpg"> <img src="https://oberonlai.blog/wp-content/uploads/2018/06/screenshot-1.png"> <img src="https://oberonlai.blog/wp-content/uploads/2018/06/screenshot-3.png"> <img src="https://oberonlai.blog/wp-content/uploads/2018/06/screenshot-4.png"></p>
<p><a href="https://wordpress.org/plugins/wp-multi-step-checkout/">前往連結</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>WooCommerce 六個常見拖慢後台速度的原因</title>
    <url>/tw/woocommerce-%E5%85%AD%E5%80%8B%E5%B8%B8%E8%A6%8B%E6%8B%96%E6%85%A2%E5%BE%8C%E5%8F%B0%E9%80%9F%E5%BA%A6%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[<p>當使用 WooCommerce 建立購物網站時，時間久了後台可就會因為暫存資料或是檔案變多的關係而造成讀取緩慢，本文分享了六種可能的原因，正在為此困擾的朋友可以參考看看！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1550329371740728” display=”yes” title=”V29vQ29tbWVyY2Ug5YWt5YCL5bi46KaL5ouW5oWi5b6M5Y+w6YCf5bqm55qE5Y6f5Zug” body=”55W25L2/55SoIFdvb0NvbW1lcmNlIOW7uueri+izvOeJqee2suermeaZgu+8jOaZgumWk+S5heS6huW+jOWPsOWPr+Wwseacg+WboOeCuuaaq+WtmOizh+aWmeaIluaYr+aqlOahiOiuiuWkmueahOmXnOS/guiAjOmAoOaIkOiugOWPlue3qeaFou+8jOacrOaWh+WIhuS6q+S6huWFreeoruWPr+iDveeahOWOn+WboO+8jOato+WcqOeCuuatpOWbsOaTvueahOaci+WPi+WPr+S7peWPg+iAg+eci+eci++8gQ==” pid=”3281”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WooCommerce 折扣優惠一次搞定</title>
    <url>/tw/woocommerce-%E6%8A%98%E6%89%A3%E5%84%AA%E6%83%A0%E4%B8%80%E6%AC%A1%E6%90%9E%E5%AE%9A/</url>
    <content><![CDATA[<p>經營購物網站免不了的就是每當各大節慶以及特殊日子需要進行商品折扣優惠，無論是滿千送百、買一送一、買越多折扣越多等等的促銷活動，這在沒有工程師的情況下很難進行開發，而 SUMO 這套 WooCommerce 折扣外掛可能會適合你，它可以依照購買商品數量、購買結帳金額來進行打折，也可以製作買一送一、針對會員角色、產品類型來做折扣，讓行銷活動的規劃可以更有彈性做調整！</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1511848158922183” display=”yes” title=”V29vQ29tbWVyY2Ug5oqY5omj5YSq5oOg5LiA5qyh5pCe5a6a” body=”57aT54ef6LO854mp57ay56uZ5YWN5LiN5LqG55qE5bCx5piv5q+P55W25ZCE5aSn56+A5oW25Lul5Y+K54m55q6K5pel5a2Q6ZyA6KaB6YCy6KGM5ZWG5ZOB5oqY5omj5YSq5oOg77yM54Sh6KuW5piv5ru/5Y2D6YCB55m+44CB6LK35LiA6YCB5LiA44CB6LK36LaK5aSa5oqY5omj6LaK5aSa562J562J55qE5L+D6Yq35rS75YuV77yM6YCZ5Zyo5rKS5pyJ5bel56iL5bir55qE5oOF5rOB5LiL5b6I6Zuj6YCy6KGM6ZaL55m877yM6ICMIFNVTU8g6YCZ5aWXIFdvb0NvbW1lcmNlIOaKmOaJo+WkluaOm+WPr+iDveacg+mBqeWQiOS9oO+8jOWug+WPr+S7peS+neeFp+izvOiyt+WVhuWTgeaVuOmHj+OAgeizvOiyt+e1kOW4s+mHkemhjeS+humAsuihjOaJk+aKmO+8jOS5n+WPr+S7peijveS9nOiyt+S4gOmAgeS4gOOAgemHneWwjeacg+WToeinkuiJsuOAgeeUouWTgemhnuWei+S+huWBmuaKmOaJo++8jOiuk+ihjOmKt+a0u+WLleeahOimj+WKg+WPr+S7peabtOacieW9iOaAp+WBmuiqv+aVtO+8gQ==” pid=”3222”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WooCommerce 搜尋外掛比較</title>
    <url>/tw/woocommerce-%E6%90%9C%E5%B0%8B%E5%A4%96%E6%8E%9B%E6%AF%94%E8%BC%83/</url>
    <content><![CDATA[<p>對於商品量龐大的購物網站來說，提供方便又即時的商品搜尋功能就格外重要，這篇文章比較了三款 WooCommerce 商品搜尋外掛，這三款都有免費版與付費版本，可依照自身需求再決定是否購買進階付費版。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1551378718302460” display=”yes” title=”V29vQ29tbWVyY2Ug5pCc5bCL5aSW5o6b5q+U6LyD” body=”5bCN5pa85ZWG5ZOB6YeP6b6Q5aSn55qE6LO854mp57ay56uZ5L6G6Kqq77yM5o+Q5L6b5pa55L6/5Y+I5Y2z5pmC55qE5ZWG5ZOB5pCc5bCL5Yqf6IO95bCx5qC85aSW6YeN6KaB77yM6YCZ56+H5paH56ug5q+U6LyD5LqG5LiJ5qy+IFdvb0NvbW1lcmNlIOWVhuWTgeaQnOWwi+WkluaOm++8jOmAmeS4ieasvumDveacieWFjeiyu+eJiOiIh+S7mOiyu+eJiOacrO+8jOWPr+S+neeFp+iHqui6q+mcgOaxguWGjeaxuuWumuaYr+WQpuizvOiyt+mAsumajuS7mOiyu+eJiOOAgg==” pid=”3284”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WooCommerce 結帳欄位客製教學</title>
    <url>/tw/woocommerce-%E7%B5%90%E5%B8%B3%E6%AC%84%E4%BD%8D%E5%AE%A2%E8%A3%BD%E6%95%99%E5%AD%B8/</url>
    <content><![CDATA[<p>  WooCommerce 是目前最多人使用的 WordPress 購物車模組，國內的金流商也都有針對它開發金流外掛，如果想搭配部落格或形象網站來販售商品，WooCommerce 會是一個很不錯的選擇。   但 WooCommerce 是由國外團隊所開發的，所以在一些細節上會跟我們台灣國內的使用習慣有些許落差，因此我們從過往的開發經驗中，整理出來一些最常被問到的問題，並且說明如何自己動手修改程式碼來進行客製！如果你有文中沒有提到的問題，也非常歡迎留言給我們，不會太複雜的話我們可以幫忙撰寫後再分享出來給其它有一樣需求的朋友！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1397930506980616” display=”yes” title=”V29vQ29tbWVyY2Ug57WQ5biz5qyE5L2N5a6i6KO95pWZ5a24” body=”V29vQ29tbWVyY2Ug5piv55uu5YmN5pyA5aSa5Lq65L2/55So55qEIFdvcmRQcmVzcyDos7znianou4rmqKHntYTvvIzlnIvlhafnmoTph5HmtYHllYbkuZ/pg73mnInph53lsI3lroPplovnmbzph5HmtYHlpJbmjpvvvIzlpoLmnpzmg7PmkK3phY3pg6jokL3moLzmiJblvaLosaHntrLnq5nkvobosqnllK7llYblk4HvvIxXb29Db21tZXJjZSDmnIPmmK/kuIDlgIvlvojkuI3pjK/nmoTpgbjmk4fjgILkvYYgV29vQ29tbWVyY2Ug5piv55Sx5ZyL5aSW5ZyY6ZqK5omA6ZaL55m855qE77yM5omA5Lul5Zyo5LiA5Lqb57Sw56+A5LiK5pyD6Lef5oiR5YCR5Y+w54Gj5ZyL5YWn55qE5L2/55So57+S5oWj5pyJ5Lqb6Kix6JC95beu77yM5Zug5q2k5oiR5YCR5b6e6YGO5b6A55qE6ZaL55m857aT6amX5Lit77yM5pW055CG5Ye65L6G5LiA5Lqb5pyA5bi46KKr5ZWP5Yiw55qE5ZWP6aGM77yM5Lim5LiU6Kqq5piO5aaC5L2V6Ieq5bex5YuV5omL5L+u5pS556iL5byP56K85L6G6YCy6KGM5a6i6KO977yB5aaC5p6c5L2g5pyJ5paH5Lit5rKS5pyJ5o+Q5Yiw55qE5ZWP6aGM77yM5Lmf6Z2e5bi45q2h6L+O55WZ6KiA57Wm5oiR5YCR77yM5LiN5pyD5aSq6KSH6Zuc55qE6Kmx5oiR5YCR5Y+v5Lul5bmr5b+Z5pKw5a+r5b6M5YaN5YiG5Lqr5Ye65L6G57Wm5YW25a6D5pyJ5LiA5qij6ZyA5rGC55qE5pyL5Y+L77yB” pid=”2922”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WooCommerce 自動化結帳測試服務</title>
    <url>/tw/woocommerce-%E8%87%AA%E5%8B%95%E5%8C%96%E7%B5%90%E5%B8%B3%E6%B8%AC%E8%A9%A6%E6%9C%8D%E5%8B%99/</url>
    <content><![CDATA[<p>購物網站的使用流程相對於一般形象網站較為繁瑣，因此在開發上要盡可能各環節都能測試到才能避免發生錯誤，但使用人工測試可能會花去不少時間，這時候就可以用 Robot Ninja 這套服務來進行自動化測試，它的測試項目包含商品頁面瀏覽、加入購物車、結帳、付款等基本購物環節，並可以模擬真實的付款來完成訂單，還能設定排程來進行自動測試，是一套非常方便的測試服務。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1554222981351367” display=”yes” title=”V29vQ29tbWVyY2Ug6Ieq5YuV5YyW57WQ5biz5ris6Kmm5pyN5YuZ” body=”6LO854mp57ay56uZ55qE5L2/55So5rWB56iL55u45bCN5pa85LiA6Iis5b2i6LGh57ay56uZ6LyD54K657mB55Gj77yM5Zug5q2k5Zyo6ZaL55m85LiK6KaB55uh5Y+v6IO95ZCE55Kw56+A6YO96IO95ris6Kmm5Yiw5omN6IO96YG/5YWN55m855Sf6Yyv6Kqk77yM5L2G5L2/55So5Lq65bel5ris6Kmm5Y+v6IO95pyD6Iqx5Y675LiN5bCR5pmC6ZaT77yM6YCZ5pmC5YCZ5bCx5Y+v5Lul55SoIFJvYm90IE5pbmphIOmAmeWll+acjeWLmeS+humAsuihjOiHquWLleWMlua4rOippu+8jOWug+eahOa4rOippumgheebruWMheWQq+WVhuWTgemggemdoueAj+imveOAgeWKoOWFpeizvOeJqei7iuOAgee1kOW4s+OAgeS7mOasvuetieWfuuacrOizvOeJqeeSsOevgO+8jOS4puWPr+S7peaooeaTrOecn+WvpueahOS7mOasvuS+huWujOaIkOioguWWru+8jOmChOiDveioreWumuaOkueoi+S+humAsuihjOiHquWLlea4rOippu+8jOaYr+S4gOWll+mdnuW4uOaWueS+v+eahOa4rOippuacjeWLmeOAgg==” pid=”3291”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WooCommerce 自訂商品標籤外掛</title>
    <url>/tw/woocommerce-%E8%87%AA%E8%A8%82%E5%95%86%E5%93%81%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B/</url>
    <content><![CDATA[<p>在滿滿的商品列表中想要突顯某項產品，最好的方法就是增加標籤，像是特價優惠或是熱門商品標籤，Advanced Product Labels for WooCommerce 這支外掛可以很方便的批次增加商品標籤，並且可以自訂標籤內容、顏色、位置等等，還可以依據商品狀態來下標籤，另外還有付費版本，能夠自訂更多標籤屬性。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1558791230894542” display=”yes” title=”V29vQ29tbWVyY2Ug6Ieq6KiC5ZWG5ZOB5qiZ57Gk5aSW5o6b” body=”5Zyo5ru/5ru/55qE5ZWG5ZOB5YiX6KGo5Lit5oOz6KaB56qB6aGv5p+Q6aCF55Si5ZOB77yM5pyA5aW955qE5pa55rOV5bCx5piv5aKe5Yqg5qiZ57Gk77yM5YOP5piv54m55YO55YSq5oOg5oiW5piv54ax6ZaA5ZWG5ZOB5qiZ57Gk77yMQWR2YW5jZWQgUHJvZHVjdCBMYWJlbHMgZm9yIFdvb0NvbW1lcmNlIOmAmeaUr+WkluaOm+WPr+S7peW+iOaWueS+v+eahOaJueasoeWinuWKoOWVhuWTgeaomeexpO+8jOS4puS4lOWPr+S7peiHquioguaomeexpOWFp+WuueOAgemhj+iJsuOAgeS9jee9ruetieetie+8jOmChOWPr+S7peS+neaTmuWVhuWTgeeLgOaFi+S+huS4i+aomeexpO+8jOWPpuWklumChOacieS7mOiyu+eJiOacrO+8jOiDveWkoOiHquioguabtOWkmuaomeexpOWxrOaAp+OAgg==” pid=”3301”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WooCommerce 運費條件外掛</title>
    <url>/tw/woocommerce-%E9%81%8B%E8%B2%BB%E6%A2%9D%E4%BB%B6%E5%A4%96%E6%8E%9B/</url>
    <content><![CDATA[<p>在預設情況下，WooCommerce 只能針對消費金額用折價券的方式做免運費的優惠，如果想要用其它的條件來做就沒辦法了，而 WooCommerce Advanced Free Shipping 這支外掛就是一套很不錯的解決方案。它除了可以針對金額來免運外，還可以用商品的購買數量、長寬或是庫存量、消費者的購買地區、會員等級等多達近二十種的條件來判斷是否需提供免運費，是一套加強 WooCommerce 免運功能的好用工具！</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1654511057989225” display=”yes” title=”V29vQ29tbWVyY2Ug6YGL6LK75qKd5Lu25aSW5o6b” body=”5Zyo6aCQ6Kit5oOF5rOB5LiL77yMV29vQ29tbWVyY2Ug5Y+q6IO96Yed5bCN5raI6LK76YeR6aGN55So5oqY5YO55Yi455qE5pa55byP5YGa5YWN6YGL6LK755qE5YSq5oOg77yM5aaC5p6c5oOz6KaB55So5YW25a6D55qE5qKd5Lu25L6G5YGa5bCx5rKS6L6m5rOV5LqG77yM6ICMIFdvb0NvbW1lcmNlIEFkdmFuY2VkIEZyZWUgU2hpcHBpbmcg6YCZ5pSv5aSW5o6b5bCx5piv5LiA5aWX5b6I5LiN6Yyv55qE6Kej5rG65pa55qGI44CC5a6D6Zmk5LqG5Y+v5Lul6Yed5bCN6YeR6aGN5L6G5YWN6YGL5aSW77yM6YKE5Y+v5Lul55So5ZWG5ZOB55qE6LO86LK35pW46YeP44CB6ZW35a+s5oiW5piv5bqr5a2Y6YeP44CB5raI6LK76ICF55qE6LO86LK35Zyw5Y2A44CB5pyD5ZOh562J57Sa562J5aSa6YGU6L+R5LqM5Y2B56iu55qE5qKd5Lu25L6G5Yik5pa35piv5ZCm6ZyA5o+Q5L6b5YWN6YGL6LK777yM5piv5LiA5aWX5Yqg5by3IFdvb0NvbW1lcmNlIOWFjemBi+WKn+iDveeahOWlveeUqOW3peWFt++8gQ==” pid=”3380”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 4.9 新功能：讓你的網站在半夜十二點自動變成夜店風格(?)</title>
    <url>/tw/wordpress-4-9-customize-schedule-feature/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2017/11/wordpress-4-9-customize-schedule-feature.png" alt="wordpress-4-9-customize-schedule-feature"> 這次 WordPress 4.9 的更新個人覺得最有趣的功能就是讓「外觀 &gt; 自訂」可以像文章一樣有草稿、排程功能，尤其是排程功能，可以想到的應用面很多，像是週年慶大拍賣先把放的廣告放好，然後設定排程自動上架，或是先設計好不同風格的主題，在排程時間到的時候自動切換，帶給訪客完全不同的感受。   有多少種玩法就看你使用中的佈景主題有沒有跟「外觀 &gt; 自訂」做整合，能從 Customsize 控制的設定越多，能搭配發佈排程的玩法就更多元化。另外草稿也是非常方便的新功能，使用預覽連結可以先把暫時的修改畫面分享給同事或是主管確認，如果沒有其它進階需求，是可以省下另外建置測試網站的時間。   預覽連結還有一個好處，就是可以當成實際的網站來進行瀏覽，所以也有可能當成 A/B Test 進行網站轉換率測試的頁面工具。除了這些功能，其它還有像是新增 Gallery 小工具、多人編輯的版本控管、更好的選單位置管理等等，更多改進項目可以參考這篇—&gt;<a href="https://wordpress.org/news/2017/11/tipton/">https://wordpress.org/news/2017/11/tipton/</a>   另外中文化的部份尚未更新完成，願意出力幫忙翻譯的朋友請前往此處—&gt;<a href="https://translate.wordpress.org/locale/zh-tw/default/wp/dev">https://translate.wordpress.org/locale/zh-tw/default/wp/dev</a></p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>除了部落格，wordpress還可以怎麼玩？</title>
    <url>/tw/wordpress-also-can-do/</url>
    <content><![CDATA[<p>很多人認識 wordpress，可能都是從部落格工具開始，尤其是無名小站結束之後，更多的部落客在尋找可以安心存放他們珍貴文章的服務，有心長期經營者，很快就體會到架設自己的部落格才是長久之道，再加上許多早期投入 wordpress 經營部落格的先進與後起之秀無私分享，讓 wordpress 社群非常活躍，如果你從未學過程式想架設 wordpress 部落格，相關的中文教學資料早已多到滿坑滿谷，就算碰到困難也絕對找的到熱心的專家詢問，只要能抱持著學習的心，前方的路是很寬廣的。   wordpress 是開源軟體(<a href="https://oberonlai.blog/wordpress/wordrpess-for-business/">這是什麼？</a>)，再加上有眾多的使用族群，不斷的進化是 wordpress 的核心價值，而身為部落客，大家都有自己的主題、擅長的領域，要如何運用工具來讓自己的專長發揮的更淋漓盡致，wordpress 提供給我們更多的可能性，讓我們暫時放下部落客的身份，看看 wordpress 在不同產業中能幫助到什麼樣的人。  </p>
<h2 id="如果你-妳-是攝影師-設計師"><a href="#如果你-妳-是攝影師-設計師" class="headerlink" title="如果你(妳)是攝影師 / 設計師"></a>如果你(妳)是攝影師 / 設計師</h2><p>  你(妳)非常在意每份作品的細節、了解視覺傳達的威力、知道如何設計出有效溝通的作品，那麼 wordpress 就是非常適合作為作品集或是攝影集的工具，因為有許多設計師投入 wordpress 的製作，以高水準的視覺設計品質是吸引許多人願意使用的關鍵。   再加上國外的 wordpress 社群已發展成市集的模式(市集介紹可參考<a href="https://oberonlai.blog/wordpress/how-to-buy-wordpress-theme/">這篇</a>)，許多公司無不設計出最吸引人的視覺呈現來說服眼睛最挑的設計師購買，在良性的競爭下，許多作品還得到網頁設計界獎項的肯定，對於攝影師 / 設計師而言，要架設高水準視覺品質的作品集網站，要準備好的就是自己的作品。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/wordpress-also-can-do-img1.jpg" alt="wordpress-also-can-do-img1"></p>
<span id="more"></span>
<p><a href="http://themeforest.net/item/astro-showcasephotography-wordpress-theme/6364365?WT.ac=solid_search_item&WT.seg_1=solid_search_item&WT.z_author=Pirenko&ref=oberonlai" title="worpdress themeforest astro">http://www.pirenko.com/astro/</a>   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/wordpress-also-can-do-img2.jpg" alt="wordpress-also-can-do-img2"> 目前在 Themeforest 上商品數量最龐大的就是 Portfolio 與 Photography。  </p>
<h2 id="如果你-妳-是出版者-媒體工作者"><a href="#如果你-妳-是出版者-媒體工作者" class="headerlink" title="如果你(妳)是出版者 / 媒體工作者"></a>如果你(妳)是出版者 / 媒體工作者</h2><p>  對於以新聞或是文章為主的網站類型，藉由 wordpress 本身是部落格的特性，能更有效的呈現。除了後臺管理介面是以文章為主外，更有草稿、歷史版本、文章分類、文章標籤等等的各類功能外，wordpress 在 SEO 或社群連結上都有很好的擴充性，這對媒體經營者而言是非常方便的發表工具，許多國內外知名媒體都是採用 wordpress 作為架站平臺。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/wordpress-also-can-do-img4.jpg" alt="wordpress-also-can-do-img4"> <a href="http://themeforest.net/item/report-news-magazine-theme-for-wordpress/6175953?WT.ac=solid_search_thumb&WT.seg_1=solid_search_thumb&WT.z_author=Equiet&ref=oberonlai" title="wordpress themeforest report">http://report.equiet.sk/?eqfw-customizer-theme_color=111111</a>  </p>
<h2 id="如果你-妳-是-B2B-B2C-企業經營者"><a href="#如果你-妳-是-B2B-B2C-企業經營者" class="headerlink" title="如果你(妳)是 B2B / B2C 企業經營者"></a>如果你(妳)是 B2B / B2C 企業經營者</h2><p>  wordpress 最大優勢，就是全球有數千萬的開發者為它設計擴充外掛(plugin)，許多網站常用到的功能，像聯絡表單、產品展示、型錄下載、影片上傳等，都能透過外掛工具來實現，甚至還有零售業最常用到的購物車系統，從商品上架、結帳系統、訂單管理、庫存管理都一應俱全，甚至台灣的金流商也有開發相關的模組來做線上刷卡的程式串接，其普及率日漸上升。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/wordpress-also-can-do-img5.jpg" alt="wordpress-also-can-do-img5"> <a href="http://themeforest.net/item/room-09-shop-multipurpose-ecommerce-theme/4638247?ref=oberonlai" title="wordpress themeforest room09">http://demo.yithemes.com/room09/home/home-v/</a>  </p>
<h2 id="如果你-妳-是管理者-專案經理"><a href="#如果你-妳-是管理者-專案經理" class="headerlink" title="如果你(妳)是管理者 / 專案經理"></a>如果你(妳)是管理者 / 專案經理</h2><p>  現在有許多的雲端系統都在做線上專案管理的服務，wordpress 的開發者也看到這樣的需求，於是設計出專案管理用的 wordpress 佈景主題，從開起專案、時程設定、任務分配、人員管理，專案管理中的基本功能都包含其中。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/wordpress-also-can-do-img7.jpg" alt="wordpress-also-can-do-img7"> <a href="http://themeforest.net/item/projectpress-project-management-for-wordpress/3847539?WT.ac=solid_search_item&WT.seg_1=solid_search_item&WT.z_author=icaruscreativeorg&ref=oberonlai" title="wordpress themeforest projectpress">http://icaruscreative.org/pressthemes/projectpress/</a>   如果需要讓團隊成員有共同的即時溝通平臺，並能把溝通過程留存為紀錄，甚至還能即時搜尋，wordpress 開發者也都考慮到了。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/wordpress-also-can-do-img8.jpg" alt="wordpress-also-can-do-img8"> <a href="http://demo.herothemes.com/teamtalk/">http://demo.herothemes.com/teamtalk/</a>   如果是要發展成部門或公司內部的開放式知識庫，人人都可以新增內容，就像維基百科一樣，沒錯，也有開發者想到了。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/wordpress-also-can-do-img10.jpg" alt="wordpress-also-can-do-img10"> <a href="http://themeforest.net/item/wikeasi-/3884898?WT.ac=solid_search_item&WT.seg_1=solid_search_item&WT.z_author=woothemes&ref=oberonlai" title="wordpress themeforest wiki">http://demo.woothemes.com/?name=wikeasi</a>  </p>
<h2 id="如果你-妳-是講師-活動策劃者"><a href="#如果你-妳-是講師-活動策劃者" class="headerlink" title="如果你(妳)是講師 / 活動策劃者"></a>如果你(妳)是講師 / 活動策劃者</h2><p>  透過網路來宣傳活動訊息是非常有效的做法，因此一個好的活動網站將能幫助策劃者吸引更多聽眾的參與，並進一步了解他們的需求，讓下次的活動設計更有話題性。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/wordpress-also-can-do-img11.jpg" alt="wordpress-also-can-do-img11"> <a href="http://themeforest.net/item/foocamp-conference-wordpress-theme/4429812?WT.ac=solid_search_item&WT.seg_1=solid_search_item&WT.z_author=ait&ref=oberonlai" title="wordpress themeforest foocamp">http://preview.ait-themes.com/foocamp/wp1/</a>  </p>
<h2 id="如果你-妳-是創業者"><a href="#如果你-妳-是創業者" class="headerlink" title="如果你(妳)是創業者"></a>如果你(妳)是創業者</h2><p>  針對整合社群，wordpress 提供另一種功能名為 <a href="http://buddypress.org/">buddypress</a>，簡單說就是能把 wordpress 變成像 Facebook 一樣，這對於想要走社群媒合的創業者而言，就能很快開發出一套網站的雛型來測試市場溫度，像是關於男女交友的龐大市場，國外也有開發者設計出相應的主題。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/wordpress-also-can-do-img12.jpg" alt="wordpress-also-can-do-img12"> <a href="http://themeforest.net/item/sweet-date-more-than-a-wordpress-dating-theme/4994573?WT.ac=solid_search_item&WT.seg_1=solid_search_item&WT.z_author=SeventhQueen&ref=oberonlai" title="wordpress themeforest date">http://seventhqueen.com/demo/sweetdatewp/</a>   此外還有近期很紅以 <a href="http://www.kickstarter.com/">kickstarter</a> 為首的群眾募資平臺，wordpress 也可以做。   <img src="https://oberonlai.blog/wp-content/uploads/2013/12/wordpress-also-can-do-img13.jpg" alt="wordpress-also-can-do-img13"> <a href="http://themeforest.net/item/funder-crowdfunding-wordpress-theme/5689109?WT.ac=solid_search_item&WT.seg_1=solid_search_item&WT.z_author=uouapps&ref=oberonlai" title="wordpress themeforest funder">http://uouapps.com/wp/funder/?download=chorus-of-canada</a>  </p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>  wordpress 的開放性造就了許多不同於原本部落格功能的各類型網站，本文中提到的各種網站類型可能還有其它更適合的工具可以運用，或是舉的範例並不能完全滿足使用者的需求，但還是希望可以讓大家可以看到 wordpress 很不一樣的面貌，只使用一種工具不可能滿足所有的使用情境，如何結合各種工具的特性並運用得當才是設計師與開發者的價值所在。</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>themeforest</tag>
        <tag>wordpress theme</tag>
        <tag>wordpress blog</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress Contact Form 7 的延伸外掛</title>
    <url>/tw/wordpress-contact-form-7-%E7%9A%84%E5%BB%B6%E4%BC%B8%E5%A4%96%E6%8E%9B/</url>
    <content><![CDATA[<p>  Contact Form 7 是 WordPress 裡最多人用的表單外掛，免費易用的特性讓它大受歡迎，但它不免還是有些不足的地方，像是根據前一個欄位來決定是否顯示下一個欄位、B 欄位會根據 A 欄位的填寫內容動態產生預設值、表單發送後沒有紀錄存在後台中，甚至是讓收件者收到 PDF 檔，這些功能都可以透過文中所分享的的外掛來加以完成，讓 Contact Form 7 更加完整！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1470454916394841” display=”yes” title=”V29yZFByZXNzIENvbnRhY3QgRm9ybSA3IOeahOW7tuS8uOWkluaOmw==” body=”Q29udGFjdCBGb3JtIDcg5pivIFdvcmRQcmVzcyDoo6HmnIDlpJrkurrnlKjnmoTooajllq7lpJbmjpvvvIzlhY3osrvmmJPnlKjnmoTnibnmgKforpPlroPlpKflj5fmraHov47vvIzkvYblroPkuI3lhY3pgoTmmK/mnInkupvkuI3otrPnmoTlnLDmlrnvvIzlg4/mmK/moLnmk5rliY3kuIDlgIvmrITkvY3kvobmsbrlrprmmK/lkKbpoa/npLrkuIvkuIDlgIvmrITkvY3jgIFCIOashOS9jeacg+agueaTmiBBIOashOS9jeeahOWhq+Wvq+WFp+WuueWLleaFi+eUoueUn+mgkOioreWAvOOAgeihqOWWrueZvOmAgeW+jOaykuaciee0gOmMhOWtmOWcqOW+jOWPsOS4re+8jOeUmuiHs+aYr+iuk+aUtuS7tuiAheaUtuWIsCBQREYg5qqU77yM6YCZ5Lqb5Yqf6IO96YO95Y+v5Lul6YCP6YGO5paH5Lit5omA5YiG5Lqr55qE55qE5aSW5o6b5L6G5Yqg5Lul5a6M5oiQ77yM6K6TIENvbnRhY3QgRm9ybSA3IOabtOWKoOWujOaVtO+8gQ==” pid=”3099”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>Wordpress Custom Field Suite 新增欄位外掛介紹</title>
    <url>/tw/wordpress-custom-field-suite-plugin/</url>
    <content><![CDATA[<p><a href="http://www.prowebdesign.ro/flat-ui-dashboard-free-psd-by-prowebdesign/"><img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-16-1024x620.jpg" alt="custom-field-suite-16"></a> 有使用過客製化後臺更新網站的朋友可能會知道，一般後臺會顯示修改前臺內容的控制欄位，譬如說更新公司資訊時，會有欄位可以輸入標題、內容、上架日期、更新時間、維護人等等，如果今天要多增加一個顯示圖片的內容，那就必須再請工程師另外再新增一個欄位來插入圖片。  </p>
<h2 id="會遇到什麼問題？"><a href="#會遇到什麼問題？" class="headerlink" title="會遇到什麼問題？"></a>會遇到什麼問題？</h2><p>Wordpress 本身是部落格系統，所以針對文章標題、分類、作者、日期等項目均有內建欄位，對於沒有複雜內容的需求還可以勉強使用，但如果今天我們的公司資訊有「文章上架日期」與「活動日期」兩種日期欄位，Wordpress 內建的控制項就會不夠了。</p>
<span id="more"></span>
<p>  小弟我以前的做法很直接，就是在文字編輯器裡面多打一行叫作活動日期，這樣的做法會有三個壞處：</p>
<ol>
<li> 維護不方便：活動日期假設統一放在內容最下方，如果這篇文章有八萬個字，維護人員會要花費額外的時間搜尋活動日期內容寫在什麼地方。</li>
<li> 易造成版面失控：維護人員使用文字編輯器修改內容時，很容易因為編輯器本身的問題而造成版面走位，雖然現在有非常方便的「<a href="https://oberonlai.blog/wordpress-for-business-website-tool/">WordPress Visual Composer 視覺化編輯器</a>」，但如果只是需要多一個日期欄位，應該還不需要用到牛刀，話說 Visual Composer 也越來越龐大了…</li>
<li> 無法針對資料加以利用：如果是用編輯器製作活動日期的欄位，在資料庫裡面它會被紀錄為文章的內容，這代表著如果今天我們想以活動日期來做文章排序，或是只撈出某個日期之後的活動，很抱歉，因為活動日期不是一個單獨的欄位，所以沒辦法針對它進行篩選或排序。</li>
</ol>
<p> </p>
<h2 id="Wordpress-的解決方案"><a href="#Wordpress-的解決方案" class="headerlink" title="Wordpress 的解決方案"></a>Wordpress 的解決方案</h2><p>當然，Wordpress 早就想到這個問題，並且提供了許多函式來處理這種狀況，最主要的就是 add_meta_box，引用台灣 Wordpress 界大神等級 Audi Lu 的文章來解釋如何運用 php 來新增自定欄位：<a href="http://www.mrmu.com.tw/2011/03/30/wp-dev-meta-box-custom-fields/">http://www.mrmu.com.tw/2011/03/30/wp-dev-meta-box-custom-fields/</a>  </p>
<blockquote>
<p>文章一開始提到的「英文選單標題」的例子，很適合當成範例說明，我們就來看看怎麼應用Meta Box吧，要試試看的話，首先打開您佈景中的functions.php，加入以下程式： <?php /\* 小範例：建立英文選單標題 \*/ add\_action(‘admin\_init’, ‘admin\_init\_fn’); // 指定後台初始化時要執行我們自訂的函式admin\_init\_fn function admin\_init\_fn() { // 使用add\_meta\_box來增加一個「自訂區塊」，在callback的參數位置，放上我們自訂的函式 EnTitleCB\_fn add\_meta\_box(‘EnTitle’, ‘英文標題’, ‘EnTitleCB\_fn’, ‘page’, ‘normal’, ‘high’, null); } // 當WP要畫出自訂區塊時，就會執行add\_meta\_box指定的這個callback函式 function EnTitleCB\_fn() { // 需要取得目前編輯的post資訊，如id global $post; // 把我們自訂的Post Meta從資料庫取出，待會放進欄位 // 看你需要多少欄位，就要執行幾次get\_post\_meta()來取值 $entitle\_cnt = get\_post\_meta( $post->ID, ‘EnTitle’, true ); ?> <th scope="row">主選單英文標題：</th> <td> &lt;!– 開始畫出UI，看你需要多少欄位，就畫多少input出來 –&gt; <label for="EnTitle"> <input id="EnTitle" type="text" size="75" name="EnTitle" value="<?php echo $entitle\_cnt;?>" /> <br /><em>說明：設定分頁出現在選單時的英文翻譯。</em> </label> </td> </tr> <?php } ?></p>
</blockquote>
<p>  上面的 code 寫完後還只是新增輸入欄位的介面而已，真正要能存進資料庫還要另外再寫程式碼，這篇文章寫得非常清楚，有興趣的朋友可以自行研究，而本文要介紹的是更快速的方法：使用外掛。  </p>
<h2 id="就是它，Custom-Field-Suite"><a href="#就是它，Custom-Field-Suite" class="headerlink" title="就是它，Custom Field Suite"></a>就是它，Custom Field Suite</h2><p>  <a href="https://wordpress.org/plugins/custom-field-suite/"><img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-1-1024x511.jpg" alt="custom-field-suite-1"></a>   這一套外掛已經是我每個專案中必備的工具之一，原因是它可以非常方便的加入自訂欄位，而且還可以選擇十三種不同的欄位介面，像是日期選擇器、顏色選擇器、加入超連結等等，   除此之外，它還可以針對不同的自定義文章類型（custom post type）、管理者權限、頁面模版來顯示特定的欄位，譬如說新增的活動日期這個欄位，如果只想讓網站管理員看到就好，這支外掛也可針對這樣的需求進行設定。   使用的方法也非常簡單，只要先在後臺設定好欄位，然後加一段 php 的語法即可取得這個欄位的值，以下就上述所提到新增活動日期的例子進行簡單的說明。  </p>
<h2 id="如何使用-Custom-Field-Suite"><a href="#如何使用-Custom-Field-Suite" class="headerlink" title="如何使用 Custom Field Suite"></a>如何使用 Custom Field Suite</h2><p> </p>
<h3 id="一、新增欄位群組"><a href="#一、新增欄位群組" class="headerlink" title="一、新增欄位群組"></a>一、新增欄位群組</h3><p>Custom Field Suite 是以群組為概念，也就是說一個群組裡面可以有無數個控制項，因此在規劃群組的時候盡量以功能來命名，而非網頁的內容，這樣才能方便重覆使用。   安裝好外掛後點選新增，即會出現下面的畫面。先輸入欄位群組的名稱，再點選增加欄位。   <img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-2-1024x580.jpg" alt="custom-field-suite-2">  </p>
<h3 id="二、編輯欄位"><a href="#二、編輯欄位" class="headerlink" title="二、編輯欄位"></a>二、編輯欄位</h3><p>點選增加欄位後會出現以下的控制項，依序輸入欄位名稱與變數名稱，欄位名稱可任意輸入中英文，而變數名稱英數限定，因為這是稍後要給程式辨識的名稱，最後再從欄位類型的下拉選單選擇需要什麼類型的欄位，因為這個範例中我們的資料是活動日期，所以選擇日期即可。 <img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-3-1024x621.jpg" alt="custom-field-suite-3">  </p>
<h3 id="三、選擇該顯示於何種內容"><a href="#三、選擇該顯示於何種內容" class="headerlink" title="三、選擇該顯示於何種內容"></a>三、選擇該顯示於何種內容</h3><p>設定好欄位後，再來選擇要把這個欄位群組決定顯示在那些頁面設定中，它可以針對圖中的方式進行設定，以這個例子中活動日期是屬於公司資訊的欄位，而假設公司資訊我們是用文章做的，然後只限定管理員才看的到這個欄位，可依照下圖進行設定。 <img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-4-1024x607.jpg" alt="custom-field-suite-4">  </p>
<h3 id="四、設定順序與位置"><a href="#四、設定順序與位置" class="headerlink" title="四、設定順序與位置"></a>四、設定順序與位置</h3><p>在其它設定中，可以決定欄位群組的順序與位置，還可以隱藏 Wordpress 內建的文字編輯器，如果要完全使用我們自行新增的欄位，這功能就非常好用，因為 Custom Field Suite 也有提供文字編輯器，這樣我們就可以指定特定的區塊才使用編輯器，而不會整頁的內容都被內建編輯器所控制。 <img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-5-1024x540.jpg" alt="custom-field-suite-5">   完成上述設定後，可以再自行新增其它欄位，完成後點選發表即可。 <img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-6-1024x596.jpg" alt="custom-field-suite-6">   接下來去文章編輯的頁面，就可以看到多了一個活動日期的欄位。 <img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-7-1024x763.jpg" alt="custom-field-suite-7">  </p>
<h3 id="五、將程式碼加入檔案中"><a href="#五、將程式碼加入檔案中" class="headerlink" title="五、將程式碼加入檔案中"></a>五、將程式碼加入檔案中</h3><p>最後，用你熟悉的網頁編輯器，打開 single.php，找到想要顯示活動日期的位置，把這段程式碼寫入即可：</p>
<blockquote>
<p>&lt;php echo CFS()-&gt;get(‘my-date’); ?&gt;</p>
</blockquote>
<p>  記住，get 裡面的字串就是當初增加欄位的變數名稱，這名稱一定要符合，不然不會出現任何的結果。更多欄位的輸出方式可以參考這篇官方文件—&gt;<a href="http://customfieldsuite.com/projects/cfs/documentation/">http://customfieldsuite.com/projects/cfs/documentation/</a>  </p>
<h2 id="Custom-Field-Suite-的進階用法"><a href="#Custom-Field-Suite-的進階用法" class="headerlink" title="Custom Field Suite 的進階用法"></a>Custom Field Suite 的進階用法</h2><p>Custom Field Suite 除了提供基本的文字欄位、下拉選單、日期選擇器等等十幾種好用的方便欄位外，還提供進階又實用的功能來做較複雜的需求，以下就我專案中常用的兩種功能進行介紹。  </p>
<h3 id="一、相關文章"><a href="#一、相關文章" class="headerlink" title="一、相關文章"></a>一、相關文章</h3><p>如果要製作相關文章或是其它推薦閱讀時，Wordpress 最常見的邏輯就是採用相同分類或是含有相同標籤的來顯示，但如果是要讓一篇文章顯示頁面的內容，就必須要手動加連結，如果只有一兩篇就還好，但萬一超過一定數量的話，維護起來便會造成麻煩。   Custom Field Suite 有提供顯示相關文章的欄位，它可以設定要顯示那種類型的內容。 <img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-8-1024x606.jpg" alt="custom-field-suite-8">   新增設定完成後，在文章編輯的欄位上提供非常方便的介面做內容關連，除了可以使用關鍵字搜尋現有內容外，還可以用拖曳的方式來進行編排，這樣可以減低作業錯誤的機率。 <img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-9-1024x524.jpg" alt="custom-field-suite-9">   後臺設定好之後，可以使用下列的語法把相關的文章顯示出來。</p>
<blockquote>
<?php $values = CFS()->get('my-related'); foreach ($values as $post\_id) { $the\_post = get\_post($post\_id); echo $the\_post\->post\_title; } ?>
</blockquote>
<p> </p>
<h3 id="二、設定輪播廣告"><a href="#二、設定輪播廣告" class="headerlink" title="二、設定輪播廣告"></a>二、設定輪播廣告</h3><p>當我們使用一些 jQuery 的 Slider 插件或自己寫的效果來整合至 Wordpress 的時候，如何讓維護人員方便更新這些輪播廣告就變得非常重要，運氣好的時候某些 jQuery Slider 會出 Wordpress 外掛，但大多時候是沒有的，所以除非我們一開始就直接採用有設計 Wordpress 外掛的 jQuery Slider，不然整合上會是個麻煩的問題。   好佳在 Custom Field Suite 提供了一種循環的功能，簡單說就是可以在欄位底下設定子欄位，然後重複這些父欄位，最後透過 php 把它呈現出來。   實際範例如下，假設我們的輪播廣告需要的欄位有上傳圖片、圖說、點擊連結，第一步我們新增一個欄位叫輪播廣告。   <img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-101-1024x578.jpg" alt="custom-field-suite-10">   接著依序新增子欄位：上傳圖片、圖說、點擊連結，然後用拖曳的方式把這三個欄位移到輪播廣告下，移動成功後它們會呈現縮排的效果。因為輪播廣告通常只會出現在首頁，所以此欄位可以設定成只顯示在特定的文章或頁面即可。 <img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-11-1024x465.jpg" alt="custom-field-suite-11"> <img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-12-1024x632.jpg" alt="custom-field-suite-12"> <img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-13-1024x673.jpg" alt="custom-field-suite-13"> <img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-14-1024x416.jpg" alt="custom-field-suite-14">   在前往文章的編輯頁面查看，會多了如圖示的區塊，每點擊一次新增就會出現輪播廣告所需要的欄位，即可完成新增。 <img src="https://oberonlai.blog/wp-content/uploads/2015/07/custom-field-suite-15-1024x798.jpg" alt="custom-field-suite-15">   最後在需要顯示輪播廣告的地方，插入以下程式碼，在此以 <a href="http://www.woothemes.com/flexslider/">Flexslider</a> 做為範例：</p>
<blockquote>
<ul class="flexslider"> <php $fields = CFS()->get('my-loop'); foreach ($fields as $field) { echo "<li><a href='".$field\['my-link'\]."'><img src='".$field\['my-banner'\]."' /><br/>".$field\['my-desp'\]."</a></li>" } ?> </ul>
</blockquote>
<p>這樣就可以把輪播廣告跟 Wordpress 後臺做整合了。  </p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>Custom Field Suite 提供了許多方便實用的自訂欄位功能，讓不熟悉語法的朋友也可以做出功能非常完整的客製化後臺，另外也提供了相關文章、輪播廣告的整合，更可以針對內容、使用者、文章分類來顯示自訂欄位，作者也非常勤勞的在更新，是一支非常優質又免費的外掛。  </p>
<h2 id="附記"><a href="#附記" class="headerlink" title="附記"></a>附記</h2><p>該外掛的中文語系檔小弟已提交給作者，在作者尚未正式加入前，可從下方連結進行下載，解壓縮後放到 wp-content/plugin/custom-field-suite/languages 裡面即可，使用上有任何問題歡迎交流！ <a href="https://oberonlai.blog/wp-content/uploads/2015/07/Wordpress-custom-field-suite-zh-TW.zip">中文化下載</a></p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress Debug Plugin - Black Bar</title>
    <url>/tw/wordpress-debug-plugin-black-bar/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>機智接案生活</title>
    <url>/tw/wordpress-freelance-preface/</url>
    <content><![CDATA[<blockquote>
<p>沒關係，會好起來的，我們對你深信不疑！by Lee Han-chul - Super Star</p>
</blockquote>
<p>韓劇「機智醫生生活」第二季的其中一集，講到醫院新來了一批實習生，原先的住院醫生也需要承擔更多照顧病人的責任，想當然爾對於很多事情都是新手的他們，犯下了很多令觀眾啼笑皆非的錯誤，但他們的教授都很有耐心的溝通與指導這些新人，並用自身的經歷來安慰實習生的挫折，最後一幕五位主角們也分享了他們在第一年所發生的糗事，並且當集的練團彈了 Super Star 這一首超療癒的歌 ( 對，他們每一集的主題曲都是五位主角自己彈出來的 )。</p>
<p>看完這集感觸很深，開始跟老婆討論彼此在職涯中犯過最蠢最不可原諒的錯誤，我犯過最可怕的一次錯誤是在整理網站主機時，當下誤以為某個站客戶已經沒有續租了，於是就順手把它砍掉，結果客戶打來說怎麼網站連不上，一查之下發現就是我誤砍的這個站。</p>
<span id="more"></span>

<p>通常這種情況還好解決，因為我都有幫客戶定期備份，只要還原一下就好，結果不知道怎麼回事，這個站完全沒有備份到，不管是網站備份、主機備份、第三方異地備份，全都沒有這個站的備份檔，我心涼了一大半，最後想盡各種辦法但還是走投無路，只好去求助當初負責建置這個網站的朋友，跟他報告這件慘事，並且準備好銀子，打算請他再全部重新來過。</p>
<p>結果跟他解釋完之後，他只是很爽快的說：「這小事，我再重新蓋一次就好，很快！」然後我要給他錢他還不肯拿，說我幫他這麼多，該是換他來幫我的時候了，當下覺得自己上輩子不知道燒了什麼好香可以交到這樣的朋友，出社會後能遇到這種情義相挺的朋友真的少之又少。</p>
<p>大家要知道，我不是入行第一年的新手了，竟然還會發生這種低級失誤，這代表即使是老手，也是常常會犯一些錯誤，只是頻率可能比新手低很多就是了，我這朋友就像機智醫生裡面的教授一樣，專注在錯誤發生後的解決辦法以及補救措施，而非在究責找戰犯鞭一頓，事後再來討論如何避免相同的狀況，這樣才能不讓一樣的錯誤再次發生。</p>
<p>因此這一系列文章，主要就是想跟大家分享我在十幾年的接案職涯中，犯過的各種蠢事以及踩過的雷，並且是如何學習各種面向的知識以及透過實戰驗證來改善這些問題。</p>
<p>2019 年中，我曾經思考過轉行，每天過得沒有很開心也沒成就感，重點是存不到什麼錢，但我還是很享受寫程式創作的過程，在歷經了一年半的轉型跟實作，我發展了一套工程師的接案模式，不僅實際驗證完全可行，並且日子比以前過得舒服太多了，也有時間開始寫作、健身、打 PS4。</p>
<p>如果在我接案第一年就有人可以告訴我這個方法，我可以省下整整十年的摸索期，整整十年的光陰啊～小孩都已經上小學了，秉持著這樣的想法，我想分享給有意離開公司出來全職接案、或是已經在接案但是賺不到什麼錢的工程師朋友，可以用一種全新的思維來思考接案這件事，重點是可以實現自己的理想生活，不管這個理想是可以多賺一點、多陪心愛的人，還是把自己的健康照顧好，能勇敢去追求自己的目標！</p>
<p>這系列的文章主要分為兩大部分：接案實務與 WooCommerce 金流外掛開發。</p>
<p>首先我會先探討接案的實務面，像是為何有穩定的薪水不領要跑去接案、案源要從哪來、如何找到適合自己的客戶、專案該如何進行、如何與客戶溝通、需求該如何確認，以及報價該怎麼報、案子該怎麼結案 ( 這關最難 )，我會站在工程師的角度來解釋這些面向，並且介紹這幾年來我親身驗證過確實可行的接案模式。</p>
<p>另外每天的工作該如何安排、時間該如何分配，這都是身為接案者必須要知道的事情，畢竟離開公司後一切都要靠自己管理了，我親身經歷過沒有做好這些事的後果，就是想要轉行了XD</p>
<p>當案源穩定之後要如何提升收入是下一階段的目標，除了接案以外還能做哪些事來拓展事業，像是如何從個人單打獨鬥變成團體戰的方法。我早期接案都是跟朋友一起合作，後來案件都是以外掛開發居多，所以變成獨立開發，但因為有了一套接案模式，我嘗試著把這樣的模式複製出來，變成有多個夥伴可以處理多個案件，同時也把接案的池子變大，這部分我會說明這樣的合作模式是如何運作的，以及需要注意的細節。</p>
<p>第二部分我會介紹我賴以維生的接案工具 - WordPress，在十年前開始使用 WordPress 是因為我不會寫半行 PHP，更不懂資料庫、伺服器的任何知識，而 WordPress 幫我搞定了這一切，十年過去了，WordPress 已經是全球最多人在用的內容管理系統，我很慶幸上對了車，我的後端知識全都是由 WordPress 教會我的，並且以此衍伸到其他更進階的知識。</p>
<p>雖然現在已經有非常多更便利的建站技術，但不論使用人數、周邊生態系、社群 WordPress 都非常活躍，簡單說就是以 WordPress 接案是不會缺案子的，光是國內的案子就已經可以接到手軟，更不用說國外還有一堆，這對於想要接案的朋友來說是很好的切入點，池子越大機會一定會越多。</p>
<p>因此我會介紹哪些知識是接 WordPress 客製開發必備的，並且透過實際的金流外掛開發來帶入這些知識，像是基本佈景主題架構、外掛架構，到資料庫操作 CRUD、RESTful API、API 串接等等，以及可以加速開發的 PHP 套件，還有很重要的單元測試、整合測試，自動化部署也是提升開發效率很重要的一環。</p>
<p>接案最重要的是效率，但所謂的效率不是寫完一堆 dirty code 在結案前部署就好，而是把寫過的東西整理成下次可以重用的物件，基於 WordPress 的 API 之下，物件的相容性都會非常高，WordPress 不會隨意更動既有的 API，在同樣的規則下開發可以大幅提升效率。</p>
<p>此外，WooCommerce 是 WordPress 生態系中最多人在用的購物車外掛，因為用的人多，其周邊套件也是非常豐富，但因為多為國外開發者所設計的，許多場景並不適合用於台灣的電子商務，因此整合國內的服務就會是很有接案潛力的一塊，像是串接第三方金流、物流、電子發票，或是整合企業內部的 ERP 或是 CRM 系統，案件金額都會比單純建置形象網站來得好上許多。</p>
<p>因此我會介紹開發 WooCommerce 擴充的相關知識，包含如何客製結帳頁面、購物車頁面、會員帳號頁等等，以及透過一個實際的範例來說明如何串接台灣的金流服務。</p>
<p>最後是我今年開始的新嘗試：把曾經開發過的功能改良成可以重複販售的外掛。接案跟開發產品雖然程式碼可能會有重疊，但是設計的方法很不一樣，接案只要滿足一個客戶的需求即可，但販售外掛會遇到各式各樣安裝不同工具的網站，寫好的外掛能否在陌生的站裡面順利運作會需要考慮到很多情境。</p>
<p>這部分我會介紹如何確認市場是否有需求，以及如何使用一套工具來管理外掛的更新與序號機制，另外還有最重要的 WordPress 授權規範，這會關係到商業模式的設計與定價。</p>
<p>希望這一系列文可以幫助到想要追求自己理想生活的工程師朋友，只要可以達到自己的目標，是不是用 WordPress 接案也沒有關係，重點是要能理解自己、建立好的工作習慣，這樣的接案之路絕對會讓自己舒服許多，也才能把時間花在對自己最重要的人事物上面。</p>
]]></content>
      <categories>
        <category>接案</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>商業模式</tag>
        <tag>WordPress 外掛</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress function.php 管理</title>
    <url>/tw/wordpress-function-php-%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>有自己爬文加入 WordPress 網站功能的朋友應該都有過編輯 function.php 這支檔案的經驗，但時間久了，有時會忘記當初為何要加它，或是網站掛掉了要測試是不是自己加的程式碼有所衝突，這時就可以使用 Code Snippets 這支外掛來管理自己加入的程式，它可以在後台清楚列出所有你自己加過的程式碼，還可以寫註解描述提醒自己是什麼用途，還可以針對程式碼進行啟用和停用，非常方便進行除錯。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1547040465402952” display=”yes” title=”V29yZFByZXNzIGZ1bmN0aW9uLnBocCDnrqHnkIY=” body=”5pyJ6Ieq5bex54is5paH5Yqg5YWlIFdvcmRQcmVzcyDntrLnq5nlip/og73nmoTmnIvlj4vmh4noqbLpg73mnInpgY7nt6jovK8gZnVuY3Rpb24ucGhwIOmAmeaUr+aqlOahiOeahOe2k+mpl++8jOS9huaZgumWk+S5heS6hu+8jOacieaZguacg+W/mOiomOeVtuWIneeCuuS9leimgeWKoOWug++8jOaIluaYr+e2suermeaOm+aOieS6huimgea4rOippuaYr+S4jeaYr+iHquW3seWKoOeahOeoi+W8j+eivOacieaJgOihneeqge+8jOmAmeaZguWwseWPr+S7peS9v+eUqCBDb2RlIFNuaXBwZXRzIOmAmeaUr+WkluaOm+S+hueuoeeQhuiHquW3seWKoOWFpeeahOeoi+W8j++8jOWug+WPr+S7peWcqOW+jOWPsOa4healmuWIl+WHuuaJgOacieS9oOiHquW3seWKoOmBjueahOeoi+W8j+eivO+8jOmChOWPr+S7peWvq+iou+ino+aPj+i/sOaPkOmGkuiHquW3seaYr+S7gOm6vOeUqOmAlO+8jOmChOWPr+S7pemHneWwjeeoi+W8j+eivOmAsuihjOWVn+eUqOWSjOWBnOeUqO+8jOmdnuW4uOaWueS+v+mAsuihjOmZpOmMr+OAgg==” pid=”3277”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress Hook Database</title>
    <url>/tw/wordpress-hook-database/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress LINE Bot 聊天機器人外掛</title>
    <url>/tw/wordpress-line-bot-plugin/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-bot-plugin/wordpress-line-bot-plugin-00.jpg"></p>
<h2 id="外掛介紹"><a href="#外掛介紹" class="headerlink" title="外掛介紹"></a>外掛介紹</h2><p>LINE 聊天機器人的一大功能是可以在特定情境下自動發送多樣化的訊息到店家的官方帳號，只要透過 LINE Messaging API 就能根據店家網站的行為自動發送訊息，像是訂單未完成的提醒、ATM 付款轉帳帳號資訊、超商取貨的到貨通知，這些都可以透過店家的 LINE 官方帳號來提醒顧客。</p>
<p>WordPress LINE Bot 聊天機器人外掛整合了 LINE Messaging API 與 WooCommerce，能直接在 WordPress 後台設定機器人訊息的觸發條件以及通知內文，並可帶入站內的會員以及訂單資訊提供更個人化的訊息推播。</p>
<span id="more"></span>

<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>本外掛適用於由 WordPress 內容管理系統建置的網站，並搭配購物車外掛 WooCommerce，主要功能介紹如下：</p>
<h3 id="1-根據訂單狀態發送訊息"><a href="#1-根據訂單狀態發送訊息" class="headerlink" title="1. 根據訂單狀態發送訊息"></a>1. 根據訂單狀態發送訊息</h3><p>WooCommerce 內建多種訂單狀態，如果想要在訂單建立付款完成後發送 LINE 提醒，可以在觸發規則中將條件設為「當訂單狀態為已完成時」觸發，或是可以根據付款方式，像是針對 ATM 付款的顧客來發送轉帳帳號與金額、針對超商付款顧客發送繳費代碼，另外也能在訂單已出貨時提醒顧客取貨。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-bot-plugin/wordpress-line-bot-plugin-05.jpg"></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-bot-plugin/wordpress-line-bot-plugin-06.jpg"></p>
<h3 id="2-支援-LINE-訊息格式"><a href="#2-支援-LINE-訊息格式" class="headerlink" title="2. 支援 LINE 訊息格式"></a>2. 支援 LINE 訊息格式</h3><p>支援文字以及圖片，可自訂訊息內文、上傳圖片，除了透過文字來傳達訊息外，亦可使用圖片來設計更多樣化的提示內容。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-bot-plugin/wordpress-line-bot-plugin-07.jpg"></p>
<h3 id="3-訊息內文帶入個人資訊"><a href="#3-訊息內文帶入個人資訊" class="headerlink" title="3. 訊息內文帶入個人資訊"></a>3. 訊息內文帶入個人資訊</h3><p>想要讓訊息更貼近顧客嗎？透過文字訊息編輯器，可自動將會員資訊帶入內文中，像是會員姓名、訂單編號、購買商品等，讓你的提示訊息可以更精準的與顧客傳達。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-bot-plugin/wordpress-line-bot-plugin-08.jpg"></p>
<h2 id="LINE-Messaging-API-計價方式"><a href="#LINE-Messaging-API-計價方式" class="headerlink" title="LINE Messaging API 計價方式"></a>LINE Messaging API 計價方式</h2><p>WordPress LINE Bot 聊天機器人外掛主要使用的是 Messaging Push API，而這 API 官方是會根據每月推送的則數來進行收費，計價模式有三種，免費方案每月可以推播 500 則訊息，中用量月費 800 元可推送 4,000 則，高用量月費 4000 元可推送 25,000 則。</p>
<p>更多的方案可以參考 LINE 的官方說明頁面：<a href="https://tw.linebiz.com/column/budget-auto-count/">https://tw.linebiz.com/column/budget-auto-count/</a></p>
<h2 id="LINE-Messaging-API-申請與建立"><a href="#LINE-Messaging-API-申請與建立" class="headerlink" title="LINE Messaging API 申請與建立"></a>LINE Messaging API 申請與建立</h2><p>LINE 的開發者帳號非常容易申請，只要有 LINE 帳號即可，申請的步驟很單純，只要提供相關的資訊即可建立完成。建</p>
<h3 id="前往-LINE-開發者帳號並新增-Channel"><a href="#前往-LINE-開發者帳號並新增-Channel" class="headerlink" title="前往 LINE 開發者帳號並新增 Channel"></a>前往 LINE 開發者帳號並新增 Channel</h3><p>一共有四個步驟，關鍵是要取得最後產出的 Channel ID 與 Channel secret，這兩個資訊需要填入到本外掛的設定選項中，以下就各步驟進行說明：</p>
<h4 id="STEP1-使用個人-LINE-帳號登入"><a href="#STEP1-使用個人-LINE-帳號登入" class="headerlink" title="STEP1. 使用個人 LINE 帳號登入"></a><strong>STEP1. 使用個人 LINE 帳號登入</strong></h4><p>先前往 <a href="https://developers.line.biz/">https://developers.line.biz</a> 點擊右上角的 Log in 按鈕</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-01.jpg"></p>
<p>選擇使用LINE帳號登入</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-02.jpg"></p>
<p>登入後會被要求輸入開發者相關資訊，需要填入開發者名稱與電子郵件，輸入完成後點選 Create my account 即可。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-03.jpg"></p>
<p>這樣 LINE 開發者帳號就申請完成了，接下來是新增 Provider。</p>
<p>&nbsp;</p>
<h4 id="STEP2-新增-Provider"><a href="#STEP2-新增-Provider" class="headerlink" title="STEP2. 新增 Provider"></a><strong>STEP2. 新增 Provider</strong></h4><p>Provider 指的是內容供應商，點選畫面中 Create a new provider 的按鈕：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-04.jpg"></p>
<p>輸入 Provider name 之後點選 create</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-05.jpg"></p>
<p>這樣就完成了 Provider 的新增。</p>
<p>&nbsp;</p>
<h4 id="STEP3-新增-Messaging-API"><a href="#STEP3-新增-Messaging-API" class="headerlink" title="STEP3. 新增 Messaging API"></a><strong>STEP3. 新增 Messaging API</strong></h4><p>進入剛剛新增的 Provider，點選 Create a Messaging API channel：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-bot-plugin/wordpress-line-bot-plugin-01.jpg"></p>
<p>輸入 Channel name 與 Channel description，Channel name 會跟 LINE 官方帳號做連動，如果已經有申請 LINE 官方帳號的話，這邊輸入帳號名稱即可：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-bot-plugin/wordpress-line-bot-plugin-02.jpg"></p>
<p>下方依序輸入相關資訊欄位，輸入完成後點擊 create 即可。</p>
<h4 id="STEP4-取得-Messaging-API-相關資訊"><a href="#STEP4-取得-Messaging-API-相關資訊" class="headerlink" title="STEP4. 取得 Messaging API 相關資訊"></a><strong>STEP4. 取得 Messaging API 相關資訊</strong></h4><p>完成 LINE Messaging API 的建立之後，要先將兩段文字複製起來，一個是 Channel ID，另一個是 Channel secret，可以在 Channel 的主畫面中找到：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-bot-plugin/wordpress-line-bot-plugin-03.jpg"></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-bot-plugin/wordpress-line-bot-plugin-04.jpg"></p>
<p>複製後回到網站後台，將 Channel ID 與 Channel Secret 資訊貼入，以及輸入 LINE 的官方帳號 ID 儲存即可完成設定。</p>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="Q-我的顧客如果沒有加入我的-LINE-官方帳號他還能收到推播嗎？"><a href="#Q-我的顧客如果沒有加入我的-LINE-官方帳號他還能收到推播嗎？" class="headerlink" title="Q: 我的顧客如果沒有加入我的 LINE 官方帳號他還能收到推播嗎？"></a>Q: 我的顧客如果沒有加入我的 LINE 官方帳號他還能收到推播嗎？</h3><p>不行，必須要讓顧客加入官方帳號才能收到推播。</p>
<h3 id="Q-我的網站會員需要使用-LINE-登入才能收到推播嗎？"><a href="#Q-我的網站會員需要使用-LINE-登入才能收到推播嗎？" class="headerlink" title="Q: 我的網站會員需要使用 LINE 登入才能收到推播嗎？"></a>Q: 我的網站會員需要使用 LINE 登入才能收到推播嗎？</h3><p>不一定，前提是只要能夠取得顧客的 LINE user id 並存入會員資料庫即可，建議是搭配本站開發的 <a href="https://oberonlai.blog/tw/wordpress-line-login-plugin/">WordPress LINE 登入外掛</a>會有最佳的相容性。</p>
<h2 id="取得-WordPress-LINE-Bot-聊天機器人外掛"><a href="#取得-WordPress-LINE-Bot-聊天機器人外掛" class="headerlink" title="取得 WordPress LINE Bot 聊天機器人外掛"></a>取得 WordPress LINE Bot 聊天機器人外掛</h2><p>需要 WordPress LINE Bot 聊天機器人外掛嗎？<a href="mailto:m615926@gmail.com">請與我聯絡</a>～</p>
<p>&nbsp;</p>
]]></content>
      <categories>
        <category>LINE</category>
        <category>外掛開發</category>
      </categories>
      <tags>
        <tag>Bot</tag>
        <tag>聊天機器人</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress LINE 登入外掛</title>
    <url>/tw/wordpress-line-login-plugin/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-00.jpg"></p>
<h2 id="外掛介紹"><a href="#外掛介紹" class="headerlink" title="外掛介紹"></a>外掛介紹</h2><p>LINE 即時通訊軟體在台灣有超過兩千萬的用戶，持續推出相關的生活應用，從遊戲到新聞、叫車到支付，已經大範圍的滲透到台灣人的日常生活，因此幫自己的電商網站增加 LINE 帳號登入功能，能大幅度減少註冊網站會員的門檻，進而增加購物轉換率，而 WordPress LINE 登入外掛能協助您自行串接，無需再花費技術人員的成本。</p>
<span id="more"></span>

<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>本外掛適用於由 WordPress 內容管理系統建置的網站，如搭配購物車外掛 WooCommerce 能得到更好的支援，主要功能介紹如下：</p>
<h3 id="1-整合-LINE-第三方登入"><a href="#1-整合-LINE-第三方登入" class="headerlink" title="1. 整合 LINE 第三方登入"></a>1. 整合 LINE 第三方登入</h3><p>在 WooCommerce 帳號登入頁面中自動增加 LINE 登入按鈕，點擊後會引導至 LINE 的登入介面來完成會員註冊 or 登入的動作。你可以自行選擇是否要在帳號登入頁顯示 LINE 登入按鈕，以及按鈕位置的設定，範例頁面：<a href="https://demo.lineforwp.com/my-account/">https://demo.lineforwp.com/my-account/</a></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-21.jpg"></p>
<p>可以前往該網址進行設定測試：<a href="https://demo.lineforwp.com/wp-admin/admin.php?page=line-for-wp">https://demo.lineforwp.com/wp-admin/admin.php?page=line-for-wp</a></p>
<p>登入帳密為 demo/demo</p>
<h3 id="2-自訂整合按鈕是否顯示與設定尺寸"><a href="#2-自訂整合按鈕是否顯示與設定尺寸" class="headerlink" title="2.自訂整合按鈕是否顯示與設定尺寸"></a>2.自訂整合按鈕是否顯示與設定尺寸</h3><p>在 WooCommerce 登入頁與結帳頁中的 LINE 登入按鈕，皆可設定顯示位置於表單上方或下方，並可自訂按鈕尺寸為滿版、大、中、小等四種尺寸，可搭配各種佈景主題的版面設計來決定登入按鈕的顯示樣式。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-22.jpg"></p>
<h3 id="3-自訂登入後的跳轉方式"><a href="#3-自訂登入後的跳轉方式" class="headerlink" title="3. 自訂登入後的跳轉方式"></a>3. 自訂登入後的跳轉方式</h3><p>可以在頁面或文章中加入按鈕後放上由本外掛產生的 LINE 登入網址來進行跳轉，或是在網址中加入參數來設定自動跳轉，就能讓瀏覽者在進入網站前就先完成 LINE 登入的動作，以利後續的操作。</p>
<p>只要在網址中帶入參數 lgmode，即可輕易的選擇跳轉模式，各模式說明如下：</p>
<ul>
<li>lgmode=true - 如果設定為 true，當使用者點選該網址時會直接跳轉到 LINE 的登入頁面，待登入完成後會自動跳轉回該頁面，並且顯示為已登入狀態。</li>
</ul>
<blockquote>
<p>範例：當設定連結網址為 <a href="https://example.com/landing?lgmode=true">https://example.com/landing?lgmode=true</a> 時，會引導使用者跳轉至 LINE 登入，登入完成後跳轉回頁面 <a href="https://example.com/landing">https://example.com/landing</a> ，適合要做商品導購或是表單填寫時可預先帶入會員資料的使用情境。</p>
</blockquote>
<ul>
<li>lgmode=<a href="https://example.com/lading">https://example.com/lading</a> - 帶入登入後的跳轉網址，可以指定使用者登入後跳轉的頁面。</li>
</ul>
<blockquote>
<p>範例：當設定連結網址為 <a href="https://example.com/?lgmode=https://example.com/landing">https://example.com/?lgmode=https://example.com/landing</a> 時，完成登入後頁面會跳轉至 <a href="https://example.com/landing">https://example.com/landing</a></p>
</blockquote>
<h3 id="4-在區塊編輯器中自訂-LINE-登入按鈕"><a href="#4-在區塊編輯器中自訂-LINE-登入按鈕" class="headerlink" title="4. 在區塊編輯器中自訂 LINE 登入按鈕"></a>4. 在區塊編輯器中自訂 LINE 登入按鈕</h3><p>WordPress 的區塊編輯器提供許多豐富的小工具來更方便的設計頁面內容，如果你的銷售頁面是使用區塊編輯器的頁面來製作，透過本外掛可以快速增加 LINE 登入按鈕進而降低註冊會員的門檻。</p>
<p>只要在編輯頁面中搜尋 line 或是輸入斜線 line 即可找到 LINE 登入按鈕：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-17.jpg"></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-16.jpg"></p>
<p>新增 LINE 登入後可透過右方的設定項來進行設定，可調整的範圍有按鈕文案、尺寸以及登入後的頁面跳轉，以便更彈性的根據銷售頁面的文案內容來調整登入按鈕：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-18.jpg"></p>
<p>如果是在會員已登入的狀態下，頁面會不顯示該按鈕。可以前往該網址進行設定測試：<a href="https://demo.lineforwp.com/wp-admin/post.php?post=23&amp;action=edit">https://demo.lineforwp.com/wp-admin/post.php?post=23&amp;action=edit</a></p>
<p>登入帳密為 demo/demo</p>
<h3 id="5-使用短代碼自訂-LINE-登入按鈕"><a href="#5-使用短代碼自訂-LINE-登入按鈕" class="headerlink" title="5. 使用短代碼自訂 LINE 登入按鈕"></a>5. 使用短代碼自訂 LINE 登入按鈕</h3><p>如果網站使用其他的頁面編輯器，像是 Elementor、Divi，也可以用短代碼 ( Shortcode ) 來放便置入 LINE 的登入按鈕，寫法為：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token punctuation">[</span>linelogin text<span class="token operator">=</span><span class="token string double-quoted-string">"快速登入"</span> size<span class="token operator">=</span><span class="token string double-quoted-string">"m"</span> lgmode<span class="token operator">=</span><span class="token string double-quoted-string">"true"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>段代碼名稱為 linelogin，設定參數說明如下：</p>
<ul>
<li>text - 按鈕的文字名稱</li>
<li>size - 按鈕的尺寸，可選參數有 f、 l、m、s 四種尺寸，f 為滿版按鈕</li>
<li>lgmode - 跳轉的模式，設定 true 時會跳轉回原頁面，設定網址時會跳轉至該網頁</li>
<li>align - 對齊方式，可選參數有 left、center、right</li>
</ul>
<p>如果是在會員已登入的狀態下，頁面會不顯示該按鈕。可以前往該網址進行設定測試：<a href="https://demo.lineforwp.com/wp-admin/post.php?post=23&amp;action=edit">https://demo.lineforwp.com/wp-admin/post.php?post=23&amp;action=edit</a></p>
<p>登入帳密為 demo/demo</p>
<h2 id="外掛基本設定"><a href="#外掛基本設定" class="headerlink" title="外掛基本設定"></a>外掛基本設定</h2><p>LINE 的開發者帳號非常容易申請，只要有 LINE 帳號即可，申請的步驟很單純，只要提供相關的資訊即可建立完成。</p>
<h3 id="前往-LINE-開發者帳號並新增-Channel"><a href="#前往-LINE-開發者帳號並新增-Channel" class="headerlink" title="前往 LINE 開發者帳號並新增 Channel"></a>前往 LINE 開發者帳號並新增 Channel</h3><p>一共有四個步驟，關鍵是要取得最後產出的 Channel ID 與 Channel secret，這兩個資訊需要填入到本外掛的設定選項中，以下就各步驟進行說明：</p>
<h4 id="STEP1-使用個人-LINE-帳號登入"><a href="#STEP1-使用個人-LINE-帳號登入" class="headerlink" title="STEP1. 使用個人 LINE 帳號登入"></a><strong>STEP1. 使用個人 LINE 帳號登入</strong></h4><p>先前往 <a href="https://developers.line.biz/">https://developers.line.biz</a> 點擊右上角的 Log in 按鈕</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-01.jpg"></p>
<p>選擇使用LINE帳號登入</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-02.jpg"></p>
<p>登入後會被要求輸入開發者相關資訊，需要填入開發者名稱與電子郵件，輸入完成後點選 Create my account 即可。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-03.jpg"></p>
<p>這樣 LINE 開發者帳號就申請完成了，接下來是新增 Provider。</p>
<p>&nbsp;</p>
<h4 id="STEP2-新增-Provider"><a href="#STEP2-新增-Provider" class="headerlink" title="STEP2. 新增 Provider"></a><strong>STEP2. 新增 Provider</strong></h4><p>Provider 指的是內容供應商，點選畫面中 Create a new provider 的按鈕：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-04.jpg"></p>
<p>輸入 Provider name 之後點選 create</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-05.jpg"></p>
<p>這樣就完成了 Provider 的新增。</p>
<p>&nbsp;</p>
<h4 id="STEP3-新增-Channel-與設定-Callback-URL"><a href="#STEP3-新增-Channel-與設定-Callback-URL" class="headerlink" title="STEP3. 新增 Channel 與設定 Callback URL"></a><strong>STEP3. 新增 Channel 與設定 Callback URL</strong></h4><p>Channel 指的是我們要使用的應用程式，它有很多種類型，由於我們是要使用登入的功能，所以選擇 Create a LINE Login channel：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-06.jpg"></p>
<p>接下來輸入這個 Channel 的相關資訊，要注意的地方是 Region，記得要填 Taiwan，萬一填錯的話是無法修改的，必須砍掉 Channel 再重新建立一個：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-07.jpg"></p>
<p>都填寫完畢後點擊最下方的 Create，這樣就完成 Channel 的建立～</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-08.jpg"></p>
<p>接下來回到 Channel 的主畫面，我們要設定 Callback URL，這個 URL 指的是當使用者登入完成後，會跳轉到我們網站的頁面，而這個頁面會去取得該使用者的資料，後續本外掛會將這些資料與 WordPress 資料庫做整合。</p>
<p>先進入 LINE Login 的頁面，然後點選 Callback URL 的 Edit 按鈕，就會出現輸入框輸入網址：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-09.jpg"></p>
<p>接下來停留在這個畫面，新開一個瀏覽器頁籤，登入 WordPress 網站後台，在左邊選單 LINE &gt; 設定裡面，可以找到這個 Callback URL，將它複製後再貼回 LINE 的後台即可。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-09-1.jpg"></p>
<p>&nbsp;</p>
<h4 id="STEP4-請求-OpenID-權限與發佈-Channel"><a href="#STEP4-請求-OpenID-權限與發佈-Channel" class="headerlink" title="STEP4. 請求 OpenID 權限與發佈 Channel"></a><strong>STEP4. 請求 OpenID 權限與發佈 Channel</strong></h4><p>完成 Channel 設定後，最後要處理的是請求使用者提供電子郵件的權限，因為在 WordPress 這端我們是用電子郵件來判斷會員的身份，因此取得電子郵件是必要的，而電子郵件在預設的情況下 LINE 是沒有提供的，所以需要 OpenID Connect 來取得權限。</p>
<p>先回到 LINE Channel Basic Settings 的頁籤，捲到頁面底端可以看到 OpenID Connect 的選項，點選 Apply：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-10.jpg"></p>
<p>勾選同意 LINE 的隱私權政策以及上傳電子郵件使用用途的截圖後，點選 submit 即申請完成：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-11.jpg"></p>
<p>最後找到 Channel 上方的發佈按鈕，將狀態改為 Publish 即完成 LINE Channel 的申請流程。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-12.jpg"></p>
<h3 id="安裝外掛輸入-LINE-資訊"><a href="#安裝外掛輸入-LINE-資訊" class="headerlink" title="安裝外掛輸入 LINE 資訊"></a>安裝外掛輸入 LINE 資訊</h3><p>完成 LINE Channel 的申請之後，要先將兩段文字複製起來，一個是 Channel ID，另一個是 Channel secret，可以在 Channel 的主畫面中找到：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-13.jpg"></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-14.jpg"></p>
<p>複製後回到網站後台，將 Channel ID 與 Channel Secret 資訊貼入後儲存即可完成設定。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-15.jpg"></p>
<p>可以前往該網址進行設定測試：<a href="https://demo.lineforwp.com/wp-admin/admin.php?page=line-for-wp">https://demo.lineforwp.com/wp-admin/admin.php?page=line-for-wp</a></p>
<p>登入帳密為 demo/demo</p>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="Q-如果登入者不提供電子郵件會發生什麼事？"><a href="#Q-如果登入者不提供電子郵件會發生什麼事？" class="headerlink" title="Q: 如果登入者不提供電子郵件會發生什麼事？"></a>Q: 如果登入者不提供電子郵件會發生什麼事？</h3><p>本外掛會判斷是否有取得電子郵件，如果沒有的話會引導至 WooCommerce 帳號登入頁面並顯示 LINE 登入失敗，提示使用者需要允許存許電子郵件才能完成登入。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-line-login-plugin/wordpress-line-login-plugin-20.jpg"></p>
<h3 id="Q-如果網站已經擁有該會員資料會發生什麼事？"><a href="#Q-如果網站已經擁有該會員資料會發生什麼事？" class="headerlink" title="Q: 如果網站已經擁有該會員資料會發生什麼事？"></a>Q: 如果網站已經擁有該會員資料會發生什麼事？</h3><p>取得電子郵件後本外掛會先做會員資料庫比對，如果發現該電子郵件已存在於資料庫當中，則會更新該會員的顯示名稱以及大頭照，反之則會取得該使用者資料後註冊一個新會員。</p>
<h3 id="Q-一定要有-LINE-的開發者帳號才能使用本外掛嗎？"><a href="#Q-一定要有-LINE-的開發者帳號才能使用本外掛嗎？" class="headerlink" title="Q: 一定要有 LINE 的開發者帳號才能使用本外掛嗎？"></a>Q: 一定要有 LINE 的開發者帳號才能使用本外掛嗎？</h3><p>LINE 開者帳號是用來申請 LINE Channel 用的，因此建議要申請才能取得該 Channel 的管理權限。</p>
<h3 id="Q-一定要有-LINE-的官方帳號才能使用本外掛嗎？"><a href="#Q-一定要有-LINE-的官方帳號才能使用本外掛嗎？" class="headerlink" title="Q: 一定要有 LINE 的官方帳號才能使用本外掛嗎？"></a>Q: 一定要有 LINE 的官方帳號才能使用本外掛嗎？</h3><p>不用，只要有 LINE 的開發者帳號即可。</p>
<h3 id="Q-請問有測試網站可以實際操作看看嗎？"><a href="#Q-請問有測試網站可以實際操作看看嗎？" class="headerlink" title="Q: 請問有測試網站可以實際操作看看嗎？"></a>Q: 請問有測試網站可以實際操作看看嗎？</h3><p>可前往該網址進行設定測試：<a href="https://demo.lineforwp.com/line-login-test/">https://demo.lineforwp.com/line-login-test/</a></p>
<h2 id="取得-WordPress-LINE-登入外掛"><a href="#取得-WordPress-LINE-登入外掛" class="headerlink" title="取得 WordPress LINE 登入外掛"></a>取得 WordPress LINE 登入外掛</h2><p>需要 WordPress LINE 登入外掛嗎？<a href="https://lineforwp.com/product/wordpress-line-login/">購買連結</a></p>
<p>有任何問題歡迎 <a href="mailto:m615926@gmail.com">與我聯絡</a>～</p>
<p>&nbsp;</p>
]]></content>
      <categories>
        <category>LINE</category>
        <category>外掛開發</category>
      </categories>
      <tags>
        <tag>會員登入</tag>
        <tag>WordPress 會員外掛</tag>
      </tags>
  </entry>
  <entry>
    <title>Wordpress 搬家注意事項</title>
    <url>/tw/wordpress-move/</url>
    <content><![CDATA[<p>1.網站蓋好後注意事項 網頁描述換成 meta descrption 網頁描述換成文章摘要 設定 og tag 設定 favicon <a href="http://www.favicon.cc/">http://www.favicon.cc/</a> 裝 w3 total cache</p>
<span id="more"></span>
<p>  2.檔案備份注意事項 sql 檔案匯出前要先最佳化資料表 網頁檔案確保為最新版本 匯出 menu editor 資料 移除 .htaccess   3.環境作業 對方環境請安裝 wamp 請提供資料庫名稱 資料庫 user 帳密 安裝 teamviewer 提供 mail server smtp host、port、帳密   4.移動作業 sql 檔案要小於 2mb，用 zip 壓縮檔處理 如果檔案大於 2mb，修改—&gt;<a href="http://bin.17ball.net/2013/08/phpmyadmin.html">http://bin.17ball.net/2013/08/phpmyadmin.html</a> sql 檔案路徑直接修改為客戶家網址 搬移網站檔案   5.檔案修改作業 修改 wp-config.php 資料庫資訊   6.apache 設定 設定固定網址需啟用 rewrite service 啟用 mod_rewrite httpd conf AllowOverride None—&gt;AllowOverride All httpd conf Deny from all —&gt;Allow from all   7.網站設定 wp smtp 設定 upload 的資料夾位置要修改 網頁標題設定 客戶 email 設定   8.權限設定 詢問管理員角色與後臺使用權限，先行設定完成   9.上線後作業 增加 GA 帳號 產生 sitemap <a href="http://www.xml-sitemaps.com/">http://www.xml-sitemaps.com/</a> 設定 google、bing 網站管理員工具 登入 google 搜尋 <a href="https://www.google.com/webmasters/tools/submit-url?hl=zh_TW">https://www.google.com/webmasters/tools/submit-url?hl=zh_TW</a> 登入 yahoo&amp;bing <a href="http://www.bing.com/toolbox/submit-site-url">http://www.bing.com/toolbox/submit-site-url</a> 加入客戶權限</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 外掛的最終歸宿 - Eagle 圖片管理工具</title>
    <url>/tw/wordpress-plugin-library/</url>
    <content><![CDATA[<p>Eagle 圖片管理工具，可透過瀏覽器外掛，截取畫面中任何區塊或是整份網頁。優異的執行效能，讓你在打完字的瞬間，立刻呈現你想要的結果。對於常開發 WordPress 的朋友來說，更是可以把常用的外掛或是教學文章，使用資料夾或是標籤的方式進行分類，完全取代傳統書籤，最棒的是，共享機制可以讓全世界的人一起壯大彼此的靈感資料庫。</p>
<p> </p>
<h2 id="每個人都要學會整理好自己的人生"><a href="#每個人都要學會整理好自己的人生" class="headerlink" title="每個人都要學會整理好自己的人生"></a>每個人都要學會整理好自己的人生</h2><p>  <img src="https://oberonlai.blog/wp-content/uploads/2017/04/wordpress-plugin-library-1.png">   對於整理的啟蒙老師，可以回溯到我非常喜愛的設計師佐藤可士和先生他的第一本中文譯作「<a href="https://oberonlai.blog/%E4%BD%90%E8%97%A4%E5%8F%AF%E5%A3%AB%E5%92%8C%E7%9A%84%E8%B6%85%E6%95%B4%E7%90%86%E8%A1%93/">佐藤可士和的超整理術</a>」，著實讓我打開了對於整理的眼界。透過實體空間、虛擬資訊的整理，進而導引到思考上的整理，這些過程不僅對於創新工作者、更是每個想過更好人生的朋友必須的訓練。   除了懂得捨棄外，整理術最重要的核心，就是要導入觀點，有觀點才能進行分類，或是打散原有的認知進行重構，才能發掘出全新的視野，因此如何善用工具來整理就變得非常重要。</p>
<span id="more"></span>
<p> </p>
<h2 id="視覺化收藏"><a href="#視覺化收藏" class="headerlink" title="視覺化收藏"></a>視覺化收藏</h2><p>  早期習慣用瀏覽器裡面的書籤來整理工作上的相關資源，加入書籤後就會有一種安心感，自以為在未來需要用它的時候，就能從超過 N 層資料中一躍而出。可想而知，最後書籤多到像是黑洞，加入過的就再也沒有看過它的縱跡了。   再加上換了電腦、換了瀏覽器，所有的分類怎麼匯入就是與原本的不對，或是重覆匯入造成原有的資料量爆增 N 倍，另外只靠網頁標題來搜尋書籤，往往都會忘記關鍵字啥而找不到想要的東西。   受不了這狀況的我接下來就進入了線上書籤服務的年代，從 Xmark、Raindrop，到近幾年爆紅的 Pinterest，同步的功能較當年方便了許多，也從單純網頁標題的收藏，進展到視覺化的圖像呈現，而且查看別人的書籤往往會發掘到從未看過的好物，所以還嘗試著使用 WordPress 建置自己的線上資源庫來收集這些好物，最上方選單中的「<a href="https://oberonlai.blog/inspiration/">想點蒐集</a>」就是這樣來的XD。   但線上服務麻煩的就是要連網，而且大多都線上書籤服務只能抓頁面中的完整圖片而無法使用截圖，截圖的好處在於可以裁下對於自己最有意義、印象最深刻或是提醒自己需特別注意的部份，讓日後透過圖像尋找時，可以快速聯想起當初收藏這份資料的用途或動機。  </p>
<h2 id="最佳解決方案：Eagle-圖片管理工具"><a href="#最佳解決方案：Eagle-圖片管理工具" class="headerlink" title="最佳解決方案：Eagle 圖片管理工具"></a>最佳解決方案：Eagle 圖片管理工具</h2><p>  <img src="https://oberonlai.blog/wp-content/uploads/2017/04/wordpress-plugin-library-2.png">   某日在友人的 FB 牆上，看到這套圖片管理工具，它是一套桌面應用程式，所有的截圖都會存在本機端，所以搜尋速度非常之快，也不用擔心哪天線上書籤服務關門大吉所有的資料就此 GG，但前提就是硬碟要夠大，不夠大就要進行<a href="http://www.books.com.tw/products/0010521950">麻理惠老師的怦然心動整理法</a>或是霸氣地換 10 TB 的硬碟XD。   Eagle 除了可以收藏截圖、上傳圖檔，還可以支援 Mac UI 設計軟體 Sketch 裡面的元件，分資料夾、自動下標籤、改標題、自動顏色分類、寫評論、關鍵字搜尋等功能使用起來更是愉悅無比，更多的特色介紹可以參考他們的<a href="https://tw.eagle.cool/quick-start">快速上手</a>。  </p>
<h2 id="使用-Eagle-製作-WordPress-資源庫"><a href="#使用-Eagle-製作-WordPress-資源庫" class="headerlink" title="使用 Eagle 製作 WordPress 資源庫"></a>使用 Eagle 製作 WordPress 資源庫</h2><p>  在多年 WordPress 網站開發的歲月中，早就數不清有多少次是被 Google 大神給拯救，所以把解決方案留下來已經變成一種習慣，另外要找好用的外掛也是非常花時間，而且官方外掛說明頁多是英文，要想找到自己需要的外掛，關鍵字沒下對 Reuslt Nof Found 就會變成好朋友。   所以在思考對於剛入門 WordPress 的朋友來說，許多功能如果能用中文來搜尋勢必能容易的多，但中文的資料源要從哪來呢？這時就想到了 Eagle，Eagle 提供了一個非常好的資料搜尋框架，關鍵字、標籤、圖像搜尋一應俱全，只要有夠多的資料能被收錄，並且下正確的標題與標籤，未來就會非常容易快速尋找。   在使用 Eagle 時我個人覺得最棒的功能，莫過於可以同步資源庫，只要把專門提供給 Eagle 讀取的資料夾，放在像是 Dropbox 的雲端硬碟中，就能讓所有人一起壯大這個資源庫。   甚至大家可以用不同的觀點來分類 WordPress 外掛，擺脫傳統依照功能性的分類方式，像是「母親節活動專用」、「形象網站專用」，或是「最無用外掛」、「台灣人開發外掛」等各種富有創意的分類方式也許就能因此而生。   於是光想到這點就興奮到睡不著覺的我決定來當第一個共享 WordPress 外掛資源的人，如果你也想參與，首先要有 Dropbox 帳號以及下載 Eagle 試用版，以下逐步解說如何加入 WordPress 資源庫：  </p>
<h3 id="STEP1-下載-Dropbox-共享資料夾"><a href="#STEP1-下載-Dropbox-共享資料夾" class="headerlink" title="STEP1 / 下載 Dropbox 共享資料夾"></a>STEP1 / 下載 Dropbox 共享資料夾</h3><p>  目前我已將初步篩選過的資源庫分享在 Dropbox 中，點選<a href="https://www.dropbox.com/sh/3h30p0f7fxwle8y/AACmEez0jTu_hc8PNM4pAvCaa?dl=0">此連結</a>後選擇右上方下載按鈕中的「儲存至我的 Dropbox 帳戶」   <img src="https://oberonlai.blog/wp-content/uploads/2017/04/wordpress-plugin-library-3.png">   但因為如需同步更新資料夾，也就是你我新增的收藏可以同步到自己的電腦中，就必須指定分享對象，所以喜歡分享的朋友，可以在下方留言留下你申請 Dropbox 的 email，通過加入分享者後就可以零時差完整同步 WordPress 資源庫。   <img src="https://oberonlai.blog/wp-content/uploads/2017/04/wordpress-plugin-library-4.png">  </p>
<h3 id="STEP2-下載-Eagle-三十天試用版"><a href="#STEP2-下載-Eagle-三十天試用版" class="headerlink" title="STEP2 / 下載 Eagle 三十天試用版"></a>STEP2 / 下載 Eagle 三十天試用版</h3><p>  在等到資料夾同步的時候，可以前往 <a href="https://tw.eagle.cool/macOS">Eagle 官方網站</a>，它會判斷你的作業系統提供適合的安裝版本供下載。   啟用後可以發現 Eagle 的介面很簡潔，三欄式的結構依序為分類目錄、圖像本體以及圖像資訊，它可以直接拖曳圖檔到畫面中央即可加入，或是從 Pinterest 中進行匯入，如果你現在是用 Pinterest 收藏的朋友可無痛移轉。   <img src="https://oberonlai.blog/wp-content/uploads/2017/04/wordpress-plugin-library-5.png">   Eagle 本身內建資源庫功能，而這資源庫是去抓取本機目錄，一個讓 Eagle 可以辨識的資料夾，所以只要這個資料夾存放於雲端硬碟中，所有的收藏就能即時同步，而我們的 WordPress 資源庫就是要使用這個功能來實現。   等 Dropbox 的檔案同步後，從上方選單點選資源庫 &gt; 載入其它資源庫，選擇 Dropbox 中的 WordPress.library，就可以成功載入 WordPress 資源了。接下來你就可以逛逛裡面有啥好物，或是加入自己的 WordPress 收藏，當然你也可以新增自己的分類資料夾，整理屬於自己的清單。   <img src="https://oberonlai.blog/wp-content/uploads/2017/04/wordpress-plugin-library-6.png">  </p>
<h3 id="STEP3-Eagle-瀏覽器外掛"><a href="#STEP3-Eagle-瀏覽器外掛" class="headerlink" title="STEP3 / Eagle 瀏覽器外掛"></a>STEP3 / Eagle 瀏覽器外掛</h3><p>  除了本機檔案加入、從 Pinterest 匯入，也可以安裝 Eagle 所提供的瀏覽器外掛來截取網頁畫面，Chrome 跟 Safari 都有，可<a href="https://tw.eagle.cool/extensions">前往此處</a>下載。有了瀏覽器外掛後就可以更方便的來收集網頁上的資料。   <img src="https://oberonlai.blog/wp-content/uploads/2017/04/wordpress-plugin-library-7.png">  </p>
<h2 id="資源庫共享的未來"><a href="#資源庫共享的未來" class="headerlink" title="資源庫共享的未來"></a>資源庫共享的未來</h2><p>  Eagle 當然不僅能收藏 WordPress 外掛，任何你能想到的數位檔案都能用它來整理分類，像是企業標誌、海報、素材、電影番號封面、合約書、食譜、結婚照等等，再搭配雲端同步功能，想像未來如果有一個資源庫管理平台，讓所有願意分享的朋友上傳他們的 Library，就會十分精彩了，當然，前提是硬碟要有 10TB。   另外假使能再搭配手機 APP 收集生活中的事物，以及使用平版電腦做簡報，效果也會非常好，這段是純粹寫給開發團隊的許願項目。   大家有機會可以試試這款軟體，相信會有很不一樣的收藏體驗，一試成主顧的話佛心價是 29 塊美金，而且可以授權兩台電腦，所以再去勸敗另一位朋友請他幫你攤一半的錢就更划算了，大量團購還有再打折，台灣團隊設計製造開發，有問題還可以跟創辦人線上一對一中文諮詢打屁聊天交友(?)，這麼優的軟體不推不行～   註：想同步 WordPress 資源庫的朋友請提供您的 Dropbox 申請帳號於留言中，並留下:</p>
<h4 id="「Eagle-圖片整理好棒棒，請加我-Email-x6d-121-100-114-x6f-x70-98-111-x78-x65-109-97-105-108-64-x61-x62-x63-x2e-x63-111-109-」"><a href="#「Eagle-圖片整理好棒棒，請加我-Email-x6d-121-100-114-x6f-x70-98-111-x78-x65-109-97-105-108-64-x61-x62-x63-x2e-x63-111-109-」" class="headerlink" title="「Eagle 圖片整理好棒棒，請加我 Email: &#x6d;&#121;&#100;&#114;&#x6f;&#x70;&#98;&#111;&#x78;&#x65;&#109;&#97;&#105;&#108;&#64;&#x61;&#x62;&#x63;&#x2e;&#x63;&#111;&#109; 」"></a>「Eagle 圖片整理好棒棒，請加我 Email: <a href="mailto:&#x6d;&#121;&#100;&#114;&#x6f;&#x70;&#98;&#111;&#x78;&#x65;&#109;&#97;&#105;&#108;&#64;&#x61;&#x62;&#x63;&#x2e;&#x63;&#111;&#109;">&#x6d;&#121;&#100;&#114;&#x6f;&#x70;&#98;&#111;&#x78;&#x65;&#109;&#97;&#105;&#108;&#64;&#x61;&#x62;&#x63;&#x2e;&#x63;&#111;&#109;</a> 」</h4><p>  <a href="https://tw.eagle.cool/store">前往購買</a></p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>Wordpress RoyalSlider 多功能輪播外掛&amp;中文化下載</title>
    <url>/tw/wordpress-royalslider/</url>
    <content><![CDATA[<p>&lt;前言&gt; 有在注意國外 wordpress 市集的朋友，應該有發現到不管是 theme 還是 plugin，功能都相當的全面且完整，小弟也常常購買相關產品，的確幫了我不少的忙。 然而語系的整理往往會佔據我開發上的許多時間，再加上自己本身也踩過幾次地雷，買到不堪用的外掛卻無法退費，demo 頁面也只能看到前臺卻看不到後臺，能夠評估是否值得購買的中文說明往往都是對岸同胞的 Google 翻譯火星文， 於是我就想如果有更清楚的說明以及前後臺的實際操作畫面，是否能幫助更多朋友來使用這些方便的工具，所以我把自己曾購買過並已經使用在好幾個專案中的工具整理了一下，生出了這系列的廣告文加中文語系檔的付費下載，希望能幫助到有需要的朋友，也能幫助到自己的荷包XD～</p>
<p> </p>
<h3 id="RoyalSlider-多功能輪播外掛介紹"><a href="#RoyalSlider-多功能輪播外掛介紹" class="headerlink" title="RoyalSlider 多功能輪播外掛介紹"></a>RoyalSlider 多功能輪播外掛介紹</h3><span id="more"></span>
<p><a href="http://codecanyon.net/item/royalslider-touch-content-slider-for-wordpress/700256?ref=oberonlai" title="royalslider"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-introduce.png" alt="img-royalslider-introduce"></a> 無論是在那一種類型的網站中，圖像的呈現往往是關鍵，尤其是大面積的輪播廣告，更是是否能在第一時間吸引使用者的主要因素，也因此透過豐富的互動方式來呈現精彩的圖片內容，是每一個網站的基本配備。   今天要介紹的這支外掛 <a href="http://codecanyon.net/item/royalslider-touch-content-slider-for-wordpress/700256?ref=oberonlai" title="royalslider">RoyalSlider</a> ，事實上跟目前市集名列前茅的產品如 <a href="http://codecanyon.net/item/slider-revolution-responsive-wordpress-plugin/2751380?WT.ac=solid_search_item&WT.seg_1=solid_search_item&WT.z_author=themepunch&ref=oberonlai" title="Slider Revolution">Slider Revolution</a> 、<a href="http://codecanyon.net/item/layerslider-responsive-wordpress-slider-plugin-/1362246?WT.ac=category_item&WT.seg_1=category_item&WT.z_author=kreatura&ref=oberonlai" title="LayerSlider">LayerSlider</a> 相比，它比較沒有那麼多的轉場特效跟圖層設定，乍看下可能會覺得它不夠酷炫，但因為我比較講究實用，太多酷炫的效果可能會讓老電腦跑不動，所以我最常用的還是它。   另外一個吸引我的因素，除了它能在手機裝置上完整呈現外，還支援觸碰手勢操作，也就是說它可以提供手機裝置的使用者更接近於原生 APP 的使用體驗。   其它的特色，它在官網上洋洋灑灑的列快 30 點，有興趣的朋友可以<a href="http://codecanyon.net/item/royalslider-touch-content-slider-for-wordpress/700256?WT.ac=category_item&WT.seg_1=category_item&WT.z_author=Semenov&ref=oberonlai" title="RoyalSlider-spec">上去看看</a>。以下就我自己的使用經驗，整理出最常使用的三大特色，並附上展示頁面與後臺介面操作，讓有需要的朋友可以快速了解 RoyalSlider 的基本功能。  </p>
<h3 id="lt-一-gt-十二種輪播介面"><a href="#lt-一-gt-十二種輪播介面" class="headerlink" title="&lt;一&gt;十二種輪播介面"></a>&lt;一&gt;十二種輪播介面</h3><p>RoyalSlider 有 12 種的介面可供切換，透過細部設定還能設計出更多的介面，所有基本效果如下：   1.水平切換 <a href="https://oberonlai.blog/wordpressdemo/"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-style0.jpg" alt="img-royalslider-style0"></a> 範例頁面：<a href="https://oberonlai.blog/wordpressdemo/" title="RoaylSlider 展示頁面">https://oberonlai.blog/wordpressdemo/</a>   2.水平+縮圖 <a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style2/"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-style1.jpg" alt="img-royalslider-style1"></a> 範例頁面：<a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style2/">https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style2/</a>   3.垂直+縮圖 <a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style3/"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-style2.jpg" alt="img-royalslider-style2"></a> 範例頁面：<a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style3/">https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style3/</a>   4.水平頁籤 <a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style4/"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-style3.jpg" alt="img-royalslider-style3"></a> 範例頁面：<a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style4/">https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style4/</a>   5.垂直輪播 <a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style5/"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-style4.jpg" alt="img-royalslider-style4"></a> 範例頁面：<a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style5/">https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style5/</a>   6.垂直頁籤 <a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style6/"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-style5.jpg" alt="img-royalslider-style5"></a> 範例頁面：<a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style6/">https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style6/</a>   7.延伸+標題 <a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style7/"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-style6.jpg" alt="img-royalslider-style6"></a> 範例頁面：<a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style7/">https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style7/ </a>   8.延伸 <a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style8/"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-style7.jpg" alt="img-royalslider-style7"></a> 範例頁面：<a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style8/">https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style8/</a>   9.相簿 <a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style9/"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-style8.jpg" alt="img-royalslider-style8"></a> 範例頁面：<a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style9/">https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style9/</a>   10.滾動頁籤 <a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style10/"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-style9.jpg" alt="img-royalslider-style9"></a> 範例頁面：<a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style10/">https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style10/</a>   11.筆電外框 <a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style11/"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-style10.jpg" alt="img-royalslider-style10"></a> 範例頁面：<a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style11/">https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style11/</a>   12.分割 <a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style12/"><img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-style11.jpg" alt="img-royalslider-style11"></a> 範例頁面：<a href="https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style12/">https://oberonlai.blog/wordpressdemo/wordpress-royalslider/style12/</a>   以上的效果，都可以進入範例網站的後臺做調整，後臺登入資訊如下： 登入網址：<a href="https://oberonlai.blog/wordpressdemo/wp-login.php">https://oberonlai.blog/wordpressdemo/wp-login.php</a> 帳號：test 密碼：test 控制臺 &gt; 多功能輪播 &gt; 編輯廣告  </p>
<h3 id="lt-二-gt-七種建立廣告模式"><a href="#lt-二-gt-七種建立廣告模式" class="headerlink" title="&lt;二&gt;七種建立廣告模式"></a>&lt;二&gt;七種建立廣告模式</h3><p>  一般的輪播功能，最常見的就是自行上傳圖片來建立內容，但除了基本模式外， RoyalSlider 還設計了其它六種的方方式來新增圖片，說明如下： <img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-backend.jpg" alt="img-royalslider-backend"> 1.自定輪播廣告 基本的建立模式，從媒體庫新增檔案後插入圖片。   2.文章內容廣告 如果你的文章有設定特色圖片，可以直接從特色圖片中建立廣告，只要選擇要顯示的文章類別即可。   3.相簿藝廊廣告 wordpress 本身內建插入相簿的功能，只要加入一段簡碼，直接讓你現有的 wordpress 相簿立刻套用 wordpress 的設定與播放效果。   4.Instagram 廣告 前陣子才被 Facebook 蒐購的相簿服務 Instagram 也有支援，只要先在設定中同步你的 Instagram 帳號，就可以透過 Instagram 的相簿來建立圖片。   5.相簿網站 500px 廣告 以擁有最多高畫質女體照片(?)聞名的相簿服務 500px 也有支援，特別的地方是可以從最熱門照片、編輯精選、以及分類中的圖片來建立廣告。   6.相簿網站 Flickr 廣告 全球容量最大的圖床 Flickr 也是有支援，這很方便把 Flickr 當作網站圖床的使用者來建立廣告。   7.外掛 NextGEN 廣告 著名的外掛 NextGEN galler 也是支援的，增加簡碼後亦可套用 RoyalSlider 的設定。   以上的設定，都可以進入範例網站的後臺做新增，後臺登入資訊如下： 登入網址：<a href="https://oberonlai.blog/wordpressdemo/wp-login.php">https://oberonlai.blog/wordpressdemo/wp-login.php</a> 帳號：test 密碼：test 控制臺 &gt; 多功能輪播 &gt; 編輯廣告 &gt; 新增輪播廣告  </p>
<h3 id="lt-三-gt-彈性介面修改"><a href="#lt-三-gt-彈性介面修改" class="headerlink" title="&lt;三&gt;彈性介面修改"></a>&lt;三&gt;彈性介面修改</h3><p>除了內建的版面外，還可以透過一些預設的參數來或是直接輸入 HTML 來修改內容，修改如徑如下： <img src="https://oberonlai.blog/wp-content/uploads/2014/03/img-royalslider-custom.jpg" alt="img-royalslider-custom">  ：主要元素的標籤，可能是圖片、影片、或 HTML 區塊 ：圖片的 URL ：圖片的寬度 ：圖片的高度 ：縮圖 ：縮圖的寬 ：縮圖的高 Wordpress RoyalSlider 多功能輪播外掛&中文化下載：圖片的標題 ：圖片的說明 更多的 API 請參考：<a href="http://help.dimsemenov.com/kb/wordpress-royalslider-tutorials/wp-using-slide-markup-editor">http://help.dimsemenov.com/kb/wordpress-royalslider-tutorials/wp-using-slide-markup-editor</a>  </p>
<h3 id="中文化說明"><a href="#中文化說明" class="headerlink" title="中文化說明"></a>中文化說明</h3><p>另外在我中文化的過程中，發現作者少了一些語系的設定，我已有與作者反應，在新版還未釋出之前，我先用 javascript 來翻譯語系檔沒有的部份，設定方法如下：   1.下載 RoyalSlider 中文包，並將其解壓縮(此中文包未含主程式)。 2.完成 RoyalSlider 的<a href="http://codecanyon.net/item/royalslider-touch-content-slider-for-wordpress/700256?WT.ac=category_item&WT.seg_1=category_item&WT.z_author=Semenov&ref=oberonlai" title="buy-royal-slider">購買</a>與安裝。 3.將 new_royalslider-zh_TW.po 與 new_royalslider-zh_TW.mo 置於 plugin/new-royalslider/languages 裡面。 4.將 custom-wp-admin.js 置於 themes/你的主題/js 資料夾裡面，如果你的主題沒有 js 資料夾則自行建立。 5.開啟 themes/你的主題/function.php 檔案，將以下程式碼貼入： function custom_admin_js() { $url = get_option(‘siteurl’); $url = get_bloginfo(‘template_directory’) . ‘/js/custom-wp-admin.js’; echo ‘“<script type="text/javascript" src="'. $url . '"></script>“‘; } add_action(‘admin_footer’, ‘custom_admin_js’); 6.完成中文化  </p>
<h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>如果大家覺得這支外掛不錯，可以直接去 Themeforest 進行購買，強烈建議不要去對岸下載，你永遠不會知道裡面有包含著什麼東西。 如果不知道該如何在 Themeforest 購買外掛的朋友可以參考<a href="https://oberonlai.blog/wordpress/themeforest-how-to-buy-theme-and-plugin">這一篇文章</a>。   <a href="http://codecanyon.net/item/royalslider-touch-content-slider-for-wordpress/700256?WT.ac=category_item&WT.seg_1=category_item&WT.z_author=Semenov&ref=oberonlai">購買 RoyalSlider</a><a href="https://oberonlai.blog/?iproduct=2250">中文化贊助下載NT$199</a></p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress Starter 佈景主題，好的開始是成功的一半！</title>
    <url>/tw/wordpress-starter-theme/</url>
    <content><![CDATA[<p> </p>
<h2 id="什麼是-WordPress-Starter-佈景主題？"><a href="#什麼是-WordPress-Starter-佈景主題？" class="headerlink" title="什麼是 WordPress Starter 佈景主題？"></a>什麼是 WordPress Starter 佈景主題？</h2><p>  以前在本站介紹過許多 <a href="https://oberonlai.blog/wordpress-also-can-do/">WordPress 付費佈景主題</a>，不管是介面設計或是功能上，都非常的漂亮且完整，然而今天我們要介紹的是「什麼都沒有」的佈景主題，也就是空白的佈景主題。   可能有朋友會好奇空白的佈景主題可以拿來幹麻？簡單來說這類的佈景主題是提供給專業的網頁設計人員進行 WordPress 整合的工具，因為現成的 Theme 都已經被設計得的非常完整，如果要進行客製化，勢必就要研究程式碼，有時候如果設計好的版型難以找到類似的佈景主題，或是不想花時間修改別人的程式碼，空白的佈景主題也就是 Starter Theme 就非常好用了。</p>
<span id="more"></span>
<p>WordPress Starter 佈景主題的特色就是可能只包含一些基本的 CSS、JavaScript，以及內建現成的 PHP 函式讓設計師可以快速運用，只要頁面設計的部份已經請前端工程師切好版，使用 Starter Theme 就非常容易做 WordPress 整合。  </p>
<h2 id="市面上的-Starter-Theme"><a href="#市面上的-Starter-Theme" class="headerlink" title="市面上的 Starter Theme"></a>市面上的 Starter Theme</h2><p> </p>
<h3 id="Underscores"><a href="#Underscores" class="headerlink" title="Underscores"></a>Underscores</h3><p>  <img src="https://oberonlai.blog/wp-content/uploads/2016/08/wordpress-starter-theme-1.png"> 目前最知名的應該是由 WordPress 母公司 Automatic 推出的 <a href="http://underscores.me/">Underscores</a>，它的特色在於因為是 WordPress 開發公司製做的，所以在更新上還算頻繁。內建兩種 layout、下拉選單效果、標籤模版等等的內容，最特別的是他們提供的線上工具，可以輸入 theme name、slug、author 等欄位，就可以下載帶有這些資訊的 Starter Theme。  </p>
<h3 id="Sage"><a href="#Sage" class="headerlink" title="Sage"></a>Sage</h3><p>  <img src="https://oberonlai.blog/wp-content/uploads/2016/08/wordpress-starter-theme-2-1024x699.png"> 第二套是常常致力於研究 WordPress 開發流程的公司 <a href="https://roots.io/sage/">Roots</a> 他們所推出的 Starter Theme <a href="https://roots.io/sage/">Sage</a>，有在使用套件管理工具如 Gulp、Bower 的朋友應該會很喜愛這套，因為他們就是根據該族群的使用習慣開發出這套佈景主題，並且還整合了 Bootstrap、HTML5 Boilerplate 等 Framework，能讓熟悉這些工具的朋友更容易上手。  </p>
<h3 id="FoundationPress"><a href="#FoundationPress" class="headerlink" title="FoundationPress"></a>FoundationPress</h3><p>  <img src="https://oberonlai.blog/wp-content/uploads/2016/08/wordpress-starter-theme-3-1024x608.png"> 知名的 CSS Framework Foundation 所推出的 <a href="https://foundationpress.olefredrik.com/">FoundationPress</a>，對於習慣使用 Foundation 的朋友簡直是一大福音，這套 Starter Theme 除了包含四種 Layout 以外，還有方便的 UI Kit 可以直接使用，甚至還販售 Photoshop UI Kit 設計稿( 7 美元)，可說是很完整的解決方案。   其它還有許多各試各樣的 Starter Theme，有興趣的朋友可以參考這篇—&gt;<a href="http://www.hongkiat.com/blog/starter-wordpress-themes/">http://www.hongkiat.com/blog/starter-wordpress-themes/</a>  </p>
<h2 id="挑選-Starter-Theme-的原則"><a href="#挑選-Starter-Theme-的原則" class="headerlink" title="挑選 Starter Theme 的原則"></a>挑選 Starter Theme 的原則</h2><p>  以我自己的開發經驗，檔案到我手上都已經是完整切好的 html 檔，不管是引入的 CSS 或 JS，前端工程師都已經非常有條理的整理完成，所以我要做的就是不破壞它原本的架構並且整合到 WordPress 之中。所以我不需要有套件管理或是其它 Framework 的 Starter Theme，越空白越乾淨的越好。  </p>
<h3 id="HTML5-Blank-WordPress-Theme"><a href="#HTML5-Blank-WordPress-Theme" class="headerlink" title="HTML5 Blank WordPress Theme"></a>HTML5 Blank WordPress Theme</h3><p>  <img src="https://oberonlai.blog/wp-content/uploads/2016/08/wordpress-starter-theme-4-1024x643.png"> 當初花了一些時間進行實際安裝、評估比較，最後在經歷過一些專案實戰後，我發現 <a href="http://html5blank.com/">HTML5 Blank WordPress Theme</a> 這套是最符合自己的需求。它的優點在於它真的很白、非常白，沒帶有任何的 JS、CSS，內建的函式又非常實用，可惜已經好久沒更新了，所以乾脆整合實務中的專案經驗，把它修改成最符合自己需要的 Starter Theme，以下就我修改的部份做一個簡單的介紹：  </p>
<h3 id="一、資料夾結構"><a href="#一、資料夾結構" class="headerlink" title="一、資料夾結構"></a>一、資料夾結構</h3><p>  有些 Starter Theme 為了提供更多的基礎功能以及模組化，會分許多資料夾來做整理，但每個人整理的習慣都不太一樣，我自己是比較偏好越扁平、越能一眼看到所有檔案的結構。 <img src="https://oberonlai.blog/wp-content/uploads/2016/08/wordpress-starter-theme-5.png">   這份 Starter Theme 包含六個資料夾，其中兩個是跟 WordPress 相關、另外四個是前端程式的資源。 languages 是該主題的語系檔，而 include 資料夾是從 function.php 所拆分出來的檔案，用意是避免 function.php 變得落落長而難以維護，主要分成以下六個部份：   <img src="https://oberonlai.blog/wp-content/uploads/2016/08/wordpress-starter-theme-6.png">  </p>
<ul>
<li>  admin.php：與 WordPress 後臺有關的自定功能，像是關閉後臺的訊息、更改登入頁面等等</li>
<li>  cpt.php：新增的自定義文章與自定義類別</li>
<li>  nav.php：註冊選單、改變選單的 html 都放在這邊控制</li>
<li>  shortcode.php：定義全站的 shortcode</li>
<li>  tool.php：根據專案上常碰到的需求，撰寫一些實用的 PHP 函式</li>
<li>  widget：註冊側邊欄小工具</li>
</ul>
<p>  至於資料夾以外的則是最基本、WordPress 各頁面的模版檔案，唯一兩個例外是 loop.php 與 pagination.php。   loop.php 在做 wp query 的時候非常方便，要定義迴圈內的 html 時，可以直接引用 loop.php，寫法是 get_template_part(“loop.php”)，所以未來 html 要變動時，直接修改 loop.php 即可。而 pagination.php 是控制分頁選單，也常常會伴隨著 wp query 一起出現，使用方法跟 loop.php 一樣。   這包 Theme 所有的檔案就這樣，沒了，是不是非常的簡單易瞭？不管是要加入額外的模版檔、還是新增自己慣用的分類方式，都可以依照實際狀再行調整。  </p>
<h3 id="header-php"><a href="#header-php" class="headerlink" title="header.php"></a>header.php</h3><p>  <img src="https://oberonlai.blog/wp-content/uploads/2016/08/wordpress-starter-theme-7.png">   在 header.php 的部份，宣告了資料結構 schema，如需導入環境已備妥，還有加入 Facebook 的 og tag，這是每個業主的必備需求:D，基本的 meta 資訊有搭配 API 做基本的判斷，像是 getDesp() 會判斷如果文章有摘要則顯示摘要、沒有的話則顯示全站的描述。   getKeyowrd() 則是判斷如果文章有設定標籤，則會出現 meta keyowrd 的資訊 ，雖然各家搜尋引擎已經對 keyword 不予重視，但相信做該做的還是會有影響力。   getImage() 則是為了解決客戶常常說文章沒有圖片而無資料可顯示的窘境，所以依照以下順序判斷來抓取圖片：特色圖片 -&gt; 文章內的第一張圖 -&gt; 預設圖。以上這些小功能都寫在 include/tool.php 裡面，有興趣的朋友可以自行研究或是依專案狀況進行調整。   另外其它的 meta 我是能省則省，有特殊需求可以參考這份文件，它把所有可能會用到的 meta 都整理出來： <a href="https://github.com/joshbuchea/HEAD">https://github.com/joshbuchea/HEAD</a>  </p>
<h3 id="function-php"><a href="#function-php" class="headerlink" title="function.php"></a>function.php</h3><p>  <img src="https://oberonlai.blog/wp-content/uploads/2016/08/wordpress-starter-theme-8.png">   因為已經把功能拆分開來了，所以原本的 function.php 只留下一些基本的設定與 hook，載入外部檔案的部份就是 include 中拆分出來的六個檔案，如果某些功能已經用外掛做了，就可以把它註解掉，以維持檔案的精簡。   載入網站資源官方建議使用 <a href="https://developer.wordpress.org/reference/functions/wp_register_script/">wp_register_script</a> 而非直接寫在 header.php，好處是可以避免檔案衝突以及確保執行順序，但我個人習慣還是看狀況，有時候直接寫在 header.php 會比較好掌控。   function.php 最下方的一堆 hook，除了掛載函式以外，還有一些基本的 WordPress 防護措施，像是移除版本號、關閉 API 接口、在前臺登入狀態下隱藏工具列等等，有特別需求的話都可以再行自訂。  </p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>  Starter Theme 可以節省許多重覆開發的時間，不用費心從無到有建立或是去研究已經寫好的一堆程式碼，讓 WordPress 工程師可以專注在整合系統上，更有效增加整體專案開發的流暢度。  </p>
<h2 id="主題下載"><a href="#主題下載" class="headerlink" title="主題下載"></a>主題下載</h2><p>  非常歡迎大家在使用上的意見回饋，我相信這份主題一定還是有不足或是更好的地方，還請各位大大多多指教！   <a href="https://github.com/m615926/starter">Github</a> <a href="https://github.com/m615926/starter/archive/master.zip">Zip 下載</a></p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 台股指數外掛</title>
    <url>/tw/wordpress-taiwan-stock/</url>
    <content><![CDATA[<h2 id="外掛介紹"><a href="#外掛介紹" class="headerlink" title="外掛介紹"></a>外掛介紹</h2><p>台股指數外掛是針對使用 WordPress 經營投資理財資訊平台的站長提供台灣股市個股每日盤後成交資訊，本外掛提供多種介面來呈現個股股價資訊，您可以挑選指定個股，選擇顯示指標，並將股價資訊嵌入在文章之中。</p>
<span id="more"></span>

<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>本外掛適用於 WordPress 內容管理系統建置的網站，主要功能介紹如下：</p>
<h3 id="1-多筆個股當日股價跑馬燈"><a href="#1-多筆個股當日股價跑馬燈" class="headerlink" title="1. 多筆個股當日股價跑馬燈"></a>1. 多筆個股當日股價跑馬燈</h3><p>在頁首或頁尾以動態輪播的方式顯示選定的個股股價</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-tw-stock/wordpress-tw-stock-01.jpg"></p>
<h3 id="2-多筆個股當日股價表格"><a href="#2-多筆個股當日股價表格" class="headerlink" title="2. 多筆個股當日股價表格"></a>2. 多筆個股當日股價表格</h3><p>使用短代碼 shortcode 把個股資料整理成表格後顯示於文章或分頁</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-tw-stock/wordpress-tw-stock-02.jpg"></p>
<h3 id="3-設定單筆個股當日股價資訊卡片"><a href="#3-設定單筆個股當日股價資訊卡片" class="headerlink" title="3. 設定單筆個股當日股價資訊卡片"></a>3. 設定單筆個股當日股價資訊卡片</h3><p>使用短代碼 shortcode 把個股資料以卡片方式呈現於文章或分頁</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-tw-stock/wordpress-tw-stock-03.jpg"></p>
<h3 id="4-提供-11-種自訂欄位"><a href="#4-提供-11-種自訂欄位" class="headerlink" title="4. 提供 11 種自訂欄位"></a>4. 提供 11 種自訂欄位</h3><p>可自行決定要顯示哪些欄位，包含證券代號、證券名稱、成交股數、成交金額、開盤價、最高價、最低價、收盤價。</p>
<h2 id="外掛基本設定"><a href="#外掛基本設定" class="headerlink" title="外掛基本設定"></a>外掛基本設定</h2><h3 id="跑馬燈設定"><a href="#跑馬燈設定" class="headerlink" title="跑馬燈設定"></a>跑馬燈設定</h3><ol>
<li><p>登入 WordPress 網站後台 &gt; 台股指數 &gt; 新增圖表</p>
</li>
<li><p>選擇圖表類型 &gt; 選擇跑馬燈 &gt; 設定要顯示的個股 &gt; 選擇要顯示的位置 &gt; 選擇要顯示的欄位，因跑馬燈顯示空間限制，只能選擇三個資料欄位。</p>
</li>
<li><p>儲存後即可在前台看到股價跑馬燈資訊</p>
</li>
</ol>
<h3 id="股價表格設定"><a href="#股價表格設定" class="headerlink" title="股價表格設定"></a>股價表格設定</h3><ol>
<li><p>登入 WordPress 網站後台 &gt; 台股指數 &gt; 新增圖表</p>
</li>
<li><p>選擇圖表類型 &gt; 選擇表格 &gt; 設定要顯示的個股 &gt; 選擇要顯示的位置 &gt; 選擇要顯示的欄位</p>
</li>
<li><p>儲存後把短代碼複製貼入文章或分頁中即可</p>
</li>
</ol>
<h3 id="個股卡片設定"><a href="#個股卡片設定" class="headerlink" title="個股卡片設定"></a>個股卡片設定</h3><ol>
<li><p>登入 WordPress 網站後台 &gt; 台股指數 &gt; 新增圖表</p>
</li>
<li><p>選擇圖表類型 &gt; 選擇卡片 &gt; 設定要顯示的個股 &gt; 選擇要顯示的位置 &gt; 選擇要顯示的欄位，卡片類型只能顯示一檔個股，如需顯示多張個股卡片請新增圖表。</p>
</li>
<li><p>儲存後把短代碼複製貼入文章或分頁中即可</p>
</li>
</ol>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="Q-該外掛的資料來源是？"><a href="#Q-該外掛的資料來源是？" class="headerlink" title="Q: 該外掛的資料來源是？"></a>Q: 該外掛的資料來源是？</h3><p>本外掛採用政府資料開放平臺中的 <a href="https://data.gov.tw/dataset/11549">盤後資訊 &gt; 個股日成交資訊</a>，並於每日下午三點自動擷取當日盤後成交資訊。</p>
<h3 id="Q-能提供即時股價或是歷史股價資料嗎？"><a href="#Q-能提供即時股價或是歷史股價資料嗎？" class="headerlink" title="Q: 能提供即時股價或是歷史股價資料嗎？"></a>Q: 能提供即時股價或是歷史股價資料嗎？</h3><p>目前沒法，因作者手邊並無券商 API 可供串接，如果有善心人士願意提供歡迎<a href="mailto:m615926@gmail.com">與我聯絡</a> XD</p>
<h3 id="Q-擷取下來的資料會保存多久？"><a href="#Q-擷取下來的資料會保存多久？" class="headerlink" title="Q: 擷取下來的資料會保存多久？"></a>Q: 擷取下來的資料會保存多久？</h3><p>預設情況下該外掛不會刪除任何從政府資料開放平臺中下載的檔案，該檔案儲存路徑為 wp-content/uploads/tw-stock，副檔名為 .csv，如果佔用太多空間可以手動刪除，但刪除後可能會影響資料呈現。</p>
<h2 id="取得-WordPress-台股指數外掛"><a href="#取得-WordPress-台股指數外掛" class="headerlink" title="取得 WordPress 台股指數外掛"></a>取得 WordPress 台股指數外掛</h2><p>需要 WordPress 台股指數外掛嗎？請<a href="mailto:m615926@gmail.com">與我聯絡</a>～</p>
<p>&nbsp;</p>
]]></content>
      <categories>
        <category>外掛開發</category>
        <category>Open Data</category>
      </categories>
      <tags>
        <tag>台股</tag>
        <tag>台股大盤</tag>
        <tag>股價</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress 七月份小聚-社群力</title>
    <url>/tw/wordpress-%E4%B8%83%E6%9C%88%E4%BB%BD%E5%B0%8F%E8%81%9A-%E7%A4%BE%E7%BE%A4%E5%8A%9B/</url>
    <content><![CDATA[<p>每月一次的 WordPress 小聚又來囉～這次的主題是社群力。WordPress 在台灣至今會有這麼蓬勃的發展，就是有許多無償付出的朋友解決每天在社群上大家遇到的問題，小編自己有發問過也有解答過，不管是哪一種對自己都是一種學習，發問者要把問題表達的好，解答者要能夠用發問者能理解的方式說明，這些事情都是會關係到網路上的社群交流，參加社群的聚會認識平常只會在網路上看的朋友也是一件非常有趣的事，如果你想知道更多 WordPress 的操作經驗或是交交新朋友，就一定要來參加喔！</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1395744870532513” display=”yes” title=”V29yZFByZXNzIOS4g+aciOS7veWwj+iBmi3npL7nvqTlips=” body=”5q+P5pyI5LiA5qyh55qEIFdvcmRQcmVzcyDlsI/ogZrlj4jkvoblm4nvvZ7pgJnmrKHnmoTkuLvpoYzmmK/npL7nvqTlipvjgIJXb3JkUHJlc3Mg5Zyo5Y+w54Gj6Iez5LuK5pyD5pyJ6YCZ6bq86JOs5YuD55qE55m85bGV77yM5bCx5piv5pyJ6Kix5aSa54Sh5YSf5LuY5Ye655qE5pyL5Y+L6Kej5rG65q+P5aSp5Zyo56S+576k5LiK5aSn5a626YGH5Yiw55qE5ZWP6aGM77yM5bCP57eo6Ieq5bex5pyJ55m85ZWP6YGO5Lmf5pyJ6Kej562U6YGO77yM5LiN566h5piv5ZOq5LiA56iu5bCN6Ieq5bex6YO95piv5LiA56iu5a2457+S77yM55m85ZWP6ICF6KaB5oqK5ZWP6aGM6KGo6YGU55qE5aW977yM6Kej562U6ICF6KaB6IO95aSg55So55m85ZWP6ICF6IO955CG6Kej55qE5pa55byP6Kqq5piO77yM6YCZ5Lqb5LqL5oOF6YO95piv5pyD6Zec5L+C5Yiw57ay6Lev5LiK55qE56S+576k5Lqk5rWB77yM5Y+D5Yqg56S+576k55qE6IGa5pyD6KqN6K2Y5bmz5bi45Y+q5pyD5Zyo57ay6Lev5LiK55yL55qE5pyL5Y+L5Lmf5piv5LiA5Lu26Z2e5bi45pyJ6Laj55qE5LqL77yM5aaC5p6c5L2g5oOz55+l6YGT5pu05aSaIFdvcmRQcmVzcyDnmoTmk43kvZzntpPpqZfmiJbmmK/kuqTkuqTmlrDmnIvlj4vvvIzlsLHkuIDlrpropoHkvoblj4PliqDllpTvvIE=” pid=”2918”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 付費佈景主題偵測套件</title>
    <url>/tw/wordpress-%E4%BB%98%E8%B2%BB%E4%BD%88%E6%99%AF%E4%B8%BB%E9%A1%8C%E5%81%B5%E6%B8%AC%E5%A5%97%E4%BB%B6/</url>
    <content><![CDATA[<p>  找不到適合自己的佈景主題嗎？來看看別人的網站是用哪一套付費主題。 WPSNIFFER 這個 Chrome 的套件可以掃描瀏覽中的 WordPress 網站是用哪一套付費主題，偵測到後點按鈕還會直接連到 themeforest 的搜尋結果，非常方便查看相關資訊，但如果網站開發者有把主題名稱修改過的話，可能就會抓不到了，所以如果不想被人家知道自己是用哪一套主題，就可以把主題資料夾的名稱修改，這樣可以至少躲過這個套件的偵測。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1446693035437696” display=”yes” title=”V29yZFByZXNzIOS7mOiyu+S9iOaZr+S4u+mhjOWBtea4rOWll+S7tg==” body=”5om+5LiN5Yiw6YGp5ZCI6Ieq5bex55qE5L2I5pmv5Li76aGM5ZeO77yf5L6G55yL55yL5Yil5Lq655qE57ay56uZ5piv55So5ZOq5LiA5aWX5LuY6LK75Li76aGM44CCIFdQU05JRkZFUiDpgJnlgIsgQ2hyb21lIOeahOWll+S7tuWPr+S7peaOg+aPj+eAj+imveS4reeahCBXb3JkUHJlc3Mg57ay56uZ5piv55So5ZOq5LiA5aWX5LuY6LK75Li76aGM77yM5YG15ris5Yiw5b6M6bue5oyJ6YiV6YKE5pyD55u05o6l6YCj5YiwIHRoZW1lZm9yZXN0IOeahOaQnOWwi+e1kOaenO+8jOmdnuW4uOaWueS+v+afpeeci+ebuOmXnOizh+ioiu+8jOS9huWmguaenOe2suermemWi+eZvOiAheacieaKiuS4u+mhjOWQjeeoseS/ruaUuemBjueahOipse+8jOWPr+iDveWwseacg+aKk+S4jeWIsOS6hu+8jOaJgOS7peWmguaenOS4jeaDs+iiq+S6uuWutuefpemBk+iHquW3seaYr+eUqOWTquS4gOWll+S4u+mhjO+8jOWwseWPr+S7peaKiuS4u+mhjOizh+aWmeWkvueahOWQjeeoseS/ruaUue+8jOmAmeaoo+WPr+S7peiHs+Wwkei6sumBjumAmeWAi+Wll+S7tueahOWBtea4rOOAgg==” pid=”3048”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 佈景主題速度</title>
    <url>/tw/wordpress-%E4%BD%88%E6%99%AF%E4%B8%BB%E9%A1%8C%E9%80%9F%E5%BA%A6/</url>
    <content><![CDATA[<p>  選擇 WordPress 主題通常會第一眼注意到的是風格、版面設計、配色等等視覺上的呈現，至於效能往往是用了一陣子後才會慢慢被發覺的問題。今天分享的服務測試了超過上千套的主題與外掛，並針對桌機與行動裝置的效能進行評分，另外還有提供 Page Speed 的分數參考，讓你在挑選佈景主題時，對於網站效能有一個比較好的基礎。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1411488132291520” display=”yes” title=”V29yZFByZXNzIOS9iOaZr+S4u+mhjOmAn+W6pg==” body=”6YG45pOHIFdvcmRQcmVzcyDkuLvpoYzpgJrluLjmnIPnrKzkuIDnnLzms6jmhI/liLDnmoTmmK/poqjmoLzjgIHniYjpnaLoqK3oqIjjgIHphY3oibLnrYnnrYnoppboprrkuIrnmoTlkYjnj77vvIzoh7PmlrzmlYjog73lvoDlvoDmmK/nlKjkuobkuIDpmaPlrZDlvozmiY3mnIPmhaLmhaLooqvnmbzoprrnmoTllY/poYzjgILku4rlpKnliIbkuqvnmoTmnI3li5nmuKzoqabkuobotoXpgY7kuIrljYPlpZfnmoTkuLvpoYzoiIflpJbmjpvvvIzkuKbph53lsI3moYzmqZ/oiIfooYzli5Xoo53nva7nmoTmlYjog73pgLLooYzoqZXliIbvvIzlj6blpJbpgoTmnInmj5DkvpsgUGFnZSBTcGVlZCDnmoTliIbmlbjlj4PogIPvvIzorpPkvaDlnKjmjJHpgbjkvYjmma/kuLvpoYzmmYLvvIzlsI3mlrzntrLnq5nmlYjog73mnInkuIDlgIvmr5TovIPlpb3nmoTln7rnpI7jgII=” pid=”2939”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 修改系統寄件人以及發信信箱</title>
    <url>/tw/wordpress-%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%B5%B1%E5%AF%84%E4%BB%B6%E4%BA%BA%E4%BB%A5%E5%8F%8A%E7%99%BC%E4%BF%A1%E4%BF%A1%E7%AE%B1/</url>
    <content><![CDATA[<p>在預設情況下，發送系統信的寄件人名稱會是 WordPress 以及 <a href="mailto:&#x77;&#x6f;&#x72;&#100;&#x70;&#x72;&#101;&#115;&#115;&#64;&#100;&#x6f;&#x6d;&#97;&#x69;&#110;&#46;&#99;&#x6f;&#109;">&#x77;&#x6f;&#x72;&#100;&#x70;&#x72;&#101;&#115;&#115;&#64;&#100;&#x6f;&#x6d;&#97;&#x69;&#110;&#46;&#99;&#x6f;&#109;</a>，在 function.php 加入以下兩個 hook 來進行修改</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 修改發信電子郵件
function wpb_sender_email( $original_email_address ) &#123;
  return ‘service@domain.com&#39;;
&#125;
&#x2F;&#x2F; 修改寄件人名稱
function wpb_sender_name( $original_email_from ) &#123;
  return ‘Hello~&#39;;
&#125;
add_filter( &#39;wp_mail_from&#39;, &#39;wpb_sender_email&#39; );
add_filter( &#39;wp_mail_from_name&#39;, &#39;wpb_sender_name&#39; );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 倒數計時器外掛</title>
    <url>/tw/wordpress-%E5%80%92%E6%95%B8%E8%A8%88%E6%99%82%E5%99%A8%E5%A4%96%E6%8E%9B/</url>
    <content><![CDATA[<p>常看到國外的網站服務提供限時的優惠資訊，並固定於網站上方來進行提示，使用 YITH Tobar Countdown 這支外掛就能做到，可以設定倒數時間、文案、點擊連結，也可以把有時效性的優惠券代碼填入，增加被索取的機會。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1523531011087231” display=”yes” title=”V29yZFByZXNzIOWAkuaVuOioiOaZguWZqOWkluaOmw==” body=”5bi455yL5Yiw5ZyL5aSW55qE57ay56uZ5pyN5YuZ5o+Q5L6b6ZmQ5pmC55qE5YSq5oOg6LOH6KiK77yM5Lim5Zu65a6a5pa857ay56uZ5LiK5pa55L6G6YCy6KGM5o+Q56S677yM5L2/55SoIFlJVEggVG9iYXIgQ291bnRkb3duIOmAmeaUr+WkluaOm+WwseiDveWBmuWIsO+8jOWPr+S7peioreWumuWAkuaVuOaZgumWk+OAgeaWh+ahiOOAgem7nuaTiumAo+e1kO+8jOS5n+WPr+S7peaKiuacieaZguaViOaAp+eahOWEquaDoOWIuOS7o+eivOWhq+WFpe+8jOWinuWKoOiiq+e0ouWPlueahOapn+acg+OAgg==” pid=”3231”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 優化外掛</title>
    <url>/tw/wordpress-%E5%84%AA%E5%8C%96%E5%A4%96%E6%8E%9B/</url>
    <content><![CDATA[<p>WPJAM 是由中國知名 WordPress 部落客所開發的優化外掛，裡面有非常多實用的功能，像是移除版本號、關閉 XML RPC、Tradebacks，還有內建許多實用的函式，非常方便在開發佈景主題時可以快速套用，文中作者詳列了每一項設定的用意以及語法，如果只需要部份功能的話將其語法貼入 function.php 即可，就可以不用安裝此外掛。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1574161276024204” display=”yes” title=”V29yZFByZXNzIOWEquWMluWkluaOmw==” body=”V1BKQU0g5piv55Sx5Lit5ZyL55+l5ZCNIFdvcmRQcmVzcyDpg6jokL3lrqLmiYDplovnmbznmoTlhKrljJblpJbmjpvvvIzoo6HpnaLmnInpnZ7luLjlpJrlr6bnlKjnmoTlip/og73vvIzlg4/mmK/np7vpmaTniYjmnKzomZ/jgIHpl5zplokgWE1MIFJQQ+OAgVRyYWRlYmFja3PvvIzpgoTmnInlhaflu7roqLHlpJrlr6bnlKjnmoTlh73lvI/vvIzpnZ7luLjmlrnkvr/lnKjplovnmbzkvYjmma/kuLvpoYzmmYLlj6/ku6Xlv6vpgJ/lpZfnlKjvvIzmlofkuK3kvZzogIXoqbPliJfkuobmr4/kuIDpoIXoqK3lrprnmoTnlKjmhI/ku6Xlj4roqp7ms5XvvIzlpoLmnpzlj6rpnIDopoHpg6jku73lip/og73nmoToqbHlsIflhbboqp7ms5XosrzlhaUgZnVuY3Rpb24ucGhwIOWNs+WPr++8jOWwseWPr+S7peS4jeeUqOWuieijneatpOWkluaOm+OAgg==” pid=”3324”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 加密後圖片 URL 的處理</title>
    <url>/tw/wordpress-%E5%8A%A0%E5%AF%86%E5%BE%8C%E5%9C%96%E7%89%87-url-%E7%9A%84%E8%99%95%E7%90%86/</url>
    <content><![CDATA[<p>把網站改成 https 後，最惱人的問題就是還有一堆沒加密網址造成混合內容而無法得到綠鎖頭，其中佔最大宗的就是圖片路徑，最直接的做法就是必須進到資料庫內做批次修改，但對不熟 SQL 語法的朋友進資料庫的修改就怕有東西改錯造成網站資料毀損，這時候就可以使用 Velvet Blues Update URLs 這支外掛來批次修改圖片路徑，事實上它不只可以修改圖片路徑，還可以修改全站的連結，這對於搬家換網址的情境下也非常適用。</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1584951078278557” display=”yes” title=”V29yZFByZXNzIOWKoOWvhuW+jOWclueJhyBVUkwg55qE6JmV55CG” body=”5oqK57ay56uZ5pS55oiQIGh0dHBzIOW+jO+8jOacgOaDseS6uueahOWVj+mhjOWwseaYr+mChOacieS4gOWghuaykuWKoOWvhue2suWdgOmAoOaIkOa3t+WQiOWFp+WuueiAjOeEoeazleW+l+WIsOe2oOmOlumgre+8jOWFtuS4reS9lOacgOWkp+Wul+eahOWwseaYr+WclueJh+i3r+W+ke+8jOacgOebtOaOpeeahOWBmuazleWwseaYr+W/hemgiOmAsuWIsOizh+aWmeW6q+WFp+WBmuaJueasoeS/ruaUue+8jOS9huWwjeS4jeeGnyBTUUwg6Kqe5rOV55qE5pyL5Y+L6YCy6LOH5paZ5bqr55qE5L+u5pS55bCx5oCV5pyJ5p2x6KW/5pS56Yyv6YCg5oiQ57ay56uZ6LOH5paZ5q+A5pCN77yM6YCZ5pmC5YCZ5bCx5Y+v5Lul5L2/55SoIFZlbHZldCBCbHVlcyBVcGRhdGUgVVJMcyDpgJnmlK/lpJbmjpvkvobmibnmrKHkv67mlLnlnJbniYfot6/lvpHvvIzkuovlr6bkuIrlroPkuI3lj6rlj6/ku6Xkv67mlLnlnJbniYfot6/lvpHvvIzpgoTlj6/ku6Xkv67mlLnlhajnq5nnmoTpgKPntZDvvIzpgJnlsI3mlrzmkKzlrrbmj5vntrLlnYDnmoTmg4XlooPkuIvkuZ/pnZ7luLjpgannlKjjgII=” pid=”3345”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 單頁式頁面製作工具</title>
    <url>/tw/wordpress-%E5%96%AE%E9%A0%81%E5%BC%8F%E9%A0%81%E9%9D%A2%E8%A3%BD%E4%BD%9C%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>  近幾年 WordPress 視覺化編輯器如雨後春筍般出現，每一款都有自己的支持者以及適合類型，今天要介紹的是專門針對一頁式網頁所設計的視覺化編輯器，叫做 Onepage Builder，一般的輯輯器因為需要延用原本 Header 與 Footer 的框架，所以都要離開編輯中的畫面到全站設定去調整，而 Onepage Builder 則可以完全打造自己的頁首與頁尾，它基本上就是提供一個完全空白的頁面讓你發揮，也可以使用內建的版型來設計，這對於需要製作臨時的行銷頁面或是週期性的促銷活動都可靈活運用。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1413269158780084” display=”yes” title=”V29yZFByZXNzIOWWrumggeW8j+mggemdouijveS9nOW3peWFtw==” body=”6L+R5bm+5bm0IFdvcmRQcmVzcyDoppboprrljJbnt6jovK/lmajlpoLpm6jlvozmmKXnrY3oiKzlh7rnj77vvIzmr4/kuIDmrL7pg73mnInoh6rlt7HnmoTmlK/mjIHogIXku6Xlj4rpganlkIjpoZ7lnovvvIzku4rlpKnopoHku4vntLnnmoTmmK/lsIjploDph53lsI3kuIDpoIHlvI/ntrLpoIHmiYDoqK3oqIjnmoToppboprrljJbnt6jovK/lmajvvIzlj6vlgZogT25lcGFnZSBCdWlsZGVy77yM5LiA6Iis55qE6Lyv6Lyv5Zmo5Zug54K66ZyA6KaB5bu255So5Y6f5pysIEhlYWRlciDoiIcgRm9vdGVyIOeahOahhuaetu+8jOaJgOS7pemDveimgemboumWi+e3qOi8r+S4reeahOeVq+mdouWIsOWFqOermeioreWumuWOu+iqv+aVtO+8jOiAjCBPbmVwYWdlIEJ1aWxkZXIg5YmH5Y+v5Lul5a6M5YWo5omT6YCg6Ieq5bex55qE6aCB6aaW6IiH6aCB5bC+77yM5a6D5Z+65pys5LiK5bCx5piv5o+Q5L6b5LiA5YCL5a6M5YWo56m655m955qE6aCB6Z2i6K6T5L2g55m85o+u77yM5Lmf5Y+v5Lul5L2/55So5YWn5bu655qE54mI5Z6L5L6G6Kit6KiI77yM6YCZ5bCN5pa86ZyA6KaB6KO95L2c6Ieo5pmC55qE6KGM6Yq36aCB6Z2i5oiW5piv6YCx5pyf5oCn55qE5L+D6Yq35rS75YuV6YO95Y+v6Z2I5rS76YGL55So44CC” pid=”2945”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 圖片遮照顯示內容</title>
    <url>/tw/wordpress-%E5%9C%96%E7%89%87%E9%81%AE%E7%85%A7%E9%A1%AF%E7%A4%BA%E5%85%A7%E5%AE%B9/</url>
    <content><![CDATA[<p>  好的內容如果有好的呈現方式更能讓使用者留下深刻的印象，因此我們計劃整理很多特別的網頁互動效果，並將其整合在 Divi 主題之中，方便讓大家可以簡單就上手。   第一集我們製作的是使用遮照的方式，也就是把上方的圖像剪紙一樣挖空部份內容，來覆蓋整體主視覺圖像的呈現，有點像站在窗花外只能看到裡面的一小部份，但點擊後會有豁然開朗的透明感XD，有點難解釋，看到範例就能明白了。   <a href="https://hellowp.cc/wordpress-image-mask-effect/">https://hellowp.cc/wordpress-image-mask-effect/</a>   為了更好客製，我們已全部整合至 Divi 的編輯器之中，所以只要換圖跟改字，也能輕易設計出一模一樣的效果，趕快來玩玩看吧！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1388201881286812” display=”yes” title=”V29yZFByZXNzIOWclueJh+mBrueFp+mhr+ekuuWFp+WuuQ==” body=”5aW955qE5YWn5a655aaC5p6c5pyJ5aW955qE5ZGI54++5pa55byP5pu06IO96K6T5L2/55So6ICF55WZ5LiL5rex5Yi755qE5Y2w6LGh77yM5Zug5q2k5oiR5YCR6KiI5YqD5pW055CG5b6I5aSa54m55Yil55qE57ay6aCB5LqS5YuV5pWI5p6c77yM5Lim5bCH5YW25pW05ZCI5ZyoIERpdmkg5Li76aGM5LmL5Lit77yM5pa55L6/6K6T5aSn5a625Y+v5Lul57Ch5Zau5bCx5LiK5omL44CC56ys5LiA6ZuG5oiR5YCR6KO95L2c55qE5piv5L2/55So6YGu54Wn55qE5pa55byP77yM5Lmf5bCx5piv5oqK5LiK5pa555qE5ZyW5YOP5Ymq57SZ5LiA5qij5oyW56m66YOo5Lu95YWn5a6577yM5L6G6KaG6JOL5pW06auU5Li76KaW6Ka65ZyW5YOP55qE5ZGI54++77yM5pyJ6bue5YOP56uZ5Zyo56qX6Iqx5aSW5Y+q6IO955yL5Yiw6KOh6Z2i55qE5LiA5bCP6YOo5Lu977yM5L2G6bue5pOK5b6M5pyD5pyJ6LGB54S26ZaL5pyX55qE6YCP5piO5oSfWETvvIzmnInpu57pm6Pop6Pph4vvvIznnIvliLDnr4TkvovlsLHog73mmI7nmb3kuobjgIJodHRwczovL2hlbGxvd3AuY2Mvd29yZHByZXNzLWltYWdlLW1hc2stZWZmZWN0L+eCuuS6huabtOWlveWuouijve+8jOaIkeWAkeW3suWFqOmDqOaVtOWQiOiHsyBEaXZpIOeahOe3qOi8r+WZqOS5i+S4re+8jOaJgOS7peWPquimgeaPm+Wclui3n+aUueWtl++8jOS5n+iDvei8leaYk+ioreioiOWHuuS4gOaooeS4gOaoo+eahOaViOaenO+8jOi2leW/q+S+hueOqeeOqeeci+WQp++8gQ==” pid=”2907”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 壓縮圖片外掛大車拼</title>
    <url>/tw/wordpress-%E5%A3%93%E7%B8%AE%E5%9C%96%E7%89%87%E5%A4%96%E6%8E%9B%E5%A4%A7%E8%BB%8A%E6%8B%BC/</url>
    <content><![CDATA[<p>增加網站的載入速度，圖片的壓縮是非常關鍵的一環，WordPress 有非常多款的圖片壓縮外掛，這篇文章整理的六款來做比較，先講結論，勝出的是 EWWW Image Optimizer，想知道原因的朋友可以進去看他是怎麼分析的，從優缺點介紹、規格比較表到真實壓縮後的圖片比較，也許看完它的評比會有不同的想法也說不定。</p>
<span id="more"></span>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1530185403755125” display=”yes” title=”V29yZFByZXNzIOWjk+e4ruWclueJh+WkluaOm+Wkp+i7iuaLvA==” body=”54K65LqG5aKe5Yqg57ay56uZ55qE6LyJ5YWl6YCf5bqm77yM5ZyW54mH55qE5aOT57iu5piv6Z2e5bi46Zec6Y2155qE5LiA55Kw77yMV29yZFByZXNzIOaciemdnuW4uOWkmuasvueahOWclueJh+Wjk+e4ruWkluaOm++8jOmAmeevh+aWh+eroOaVtOeQhueahOWFreasvuS+huWBmuavlOi8g++8jOWFiOism+e1kOirlu+8jOWLneWHuueahOaYryBFV1dXIEltYWdlIE9wdGltaXplcu+8jOaDs+efpemBk+WOn+WboOeahOaci+WPi+WPr+S7pemAsuWOu+eci+S7luaYr+aAjum6vOWIhuaekOeahO+8jOW+nuWEque8uum7nuS7i+e0ueOAgeimj+agvOavlOi8g+ihqOWIsOecn+WvpuWjk+e4ruW+jOeahOWclueJh+avlOi8g++8jOS5n+ioseeci+WujOWug+eahOipleavlOacg+acieS4jeWQjOeahOaDs+azleS5n+iqquS4jeWumuOAgg==” pid=”3245”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 如何製作檔案下載功能？</title>
    <url>/tw/wordpress-%E5%A6%82%E4%BD%95%E8%A3%BD%E4%BD%9C%E6%AA%94%E6%A1%88%E4%B8%8B%E8%BC%89%E5%8A%9F%E8%83%BD%EF%BC%9F/</url>
    <content><![CDATA[<p>常碰到 B2B 類型的企業需要在網站上提供產品型錄或是規格說明書下載的功能嗎？檔案總管的功能除了要讓潛在客戶方便搜尋瀏覽，也要讓企業內部維護人員能方便管理上傳的文件，這篇文章完整說明如何先從新增文章類型開始，設計自己的檔案文件頁面與分類，再到使用 Posts Table Pro 這支付費外掛把文件列表顯示在前台，讓你可以快速完成檔案下載系統。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1600100443430287” display=”yes” title=”V29yZFByZXNzIOWmguS9leijveS9nOaqlOahiOS4i+i8ieWKn+iDve+8nw==” body=”5bi456Kw5YiwIEIyQiDpoZ7lnovnmoTkvIHmpa3pnIDopoHlnKjntrLnq5nkuIrmj5DkvpvnlKLlk4HlnovpjITmiJbmmK/opo/moLzoqqrmmI7mm7jkuIvovInnmoTlip/og73ll47vvJ/mqpTmoYjnuL3nrqHnmoTlip/og73pmaTkuobopoHorpPmvZvlnKjlrqLmiLbmlrnkvr/mkJzlsIvngI/opr3vvIzkuZ/opoHorpPkvIHmpa3lhafpg6jntq3orbfkurrlk6Hog73mlrnkvr/nrqHnkIbkuIrlgrPnmoTmlofku7bvvIzpgJnnr4fmlofnq6DlrozmlbToqqrmmI7lpoLkvZXlhYjlvp7mlrDlop7mlofnq6DpoZ7lnovplovlp4vvvIzoqK3oqIjoh6rlt7HnmoTmqpTmoYjmlofku7bpoIHpnaLoiIfliIbpoZ7vvIzlho3liLDkvb/nlKggUG9zdHMgVGFibGUgUHJvIOmAmeaUr+S7mOiyu+WkluaOm+aKiuaWh+S7tuWIl+ihqOmhr+ekuuWcqOWJjeWPsO+8jOiuk+S9oOWPr+S7peW/q+mAn+WujOaIkOaqlOahiOS4i+i8ieezu+e1seOAgg==” pid=”3360”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 客製化導覽系統</title>
    <url>/tw/wordpress-%E5%AE%A2%E8%A3%BD%E5%8C%96%E5%B0%8E%E8%A6%BD%E7%B3%BB%E7%B5%B1/</url>
    <content><![CDATA[<p>導覽系統是使用者在網站裡的指南針，設計的好可以有效增加訪客的停留時間，藉此提高商業目標的轉換率。這篇文章分享了四種實用的導覽設計方式，只要在 function.php 加入這些程式碼，就能擁有這些功能：</p>
<p>1、將屬於該頁面的子選單截取出來顯示在側邊欄</p>
<p>2、使用麵包屑的方式顯示頁面標題</p>
<p>3、使用下拉選單收納文章標籤</p>
<p>4、文章彙整頁增加分頁導覽</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1394753457298321” display=”yes” title=”V29yZFByZXNzIOWuouijveWMluWwjuimveezu+e1sQ==” body=”5bCO6Ka957O757Wx5piv5L2/55So6ICF5Zyo57ay56uZ6KOh55qE5oyH5Y2X6Yed77yM6Kit6KiI55qE5aW95Y+v5Lul5pyJ5pWI5aKe5Yqg6Kiq5a6i55qE5YGc55WZ5pmC6ZaT77yM6JeJ5q2k5o+Q6auY5ZWG5qWt55uu5qiZ55qE6L2J5o+b546H44CC6YCZ56+H5paH56ug5YiG5Lqr5LqG5Zub56iu5a+m55So55qE5bCO6Ka96Kit6KiI5pa55byP77yM5Y+q6KaB5ZyoIGZ1bmN0aW9uLnBocCDliqDlhaXpgJnkupvnqIvlvI/norzvvIzlsLHog73mk4HmnInpgJnkupvlip/og73vvJox44CB5bCH5bGs5pa86Kmy6aCB6Z2i55qE5a2Q6YG45Zau5oiq5Y+W5Ye65L6G6aGv56S65Zyo5YG06YKK5qyEMuOAgeS9v+eUqOm6teWMheWxkeeahOaWueW8j+mhr+ekuumggemdouaomemhjDPjgIHkvb/nlKjkuIvmi4npgbjllq7mlLbntI3mlofnq6DmqJnnsaQ044CB5paH56ug5b2Z5pW06aCB5aKe5Yqg5YiG6aCB5bCO6Ka9” pid=”2916”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 恢復主題或外掛的前一版本</title>
    <url>/tw/wordpress-%E6%81%A2%E5%BE%A9%E4%B8%BB%E9%A1%8C%E6%88%96%E5%A4%96%E6%8E%9B%E7%9A%84%E5%89%8D%E4%B8%80%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>  常常在更新 WP 的主題或外掛之後，會產生一些離奇的狀況，如果追查的結果是更新版本的問題，平時有備份的話就還能還原，如果手邊緊急沒有備份，或是覺得要從重備份裡找到檔案再重新上傳覺得麻煩，就可以使用 WP Rollback 這支外掛，它可以直接幫你重新安裝上一版本的主題或外掛，或是指定任一版本，這樣就能再開發商修復問題前，保持網站的正常運作而不受影響。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1428331797273820” display=”yes” title=”V29yZFByZXNzIOaBouW+qeS4u+mhjOaIluWkluaOm+eahOWJjeS4gOeJiOacrA==” body=”5bi45bi45Zyo5pu05pawIFdQIOeahOS4u+mhjOaIluWkluaOm+S5i+W+jO+8jOacg+eUoueUn+S4gOS6m+mbouWlh+eahOeLgOazge+8jOWmguaenOi/veafpeeahOe1kOaenOaYr+abtOaWsOeJiOacrOeahOWVj+mhjO+8jOW5s+aZguacieWCmeS7veeahOipseWwsemChOiDvemChOWOn++8jOWmguaenOaJi+mCiue3iuaApeaykuacieWCmeS7ve+8jOaIluaYr+imuuW+l+imgeW+numHjeWCmeS7veijoeaJvuWIsOaqlOahiOWGjemHjeaWsOS4iuWCs+imuuW+l+m6u+eFqe+8jOWwseWPr+S7peS9v+eUqCBXUCBSb2xsYmFjayDpgJnmlK/lpJbmjpvvvIzlroPlj6/ku6Xnm7TmjqXluavkvaDph43mlrDlronoo53kuIrkuIDniYjmnKznmoTkuLvpoYzmiJblpJbmjpvvvIzmiJbmmK/mjIflrprku7vkuIDniYjmnKzvvIzpgJnmqKPlsLHog73lho3plovnmbzllYbkv67lvqnllY/poYzliY3vvIzkv53mjIHntrLnq5nnmoTmraPluLjpgYvkvZzogIzkuI3lj5flvbHpn7/jgII=” pid=”3006”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 打造企業內部社群網站</title>
    <url>/tw/wordpress-%E6%89%93%E9%80%A0%E4%BC%81%E6%A5%AD%E5%85%A7%E9%83%A8%E7%A4%BE%E7%BE%A4%E7%B6%B2%E7%AB%99/</url>
    <content><![CDATA[<p>  公司人多嘴雜的話，可以考慮架設企業內部社群來討論下午茶要訂什麼。使用 BuddyPress 這套外掛就可以做出類似 Facebook 這樣的社群網站，雖然 FB 也提供企業內部用的社群 Workplace，但自己架的話比較容易增加些有的沒有的功能，有閒的朋友可以幫公司架看看，也許有免費的下午茶可以吃。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1430188467088153” display=”yes” title=”V29yZFByZXNzIOaJk+mAoOS8gealreWFp+mDqOekvue+pOe2suermQ==” body=”5YWs5Y+45Lq65aSa5Zi06Zuc55qE6Kmx77yM5Y+v5Lul6ICD5oWu5p626Kit5LyB5qWt5YWn6YOo56S+576k5L6G6KiO6KuW5LiL5Y2I6Iy26KaB6KiC5LuA6bq844CC5L2/55SoIEJ1ZGR5UHJlc3Mg6YCZ5aWX5aSW5o6b5bCx5Y+v5Lul5YGa5Ye66aGe5Ly8IEZhY2Vib29rIOmAmeaoo+eahOekvue+pOe2suerme+8jOmblueEtiBGQiDkuZ/mj5DkvpvkvIHmpa3lhafpg6jnlKjnmoTnpL7nvqQgV29ya3BsYWNl77yM5L2G6Ieq5bex5p6255qE6Kmx5q+U6LyD5a655piT5aKe5Yqg5Lqb5pyJ55qE5rKS5pyJ55qE5Yqf6IO977yM5pyJ6ZaS55qE5pyL5Y+L5Y+v5Lul5bmr5YWs5Y+45p6255yL55yL77yM5Lmf6Kix5pyJ5YWN6LK755qE5LiL5Y2I6Iy25Y+v5Lul5ZCD44CC” pid=”3011”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 接案者絕佳的溝通工具</title>
    <url>/tw/wordpress-%E6%8E%A5%E6%A1%88%E8%80%85%E7%B5%95%E4%BD%B3%E7%9A%84%E6%BA%9D%E9%80%9A%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>時常覺得在跟客戶溝通時有種牛頭不對馬尾的感覺嗎？ProjectHuddle 這套 WordPress 外掛就是專門針對這種情境來解決問題的，它可以讓客戶直接在網頁上標記需要修改的地方，並且可以指派對象已經標記是否已解決。而開發人員在後台直接可以看到客戶的待辦清單，對於要量化修改項目的作業會十分方便，此外後台還可以上傳尚未切板前的設計稿，一樣可以讓客戶在上面留言，並有驗收完成的功能，最厲害的是，它還可以加入其它網站來一併做修改管理，超級實用！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1526338540806478” display=”yes” title=”V29yZFByZXNzIOaOpeahiOiAhee1leS9s+eahOa6nemAmuW3peWFtw==” body=”5pmC5bi46Ka65b6X5Zyo6Lef5a6i5oi25rqd6YCa5pmC5pyJ56iu54mb6aCt5LiN5bCN6aas5bC+55qE5oSf6Ka65ZeO77yfUHJvamVjdEh1ZGRsZSDpgJnlpZcgV29yZFByZXNzIOWkluaOm+WwseaYr+WwiOmWgOmHneWwjemAmeeoruaDheWig+S+huino+axuuWVj+mhjOeahO+8jOWug+WPr+S7peiuk+WuouaItuebtOaOpeWcqOe2sumggeS4iuaomeiomOmcgOimgeS/ruaUueeahOWcsOaWue+8jOS4puS4lOWPr+S7peaMh+a0vuWwjeixoeW3sue2k+aomeiomOaYr+WQpuW3suino+axuuOAguiAjOmWi+eZvOS6uuWToeWcqOW+jOWPsOebtOaOpeWPr+S7peeci+WIsOWuouaItueahOW+hei+pua4heWWru+8jOWwjeaWvOimgemHj+WMluS/ruaUuemgheebrueahOS9nOalreacg+WNgeWIhuaWueS+v++8jOatpOWkluW+jOWPsOmChOWPr+S7peS4iuWCs+WwmuacquWIh+adv+WJjeeahOioreioiOeov++8jOS4gOaoo+WPr+S7peiuk+WuouaItuWcqOS4iumdoueVmeiogO+8jOS4puaciempl+aUtuWujOaIkOeahOWKn+iDve+8jOacgOWOsuWus+eahOaYr++8jOWug+mChOWPr+S7peWKoOWFpeWFtuWug+e2suermeS+huS4gOS9teWBmuS/ruaUueeuoeeQhu+8jOi2hee0muWvpueUqO+8gQ==” pid=”3239”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 提供會員前台註冊表單</title>
    <url>/tw/wordpress-%E6%8F%90%E4%BE%9B%E6%9C%83%E5%93%A1%E5%89%8D%E5%8F%B0%E8%A8%BB%E5%86%8A%E8%A1%A8%E5%96%AE/</url>
    <content><![CDATA[<p>WordPress 在安裝完成後，就直接內建會員資料庫的機制，如果想提供註冊會員的功能，在預設情況下就必須登入網站後台，這會造成某種程度的資安風險以及使用者的體驗不佳，這時候就需要前台註冊表單來解決這個問題。User Registration 這套外掛可以很方便的使用視覺化編輯器來建構註冊表單，所有欄位都可以自行拖拉設計，不需要編寫半行程式碼，此外還有提供會員機制的相關功能，是一套當需要設計會員系統時非常完整的工具。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1578134302293568” display=”yes” title=”V29yZFByZXNzIOaPkOS+m+acg+WToeWJjeWPsOiou+WGiuihqOWWrg==” body=”V29yZFByZXNzIOWcqOWuieijneWujOaIkOW+jO+8jOWwseebtOaOpeWFp+W7uuacg+WToeizh+aWmeW6q+eahOapn+WItu+8jOWmguaenOaDs+aPkOS+m+iou+WGiuacg+WToeeahOWKn+iDve+8jOWcqOmgkOioreaDheazgeS4i+WwseW/hemgiOeZu+WFpee2suermeW+jOWPsO+8jOmAmeacg+mAoOaIkOafkOeorueoi+W6pueahOizh+WuiemiqOmaquS7peWPiuS9v+eUqOiAheeahOmrlOmpl+S4jeS9s++8jOmAmeaZguWAmeWwsemcgOimgeWJjeWPsOiou+WGiuihqOWWruS+huino+axuumAmeWAi+WVj+mhjOOAglVzZXIgUmVnaXN0cmF0aW9uIOmAmeWll+WkluaOm+WPr+S7peW+iOaWueS+v+eahOS9v+eUqOimluimuuWMlue3qOi8r+WZqOS+huW7uuani+iou+WGiuihqOWWru+8jOaJgOacieashOS9jemDveWPr+S7peiHquihjOaLluaLieioreioiO+8jOS4jemcgOimgee3qOWvq+WNiuihjOeoi+W8j+eivO+8jOatpOWklumChOacieaPkOS+m+acg+WToeapn+WItueahOebuOmXnOWKn+iDve+8jOaYr+S4gOWll+eVtumcgOimgeioreioiOacg+WToeezu+e1seaZgumdnuW4uOWujOaVtOeahOW3peWFt+OAgg==” pid=”3330”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 支援單系統</title>
    <url>/tw/wordpress-%E6%94%AF%E6%8F%B4%E5%96%AE%E7%B3%BB%E7%B5%B1/</url>
    <content><![CDATA[<p>  公司的產品如果品項多、種類又複雜，當客戶遇到問題時萬一沒有好的支援單系統就很容易造成不良的客戶回饋體驗。優秀的支援單系統除了要方便客戶進行提問外，還要讓公司內部的客服人員可以依據問題的種類以及時效性來進行處理，除此之外，對管理者而言也需要有報表彙整來看到客戶問題與內部人員的處理狀態，從中找出流程可以改善的地方，進而提升客戶體驗。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1478322262274773” display=”yes” title=”V29yZFByZXNzIOaUr+aPtOWWruezu+e1sQ==” body=”5YWs5Y+455qE55Si5ZOB5aaC5p6c5ZOB6aCF5aSa44CB56iu6aGe5Y+I6KSH6Zuc77yM55W25a6i5oi26YGH5Yiw5ZWP6aGM5pmC6JCs5LiA5rKS5pyJ5aW955qE5pSv5o+05Zau57O757Wx5bCx5b6I5a655piT6YCg5oiQ5LiN6Imv55qE5a6i5oi25Zue6aWL6auU6amX44CC5YSq56eA55qE5pSv5o+05Zau57O757Wx6Zmk5LqG6KaB5pa55L6/5a6i5oi26YCy6KGM5o+Q5ZWP5aSW77yM6YKE6KaB6K6T5YWs5Y+45YWn6YOo55qE5a6i5pyN5Lq65ZOh5Y+v5Lul5L6d5pOa5ZWP6aGM55qE56iu6aGe5Lul5Y+K5pmC5pWI5oCn5L6G6YCy6KGM6JmV55CG77yM6Zmk5q2k5LmL5aSW77yM5bCN566h55CG6ICF6ICM6KiA5Lmf6ZyA6KaB5pyJ5aCx6KGo5b2Z5pW05L6G55yL5Yiw5a6i5oi25ZWP6aGM6IiH5YWn6YOo5Lq65ZOh55qE6JmV55CG54uA5oWL77yM5b6e5Lit5om+5Ye65rWB56iL5Y+v5Lul5pS55ZaE55qE5Zyw5pa577yM6YCy6ICM5o+Q5Y2H5a6i5oi26auU6amX44CC” pid=”3118”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 文章精選圖片設定</title>
    <url>/tw/wordpress-%E6%96%87%E7%AB%A0%E7%B2%BE%E9%81%B8%E5%9C%96%E7%89%87%E8%A8%AD%E5%AE%9A/</url>
    <content><![CDATA[<p>  【 Feature Image 在以前的 WP 版本翻譯叫做特色圖片，最新版的改名為精選圖片，雖然不太適應但還是以新版的翻譯為準 】。許多 Theme 在設計文章列表的時候，會搭配圖片與摘要，而這圖片通常會使用文章的精選圖片，如果沒有設定文章精選圖片的話，就會發生頁面跑版的情形，所以需要額外準備一張預設的圖片來指定給沒設精選圖片的文章，或是直接使用該文章內第一張圖片做為精選圖片，具體做法可以參考這篇文章！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1424617037645296” display=”yes” title=”V29yZFByZXNzIOaWh+eroOeyvumBuOWclueJh+ioreWumg==” body=”44CQIEZlYXR1cmUgSW1hZ2Ug5Zyo5Lul5YmN55qEIFdQIOeJiOacrOe/u+itr+WPq+WBmueJueiJsuWclueJh++8jOacgOaWsOeJiOeahOaUueWQjeeCuueyvumBuOWclueJh++8jOmblueEtuS4jeWkqumBqeaHieS9humChOaYr+S7peaWsOeJiOeahOe/u+itr+eCuua6liDjgJHjgILoqLHlpJogVGhlbWUg5Zyo6Kit6KiI5paH56ug5YiX6KGo55qE5pmC5YCZ77yM5pyD5pCt6YWN5ZyW54mH6IiH5pGY6KaB77yM6ICM6YCZ5ZyW54mH6YCa5bi45pyD5L2/55So5paH56ug55qE57K+6YG45ZyW54mH77yM5aaC5p6c5rKS5pyJ6Kit5a6a5paH56ug57K+6YG45ZyW54mH55qE6Kmx77yM5bCx5pyD55m855Sf6aCB6Z2i6LeR54mI55qE5oOF5b2i77yM5omA5Lul6ZyA6KaB6aGN5aSW5rqW5YKZ5LiA5by16aCQ6Kit55qE5ZyW54mH5L6G5oyH5a6a57Wm5rKS6Kit57K+6YG45ZyW54mH55qE5paH56ug77yM5oiW5piv55u05o6l5L2/55So6Kmy5paH56ug5YWn56ys5LiA5by15ZyW54mH5YGa54K657K+6YG45ZyW54mH77yM5YW36auU5YGa5rOV5Y+v5Lul5Y+D6ICD6YCZ56+H5paH56ug77yB” pid=”3000”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 會員限定內容外掛</title>
    <url>/tw/wordpress-%E6%9C%83%E5%93%A1%E9%99%90%E5%AE%9A%E5%85%A7%E5%AE%B9%E5%A4%96%E6%8E%9B/</url>
    <content><![CDATA[<p>如果你的網站是提供進階的內容，需要加入會員才能看到完整的文章，那麼使用 WP-Members 這支外掛可以很容易的達到此功能。它可以將文章內容限定為會員瀏覽，還可以在前臺提供會員登入以及註冊表單，讓你的訪客可以快速完成會員申請，另外還可以自訂註冊表單欄位，是一套非常方便的內容管理工具。</p>
<span id="more"></span>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1637228156384182” display=”yes” title=”V29yZFByZXNzIOacg+WToemZkOWumuWFp+WuueWkluaOmw==” body=”5aaC5p6c5L2g55qE57ay56uZ5piv5o+Q5L6b6YCy6ZqO55qE5YWn5a6577yM6ZyA6KaB5Yqg5YWl5pyD5ZOh5omN6IO955yL5Yiw5a6M5pW055qE5paH56ug77yM6YKj6bq85L2/55SoIFdQLU1lbWJlcnMg6YCZ5pSv5aSW5o6b5Y+v5Lul5b6I5a655piT55qE6YGU5Yiw5q2k5Yqf6IO944CC5a6D5Y+v5Lul5bCH5paH56ug5YWn5a656ZmQ5a6a54K65pyD5ZOh54CP6Ka977yM6YKE5Y+v5Lul5Zyo5YmN6Ie65o+Q5L6b5pyD5ZOh55m75YWl5Lul5Y+K6Ki75YaK6KGo5Zau77yM6K6T5L2g55qE6Kiq5a6i5Y+v5Lul5b+r6YCf5a6M5oiQ5pyD5ZOh55Sz6KuL77yM5Y+m5aSW6YKE5Y+v5Lul6Ieq6KiC6Ki75YaK6KGo5Zau5qyE5L2N77yM5piv5LiA5aWX6Z2e5bi45pa55L6/55qE5YWn5a65566h55CG5bel5YW344CC” pid=”3374”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 本機架站利器</title>
    <url>/tw/wordpress-%E6%9C%AC%E6%A9%9F%E6%9E%B6%E7%AB%99%E5%88%A9%E5%99%A8/</url>
    <content><![CDATA[<p>  如果想學習製作網站，最快的方式就是用自己的電腦練習架一個，如果是 WordPress 網站，就會需要用到伺服器、資料庫、PHP，光是把環境準備好可能熱情就會被消磨一半了，所以有軟體公司推出懶人包，只要安裝一次就能把該裝的軟體裝好，Win 平台有 WAMP、XAMP，Mac 則有 MAMP。   但有了環境後要再裝 WordPress 需要自己去下載程式、開好資料庫，執行安裝步驟，所以又有廠商把這流程更簡化了，它叫做 AMPPS，它除了安裝好環境以外，還能自動安裝 WordPress 等其它數百種開源軟體，重點是這麼方便的工具竟然是免費下載，感謝 @[1393217891:2048:梅干桑] 大大的推薦，有想學習自架網站的朋友一定要試一下 AMPPS！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1398928640214136” display=”yes” title=”V29yZFByZXNzIOacrOapn+aetuermeWIqeWZqA==” body=”5aaC5p6c5oOz5a2457+S6KO95L2c57ay56uZ77yM5pyA5b+r55qE5pa55byP5bCx5piv55So6Ieq5bex55qE6Zu76IWm57e057+S5p625LiA5YCL77yM5aaC5p6c5pivIFdvcmRQcmVzcyDntrLnq5nvvIzlsLHmnIPpnIDopoHnlKjliLDkvLrmnI3lmajjgIHos4fmlpnluqvjgIFQSFDvvIzlhYnmmK/miornkrDlooPmupblgpnlpb3lj6/og73nhrHmg4XlsLHmnIPooqvmtojno6jkuIDljYrkuobvvIzmiYDku6XmnInou5/pq5Tlhazlj7jmjqjlh7rmh7bkurrljIXvvIzlj6ropoHlronoo53kuIDmrKHlsLHog73mioroqbLoo53nmoTou5/pq5Too53lpb3vvIxXaW4g5bmz5Y+w5pyJIFdBTVDjgIFYQU1Q77yMTWFjIOWJh+aciSBNQU1Q44CC5L2G5pyJ5LqG55Kw5aKD5b6M6KaB5YaN6KOdIFdvcmRQcmVzcyDpnIDopoHoh6rlt7HljrvkuIvovInnqIvlvI/jgIHplovlpb3os4fmlpnluqvvvIzln7fooYzlronoo53mraXpqZ/vvIzmiYDku6Xlj4jmnInlu6DllYbmiorpgJnmtYHnqIvmm7TnsKHljJbkuobvvIzlroPlj6vlgZogQU1QUFPvvIzlroPpmaTkuoblronoo53lpb3nkrDlooPku6XlpJbvvIzpgoTog73oh6rli5Xlronoo50gV29yZFByZXNzIOetieWFtuWug+aVuOeZvueorumWi+a6kOi7n+mrlO+8jOmHjem7nuaYr+mAmem6vOaWueS+v+eahOW3peWFt+ern+eEtuaYr+WFjeiyu+S4i+i8ie+8jOaEn+isnSBAWzEzOTMyMTc4OTE6MjA0ODrmooXlubLmoZFdIOWkp+Wkp+eahOaOqOiWpu+8jOacieaDs+WtuOe/kuiHquaetue2suermeeahOaci+WPi+S4gOWumuimgeippuS4gOS4iyBBTVBQU++8gQ==” pid=”2924”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 本機開發工具</title>
    <url>/tw/wordpress-%E6%9C%AC%E6%A9%9F%E9%96%8B%E7%99%BC%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>習慣用使用 Gulp / Node.js 前端工程師，非常適合使用 WordPressify 這套本機開發環境來進行開發，安裝方式非常簡單，不用三分鐘就可以搭建有本地 Server 的 WordPress 網站，並且已整合 Gulp，資料夾結構也把 themes 跟 plugins 拆分出來，打包後還會自動將 themes 自動壓縮，方便後續上傳正式機。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1564941563612842” display=”yes” title=”V29yZFByZXNzIOacrOapn+mWi+eZvOW3peWFtw==” body=”57+S5oWj55So5L2/55SoIEd1bHAgLyBOb2RlLmpzIOWJjeerr+W3peeoi+W4q++8jOmdnuW4uOmBqeWQiOS9v+eUqCBXb3JkUHJlc3NpZnkg6YCZ5aWX5pys5qmf6ZaL55m855Kw5aKD5L6G6YCy6KGM6ZaL55m877yM5a6J6KOd5pa55byP6Z2e5bi457Ch5Zau77yM5LiN55So5LiJ5YiG6ZCY5bCx5Y+v5Lul5pCt5bu65pyJ5pys5ZywIFNlcnZlciDnmoQgV29yZFByZXNzIOe2suerme+8jOS4puS4lOW3suaVtOWQiCBHdWxw77yM6LOH5paZ5aS+57WQ5qeL5Lmf5oqKIHRoZW1lcyDot58gcGx1Z2lucyDmi4bliIblh7rkvobvvIzmiZPljIXlvozpgoTmnIPoh6rli5XlsIcgdGhlbWVzIOiHquWLleWjk+e4ru+8jOaWueS+v+W+jOe6jOS4iuWCs+ato+W8j+apn+OAgg==” pid=”3309”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 本機開發環境軟體</title>
    <url>/tw/wordpress-%E6%9C%AC%E6%A9%9F%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83%E8%BB%9F%E9%AB%94/</url>
    <content><![CDATA[<p>  沒有任何一台主機的速度比在自己電腦上跑網站來得更快，所以通常開發者都會先在本機進行開發，但往往會碰到一些問題，像是沒辦法把開發中的進度直接貼網址給別人看，或是本機開發環境在移到網站主機後會發生無法預期的狀況，為了解決些問題，有許多廠商開發出虛擬機的技術來模擬正式主機在本機上的環境，並整合 WordPress 的作業流程，像是自動安裝主題、外掛，或是搭建好自己習慣的開發環境，而 theme juice 是一套把需要指令操作的本機環境技術，變成可視覺化的操作介面，並搭配 ssh 遠端部署，可以非常方便的同時管理本機與遠端的 WordPress 網站。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1471281509645515” display=”yes” title=”V29yZFByZXNzIOacrOapn+mWi+eZvOeSsOWig+i7n+mrlA==” body=”5rKS5pyJ5Lu75L2V5LiA5Y+w5Li75qmf55qE6YCf5bqm5q+U5Zyo6Ieq5bex6Zu76IWm5LiK6LeR57ay56uZ5L6G5b6X5pu05b+r77yM5omA5Lul6YCa5bi46ZaL55m86ICF6YO95pyD5YWI5Zyo5pys5qmf6YCy6KGM6ZaL55m877yM5L2G5b6A5b6A5pyD56Kw5Yiw5LiA5Lqb5ZWP6aGM77yM5YOP5piv5rKS6L6m5rOV5oqK6ZaL55m85Lit55qE6YCy5bqm55u05o6l6LK857ay5Z2A57Wm5Yil5Lq655yL77yM5oiW5piv5pys5qmf6ZaL55m855Kw5aKD5Zyo56e75Yiw57ay56uZ5Li75qmf5b6M5pyD55m855Sf54Sh5rOV6aCQ5pyf55qE54uA5rOB77yM54K65LqG6Kej5rG65Lqb5ZWP6aGM77yM5pyJ6Kix5aSa5bug5ZWG6ZaL55m85Ye66Jmb5pOs5qmf55qE5oqA6KGT5L6G5qih5pOs5q2j5byP5Li75qmf5Zyo5pys5qmf5LiK55qE55Kw5aKD77yM5Lim5pW05ZCIIFdvcmRQcmVzcyDnmoTkvZzmpa3mtYHnqIvvvIzlg4/mmK/oh6rli5Xlronoo53kuLvpoYzjgIHlpJbmjpvvvIzmiJbmmK/mkK3lu7rlpb3oh6rlt7Hnv5LmhaPnmoTplovnmbznkrDlooPvvIzogIwgdGhlbWUganVpY2Ug5piv5LiA5aWX5oqK6ZyA6KaB5oyH5Luk5pON5L2c55qE5pys5qmf55Kw5aKD5oqA6KGT77yM6K6K5oiQ5Y+v6KaW6Ka65YyW55qE5pON5L2c5LuL6Z2i77yM5Lim5pCt6YWNIHNzaCDpgaDnq6/pg6jnvbLvvIzlj6/ku6XpnZ7luLjmlrnkvr/nmoTlkIzmmYLnrqHnkIbmnKzmqZ/oiIfpgaDnq6/nmoQgV29yZFByZXNzIOe2suermeOAgg==” pid=”3102”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 版本控管工具</title>
    <url>/tw/wordpress-%E7%89%88%E6%9C%AC%E6%8E%A7%E7%AE%A1%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>對於比較少在寫程式的朋友來說，可能很習慣使用 FTP 來把檔案上傳到網站上，但如果不小心覆蓋或是刪除到正確的檔案，沒有備份的話就會很麻煩了，為了避免這樣的情況，工程師在開發網站的時候往往都會使用一套版本控管系統，目前的主流版控系統叫作 Git，使用版控差別在於說隨時都可以回到上一個儲存點，就像打 RPG 一樣，萬一改錯或是刪錯檔案時，就可以立刻還原，Gitium 這支外掛可以幫你整合第三方的 Git 寄放服務，萬一哪一天主題或是外掛更新後發生相容性錯誤，就可以用 Git 還原到正常的版本。</p>
<span id="more"></span>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1665313263575671” display=”yes” title=”V29yZFByZXNzIOeJiOacrOaOp+euoeW3peWFtw==” body=”5bCN5pa85q+U6LyD5bCR5Zyo5a+r56iL5byP55qE5pyL5Y+L5L6G6Kqq77yM5Y+v6IO95b6I57+S5oWj5L2/55SoIEZUUCDkvobmiormqpTmoYjkuIrlgrPliLDntrLnq5nkuIrvvIzkvYblpoLmnpzkuI3lsI/lv4Popobok4vmiJbmmK/liKrpmaTliLDmraPnorrnmoTmqpTmoYjvvIzmspLmnInlgpnku73nmoToqbHlsLHmnIPlvojpurvnhankuobvvIzngrrkuobpgb/lhY3pgJnmqKPnmoTmg4Xms4HvvIzlt6XnqIvluKvlnKjplovnmbzntrLnq5nnmoTmmYLlgJnlvoDlvoDpg73mnIPkvb/nlKjkuIDlpZfniYjmnKzmjqfnrqHns7vntbHvvIznm67liY3nmoTkuLvmtYHniYjmjqfns7vntbHlj6vkvZwgR2l077yM5L2/55So54mI5o6n5beu5Yil5Zyo5pa86Kqq6Zqo5pmC6YO95Y+v5Lul5Zue5Yiw5LiK5LiA5YCL5YSy5a2Y6bue77yM5bCx5YOP5omTIFJQRyDkuIDmqKPvvIzokKzkuIDmlLnpjK/miJbmmK/liKrpjK/mqpTmoYjmmYLvvIzlsLHlj6/ku6Xnq4vliLvpgoTljp/vvIxHaXRpdW0g6YCZ5pSv5aSW5o6b5Y+v5Lul5bmr5L2g5pW05ZCI56ys5LiJ5pa555qEIEdpdCDlr4TmlL7mnI3li5nvvIzokKzkuIDlk6rkuIDlpKnkuLvpoYzmiJbmmK/lpJbmjpvmm7TmlrDlvoznmbznlJ/nm7jlrrnmgKfpjK/oqqTvvIzlsLHlj6/ku6XnlKggR2l0IOmChOWOn+WIsOato+W4uOeahOeJiOacrOOAgg==” pid=”3383”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 的 Taxonomy、Term、Category 以及 Tags</title>
    <url>/tw/wordpress-%E7%9A%84-taxonomy%E3%80%81term%E3%80%81category-%E4%BB%A5%E5%8F%8A-tags/</url>
    <content><![CDATA[<p>  通常在開發佈景主題時會需要用到新的文章類型，像是 Portfolio 或是 Gallery，它們可以擁有自己的分類，而這個分類的基礎系統統稱為 Taxonomy，像是 Post 的 Taxonomy 預設叫做 category，Portfolio 的 Taxonomy 可以任意命名像是 type，Gallery 的 Taxonomy 可以任意命名像是 album，因為 Taxonomy 跟 category 中文都叫做分類，所以很容易混淆，只要記得 Taxonomy 是所有分類的母體，其它就是它的延伸。至於 Term 則是 Taxonomy 延伸分類的項目，如果以文章 category 來說，term 就是文章的分類項目，也就是在後台可以直接新增的文章分類，而 category (文章分類) 跟 tags (標籤) 的差異性在於前者能擁有子分類，而標籤只有單一層級。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1477388612368138” display=”yes” title=”V29yZFByZXNzIOeahCBUYXhvbm9teeOAgVRlcm3jgIFDYXRlZ29yeSDku6Xlj4ogVGFncw==” body=”6YCa5bi45Zyo6ZaL55m85L2I5pmv5Li76aGM5pmC5pyD6ZyA6KaB55So5Yiw5paw55qE5paH56ug6aGe5Z6L77yM5YOP5pivIFBvcnRmb2xpbyDmiJbmmK8gR2FsbGVyee+8jOWug+WAkeWPr+S7peaTgeacieiHquW3seeahOWIhumhnu+8jOiAjOmAmeWAi+WIhumhnueahOWfuuekjuezu+e1see1seeoseeCuiBUYXhvbm9tee+8jOWDj+aYryBQb3N0IOeahCBUYXhvbm9teSDpoJDoqK3lj6vlgZogY2F0ZWdvcnnvvIxQb3J0Zm9saW8g55qEIFRheG9ub215IOWPr+S7peS7u+aEj+WRveWQjeWDj+aYryB0eXBl77yMR2FsbGVyeSDnmoQgVGF4b25vbXkg5Y+v5Lul5Lu75oSP5ZG95ZCN5YOP5pivIGFsYnVt77yM5Zug54K6IFRheG9ub215IOi3nyBjYXRlZ29yeSDkuK3mlofpg73lj6vlgZrliIbpoZ7vvIzmiYDku6XlvojlrrnmmJPmt7fmt4bvvIzlj6ropoHoqJjlvpcgVGF4b25vbXkg5piv5omA5pyJ5YiG6aGe55qE5q+N6auU77yM5YW25a6D5bCx5piv5a6D55qE5bu25Ly444CC6Iez5pa8IFRlcm0g5YmH5pivIFRheG9ub215IOW7tuS8uOWIhumhnueahOmgheebru+8jOWmguaenOS7peaWh+eroCBjYXRlZ29yeSDkvoboqqrvvIx0ZXJtIOWwseaYr+aWh+eroOeahOWIhumhnumgheebru+8jOS5n+WwseaYr+WcqOW+jOWPsOWPr+S7peebtOaOpeaWsOWinueahOaWh+eroOWIhumhnu+8jOiAjCBjYXRlZ29yeSAo5paH56ug5YiG6aGeKSDot58gdGFncyAo5qiZ57GkKSDnmoTlt67nlbDmgKflnKjmlrzliY3ogIXog73mk4HmnInlrZDliIbpoZ7vvIzogIzmqJnnsaTlj6rmnInllq7kuIDlsaTntJrjgII=” pid=”3115”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 的迴響通知管理</title>
    <url>/tw/wordpress-%E7%9A%84%E8%BF%B4%E9%9F%BF%E9%80%9A%E7%9F%A5%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>之前一直以為當有人在我的文章下留言並回覆後，留言者會收到電子郵件的通知，後來測試才發現根本不會 &gt; &lt;，那時自己另外寫了 PHP 才搞定，今天看到這篇文章，介紹了三支外掛，分別是可以讓留言者當留言被審核過會收到通知、讓留言者可以訂閱是否收到討論串新留言的通知，以及自訂留言者收到通知的電子郵件內容，想要更完整提供留言互動機制的網站可以多加運用。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1545989572174708” display=”yes” title=”V29yZFByZXNzIOeahOi/tOmfv+mAmuefpeeuoeeQhg==” body=”5LmL5YmN5LiA55u05Lul54K655W25pyJ5Lq65Zyo5oiR55qE5paH56ug5LiL55WZ6KiA5Lim5Zue6KaG5b6M77yM55WZ6KiA6ICF5pyD5pS25Yiw6Zu75a2Q6YO15Lu255qE6YCa55+l77yM5b6M5L6G5ris6Kmm5omN55m854++5qC55pys5LiN5pyDID4=” pid=”3275”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 網站效能檢測優化外掛</title>
    <url>/tw/wordpress-%E7%B6%B2%E7%AB%99%E6%95%88%E8%83%BD%E6%AA%A2%E6%B8%AC%E5%84%AA%E5%8C%96%E5%A4%96%E6%8E%9B/</url>
    <content><![CDATA[<p>WordPress 佈景主題跟外掛機制固然非常方便，但但常常會由於程式開發者撰寫的問題而讓網站本身變的肥大，造成的症狀就是網站讀取緩慢，WP Speed of Light 這支外掛可以針對網站效能做檢測，除了基本的載入時間外，還可以偵測是誰在拖慢網站速度，當然還有許多進階的優化功能，像是檔案壓縮、清理資料庫等等，是一支非常方便的效能優化工具。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1543928149047517” display=”yes” title=”V29yZFByZXNzIOe2suermeaViOiDveaqoua4rOWEquWMluWkluaOmw==” body=”V29yZFByZXNzIOS9iOaZr+S4u+mhjOi3n+WkluaOm+apn+WItuWbuueEtumdnuW4uOaWueS+v++8jOS9huS9huW4uOW4uOacg+eUseaWvOeoi+W8j+mWi+eZvOiAheaSsOWvq+eahOWVj+mhjOiAjOiuk+e2suermeacrOi6q+iuiueahOiCpeWkp++8jOmAoOaIkOeahOeXh+eLgOWwseaYr+e2suermeiugOWPlue3qeaFou+8jFdQIFNwZWVkIG9mIExpZ2h0IOmAmeaUr+WkluaOm+WPr+S7pemHneWwjee2suermeaViOiDveWBmuaqoua4rO+8jOmZpOS6huWfuuacrOeahOi8ieWFpeaZgumWk+Wklu+8jOmChOWPr+S7peWBtea4rOaYr+iqsOWcqOaLluaFoue2suermemAn+W6pu+8jOeVtueEtumChOacieioseWkmumAsumajueahOWEquWMluWKn+iDve+8jOWDj+aYr+aqlOahiOWjk+e4ruOAgea4heeQhuizh+aWmeW6q+etieetie+8jOaYr+S4gOaUr+mdnuW4uOaWueS+v+eahOaViOiDveWEquWMluW3peWFt+OAgg==” pid=”3269”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 網站會員分析工具</title>
    <url>/tw/wordpress-%E7%B6%B2%E7%AB%99%E6%9C%83%E5%93%A1%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>Google Analytics 因為用戶隱私的因素，無法追到個別用戶的瀏覽行為，今天分享的 Users Insights 這套 WordPress 的會員分析工具，可以追到每一個訪客的資訊，如果是站內會員更能做深度的交叉分析，它提供豐富的報表，可以篩選出像是非會員是在看過哪些內容決定成為會員，或是活躍訪客的重覆造訪頻率，還能依照會員屬性做使用者區隔，並已整合多款 WordPress 知名外掛如 WooCommerce、BuddyPress，提供更多的站內使用統計資料。</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1565979606842371” display=”yes” title=”V29yZFByZXNzIOe2suermeacg+WToeWIhuaekOW3peWFtw==” body=”R29vZ2xlIEFuYWx5dGljcyDlm6DngrrnlKjmiLbpmrHnp4HnmoTlm6DntKDvvIznhKHms5Xov73liLDlgIvliKXnlKjmiLbnmoTngI/opr3ooYzngrrvvIzku4rlpKnliIbkuqvnmoQgVXNlcnMgSW5zaWdodHMg6YCZ5aWXIFdvcmRQcmVzcyDnmoTmnIPlk6HliIbmnpDlt6XlhbfvvIzlj6/ku6Xov73liLDmr4/kuIDlgIvoqKrlrqLnmoTos4foqIrvvIzlpoLmnpzmmK/nq5nlhafmnIPlk6Hmm7Tog73lgZrmt7HluqbnmoTkuqTlj4nliIbmnpDvvIzlroPmj5DkvpvosZDlr4znmoTloLHooajvvIzlj6/ku6Xnr6npgbjlh7rlg4/mmK/pnZ7mnIPlk6HmmK/lnKjnnIvpgY7lk6rkupvlhaflrrnmsbrlrprmiJDngrrmnIPlk6HvvIzmiJbmmK/mtLvouo3oqKrlrqLnmoTph43opobpgKDoqKrpoLvnjofvvIzpgoTog73kvp3nhafmnIPlk6HlsazmgKflgZrkvb/nlKjogIXljYDpmpTvvIzkuKblt7LmlbTlkIjlpJrmrL4gV29yZFByZXNzIOefpeWQjeWkluaOm+WmgiBXb29Db21tZXJjZeOAgUJ1ZGR5UHJlc3PvvIzmj5Dkvpvmm7TlpJrnmoTnq5nlhafkvb/nlKjntbHoqIjos4fmlpnjgII=” pid=”3313”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 缺少的一套媒體庫管理外掛</title>
    <url>/tw/wordpress-%E7%BC%BA%E5%B0%91%E7%9A%84%E4%B8%80%E5%A5%97%E5%AA%92%E9%AB%94%E5%BA%AB%E7%AE%A1%E7%90%86%E5%A4%96%E6%8E%9B/</url>
    <content><![CDATA[<p>想使用資料夾來分類上傳的圖片嗎？內建的媒體庫沒法達成這任務，幸好有第三方外掛可以實現。WP Media Folder 這套外掛除了使用資料夾來分類圖片外，還有很完整的進階搜尋，另外還可以製作浮水印、複製取代等實用功能，如需管理大量圖片的網站可以參考看看。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1525394270900905” display=”yes” title=”V29yZFByZXNzIOe8uuWwkeeahOS4gOWll+WqkumrlOW6q+euoeeQhuWkluaOmw==” body=”5oOz5L2/55So6LOH5paZ5aS+5L6G5YiG6aGe5LiK5YKz55qE5ZyW54mH5ZeO77yf5YWn5bu655qE5aqS6auU5bqr5rKS5rOV6YGU5oiQ6YCZ5Lu75YuZ77yM5bm45aW95pyJ56ys5LiJ5pa55aSW5o6b5Y+v5Lul5a+m54++44CCV1AgTWVkaWEgRm9sZGVyIOmAmeWll+WkluaOm+mZpOS6huS9v+eUqOizh+aWmeWkvuS+huWIhumhnuWclueJh+Wklu+8jOmChOacieW+iOWujOaVtOeahOmAsumajuaQnOWwi++8jOWPpuWklumChOWPr+S7peijveS9nOa1ruawtOWNsOOAgeikh+ijveWPluS7o+etieWvpueUqOWKn+iDve+8jOWmgumcgOeuoeeQhuWkp+mHj+WclueJh+eahOe2suermeWPr+S7peWPg+iAg+eci+eci+OAgg==” pid=”3235”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 自定義文章的網址結構</title>
    <url>/tw/wordpress-%E8%87%AA%E5%AE%9A%E7%BE%A9%E6%96%87%E7%AB%A0%E7%9A%84%E7%B6%B2%E5%9D%80%E7%B5%90%E6%A7%8B/</url>
    <content><![CDATA[<p>如果你的網站有使用到 Custom Post Type 自定義文章的話，在預設情況下，它的固定網址結構就只能使用「一般」或是「文章名稱」，其它像是「數值式」或是想要自訂結構都會無法使用，這時就需要 Custom Post Type Permalinks 這支外掛來設計網址結構，簡單說它就是自定義文章專用的固定網址，安裝之後在原本的固定網址設定的地方會多出自定義文章的網址結構，參照原本的帶入參數就可以很方便的修改網址結構。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1581038758669789” display=”yes” title=”V29yZFByZXNzIOiHquWumue+qeaWh+eroOeahOe2suWdgOe1kOaniw==” body=”5aaC5p6c5L2g55qE57ay56uZ5pyJ5L2/55So5YiwIEN1c3RvbSBQb3N0IFR5cGUg6Ieq5a6a576p5paH56ug55qE6Kmx77yM5Zyo6aCQ6Kit5oOF5rOB5LiL77yM5a6D55qE5Zu65a6a57ay5Z2A57WQ5qeL5bCx5Y+q6IO95L2/55So44CM5LiA6Iis44CN5oiW5piv44CM5paH56ug5ZCN56ix44CN77yM5YW25a6D5YOP5piv44CM5pW45YC85byP44CN5oiW5piv5oOz6KaB6Ieq6KiC57WQ5qeL6YO95pyD54Sh5rOV5L2/55So77yM6YCZ5pmC5bCx6ZyA6KaBIEN1c3RvbSBQb3N0IFR5cGUgUGVybWFsaW5rcyDpgJnmlK/lpJbmjpvkvoboqK3oqIjntrLlnYDntZDmp4vvvIznsKHllq7oqqrlroPlsLHmmK/oh6rlrprnvqnmlofnq6DlsIjnlKjnmoTlm7rlrprntrLlnYDvvIzlronoo53kuYvlvozlnKjljp/mnKznmoTlm7rlrprntrLlnYDoqK3lrprnmoTlnLDmlrnmnIPlpJrlh7roh6rlrprnvqnmlofnq6DnmoTntrLlnYDntZDmp4vvvIzlj4Pnhafljp/mnKznmoTluLblhaXlj4PmlbjlsLHlj6/ku6Xlvojmlrnkvr/nmoTkv67mlLnntrLlnYDntZDmp4vjgII=” pid=”3340”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 藝廊燈箱效果</title>
    <url>/tw/wordpress-%E8%97%9D%E5%BB%8A%E7%87%88%E7%AE%B1%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>  在網站上要如何呈現圖片來吸引使用者目光？除了圖片本身要夠精彩以外，如果能搭配特別的版面設計方式更能有效吸引用戶瀏覽。近期我們整理了 Codrop 運用 CSS grid 所設計的版面，再加入燈箱展示功能，最後整合了 Divi 編輯器，讓你可以不用寫半行程式碼就可以做出一模一樣的效果，更多使用教學可以參考我們的文章！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1415930705180596” display=”yes” title=”V29yZFByZXNzIOiXneW7iueHiOeuseaViOaenA==” body=”5Zyo57ay56uZ5LiK6KaB5aaC5L2V5ZGI54++5ZyW54mH5L6G5ZC45byV5L2/55So6ICF55uu5YWJ77yf6Zmk5LqG5ZyW54mH5pys6Lqr6KaB5aSg57K+5b2p5Lul5aSW77yM5aaC5p6c6IO95pCt6YWN54m55Yil55qE54mI6Z2i6Kit6KiI5pa55byP5pu06IO95pyJ5pWI5ZC45byV55So5oi254CP6Ka944CC6L+R5pyf5oiR5YCR5pW055CG5LqGIENvZHJvcCDpgYvnlKggQ1NTIGdyaWQg5omA6Kit6KiI55qE54mI6Z2i77yM5YaN5Yqg5YWl54eI566x5bGV56S65Yqf6IO977yM5pyA5b6M5pW05ZCI5LqGIERpdmkg57eo6Lyv5Zmo77yM6K6T5L2g5Y+v5Lul5LiN55So5a+r5Y2K6KGM56iL5byP56K85bCx5Y+v5Lul5YGa5Ye65LiA5qih5LiA5qij55qE5pWI5p6c77yM5pu05aSa5L2/55So5pWZ5a245Y+v5Lul5Y+D6ICD5oiR5YCR55qE5paH56ug77yB” pid=”2967”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 課程推廣</title>
    <url>/tw/wordpress-%E8%AA%B2%E7%A8%8B%E6%8E%A8%E5%BB%A3/</url>
    <content><![CDATA[<p>  能有專業的老師帶你系統性的學習是一件幸福的事。這年頭 Google 實在太方便了，但也造成知識的片面、零碎化，只知其表面往往也只能解決表面的問題，當相同的問題以不同的面貌出現時，就還是只能無限卡關，而這也是老師在現今資訊爆炸年代的存在價值。今天分享的這堂課程會從最基礎的網頁語法開始，並帶你熟悉網站運作原理，接下來才進入 WordPress，包含安裝、操作、客製，最後再帶入 SEO 的基礎觀念，非常適合準備投入網路經營的中小企業負責人，以及想轉行到網頁設計界的朋友，再加上是小班三人的編制，有問題可以直接煩老師XD，希望有越來越多人投入 WordPress 的領域！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1455616591212007” display=”yes” title=”V29yZFByZXNzIOiqsueoi+aOqOW7ow==” body=”6IO95pyJ5bCI5qWt55qE6ICB5bir5bi25L2g57O757Wx5oCn55qE5a2457+S5piv5LiA5Lu25bm456aP55qE5LqL44CC6YCZ5bm06aCtIEdvb2dsZSDlr6blnKjlpKrmlrnkvr/kuobvvIzkvYbkuZ/pgKDmiJDnn6XorZjnmoTniYfpnaLjgIHpm7bnoo7ljJbvvIzlj6rnn6XlhbbooajpnaLlvoDlvoDkuZ/lj6rog73op6PmsbrooajpnaLnmoTllY/poYzvvIznlbbnm7jlkIznmoTllY/poYzku6XkuI3lkIznmoTpnaLosozlh7rnj77mmYLvvIzlsLHpgoTmmK/lj6rog73nhKHpmZDljaHpl5zvvIzogIzpgJnkuZ/mmK/ogIHluKvlnKjnj77ku4ros4foqIrniIbngrjlubTku6PnmoTlrZjlnKjlg7nlgLzjgILku4rlpKnliIbkuqvnmoTpgJnloILoqrLnqIvmnIPlvp7mnIDln7rnpI7nmoTntrLpoIHoqp7ms5Xplovlp4vvvIzkuKbluLbkvaDnhp/mgonntrLnq5npgYvkvZzljp/nkIbvvIzmjqXkuIvkvobmiY3pgLLlhaUgV29yZFByZXNz77yM5YyF5ZCr5a6J6KOd44CB5pON5L2c44CB5a6i6KO977yM5pyA5b6M5YaN5bi25YWlIFNFTyDnmoTln7rnpI7op4Dlv7XvvIzpnZ7luLjpganlkIjmupblgpnmipXlhaXntrLot6/ntpPnh5/nmoTkuK3lsI/kvIHmpa3osqDosqzkurrvvIzku6Xlj4rmg7PovYnooYzliLDntrLpoIHoqK3oqIjnlYznmoTmnIvlj4vvvIzlho3liqDkuIrmmK/lsI/nj63kuInkurrnmoTnt6jliLbvvIzmnInllY/poYzlj6/ku6Xnm7TmjqXnhanogIHluKtYRO+8jOW4jOacm+aciei2iuS+hui2iuWkmuS6uuaKleWFpSBXb3JkUHJlc3Mg55qE6aCY5Z+f77yB” pid=”3076”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 資料庫查詢偵測</title>
    <url>/tw/wordpress-%E8%B3%87%E6%96%99%E5%BA%AB%E6%9F%A5%E8%A9%A2%E5%81%B5%E6%B8%AC/</url>
    <content><![CDATA[<p>在檢查網站效能的問題時，程式向資料庫的查詢數量也是很重要的一環，Query Monitor 這支外掛可以去分析前後台任一頁面的資料庫查詢數量，並且分析是哪一支 function、那個外掛或主題的查詢量最高，並可查出是那一個檔案的第幾行程式所產生的查詢，進而來優化資料庫或是停用查詢過多的佈景主題或外掛。</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1544879835619015” display=”yes” title=”V29yZFByZXNzIOizh+aWmeW6q+afpeipouWBtea4rA==” body=”5Zyo5qqi5p+l57ay56uZ5pWI6IO955qE5ZWP6aGM5pmC77yM56iL5byP5ZCR6LOH5paZ5bqr55qE5p+l6Kmi5pW46YeP5Lmf5piv5b6I6YeN6KaB55qE5LiA55Kw77yMUXVlcnkgTW9uaXRvciDpgJnmlK/lpJbmjpvlj6/ku6XljrvliIbmnpDliY3lvozlj7Dku7vkuIDpoIHpnaLnmoTos4fmlpnluqvmn6XoqaLmlbjph4/vvIzkuKbkuJTliIbmnpDmmK/lk6rkuIDmlK8gZnVuY3Rpb27jgIHpgqPlgIvlpJbmjpvmiJbkuLvpoYznmoTmn6XoqaLph4/mnIDpq5jvvIzkuKblj6/mn6Xlh7rmmK/pgqPkuIDlgIvmqpTmoYjnmoTnrKzlub7ooYznqIvlvI/miYDnlKLnlJ/nmoTmn6XoqaLvvIzpgLLogIzkvoblhKrljJbos4fmlpnluqvmiJbmmK/lgZznlKjmn6XoqaLpgY7lpJrnmoTkvYjmma/kuLvpoYzmiJblpJbmjpvjgII=” pid=”3273”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress部落格是中小企業架公司網站的解決方案？</title>
    <url>/tw/wordrpess-for-business/</url>
    <content><![CDATA[<p>自從有了網路之後，許多原本需要付費的東西，慢慢轉變成免費的給大家用好像也不是什麼稀奇的事了，從 Google 的一堆服務開始，到最近更新的 Mac 作業系統 Mavericks OS，以前需要花好幾萬的文書套裝軟體，現在一毛都不用。   而提供給工程師架設網站的工具也是如此，從以前學生時代學的貴鬆鬆軟體如： frontpage、dreamweaver，到現在免費下載的 <a href="http://www.sublimetext.com/2">Sublime Text</a> ，甚至最近國外還推出線上寫程式工具 <a href="https://codio.com/">codio</a>，對於工程師而言到那都能工作了(唉～)。   既然有提供給工程師架站的工具，那有沒有給一般沒有資訊人員的中小企業架設網站的軟體呢？還是拜網路所賜，有了開源軟體 (Open Source Software)的誕生。  </p>
<h2 id="什麼是開源軟體？"><a href="#什麼是開源軟體？" class="headerlink" title="什麼是開源軟體？"></a>什麼是開源軟體？</h2><p>  根據維基百科的定義，</p>
<blockquote>
<p>開源軟體（英語：open source software，英文縮寫：OSS，中文也稱：開放原始碼軟體）是一種原始碼可以任意取用的電腦軟體，這種軟體的版權持有人在軟體協定的規定之下保留一部分權利並允許使用者學習、修改、增進提高這款軟體的品質。</p>
</blockquote>
<p>也就是說任何人都可以免費的使用它，進而修改成符合特定目的需要的版本。   其中在建置網站的工具中，以 <a href="http://tw.wordpress.org/">Wordpress</a>、<a href="http://www.joomla.org.tw/">Joomla</a>、<a href="http://drupaltaiwan.org/">Drupal</a>、<a href="http://xoops.tnc.edu.tw/">Xoops</a> 等軟體較為出名，   下圖是從 Google 趨勢中節截取這四套開源軟體的搜尋走勢圖：</p>
<span id="more"></span>
<p>全球 <a href="https://oberonlai.blog/wp-content/uploads/2013/11/wordpress-for-business-img-1.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/11/wordpress-for-business-img-1.jpg" alt="wordpress-for-business-img-1"></a>   台灣 <a href="https://oberonlai.blog/wp-content/uploads/2013/11/wordpress-for-business-img-2.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2013/11/wordpress-for-business-img-2.jpg" alt="wordpress-for-business-img-2"></a>     每套開源架站軟體都有其特性與適合的使用對象，但在我們不太熟悉的情況下，選擇多一點人用的軟體感覺上比較安心，至少出了狀況找的到人求救，因此本篇將以 wordpress 為主角，來說明中小企業該如何使用它來滿足架站需求。  </p>
<h2 id="但…wordpress-不是部落格系統嗎？"><a href="#但…wordpress-不是部落格系統嗎？" class="headerlink" title="但…wordpress 不是部落格系統嗎？"></a>但…wordpress 不是部落格系統嗎？</h2><p>  是， wordpress 本身最早期就是專門拿來自行架設部落格的工具，但隨著在開放源始碼的環境下，許多人協助進行改良系統的完整性，再加上現有 <a href="http://wordpress.org/plugins/">27,977</a> 套可以擴充的工具，所以不管是企業形象網站、企業資源網站、教育訓練網站、產品展示網站、電子商務網站、社群網站、團購網站、活動報名網站、多國語言網站等，只要是想的到的，都有相對應的工具可以立刻使用。   再加上先前提過的， wordpress 本身是開放源始碼，如果找不到現成的功能也沒關係，它彈性的架構可以很自由的為它加入新的功能，這樣強大的工具已經不是任何一家 IT 企業能夠擁有它，透過開發者的力量，它隨時都在求新求變。   從他們的更新紀錄來看，平均每一～兩個月就會有新版本產生，其社群共獻者的活耀度由此可見，更多關於 wordpress 的介紹，可以參考他們的網站—&gt;<a href="http://tw.wordpress.org/">http://tw.wordpress.org/</a>  </p>
<h2 id="所以-wordpress-適合所有的中小企業做為架站工具囉？"><a href="#所以-wordpress-適合所有的中小企業做為架站工具囉？" class="headerlink" title="所以 wordpress 適合所有的中小企業做為架站工具囉？"></a>所以 wordpress 適合所有的中小企業做為架站工具囉？</h2><p>  應該是說，中小企業有沒有準備好要用網路來拓展事業版圖的決心，或是對於經營網路形象有沒有一幅清楚的藍圖，甚至是分析投入成本與效益價值的評估，這些問題跟是不是用 wordpress 軟體架站並無太大關係，如果有規劃、有目標， wordpress 絕對能成為中小企業發展上的一大助力。   以下項目可協助判斷在用 wordpress 架站前，檢視企業內部的狀況，進而決定該如何使用 wordpress 完成企業預期目標。  </p>
<h3 id="lt-一-gt-是否了解網路經營的模式、公司網站扮演的角色？"><a href="#lt-一-gt-是否了解網路經營的模式、公司網站扮演的角色？" class="headerlink" title="&lt;一&gt;是否了解網路經營的模式、公司網站扮演的角色？"></a>&lt;一&gt;是否了解網路經營的模式、公司網站扮演的角色？</h3><p>以前最常聽見的問題就是公司花了大筆預算蓋好了網站，但最後卻變成蚊子館乏人問津，這類型的問題起因於網站建置的目的不明確，常常是為了要有而蓋，事實上一間企業的獲利流程，可以將其放大檢視，觀察在那一個環節之中發生什麼問題，是否能用電子化的方式來解決。   最常見的就是 B2B 產業，傳統的作法就是在網站上放表單，要讓表單有詢問訂單進來，就是要讓網站被找的到，無論是在實體或虛擬通路，都能將流量導入站內，再透過清楚的資訊呈現、真人線上客服、使用者介面引導等方式，協助需求者完成他們的目標；   有了這些方向，在 wordpress 上就可以去尋找這方面的工具，像線上客服系統，這篇文章就介紹了很多 <a href="http://www.smashingapps.com/2013/05/31/13-best-wordpress-chat-plugins.html" title="Permanent Link to 13 Best WordPress Chat Plugins">13 Best WordPress Chat Plugins</a>，而表單功能的工具也很多，可參考這篇 <a href="http://www.tripwiremagazine.com/2013/06/wordpress-form-plugin-collection.html">25+ Highly Useful WordPress Form Plugin Collection</a>   另外要讓別人容易找的到，就需要設定關鍵字，可以使用這個工具 <a href="http://wordpress.org/plugins/wordpress-seo/">WordPress SEO by Yoast</a> ，幫每頁內容都設上標題、頁面描述，這對於潛在客戶在搜尋上會有很大的幫助，但前提是要先能了解潛在客戶會如何搜尋我們的產品，這就是另外一門專業的<a href="http://goo.gl/Q7Oizl">搜尋引擎最佳化</a>領域了。  </p>
<h3 id="lt-二-gt-是否了解網站空間、主機等相關硬體需求？"><a href="#lt-二-gt-是否了解網站空間、主機等相關硬體需求？" class="headerlink" title="&lt;二&gt;是否了解網站空間、主機等相關硬體需求？"></a>&lt;二&gt;是否了解網站空間、主機等相關硬體需求？</h3><p>簡單來說，網站就是由一堆檔案和資料所組成，然後放在一台電腦裡面 24 小時不關機，讓其它人可以透過特定的網址連到這些資料，所以顯而易見的，除了 wordpress 的網站檔案外，我們還需要一台足夠容量、足夠效能、足夠運作網站的電腦來存放我們的資料。   所以市面上就有許許多多的廠商提供這一類的服務，讓我們能用最節省成本的方式來租用這樣的電腦置放網站檔案，如果要使用 wordpress 架站的話，建議要選擇 linux 的作業系統(免授權金)，以及能使用 PHP 與 Mysql 的系統環境，在選購上要特別注意，在 <a href="http://tw.wordpress.org/">wordpress</a> 的官方網站上有相關的系統需求。  </p>
<h3 id="lt-三-gt-是否了解建置網站所需投入成本？"><a href="#lt-三-gt-是否了解建置網站所需投入成本？" class="headerlink" title="&lt;三&gt;是否了解建置網站所需投入成本？"></a>&lt;三&gt;是否了解建置網站所需投入成本？</h3><p>基本上只要有心，投入夠多的時間學習，任何人都能使用 wordpress 架出一套有模有樣的網站，因為不僅<a href="http://wordpress.org/plugins/">擴充工具多</a>、後臺更新便利，以及還有精美的<a href="http://wordpress.org/themes/">免費佈景主題</a>可以下載使用，最重要的是，台灣網友的熱情分享，Google 搜尋 wordpress 教學就有<a href="http://goo.gl/2n2vjS">這麼多答案</a>，   或是加入 <a href="https://www.facebook.com/groups/wordpresstw/">Facebook wordpress taiwan 正體中文粉絲團</a> ，只要問題一 po 上去，過不了十分鐘就立刻會有人幫忙回答，台灣人的人情味，在網路上更是發揚光大^^   所以有心想自學 wordpress 架站，管道非常便利，不然請人<a href="https://oberonlai.blog/contact/">直接面對面授課</a>，也是一種更快的方法。   但真實的情況是，可能沒有這麼多的時間，對於中小企業而言，公司的經營才是重點，架站的專業技術，就交給專人執行，但有企業主可能會覺得，既然 wordpress 是免費軟體，請人幫忙架站應該也是會比較便宜才是…   真正的事實是：非但不會比較省錢，而且有可能還會比一般行情高。對於開發者而言，程式的寫法都有其固定模式，使用 wordpress 的擴充功能，由於都是國外開發者居多，對於接手的工程師來說，勢必要先了解其邏輯，才有可能進行新增或修改，這要花費的時間會比從無到有自己寫一個功能出來還多的多。   另一方面，也因為民情文化的不同，許多國外的佈景主題或是擴充功能往往會需要加以調整，尤其是美術設計的部份，因為英文筆畫單純，用小字可以呈現精緻的效果，但換成中文後美感盡失，這些都是需要專業的視覺設計師進行處理。   wordpress 的最大好處就是可以加快視覺設計跟網站功能的呈現，這非常有利於在溝通上進行想法的確認，透過更實際的畫面來進行討論，以避免設計上的落差。  </p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>  wordpress 無論在全球還是台灣，都有相當多的資源可以取得，但也因為民情不同，許多現成的功能都還需要進行客製化才能真正符合需求，了解網站的目的再使用 wordpress 架站，更能有效加強網站功能而不會迷失於茫茫的大海之中。   在國外 wordpress 發展非常成熟，已經有販售 wordpress 主題的商業模式在運作中，不同於免費的佈景主題，設計師與工程師更貼心的站在使用者立場，開發許多便利的操作功能，並且針對不同產業進行設計，希望台灣未來也能發展出這樣的商業模式，讓網站設計這產業更能向上提升，給企業主與開發者一個雙贏的環境！</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>wordpress theme</tag>
        <tag>wordpress主題</tag>
        <tag>wordpress blog</tag>
        <tag>wordpress教學</tag>
      </tags>
  </entry>
  <entry>
    <title>WP SCAN 十秒檢查你的 WordPress 網站是否安全</title>
    <url>/tw/wp-scan-for-wordpress/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2017/11/wp-scan-for-wordpress-1.jpg">   WP SCANS 是一套非常知名的 WordPress 漏洞掃描工具，可以去抓出你的網站目前所使用的佈景主題或外掛是否包含有漏洞的程式碼或是第三方套件，同時也會建議你應該將程式更新到安全的版本，來避免讓駭客有機會利用漏洞來進行網站入侵。   <img src="https://oberonlai.blog/wp-content/uploads/2017/11/wp-scan-for-wordpress-2.jpg">   WP SCAN 提供主機系統的安裝包，可以透過主機指令來進行安裝掃描，而不熟指令的朋友，也可以使用線上的服務來進行掃描，事實上也看過駭客入侵的教學影片中，看過他們使用這套工具來找漏洞，所以時常保持程式以及嚴格控管資料夾權限才是安全之道。   <a href="https://vimeo.com/223586788">https://vimeo.com/223586788</a>   服務連結： <a href="https://wpscan.org/">https://wpscan.org</a> <a href="https://wpscans.com/">https://wpscans.com</a></p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>【 參考 】World68 世界各國網站收集</title>
    <url>/tw/%E3%80%90-%E5%8F%83%E8%80%83-%E3%80%91world68-%E4%B8%96%E7%95%8C%E5%90%84%E5%9C%8B%E7%B6%B2%E7%AB%99%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p><a href="http://www.world68.com/">http://www.world68.com</a></p>
]]></content>
      <categories>
        <category>UI</category>
      </categories>
  </entry>
  <entry>
    <title>【 外掛 】WooCommerce 序號管理工具</title>
    <url>/tw/%E3%80%90-%E5%A4%96%E6%8E%9B-%E3%80%91woocommerce-%E5%BA%8F%E8%99%9F%E7%AE%A1%E7%90%86%E5%A4%96%E6%8E%9B/</url>
    <content><![CDATA[<p><a href="https://tw.wordpress.org/plugins/license-manager-for-woocommerce/">https://tw.wordpress.org/plugins/license-manager-for-woocommerce/</a></p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>【 專案 】重新認識 Google Blogger</title>
    <url>/tw/%E3%80%90-%E5%B0%88%E6%A1%88-%E3%80%91%E9%87%8D%E6%96%B0%E8%AA%8D%E8%AD%98-google-blogger/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2019/12/CleanShot-2019-12-23-at-12.08.02-1024x703.jpg"></p>
<p>在還沒有開始學習 WordPress 以前，Google Blogger 是我最早接觸的部落格平台，有別於當時台灣的無名小站、Yahoo 奇摩家族、天空部落等等，Blogger (當年還叫做 Blogspot) 可以自訂的部分更多，還可以寫程式碼，重點是不會逼人硬要塞廣告，後台的操作介面友善，因此 Blogger 成為我紀錄個人資料的首選平台。</p>
<span id="more"></span>

<p>後來的日子裡，因為工作需要開始研究 CMS，轉而發現 WordPress 這個開源的部落格平台，如果以賣東西來比喻，Blogger 是推著路邊攤在賣，而 WordPress 就是全球連鎖超級市場，後者的彈性以及衍伸的周邊資源，是 Blogger 望塵莫及的，也因此 Blogger 就慢慢的從我的腦海中遠去…(遠目)</p>
<h2 id="改版任務"><a href="#改版任務" class="headerlink" title="改版任務"></a>改版任務</h2><p>這次的專案接到一個很特別的任務，沒錯，就是要幫 Blogger 改版(驚)，在了解業主需求時，早已熟悉 WordPress 的我無不大力推從更換部落格系統，佈景主題多、外掛多、相關資源多…</p>
<p>想不到列了一堆好處還是無法說服業主更換 Blogger，該部落格以經營了六年多，裡面有 500 多篇文章，文章的上稿方式是先從 iPad2 的備忘錄完成文章，然後再用 iOS5 版的 Safari 登入 Blogger 後台把文章貼入，重點就是在於 WordPress 後台在舊版的 Safari 無法正常運作，也無法使用 WordPress 的 iOS App，因此在不改變上稿流程的情況下，還是只能繼續沿用 Blogger 。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/12/CleanShot-2019-12-23-at-12.10.38-1024x755.jpg"></p>
<p>舊版網站的首頁&amp;內頁</p>
<p>而這此需要改版的主要原因，在於舊版版面的設計已經無法符合 500 多篇文章的需求，再加上分類項目數量眾多，對於瀏覽者很難透過視覺動線去尋找文章，其次是文章以書評為主，大量的文字缺少圖片，少了圖片就比較難吸引瀏覽者點閱，因此針對舊版的網站的問題提出了相對應的改善方案：</p>
<h3 id="一-文章太多被埋沒"><a href="#一-文章太多被埋沒" class="headerlink" title="(一) 文章太多被埋沒"></a>(一) 文章太多被埋沒</h3><ul>
<li>  改變版面配置</li>
<li>  增加圖片</li>
<li>  增加精選文章</li>
<li>  增加熱門文章</li>
</ul>
<h3 id="二-分類太多難搜尋"><a href="#二-分類太多難搜尋" class="headerlink" title="(二) 分類太多難搜尋"></a>(二) 分類太多難搜尋</h3><ul>
<li>  主選單顯示文章分類</li>
<li>  規劃書籍主題策展</li>
</ul>
<h3 id="三-跳出率過高"><a href="#三-跳出率過高" class="headerlink" title="(三) 跳出率過高"></a>(三) 跳出率過高</h3><ul>
<li>  增加文章延伸閱讀</li>
<li>  顯示同類別的其他文章</li>
</ul>
<h3 id="四-與其他書評部落格缺少差異化"><a href="#四-與其他書評部落格缺少差異化" class="headerlink" title="(四) 與其他書評部落格缺少差異化"></a>(四) 與其他書評部落格缺少差異化</h3><ul>
<li>  增加品牌標語與主視覺元素</li>
</ul>
<h2 id="遇到的挑戰"><a href="#遇到的挑戰" class="headerlink" title="遇到的挑戰"></a>遇到的挑戰</h2><p>太習慣用 WordPress 的邏輯來思考部落格，首頁是 index、內頁是 single、列表頁是 archive，不同用途的頁面應該是分屬在不同檔案，但 Blogger 從頭到尾就只有一份 xml 檔 (雖然介面文字是寫 html，但標頭明明就是 xml)，要如何在同一份檔案去處理不同的頁面呈現是第一個面臨到的問題，</p>
<p>其次是 Blogger 把資料、介面、控制邏輯也都放在同份 xml 檔，這對於習慣 MVC 邏輯的我實在是坐立難安，因此常發生明明已經改過的東西卻被還原，這是因為後台的控制項變更後，Blogger 會自動把 xml 檔進行覆寫，所以逼自己養成習慣，改 xml 之前都要先重整頁面。</p>
<p>最後是 Blogger 的 xml 編輯器實在不怎麼友善，因為要把所有資料、頁面全都塞進去，每次載入時會需要花上一些時間，對於習慣 hot reload 的我就像等上十年之久，然後因為 controller 也在裡面，所以會看到一堆 Blogger 專用的 <b> tag，在閱讀上有些吃力，也只能逼自己慢慢習慣了。</p>
<p>但這個編輯器讓我最崩潰的地方是當 xml 寫錯時，點下儲存等了約五秒後，會跳出「更新失敗」的提示，就這樣，只顯示「更新失敗」這四個字，除此之外沒有任何的除錯訊息告訴我是哪邊發生錯誤、錯在哪邊 (怒)，只好用刪除法把剛剛寫過的東西逐一刪除看是誰出問題，但每儲存一次就要五秒以上，因此常常改個小東西就要半天的時間了，實在是苦不堪言。</p>
<p>也試著把整份 xml 貼入 viscode 改完後再貼回去，但即使是原封不動的複製貼上，只要一進過編輯器的 code 就是無法再正常儲存，然後繼續丟「更新失敗」這四個字給你，總覺得這陣子在睡覺時做夢都夢到這四個字…</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/12/CleanShot-2019-12-23-at-12.13.30-1024x795.jpg"></p>
<p>更新失敗地獄</p>
<p>最後沒辦法，還是找現成的主題來修改，選擇了 Emporio Flamingo 這個主題，有首頁、內頁兩種版型，側邊欄也可以根據不同版型來進行設定，另外他也設計了他自己的小工具，在套用上還滿方便的，然後也從他的程式碼中去學習 Blogger 的專屬語法，回想起自己最早學習 WordPress Theme Custom 也是從別人寫好的佈景主題去摸索的。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/12/CleanShot-2019-12-23-at-12.14.23-1024x769.jpg"></p>
<p>謝謝 Emporio 的拯救</p>
<h2 id="Blogger-Tags"><a href="#Blogger-Tags" class="headerlink" title="Blogger Tags"></a>Blogger Tags</h2><p>Blogger 標籤是以 &lt;b:&gt; 這樣的形式出現，也是會有開頭跟結尾，然後根據不同的標籤類型會帶有相對應的屬性，常用的標籤有以下幾種：</p>
<h3 id="ㄧ-判斷式-lt-b-if-gt"><a href="#ㄧ-判斷式-lt-b-if-gt" class="headerlink" title="(ㄧ) 判斷式 &lt;b:if&gt;"></a>(ㄧ) 判斷式 &lt;b:if&gt;</h3><p>要在同一個檔案顯示不同頁面的內容主要就是要靠判斷式，其屬性為 cond，判斷不同頁面的寫法如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;b:if cond&#x3D;&#39;data:blog.pageType &#x3D;&#x3D; &quot;archive&quot;&#39;&gt;
&lt;!--庫存頁面會出現的內容--&gt;
&lt;&#x2F;b:if&gt;

&lt;b:if cond&#x3D;&#39;data:blog.pageType &#x3D;&#x3D; &quot;index&quot;&#39;&gt;
&lt;!-- 首頁會出現的內容 --&gt;
&lt;&#x2F;b:if&gt;

&lt;b:if cond&#x3D;&#39;data:blog.pageType &#x3D;&#x3D; &quot;item&quot;&#39;&gt;
&lt;!-- 文章內頁會出現的內容 --&gt;
&lt;&#x2F;b:if&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>判斷式也可以用巢狀結構來達成 AND，或是使用 else 來進行條件不成立時的描述。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;b:if cond&#x3D;&#39;data:blog.pageType &#x3D;&#x3D; &quot;index&quot;&#39;&gt;
  &lt;b:if cond&#x3D;&#39;data:blog.searchQuery&#39;&gt;
    &lt;!--首頁與搜尋頁會出現的內容--&gt;
  &lt;&#x2F;b:if&gt;
&lt;&#x2F;b:if&gt;

&lt;b:if cond&#x3D;&#39;data:blog.pageType &#x3D;&#x3D; &quot;item&quot;&#39;&gt;
    &lt;!--文章內頁會出現的內容--&gt;
&lt;b:else&#x2F;&gt;
    &lt;!--除了文章內頁以外會出現的內容--&gt;
&lt;&#x2F;b:if&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>更多條件式的用法可以參考 -&gt; <a href="https://ultimatebloggerguide.blogspot.com/2016/07/blogger-conditional-tags-for-page-types.html">https://ultimatebloggerguide.blogspot.com/2016/07/blogger-conditional-tags-for-page-types.html</a></p>
<h3 id="二-迴圈-lt-b-loop-gt"><a href="#二-迴圈-lt-b-loop-gt" class="headerlink" title="(二) 迴圈 &lt;b:loop&gt;"></a>(二) 迴圈 &lt;b:loop&gt;</h3><p>迴圈會用到的地方是在要顯示文章列表時使用，範例如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;b:loop index&#x3D;&#39;i&#39; values&#x3D;&#39;data:posts&#39; var&#x3D;&#39;post&#39;&gt;
  &lt;div&gt;
    &lt;h3&gt;
      &lt;b:eval expr&#x3D;&#39;data:i + 1&#39; &#x2F;&gt;. &lt;data:post.title &#x2F;&gt;
    &lt;&#x2F;h3&gt;
    &lt;div&gt;
      &lt;data:post.body &#x2F;&gt;
    &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;b:loop&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可參考 -&gt; <a href="https://bloggerbook.blakbin.com/2018/11/blogger-bloop-tag.html">https://bloggerbook.blakbin.com/2018/11/blogger-bloop-tag.html</a></p>
<h3 id="三-常用參數"><a href="#三-常用參數" class="headerlink" title="(三) 常用參數"></a>(三) 常用參數</h3><p>如果要取得網站標題、文章名稱、發表日期等等的相關資訊，就可以使用 <a href="data:">data:</a> 標籤來取得，沒有結尾標籤，直接使用斜線結尾，相關範例如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;data:blog.title &#x2F;&gt;      &#x2F;&#x2F; 取得網誌標題
&lt;data:blog.pageType &#x2F;&gt;   &#x2F;&#x2F; 取得頁面類型
&lt;data:posts.title &#x2F;&gt;     &#x2F;&#x2F; 取得文章標題
&lt;data:posts.body &#x2F;&gt;.     &#x2F;&#x2F; 取得文章內文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>完整屬性可以參考 Google Blogger 文件 -&gt;<a href="https://support.google.com/blogger/answer/47270?hl=zh-Hant">https://support.google.com/blogger/answer/47270?hl=zh-Hant</a></p>
<p>但在實際運用上有滿多在 Google 文件上都找不到的屬性，然後有些屬性寫在 <Head> 會沒作用，當初在寫 og tag 的時候嘗試了滿多，以下為可正確顯示的範例：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;head&gt;
    &lt;meta content&#x3D;&#39;width&#x3D;device-width, initial-scale&#x3D;1&#39; name&#x3D;&#39;viewport&#39;&#x2F;&gt;
    &lt;title&gt;&lt;data:view.title.escaped&#x2F;&gt; &amp;#8226;文學女孩的開卷日常&amp;#8226;&lt;&#x2F;title&gt;
    &lt;meta content&#x3D;&#39;IE&#x3D;edge,chrome&#x3D;1&#39; http-equiv&#x3D;&#39;X-UA-Compatible&#39;&#x2F;&gt;
    &lt;meta content&#x3D;&#39;width&#x3D;device-width, initial-scale&#x3D;1.0&#39; name&#x3D;&#39;viewport&#39;&#x2F;&gt;
    &lt;!--Open Graph Begin--&gt;
&lt;meta expr:content&#x3D;&#39;data:blog.title&#39; property&#x3D;&#39;og:site_name&#39;&#x2F;&gt;
&lt;b:switch var&#x3D;&#39;data:blog.pageType&#39;&gt;
&lt;b:case value&#x3D;&#39;item&#39;&#x2F;&gt;
   &lt;meta content&#x3D;&#39;article&#39; property&#x3D;&#39;og:type&#39;&#x2F;&gt;
   &lt;meta content&#x3D;&#39;Miffy Huang&#39; property&#x3D;&#39;article:author&#39;&#x2F;&gt;
   &lt;meta expr:content&#x3D;&#39;data:blog.pageName&#39; property&#x3D;&#39;og:title&#39;&#x2F;&gt;
     &lt;meta content&#x3D;&#39;data:widgets.Blog.first.posts.first.featuredImage&#39; property&#x3D;&#39;og:image&#39;&#x2F;&gt;
   &lt;b:if cond&#x3D;&#39;data:blog.metaDescription&#39;&gt;
      &lt;meta expr:content&#x3D;&#39;data:blog.metaDescription&#39; property&#x3D;&#39;og:description&#39;&#x2F;&gt;
   &lt;b:else&#x2F;&gt;
      &lt;meta expr:content&#x3D;&#39;data:blog.metaDescription&#39; property&#x3D;&#39;og:description&#39;&#x2F;&gt;
   &lt;&#x2F;b:if&gt;
&lt;b:case value&#x3D;&#39;index&#39;&#x2F;&gt;
   &lt;meta content&#x3D;&#39;blog&#39; property&#x3D;&#39;og:type&#39;&#x2F;&gt;
   &lt;meta expr:content&#x3D;&#39;data:blog.title&#39; property&#x3D;&#39;og:title&#39;&#x2F;&gt;
   &lt;meta expr:content&#x3D;&#39;data:blog.metaDescription&#39; property&#x3D;&#39;og:description&#39;&#x2F;&gt;
   &lt;meta content&#x3D;&#39;https:&#x2F;&#x2F;1.bp.blogspot.com&#x2F;-vbSrd8AWktA&#x2F;XfyOaPYu82I&#x2F;AAAAAAAAAo8&#x2F;fF0MJDsIFEEg8VKE-xqM2NtBtKGoQGGiACLcBGAsYHQ&#x2F;s1600&#x2F;ogimage.jpg&#39; property&#x3D;&#39;og:image&#39;&#x2F;&gt;
&lt;b:case value&#x3D;&#39;archive&#39;&#x2F;&gt;
   &lt;meta content&#x3D;&#39;website&#39; property&#x3D;&#39;og:type&#39;&#x2F;&gt;
   &lt;meta expr:content&#x3D;&#39;&quot;&quot; + data:blog.pageName + &quot; on &quot; + data:blog.title&#39; property&#x3D;&#39;og:title&#39;&#x2F;&gt;
   &lt;meta expr:content&#x3D;&#39;&quot;This is an archive page &quot; + data:blog.pageName + &quot; on &quot; + data:blog.title + &quot;&quot;&#39; property&#x3D;&#39;og:description&#39;&#x2F;&gt;
&lt;b:case value&#x3D;&#39;static_page&#39;&#x2F;&gt;
   &lt;meta content&#x3D;&#39;website&#39; property&#x3D;&#39;og:type&#39;&#x2F;&gt;
   &lt;meta expr:content&#x3D;&#39;data:blog.pageName&#39; property&#x3D;&#39;og:title&#39;&#x2F;&gt;
     &lt;meta content&#x3D;&#39;https:&#x2F;&#x2F;1.bp.blogspot.com&#x2F;-vbSrd8AWktA&#x2F;XfyOaPYu82I&#x2F;AAAAAAAAAo8&#x2F;fF0MJDsIFEEg8VKE-xqM2NtBtKGoQGGiACLcBGAsYHQ&#x2F;s1600&#x2F;ogimage.jpg&#39; property&#x3D;&#39;og:image&#39;&#x2F;&gt;
   &lt;b:if cond&#x3D;&#39;data:blog.metaDescription&#39;&gt;
      &lt;meta expr:content&#x3D;&#39;data:blog.metaDescription&#39; property&#x3D;&#39;og:description&#39;&#x2F;&gt;
   &lt;b:else&#x2F;&gt;
      &lt;meta expr:content&#x3D;&#39;&quot;This is an static page &quot; + data:blog.pageName + &quot; on &quot; + data:blog.title + &quot;&quot;&#39; property&#x3D;&#39;og:description&#39;&#x2F;&gt;
   &lt;&#x2F;b:if&gt;
&lt;&#x2F;b:switch&gt;
&lt;!--Open Graph End--&gt;
&lt;&#x2F;head&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="加入第三方功能"><a href="#加入第三方功能" class="headerlink" title="加入第三方功能"></a>加入第三方功能</h2><p>為了可以讓瀏覽者瀏覽更多文章，在文章內頁下方的加入同分類的其他文章連結，本想自己寫迴圈來撈，但在需要顯示圖片以及摘要的寫法上碰到了困難，於是找了一下有沒有相關的外掛可以使用，想不到還真的有(大心)。</p>
<p>解法是這使用這篇的工具 -&gt; <a href="https://sneeit.com/premium-flexible-related-post-widget-for-blogger-blogspot/">https://sneeit.com/premium-flexible-related-post-widget-for-blogger-blogspot/</a></p>
<p>加入的方式很簡單，先把下方程式碼貼入到 xml 文章結尾的地方</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- START::_140414_related_posts::START --&gt;
&lt;b:if cond&#x3D;&#39;data:blog.pageType &#x3D;&#x3D; &quot;item&quot;&#39;&gt;
 &lt;b:if cond&#x3D;&#39;data:post.labels&#39;&gt;
  &lt;b:loop values&#x3D;&#39;data:post.labels&#39; var&#x3D;&#39;label&#39;&gt;
   &lt;span class&#x3D;&#39;_140414_related_label&#39; expr:post_id&#x3D;&#39;data:post.id&#39; expr:url&#x3D;&#39;data:label.url&#39; style&#x3D;&#39;display:none&#39;&gt;&lt;data:label.name&#x2F;&gt;&lt;&#x2F;span&gt;
  &lt;&#x2F;b:loop&gt;
 &lt;&#x2F;b:if&gt;
 &lt;div class&#x3D;&#39;_140414_related_posts&#39; expr:post_id&#x3D;&#39;data:post.id&#39;&gt;
 &lt;&#x2F;div&gt;
&lt;&#x2F;b:if&gt;
&lt;!-- END::_140414_related_posts::END --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然後再用他們提供的工具來設定要顯示的篇數、是否顯示圖片、日期等等的資訊，最後點擊 Add Widget 就會在 Blogger 後台的版面配置出現相關文章的小工具，然後再把他移動到頁面主體區塊的最下方即可。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/12/CleanShot-2019-12-23-at-12.15.13.jpg"></p>
<p>視覺化設定項</p>
<p>要注意的是相關文章會出現在留言區塊之上，以瀏覽者來說的邏輯怪怪的，應該是先看完留言結束這篇文章的瀏覽後才會顯示其他文章，所以要把上方的程式碼移到留言下方才是正確的位置：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;b:if cond&#x3D;&#39;data:showCmtPopup&#39;&gt;
  &lt;div id&#x3D;&#39;comment-popup&#39;&gt;
    &lt;iframe allowtransparency&#x3D;&#39;allowtransparency&#39; frameborder&#x3D;&#39;0&#39; id&#x3D;&#39;comment-actions&#39; name&#x3D;&#39;comment-actions&#39; scrolling&#x3D;&#39;no&#39;&gt;
    &lt;&#x2F;iframe&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;b:if&gt;
&lt;&#x2F;section&gt;
&lt;!-- 要在 showCmtPopup 的 Section 下面 --!&gt;
 &lt;!-- START::_140414_related_posts::START --&gt;
&lt;b:if cond&#x3D;&#39;data:blog.pageType &#x3D;&#x3D; &quot;item&quot;&#39;&gt;
  &lt;h3 class&#x3D;&#39;title_related&#39;&gt;相關閱讀&lt;&#x2F;h3&gt;
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>這次 Blogger 的改版前後大概花了一個禮拜的時間，比較多的修改都是 CSS 的調整，但最耗時的還是存檔、除錯以及找要改哪裡的時間，目前還在觀察改版之後的瀏覽數據是否有所提升，最重要的還是希望可以吸引到出版社或是書商的邀稿合作，喔，對了，忘了說業主是我太太，還希望有好的機會能懇請介紹XD</p>
<p><a href="https://www.justgirl.me/"><img src="https://oberonlai.blog/wp-content/uploads/2019/12/CleanShot-2019-12-23-at-12.16.44-1024x795.jpg"></a></p>
<p>改版首頁</p>
<p><a href="https://www.justgirl.me/2019/06/blog-post.html"><img src="https://oberonlai.blog/wp-content/uploads/2019/12/CleanShot-2019-12-23-at-12.17.35-1024x792.jpg"></a></p>
<p>改版內頁</p>
<p>網站連結 -&gt; <a href="https://www.justgirl.me/">https://www.justgirl.me</a></p>
]]></content>
      <categories>
        <category>專案</category>
      </categories>
  </entry>
  <entry>
    <title>【 影片 】How To Build a Software Company With No Money</title>
    <url>/tw/%E3%80%90-%E5%BD%B1%E7%89%87-%E3%80%91how-to-build-a-software-company-with-no-money/</url>
    <content><![CDATA[<blockquote>
<p>DON’T WRITE THE CODE!!!</p>
</blockquote>
<p><a href="https://www.youtube.com/watch?v=wlouEWnEFVQ">https://www.youtube.com/watch?v=wlouEWnEFVQ</a></p>
<p>看到第一句我就不爭氣的笑了(苦笑)，如果時間能重回到開發 FS 的六個月前，我想我應該還是會 Write the code 吧～畢竟寫扣是自己存在的證明(?)</p>
<p>但如果自己是產品的發起人，我想我應該會遵循 Martell 說的透過以下三個方式來確認自己的構想是否真的被市場所需要：</p>
<ol>
<li> 使用可以點的 Prototype 來進行測試</li>
<li> 找到正確的早期試用者</li>
<li> 設計預先銷售的機制</li>
</ol>
<p>以上三種方法不准寫到任何一行程式，首先使用 Keynote 或是 Powerpoint 來做 prototype，他推薦的是 <a href="https://keynotopia.com/">Keynotopia</a>，上過 Axure RP 的朋友就知道，用簡報軟體來製作原型會有所侷限，無法呈現頁面捲動、複雜的頁面邏輯…，但這也是重點，最早期的 Prototype 就是越單純越好，能展現構想要解決的核心問題就行。如果做得太完整、太漂亮，受測者就會礙於人際關係不敢提供真實意見，只能說些表面的好聽話。</p>
<p>他說他們曾經設計過一個只有三頁的 Prototype：說明頁、留下 Email、偽結帳頁，當瀏覽者真正願意為這產品付費進到結帳頁時，畫面顯示系統維護中，等能使用時就會通知你，藉此來測試這個構想的轉換率是否有投入成本的開發必要性。</p>
<p>另外找到正確的早期使用者是第二個關鍵，如果這個構想是去找不願意嘗試新事物、比較保守的客戶，想當然被打槍的機率當然是 99.9%，然後因此覺得這個構想沒有搞頭就放棄了，現在網路的便利性要找到早期使用者也不會太困難。</p>
<p>最後一定要有一套銷售的機制，不用真正可以收到錢，只要讓受測者認知到這個構想需要花多少錢，他們就會開始思考這產品可以應用在什麼場景，然後提出他們對於這產品的真實想法與需求，不然就一樣只會得到表面的讚美。</p>
<p>雖然 Martell 說不用擔心產品都還沒開發真的有人會願意買單這件事情，他看過太多企業會願意為了一個能解決他們問題的產品而進行投資，但在台灣是不是會這樣就不知道了，常常都還是會害怕點子被偷被整碗端走，所以要比的就是執行力，萬一對手是有資源的，更不敢把構想直接拿出來，我想這就是一種自我感覺良好的機制在運作吧XD</p>
<p>最近在讀「獲利時代」的續集「價值主張」也是提到同樣的概念，快速測試、快速驗證、快速失敗，但我的個性就是喜歡慢慢來的怎麼辦…</p>
]]></content>
      <categories>
        <category>saas</category>
      </categories>
  </entry>
  <entry>
    <title>【 教訓 】關於飲食</title>
    <url>/tw/%E3%80%90-%E6%95%99%E8%A8%93-%E3%80%91%E9%97%9C%E6%96%BC%E9%A3%B2%E9%A3%9F/</url>
    <content><![CDATA[<p>昨晚看完中醫後肚子餓到不行，就興沖沖的跑去那種家庭式牛排自助吧吃到飽，點了一份沙朗牛排 8oz，然後就衝去自助吧夾了一堆東西，因為有一陣子沒來這家了，發現他們多了許多菜色，就瘋狂夾、瘋狂吃，等牛排上桌基本上已經五分飽了。</p>
<p>然後忘記 8oz 牛排原來有這麼大塊，還附滿滿的鐵板麵與一塊蛋糕，吃下第一口覺得超好吃，吃到最後一口有點喊不敢了，休息時間看著隔壁桌全家人的杯盤狼藉，然後還有人吃著滿出鐵盤的超大塊牛排，聞著滿身油膩的鐵板味，只想到下面這個畫面…</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/12/%E7%A5%9E%E9%9A%B1%E5%B0%91%E5%A5%B3%E5%8D%83%E5%B0%8B%E7%88%B8%E5%AA%BD%E8%AE%8A%E8%B1%AC.jpg"></p>
<p>無誤</p>
<p>回到家後因為肚子撐的很難受就去公園散步消化，但過了一個小時還是覺得腸胃悶悶熱熱的，開始回想到底為何要這麼折騰自己，結果晚上也因為肚子不舒服所以睡不好，後悔與懊惱的心遲遲無法散去。</p>
<p>直到今天早上做完了便當，把自己昨日做的錯誤決定隨著水管一起衝到太平洋去，提醒自己不能再因為口腹之慾而做出這種衝動之舉，不然再吃下去就要被殺了…</p>
]]></content>
      <categories>
        <category>老人碎念</category>
      </categories>
  </entry>
  <entry>
    <title>【 文摘 】Canonical 標記</title>
    <url>/tw/%E3%80%90-%E6%96%87%E6%91%98-%E3%80%91canonical-%E6%A8%99%E8%A8%98/</url>
    <content><![CDATA[<p>原來 <strong>Canonical 標記</strong>是為了重複內容來集中網頁權重使用的，特別是在不能做 301 轉址的情況，像是同一種商品有五款顏色，每個顏色都有獨立網址但內容都重複，就能使用 Canonical 來指定主要網頁，常看到的作法還有電腦版與手機版網站，也都會用這個標記來指定需要集中權重的網頁，但文中提及 Canonical 不能互相指，想想也合理，如果彼此互相指定就分不清楚到底誰是主要網頁，只能統一指定一個主要網頁。</p>
<blockquote>
<p>註：Google官方不保證他採用你所寫的canonical元素會被採用，但我們沒得選擇，這確實Google官方提出的解決方案，能告訴Google你有重複內容的問題，並且Google會盡可能處理。</p>
<p>同時，使用上你要注意，避免有兩個網址互相用canonical指向，舉例來說，如果你在綠色毛衣的網頁上用canonical指向紅色毛衣，在紅色毛衣上canonical指向綠色毛衣，這樣Google不會知道你的標準網址到底是哪一個。正確做法應該如上方的圖片所示，在黃、紅、藍三個毛衣的頁面底下加入<canonical>標記，而綠色毛衣的網頁不使用canonical 標記（因為綠色毛衣自己就是標準網址，而黃、紅、藍三個毛衣的頁面才是重複內容）。</p>
</blockquote>
<p>感謝 Harris 大大的精闢說明 -&gt; <a href="http://www.yesharris.com/content-duplicate-issue/"></a> <a href="http://www.yesharris.com/content-duplicate-issue/">http://www.yesharris.com/content-duplicate-issue/</a></p>
]]></content>
      <categories>
        <category>SEO</category>
      </categories>
  </entry>
  <entry>
    <title>【 文摘 】利潤高漲 95 趴！一次搞懂顧客終身價值 LTV 計算，能為企業帶來最大效益</title>
    <url>/tw/%E3%80%90-%E6%96%87%E6%91%98-%E3%80%91%E5%88%A9%E6%BD%A4%E9%AB%98%E6%BC%B2!%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E9%A1%A7%E5%AE%A2%E7%B5%82%E8%BA%AB%E5%83%B9%E5%80%BC-ltv-%E8%A8%88%E7%AE%97/</url>
    <content><![CDATA[<p>計算顧客終身價值的目的是為了知道要維繫客戶關係的成本，只要低於這個成本就能用最大資源來投入舊客戶的關係維護，因為新客戶的取得成本遠高於舊客戶。</p>
<p>文中提及的計算公式很完整，但還是有點小困惑，像是：</p>
<ol>
<li> 平均購買金額的購買次數是單一顧客在特定期間內的消費次數還是不分顧客的總訂單數？</li>
<li> 平均購買頻率是以單一商品來計算？</li>
<li> 平均顧客壽命的加總每一位顧客的消費年數該如何計算？</li>
<li> 對於 SAAS 產業的 LTV 計算方式不知道會不會有所不同？</li>
</ol>
<p>反正現在還沒客人，等累積了一些營收之後再來深入研究了…</p>
]]></content>
      <categories>
        <category>頭痛的會計</category>
      </categories>
  </entry>
  <entry>
    <title>【 文摘 】Harris 手記，#50：了解 SEO 的趨勢，談近年SEO的改變</title>
    <url>/tw/%E3%80%90-%E6%96%87%E6%91%98-%E3%80%91harris-%E6%89%8B%E8%A8%98%EF%BC%8C50%EF%BC%9A%E4%BA%86%E8%A7%A3-seo-%E7%9A%84%E8%B6%A8%E5%8B%A2%EF%BC%8C%E8%AB%87%E8%BF%91%E5%B9%B4seo%E7%9A%84%E6%94%B9%E8%AE%8A/</url>
    <content><![CDATA[<p>文中提及 Google 逐年增強爬蟲的能力，許多需要讓爬蟲比較好爬的技術未來會漸漸不需要了，像是網址結構、Title tag、H1 tag，站在開發者的立場比較想知道 Google 爬蟲什麼時候會看得懂 SPA 的結構，不然在不用框架的情況下做 SSR 真的是一件很大的工程。</p>
<blockquote>
<p>．2 有些技術性的優化項目會影響網站的體驗，網站的體驗則是會影響SEO（像是網站速度早已被Google宣布是排名因素）。</p>
<p>．3 有些技術性的優化項目會幫助Google更有效的認識我們的網站，像是Title標記、<a href="https://sable.madmimi.com/c/179729?id=205759.715.1.667dcc81691b4bc224cd7ba4ab824de1">重複內容</a>的Canonical 標記等。</p>
<p>但隨著科技的進步，現在的SEO對上述提到的第1點其實已經越來越不重要了，因為Google爬蟲技術的進步，現在Google都能夠理解大多的網站技術，除了第1點之外，甚至連第3點的優化項目也逐漸在變少。</p>
<p>Google這兩年每過一段時間就會發聲明稿，指出他們的爬蟲技術又更加進步了（針對Google的更新，之後我會在整理成一篇放到部落格上）。同時，Google近期也不斷的在減少上述第3點的優化項目，舉例來說，以前我們都知道佈局H1標記會對SEO有幫助，但今年Google的 John Mueller曾對外說明，現在H1對於SEO幾乎是沒有甚麼影響了。</p>
</blockquote>
]]></content>
      <categories>
        <category>SEO</category>
      </categories>
  </entry>
  <entry>
    <title>【 文摘 】科技島讀 - 聲音的熱力，與安靜的珍貴</title>
    <url>/tw/%E3%80%90-%E6%96%87%E6%91%98-%E3%80%91%E7%A7%91%E6%8A%80%E5%B3%B6%E8%AE%80-%E8%81%B2%E9%9F%B3%E7%9A%84%E7%86%B1%E5%8A%9B%EF%BC%8C%E8%88%87%E5%AE%89%E9%9D%9C%E7%9A%84%E7%8F%8D%E8%B2%B4/</url>
    <content><![CDATA[<p>最近晚上睡前為了練英文聽力，同時也能學到專業知識，開始在聽 <a href="https://www.youtube.com/channel/UCA-mWX9CvCTVFWRMb9bKc9w">Dan Martell</a> 講關於 SAAS 產品的商業模式、銷售策略的 Youtube Channel，這陣子聽下來，不知道是他講得太好還是一部影片重複看三次，總覺得對於他講的內容印象非常深刻，到現在都還記得前幾天晚上的影片重點，以為是自己的記憶力變好了，</p>
<p>剛好今天就看到科技島讀的文章在講聲音，聲音是一種熱媒體，一種高解析度的媒體，訊息很完整並可以直接傳達，而且不用背景知識與文化脈絡就能理解，相對的，冷媒體的解析度就很低，資訊不完整，需要理解很多背後的意涵才能真正理解。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/12/CleanShot-2019-12-26-at-12.17.44.jpg"></p>
<p>圖：來自科技島讀電子報（改編自 Alex Danco 的 <a href="https://tech.us3.list-manage.com/track/click?u=d5b0016249f4919c4ce5fa518&id=86c8394d91&e=770440c353">Audio revolution</a>）</p>
<p>自己在聽聲音的時候，多半是覺得不想用視覺、讓眼睛休息的時候，像是打掃或是睡前不能滑手機時，但沒想到，聲音對於人的影響力也因為這樣，在沒有戒心的情況下更容易植入聽眾的腦海中，想想這也許是自己覺得聽的東西比較記得住的原因：沒有干擾。</p>
<blockquote>
<p>然而聲音如此無害，正是其影響力的特徵。它的單純是一種鋒利，它的和緩是一種引誘。人很少被視覺所影響 — 我從來沒在 LINE 或臉書上說服任何人改變投票決定。因為視覺是一種偵查、檢驗的工具。人們用視覺時多少保持著警覺，可以隨時移開焦點。</p>
<p>但聽覺是包容的、來者不拒的。你無法屏蔽特定的聲音。只要聽到就會被影響。許多人說：「某一場演講改變我一生」。讀一本小說，可能在結尾時覺得悲傷；但聽一首歌卻會在 3 分鐘內潸然淚下。</p>
</blockquote>
<p>多虧作者的提醒，挑什麼東西來聽變得非常重要，因為聽覺的抵抗力很弱，而且還是要有放空的時間。</p>
<blockquote>
<p>更重要的是學習放空，拒絕填補或麻痺自己。安靜，才能聽見自己的聲音。</p>
</blockquote>
]]></content>
      <categories>
        <category>老人碎念</category>
      </categories>
  </entry>
  <entry>
    <title>【 文摘 】科技島讀 - Twitter 研發開放社交網絡</title>
    <url>/tw/%E3%80%90-%E6%96%87%E6%91%98-%E3%80%91%E7%A7%91%E6%8A%80%E5%B3%B6%E8%AE%80-twitter-%E7%A0%94%E7%99%BC%E9%96%8B%E6%94%BE%E7%A4%BE%E4%BA%A4%E7%B6%B2%E7%B5%A1/</url>
    <content><![CDATA[<p>從來沒有想像過網路平台的內容審查員是一個這麼恐怖的工作，每天要面對如此數以萬計極端暴力的的上傳內容，根本不是人幹的，長時間看這種影片心理一定會被扭曲，現在打開 Youtube 能看到這些「清新」的影片全都是用這些人的心理健康換來的…</p>
<blockquote>
<p>在過去一年中，Peter 見到同事無法負荷影片中看到的內容，因為憂鬱而在上班時崩潰，請了兩個月的無薪假。另一個同事因為工作的焦慮與憂鬱缺乏進食，結果急性維生素缺乏而住院。</p>
<p>Peter 工作近兩年，也擔心對精神健康的影響。他的家人不斷勸他辭職 . . . 他發現自己掉髮、變重，脾氣變得更壞。就算是休假時，光是開車經過工作的大樓都會讓他心悸。</p>
</blockquote>
<p>之前一直不懂傳統網路架構就可以達到分散式、去中心化的效果，為何還需要區塊鏈來大費周章？看了這篇才知道區塊鏈的價值是可以創造數位稀缺，有稀缺才有交易性，所以如果沒有要搞虛擬貨幣、只是要做去中心化，用區塊鏈是小題大作了。</p>
<blockquote>
<p>開放、去中心化的網絡其實並不需要用區塊鏈。Email、自架伺服器，以及 ActivityPub / Mastodon 都沒有用到區塊鏈。因為它們本質上只是管理資訊如何「複製」，可以用既有的網路架構。</p>
<p>但區塊鏈的特色是能帶來價值交易。我介紹過區塊鏈能創造<a href="https://tech.us3.list-manage.com/track/click?u=d5b0016249f4919c4ce5fa518&id=9b80448ef5&e=770440c353">數位稀缺</a>（digital scarcity），也就是創造一個在網路上獨一無二的東西，如比特幣。我擁有一枚比特幣，你就無法擁有同一枚比特幣 — 因為我無法複製它。這就可以帶來交易。</p>
</blockquote>
]]></content>
      <categories>
        <category>老人碎念</category>
      </categories>
  </entry>
  <entry>
    <title>【 書摘 】佐藤可士和的超整理術</title>
    <url>/tw/%E3%80%90-%E6%9B%B8%E6%91%98-%E3%80%91%E4%BD%90%E8%97%A4%E5%8F%AF%E5%A3%AB%E5%92%8C%E7%9A%84%E8%B6%85%E6%95%B4%E7%90%86%E8%A1%93/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2010/11/kashiwa.jpg" alt="佐藤可士和的超整理術"></p>
<p>對於從事設計，需要處理大量資料，如果沒有辦法有一套整理的邏輯與方法，想必這設計師解決問題的能力一定會有所不足。書中提到的概念很簡單，設計就是找出問題，這案子就已經解決了一半，而這問題的答案，就一定藏在客戶的心中，當找出答案後，才是設計師發揮自我所學的地方，</p>
<p>因此依照這邏輯把設計過程拆成兩大半來開，上半場的發現問題，與下半場的設計執行。而此書乃是著重在上半場的問題發現，要發現客戶問題所在的方法，就是必需運用該書的主題─整理術。</p>
<p>本書主要把整理術分為三個階段：<br>(1)空間整理術-設定優先排序<br>(2)資訊整理術-導入獨特觀點<br>(3)思考整理術-將思緒資訊化</p>
<p>(1)空間整理術：藉由從自身週遭的環境開始做起，將私人、辦公場所的物品，依照生活模式依重要性將其取捨，捨棄是與不安的奮鬥，印像最深刻的是看到他公司的辦公環境，桌上沒有半點東西，我以為是為了要拍照，才特地大整理一翻，</p>
<p>想不到他在書中提到，這樣就是他們的辦公環境，運用統一規格的容器，將瑣碎的物品放在一起，就可以簡化視覺上的感受，降低處理業務時的壓力，在自己實際執行的成果上，發現的確有助於降低視覺的疲勞，</p>
<p>以及清理掉不需要的垃圾，清爽的感覺有助於工作的安排，不會桌上亂成一團而感覺工作作不完，養成隨手物品歸位的習慣，讓桌面可長保清潔，在虛擬空間部份，將資料夾盡量減少巢狀結構，以同層即可一目了然為原則，如資料夾過多也可使用搜尋功能，空間整裡的目的在於對實際的物品做排序，以親身體會整理過後的舒暢感。</p>
<p>(2)資訊整理術：在整理物品的時候，為了要取捨，一定要有所依據，如果要取捨辦公用品，一定會考量說那些東西會常用到，這時候，”使用頻率”就決定了這些物品的死活，而”使用頻率”就是導入的觀點，</p>
<p>在整理資訊時，一定要導入觀點才能將資訊做安排，但在解決客戶問題時的觀點，必需要從不同的角度來處理，拋開自以為是，而導入觀點的目的就是要找出答案(遠景)，目前應用過的經驗，在於整理所搜集到的資訊，並分析其利弊後，提出自己的建議，<br>讓自己有變換觀點的能力。</p>
<p>(3)思考整理術：將思緒轉換成文字，自我檢視非常困難，先從觀察別人開始學起，冷靜客觀的觀察，紀錄關鍵字，再將關鍵字與以分類，導出主軸觀點，方法與資訊整理法雷同，這方面的自我體會尚無，練習將自己的想法語言化，寫日記或是部落格應該都是不錯的練習方法。</p>
<p>總結：該書對於行銷企劃、設計人員都非常適合閱讀，書中舉出了許多實際案例，一窺設計公司與客戶之間的溝通模式。</p>
]]></content>
      <categories>
        <category>資訊架構</category>
      </categories>
  </entry>
  <entry>
    <title>【 書摘 】Don&#39;t Make Me Think</title>
    <url>/tw/%E3%80%90-%E6%9B%B8%E6%91%98-%E3%80%91dont-make-me-think/</url>
    <content><![CDATA[<p><a href="https://oberonlai.blog/wp-content/uploads/2015/06/s4357645.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2015/06/s4357645.jpg" alt="s4357645"></a></p>
<p>第一次讀到這本關於使用者體驗的經典書籍大概是四年前的事了，當時看完後不知道借給了那位朋友，就再也沒有回來過了，日前逛三民書局的簡體中文館發現了新版的它，除了原有的內容還更新了例子，甚至還加上行動裝置體驗的章節，二話不說立刻敗入，為了以防那天又被人借走回不來，趕緊寫下文章備份。</p>
<p>本書分為四個大方向：</p>
<p>一、基本原則</p>
<p>二、網站導航系統的重要性</p>
<p>三、簡易使用性測試</p>
<p>四、行動體驗</p>
<p>以下就各章節做重點摘錄。</p>
<h2 id="一、基本原則"><a href="#一、基本原則" class="headerlink" title="一、基本原則"></a>一、基本原則</h2><blockquote>
<p>「Don’t make me think」不要設計出會讓使用者感到困惑或猶豫不曉得要點那裡的介面。網站分類要明確，選單出現於固定位置、使用統一名稱、使用常見名稱、按鈕要像按扭、系統的回饋要符合使用者所預期的。</p>
</blockquote>
<p>使用者在網站上的每一次錯誤點擊，雖然不致於造成立即性的客戶流失，但使用者體驗是會堆疊的，只有做好每一個細節，使用者才能在極短的時間感受到企業要傳達的東西，這對於品牌的建立是關鍵。</p>
<p>使用者體驗檢查清單：</p>
<ul>
<li>  我在什麼位置</li>
<li>  我從那裡開始好</li>
<li>  他們把XX放在什麼地方了</li>
<li>  這個頁面上最重要的是什麼</li>
<li>  為什麼他們把這個項目叫做這個</li>
<li>  這是廣告還是網站的內容</li>
</ul>
<p><strong>使用者看網頁是用掃描的，眼裡只會出現他們感興趣與最想找的關鍵字</strong>，他們不會花時間去選擇最正確的答案，而是第一眼看到有相關性的就會點擊，所以保留瀏覽器上的返回按鈕是非常重要的。</p>
<p>使用者不在乎運作原理，只要能滿足他們的需求，就會一直使用它。因此介面要符合使用者的瀏覽習慣來製作，以掃描式閱讀來設計，而非以雜誌或書籍閱讀的方式來設計。</p>
<p>參考做法：</p>
<p>（一）盡量利用慣例</p>
<p>任何東西要讓人能瞬間理解，遵循習慣和慣例是一種好方法，譬如 LOGO 出現在左上角、主選單在網頁的上方或左邊，視覺元素的外觀、播放影片的 icon、搜尋、社群分享。如果想創新慣例，要確保使用者容易理解以及一併提供他們熟悉的慣例。</p>
<p>（二）建立視覺上的層次</p>
<p>越重要的部份越突出、邏輯相關的內容在視覺上也要相關、邏輯上屬於子分類的項目在視覺上可以用包圍的方式。</p>
<p>（三）把頁面劃分成明確定義的區域</p>
<p>可以讓使用者說出：這是今日頭條的連結、這是這個公司銷售的產品、他們正在向我推銷東西、這是連到其它頁面的選單。Banner Blindness ：為了可以快速找到他們想要的，使用者發展出一種會忽略看起來像是廣告的技能，<strong>所以重要的內容不要做得像廣告，而廣告可以做成像內容。</strong></p>
<p>（四）明顯標示可以點擊的地方</p>
<p>統一可以點擊的視覺元素，譬如底線、顏色，如果底線代表的是連結，那在內容強調文字時就不要使用底線。</p>
<p>（五）將可能會干擾掃描的元素最小化</p>
<p><strong>如果所有東西都要強調，就等於沒有東西在強調。</strong></p>
<p>（六）幫內容設計清楚易掃描的格式</p>
<p>充分使用標題、保持每個段落的簡潔、使用符號列表、強調關鍵字詞。</p>
<p>使用者的點擊次數常規法則：三次不用思考、結果正確的點擊，所花費的心力相當於一次需要思考的點擊，<strong>所以重點不是在追求幾次點擊內讓使用者找到想要的內容，而是每一次的點擊有沒有更接近他們想要的。</strong></p>
<p>省去多餘的歡迎詞、說明文字，只在有需要的時候以最精簡的方式呈現。</p>
<h2 id="二、網站導航系統的重要性"><a href="#二、網站導航系統的重要性" class="headerlink" title="二、網站導航系統的重要性"></a>二、網站導航系統的重要性</h2><p><img src="https://oberonlai.blog/wp-content/uploads/2015/06/medium_2KIcZWinamB5poa6WLdn0zFH40HrYpiMX4fG8aINHbY.jpg" alt="二、網站導航系統的重要性"></p>
<p>如果在網站上找不到方向，使用者就會離開你的網站。使用者進入網站後通常是為了特定目標，他們可能會使用搜尋功能或是選單進行瀏覽。</p>
<p>在網站上瀏覽感覺不到大小、感覺不到方向、感覺不到位置，所以瀏覽器的書籤以及返回上一頁是非常重要的功能。網站選單可以告訴使用者我們這裡有什麼內容、如何開始使用網站、表達出網站管裡者是否了解自己的網站，進而影響到使用者的信心。</p>
<p>全站導覽要出現在每一頁，提供使用者最可靠的方向依尋。主要包含網站 LOGO、內頁連結、常用工具連結、站內搜索。</p>
<p><strong>大部份網站很少對內頁中的內頁的選單給予足夠的重視，因為開發時是由上往下進行頁面規劃，但使用者對於內頁選單的依賴程度與全站導覽是同等重要。</strong></p>
<p>每個頁面都需要一個名稱，並且出現在合適且相同的位置，設計上要顯眼，進入該頁面的按鈕文字必須與頁面名稱相同，才不會造成使用者誤會。</p>
<p>選單要能標示出使用者的現在位置，透過視覺上的明顯差異化來呈現。</p>
<p>麵包屑亦能提供使用者了解所在位置，通常置於頁面最上方，使用大於符號進行間隔，強調最後一個項目來標示現在位置，並且不用增加連結。</p>
<p>網站選單測試清單：</p>
<ul>
<li>  這是什麼網站(網站 LOGO)</li>
<li>  我在那個內容裡面？(網頁名稱)</li>
<li>  這個網站主要的內容有那些？(網站選單)</li>
<li>  在這個頁面中我還可以去那？(內頁選單)</li>
<li>  我在這個網站中的那裡？(所在位置)</li>
<li>  站內搜尋在那？</li>
</ul>
<p>網站的首頁要能夠快速回答使用者五個問題：</p>
<p>（一）這是什麼網站？</p>
<p>（二）網站有些什麼內容？</p>
<p>（三）我能在這邊得到什麼？</p>
<p>（四）為什麼我現在這一頁？</p>
<p>（五）從那邊開始？</p>
<p>網站首頁要能正確傳達給使用者網站想表達的內容，不然使用者會以模糊錯誤的認知來繼續使用這個網站，進而發生更多錯誤的理解。</p>
<p>由於社群與搜尋引擎的發達，使用者入站大多已不是首頁，因此上述四個問題也要盡可能在內頁中傳達清楚，但當使用者對於這網站的內容有興趣時，他們會返回首頁去看全站的內容，因此首頁的重要性還是不容忽視。</p>
<p>網站如何傳達企業整體形象？</p>
<p>（一）網站 slogan</p>
<p>（二）主 Banner 放網站目標與內容介紹</p>
<p>（三）更多服務介紹的內容</p>
<p>（四）不要把老闆的精神訓話當成網站 slogan，因為這是給員工看的，而非你的使用者或客戶</p>
<p>（五）最直接的方法，進行使用者測試檢視是否有正確傳達</p>
<h2 id="三、簡易使用性測試"><a href="#三、簡易使用性測試" class="headerlink" title="三、簡易使用性測試"></a><strong>三、簡易使用性測試</strong></h2><p><img src="https://oberonlai.blog/wp-content/uploads/2015/06/medium_2FMVo9keG9QRRgZKzVkKycdi6DKQ8b6XB9Rkd4XQiWo.jpg" alt="三、簡易使用性測試"></p>
<p>如何解決在會議上每個人對於網站內容、操作方式的不同看法？很簡單，拉個局外人來試試就好。<strong>為避免陷入無止盡的主觀意識爭論，我們的問題不該是「這邊是否該用下拉選單」，而是問：「在這頁面中，考量到使用者目的，使用下拉選單或是顯示的文字是否能帶給他們良好的體驗並導引到正確的結果？」</strong></p>
<p>使用性測試的結果，往往不是證明開發小組中誰的意見對或錯，而是發現根本性的網站問題，就像是想問人到底要穿紅色的T恤還是白色的襯衫好，卻沒發現褲子根本還沒穿上。</p>
<p>焦點小組與使用性測試最大的不同點在於前者僅需要受測者說，而後者在於觀察受測者做了什麼。<strong>簡易使用性測試，目的是以最低的成本，來檢測網站開發過程中是否有依循正確的方向走下去。</strong></p>
<p>簡易使用性測試 Q&amp;A：</p>
<p>（一）應該多久進行一次測試？</p>
<p>固定每個月上午為最佳測試時間，理由是開發人員上午比較有空(?)，以固定每月而非以開發時程的原因在於開發計劃常常會偏離或是改規格，如果用「第一版上線後」才進行使用性測試，很容易被額外工作階段所延誤，固定時間也能養成團隊開發人員參與的習慣。</p>
<p>（二）應該測試多少用戶？</p>
<p>理想為三個，因為測試的目的不是在證明什麼，需要證明什麼才會要足夠的資料進行佐證，<strong>使用性測試的目的是發現問題，即使只測一位也好過不找任何人測試。</strong></p>
<p>（三）如何選擇測試者？</p>
<p>理想上，能找到我們的目標使用族群進行測試再恰當不過，但如果找非該網站領域的人也會有不錯的收獲，因為最大的使用性問題往往不是在於專業知識，而是把每位使用者當成初學者或是非領域的相關人員，讓不懂專業知識的人也能清楚明白，這對於有專業知識的人也會是非常友善的介面。</p>
<p>（四）怎麼找到測試者？</p>
<p>透過社群、論壇、網站會員、隔璧鄰居、親朋好友，提供時薪、車馬費等等回饋這些願意付出時間提供意見給我們的朋友，或是透過線上服務進行使用性測試—&gt;<a href="http://www.usertesting.com/">http://www.usertesting.com/</a></p>
<p>（五）在那裡測試？</p>
<p>受測者可以在任何有電腦的地方，只要他操作電腦的畫面跟聲音可以傳到開發團隊的面前即可。實務上可以用像 <a href="https://www.teamviewer.com/zhTW/index.aspx">Teamviewer</a> 這樣的遠端桌面軟體進行觀察。</p>
<p>（六）應該由誰來引導測試？</p>
<p>使用者測試需要一位主持人來引導開發團隊想要測試的功能與項目，最好是具有同理心、願意傾聽、看到別人犯錯誤時不會想要糾正他的人。主持人的目的是要協助受測者進行測試項目，並能鼓勵受測者勇於嘗試點擊，以及讓受測者說出目前的心理狀態。</p>
<p>（七）誰該進行觀察？</p>
<p>所有與該專案相關的人員，從第一線的執行者到上層的決策人員，有預算的話買些吃吃喝喝在觀察的現場中，觀察室需要一面能即時看到受測者操作畫面的大螢幕，以及可以聽到受測現場聲音的喇叭，在測試期間，請觀察人員根據看他們所看到聽到的做筆記，並於測試結束後提出。</p>
<p>（八）何時該導入使用性測試？</p>
<p><strong>越早越好，甚至還沒有網站的時候，就能針對同類型網站或競品網站進行測試</strong>，如果是需要網站改版，更可以針對現行網站進行測試，這樣就能知道那些功能需要保留或移除。在網站製作階段，從頁面草稿、線框圖、網站原型、mockup 等等，都能做使用者測試。</p>
<p>（九）如何制定測試任務？</p>
<p>很簡單，看我們想要測試什麼。像是加入會員的流程、購買商品的步驟、如何找到網站中某個特定的資訊等等。在設計任務的同時，也可以預留一些空間讓受測者自由發揮，像是「找一本你想買的書」會比「找一本兩百塊以下的書」來得更能觀察到受測者的使用行為。</p>
<p>（十）使用性測試的 SOP</p>
<ol>
<li> 見面寒喧喇低賽。</li>
<li> 打開網站讓受測者隨意逛逛並鼓勵他說出他看到的內容</li>
<li> 開始任務，主持人告知任務內容，並請受測者完成。全程主持人不可詢問意見或引導性的提問，受測者卡關時不要協助他們，而是鼓勵他們說出卡關的點，主持人最主要的工作是發掘出任何使用上的問題給觀察室中的人了解。</li>
<li> 完成所有受測任務，主持人可向受測者提問測試中所發生的問題，以及提出事前開發人員委託詢問的問題。</li>
<li> 關門送客。</li>
</ol>
<p>（十一）使用性測試中的典型問題：</p>
<ol>
<li> 受測者不明白這個內容或功能是什麼意思，或是完全理解錯誤。</li>
<li> 受測者找不到他們常用的字眼，這代表開發人員所用的字彙與受測者不同。</li>
<li> 明明就在顯眼的地方但受測者就是沒看到。</li>
</ol>
<p>（十二）該如何決定修復那些問題？</p>
<ol>
<li> 收集問題列表，寫在白版上，紀錄相同的問題出現過幾次。</li>
<li> 挑出10個最嚴重問題，請大家表決那些問題最重要、最需要被優先解決，或是根據出現次數進行優先修改順序。</li>
<li> 問題評級，針對每項問題打分數，一到十分決定嚴重程度。</li>
<li> 建立修復清單，針對問題該如何修復、所需時間、負責人進行彙整。可針對快速解決的問題再列一份清單，並且<strong>盡量在不添加現有內容或功能的原則下來解決使用性的問題</strong>。另外不要太看重受測者所提出的新功能，因為這大多代表著他們所面臨的問題沒有被妥善解決，如果他們真的提出一個很棒的解決方案，身為專業開發人員的我們一定會知道。</li>
</ol>
<p>（十三）那些理由讓人不做使用者測試？</p>
<ol>
<li> 沒時間—&gt;有測試可以避免冤枉路以及回過頭來花更多時間打掉重練。</li>
<li> 沒有錢—&gt;清潔阿姨都可以抓來做使用者測試了，測試的硬體成本一般公司的會議室、咖啡廳都能運用，不用再額外花錢。</li>
<li> 不知該何做—&gt;根據本書的方法多做幾次就能抓到技巧，<strong>重點是否有心從使用者身上學習還是只是把使用者體驗掛在嘴邊</strong>。</li>
<li> 沒有實驗室—&gt;只要有兩臺可以上網的電腦就行。</li>
<li> 不知如何解讀結果—&gt;最重要的問題誰都看得出來，如果沒人看出來那網站還是收收關了。</li>
</ol>
<h2 id="四、行動體驗"><a href="#四、行動體驗" class="headerlink" title="四、行動體驗"></a>四、行動體驗</h2><p><img src="https://oberonlai.blog/wp-content/uploads/2015/06/c9e42240.jpg" alt="c9e42240"></p>
<p>行動體驗的設計原則：</p>
<p>（一）允許縮放：不管是否有提供行動版網頁，能讓使用者自由縮放頁面大小非常重要，<strong>縱使我們覺得已將字體放到不能再大，還是會有人覺得字太小</strong>。</p>
<p>（二）導引到正確的網址：如果網頁的電腦版與手機版是分開製作，務必確認內頁的連結可以導引到正確的版本，而非回到首頁。</p>
<p>（三）提供完整網站的連結：不管行動內容設計得多完整、多豐富，<strong>使用者的經驗可能還停留在電腦版，他們會用電腦版的記憶來尋找他們想要的功能</strong>，所以務必提供版本切換的功能，慣例是在頁面底部。</p>
<p>（四）不要隱藏該有的介面線索：按鈕要看起來可以點，輸入框看起來可以輸入。</p>
<p>（五）介面需要容易學習並且可記憶性。</p>
<p>提高網站使用好感度的方式：</p>
<p>（一）知道使用者想在我們的網站上做什麼，並讓他們不費吹灰之力達成他們想要的。</p>
<p>（二）告訴使用者他想知道的東西。</p>
<p>（三）減少達成目標的步驟。</p>
<p>（四）知道使用者可能那邊會碰到問題，並且提供解答。</p>
<h2 id="個人心得"><a href="#個人心得" class="headerlink" title="個人心得"></a>個人心得</h2><p>在專案的過程中，總是會聽見業主許多對於網站設計的建議與想法，他們會根據自己的使用習慣來判斷公司網站也要以自己熟悉的方式來設計，這事實上也沒有對或錯，因為當網站完成後，最頻繁的訪問者可能就是老闆自己。</p>
<p>會關心到使用者體驗，就是當他發現網站沒有流量、沒有達成預期目標，才會開始在意是不是網站那裡沒做好，那裡沒有符合使用者的期待，而這一切都是一種學習的過程。衷心希望有越來越多的企業主能夠盡早體悟到<strong>使用者體驗跟業蹟是正相關，微不足道的小細節累積起來都能帶給使用者截然不同的感受</strong>，真正去了解他們並解決他們的問題，才是能讓公司長久經營之道。</p>
]]></content>
      <categories>
        <category>資訊架構</category>
      </categories>
  </entry>
  <entry>
    <title>【 書摘 】沒人懂你怎麼辦？</title>
    <url>/tw/%E3%80%90-%E6%9B%B8%E6%91%98-%E3%80%91%E6%B2%92%E4%BA%BA%E6%87%82%E4%BD%A0%E6%80%8E%E9%BA%BC%E8%BE%A6%EF%BC%9F/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2019/12/CleanShot-2019-12-15-at-21.23.06@2x.jpg"></p>
<p>人真的是一種很難完全理解的生物，太多因素影響著我們看待一個人的方式，尤其是在現今社群的時代，一張圖、一段訊息、一個讚，就覺得對方可以理解我們，看完這本書之後才知道根本是天方夜譚，因此在怪罪別人都不理解你之前，先告訴自己：我們理解自己嗎？</p>
<p>而對於希望得到別人好評的自己，也要問自己我們真的在意別人的看法嗎？書中提及改變他人認知的作法，最有效的就是運用引入注目的證據且持續轟炸，才會稍稍有機會觸動對方的認知機制，進而重新對你產生評價，但網友們隨意的批評、非善意的留言，我們真的要花寶貴的時間一個一個去重新改變他們的認知？省著點吧，在意我們真正在意的人就好。</p>
<h2 id="認知模式"><a href="#認知模式" class="headerlink" title="認知模式"></a>認知模式</h2><p>人的認知方式很受演化的影響，一個基本事實是：人本身就是一團難解的謎。人與人之間溝通的資訊傳達沒有想像的多，很多時後你覺得我已經有明確的表達我的想法了，但對方的接收程度可能不到十分之一，也許他們正在忙、或是他們希望你做他想做的事，會有這樣的誤解是因為有兩個不正確的假設在影響著我們：</p>
<ol>
<li> 我們自以為別人都是客觀理性的看待我們</li>
<li> 我們自以為別人都是用我們看待自己的方式來看待我們</li>
</ol>
<p>沒有人可以 100% 了解別人，解讀人的行為總是受到各種因素的影響，整體來說人都是懶得思考的，因為生活中有太多瑣事必須要處理，每件事情都要思考會讓心智負擔過重。所以人最常採用的認知模式為以下兩種：</p>
<ol>
<li> 捷思法：也就是經驗法則，因為之前那樣，所以現在一定也是這樣</li>
<li> 假設法：根據瞎子摸象摸到的部位來進行假設與推斷</li>
</ol>
<p>因為假設法的認知模式，也就產生了驗證性偏見，人都會看到自己希望所看到的東西，而不去相信真正客觀的事實，因此也就有了所謂的初始效應，對方第一眼產生的印象會影響之後對你的行為詮釋。</p>
<p>其次最常見的是刻板印象，人會以你所屬的群體來詮釋你的行為，再經由分類法，幫助大腦認知理解這個世界所有的人事物，因而延伸出月暈效應，雖然不會有人承認，但實驗證實多數人都會覺得外表好看的人，容易被人覺得比較聰明、誠實、善良等等的正面評價，</p>
<p>長得好看但卻是壞人，會造成認知的認知失調，因此大腦會自動忽略某部分的條件以便讓心智引擎可以運作，譬如開始說這人長得醜、或是他不是好人，透過這樣告訴自己來調整認知落差。</p>
<p>另外一個典型的認知叫做錯誤共識效應，當犯錯時為了讓自己比較好過，會認為其他人也跟自己有一樣的感覺或想法，譬如：我犯了全世界男人都會犯的錯XD</p>
<p>錯誤的獨特性也是常見的現象，那就是人會傾向相信自己擁有比別人更高的道德觀、價值觀，換句話說也就是自我感覺良好的一種機制在運作。</p>
<h2 id="認知過程"><a href="#認知過程" class="headerlink" title="認知過程"></a>認知過程</h2><p>人的認知過程分為兩個階段，第一階段是不自覺的潛意識認知，是自己完全沒有意識到的、無自我察覺的意圖，也是比較不費力認知方式，而且多半無法控制，在這階段認知者只會看見自己所希望看見的。</p>
<p>第二階段要有非常特殊的狀況才會進入到此階段，進而觸發調整自我認知的機制，並且需要在大腦清醒、專注的時候才有機會運作，經研究人腦無法直接進入第二階段，當認知者把情境以及其他因素列入考慮來對你進行客觀評估的時候，才有可能改變對方的認知。</p>
<h2 id="影響認知的因素"><a href="#影響認知的因素" class="headerlink" title="影響認知的因素"></a>影響認知的因素</h2><h3 id="信任濾鏡"><a href="#信任濾鏡" class="headerlink" title="信任濾鏡"></a>信任濾鏡</h3><p>首先是對你的信任感，初見陌生人對方會先判斷你是否有敵意，所以想要獲取對方的信任，首先是展現溫情，像是關注對方的話題，看著他的眼睛、對於對方的話題表示認同，同時也能表現同理心，更積極的作法是主動先信任對方，展現善意。</p>
<p>此外透過展現能力來獲取信任，表現出有意志力，意志力是很容易讓人覺得你擁有正直的性格，保持謙虛也是很好的方法，另外展現掌權者的肢體語言，權力者最能自在的展現自我，縱使你不是真的權力者，但也可以透過貼標籤的方式告訴自己自己在掌控。</p>
<p>表現潛力也是很重要的一環，相較於過去的表現，人們比較看重未來的潛力。</p>
<h3 id="權利濾鏡"><a href="#權利濾鏡" class="headerlink" title="權利濾鏡"></a>權利濾鏡</h3><p>其次權力者的視角也會影響認知，對於權力者來說，他只希望你證明你對我有用，不然就滾開，想要有價值不是當好人，而是當有用的人。權力者他們關注自己的目標，不放心力在任何不重要的事情上，以節省心智消耗。</p>
<h3 id="自我濾鏡"><a href="#自我濾鏡" class="headerlink" title="自我濾鏡"></a>自我濾鏡</h3><p>簡單說就是你的存在是否會威脅到他而影響到他對你的觀感，自我威脅的運作方式分為四個象限：</p>
<ul>
<li>  高相關性、高親近性</li>
<li>  高相關性、低親近性</li>
<li>  低相關性、高親近性</li>
<li>  低相關性、低親近性</li>
</ul>
<p>相關性指的是你與他人的成就領域是否相關，他人的成就領域是自己在意的項目時才會有威脅性。親近性指的是你與這人的親近程度，也就是你們彼此之間的熟悉程度。當受到威脅時，自我感覺良好是消除自我威脅的一種方式。</p>
<h3 id="人受到威脅的對應策略"><a href="#人受到威脅的對應策略" class="headerlink" title="人受到威脅的對應策略"></a>人受到威脅的對應策略</h3><p>第一個策略是貶低威脅者的成就，找其他勝過威脅者的領域來進行向下比較，譬如: 是啊，他是很優秀，不過他的女友腦袋空空空的。</p>
<p>第二個是會讓自己與有榮焉，讓自己與威脅者處於同一個群體來降低威脅，像是子女的成功就是父母的驕傲。</p>
<p>第三個方式是降低威脅者的相關性，譬如告訴自己威脅者的領域跟自己沒有關聯，像是遇到同行的佼佼者說自己也從事過其他行業並且取得不錯的成績。</p>
<p>最後是把威脅者弄走，或是迴避他以降低親近性。</p>
<p>如果不想讓別人警戒自己，可以使用以下方法降低威脅感：</p>
<ul>
<li>  謙虛一點</li>
<li>  肯定他人</li>
<li>  強調我們是一國的</li>
</ul>
<h2 id="影響認知的性格"><a href="#影響認知的性格" class="headerlink" title="影響認知的性格"></a>影響認知的性格</h2><p>冒險家，成就致上的性格：努力獲利最大化與避免錯失良機，溝通方式盡量強調機會與獲益，用成功案例來說服他們。</p>
<p>保守者，規避風險性格：追求最小損失與維持現狀，溝通方式強調減少風險與損失，透過數據來佐證來證明這麼做可以維持現狀或是以防未來的風險。</p>
<p>焦慮型人格：小時候缺乏關注，非常渴望獲得關注、沒有安全感，覺得要有條件才能得到愛，特徵是容易緊張、生氣、焦慮，溝通方式盡量採用同理心，並告訴自己他不是針對你，說明時要準確避免模稜兩可，說到做到對他們而言是最在乎的事情。</p>
<p>逃避型人格：小時後缺乏關注，為了不讓自己受傷索性什麼都不要，沒有期待就沒有傷害。特徵是冷漠、疏離、不易與人親近，溝通方式要有耐性，關鍵是不要裝熟，發現他陷入壓力時不用詢問直接提供適當的協助，如果詢問他有八成的機率會拒絕你的協助，然後讓自己更痛苦。</p>
<h2 id="如何改變別人的認知"><a href="#如何改變別人的認知" class="headerlink" title="如何改變別人的認知"></a>如何改變別人的認知</h2><p>只要啟動第二階段認知，就有機會改變，最強而有力的方式就是展現壓倒性又引人注目的證據，且持續展現，透過不停的轟炸認知者來喚醒他的第二階段認知。</p>
<p>如果沒有這麼長的時間可以來改變，提醒認知者對於公平與平等的意識可能是個簡單又快速的方法，運用標籤的力量，告訴對方他是很公平的人，或是透過自己曾經看走眼的的偏見案例來邀請對方分享同樣的故事，讓他自己意識到對你的評價似乎不太公正。</p>
<p>第三種方法是讓對方的成敗與你相關，把自己跟對方綁在一起，製造共同的目標或敵人，像是一起成立專案小組，同時製造自己與對方更多的相處機會，讓他意識到你不是他見過一次就不用在意的人，有更多的相處也才能有機會開始了解彼此。</p>
<p>最後是適時且恰當的道歉，如果你真的不曉得做了什麼得罪了他，那就是真誠的道歉，道歉的關鍵是不要自我辯護，而是設想對方觀點以及承認對方的感受與價值觀，重建我們是一國的感覺，最重要的事搞清楚道歉對象並做出適合的道歉方式，提供相對應的補償。</p>
<p>在希望別人可以客觀看待自己之前，也要先修正自己對於看人的認知，告訴自己不用急著對他人下評語，盡可能保持公平與客觀，並且留意偏見的產生，同時也用這樣的方法來看待自己，畢竟能先從自己了解起才有機會客觀的看待他人。</p>
]]></content>
      <categories>
        <category>專案即生活</category>
      </categories>
  </entry>
  <entry>
    <title>【 書摘 】網站這樣賣才有說服力</title>
    <url>/tw/%E3%80%90-%E6%9B%B8%E6%91%98-%E3%80%91%E7%B6%B2%E7%AB%99%E9%80%99%E6%A8%A3%E8%B3%A3%E6%89%8D%E6%9C%89%E8%AA%AA%E6%9C%8D%E5%8A%9B/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2016/01/getImage.jpeg" alt="getImage"></p>
<h2 id="電子商務網站是線上的銷售員"><a href="#電子商務網站是線上的銷售員" class="headerlink" title="電子商務網站是線上的銷售員"></a>電子商務網站是線上的銷售員</h2><p>網路行銷：企業為了達到行銷目的在網路上展開的行銷活動</p>
<p>網路行銷漏斗：流量、諮詢、線索、訂單</p>
<p>企業做不好網路行銷的原因</p>
<p>1.有網站沒流量-競爭對手多，很難被找到</p>
<p>2.有流量沒諮詢-流量品質差、網站沒說服力</p>
<h2 id="網站說服力的基本知識"><a href="#網站說服力的基本知識" class="headerlink" title="網站說服力的基本知識"></a>網站說服力的基本知識</h2><p>人的決策過程：需求確認 &gt; 方案蒐集 &gt; 方案評估 &gt; 克服決策壓力 &gt; 方案執行</p>
<p>人的決策過程是五個步驟的迴圈</p>
<p>決策壓力越大，越難進入下一個步驟迴圈</p>
<p>如何說服他人做出決策：</p>
<p>1.保持和決策者同步，不要輕易省略或跳躍某個步驟，</p>
<p>說服的第一步是幫助他確認需求</p>
<p>說服的第二步是幫助他人蒐集方案</p>
<p>說服的第三步是幫助他人對方案進行評估</p>
<p>說服的第四步是幫助他人克服決策壓力</p>
<p>2.說服不是將個人意識強加他人，人們需要自己做出決定</p>
<p>在進入下一階段前，必須透過提問的方式確認，不可以主觀地認為已經進入下一階段</p>
<p>3.公正的評估方案，誠懇地提供說明更容易說服目標</p>
<h2 id="影響網站說服力的要素"><a href="#影響網站說服力的要素" class="headerlink" title="影響網站說服力的要素"></a>影響網站說服力的要素</h2><p>說服力在網站的表現上為三大能力，分別是<strong>理解力、可信度、行動力</strong></p>
<h3 id="理解力：讓訪客可以快速理解"><a href="#理解力：讓訪客可以快速理解" class="headerlink" title="理解力：讓訪客可以快速理解"></a>理解力：讓訪客可以快速理解</h3><p>具有說服力的網站可以快速地將以下資訊提供給對方：</p>
<ol>
<li> 我是誰</li>
<li> 我賣什麼產品跟服務</li>
<li> 我的產品跟服務能幫你解決什麼問題</li>
<li> 為什麼要選擇我而不是其它人</li>
<li> 為什麼我們現在就要合作</li>
</ol>
<p>電子商務網站要盡可能用最快的時間能讓用戶理解以上的事情，所以直白、簡單為準則</p>
<p>前三點可以透過 logo 跟 slogan 清楚的表達出來</p>
<p>對於一個有說服力的網站來說，在標頭區就能將以上資訊快速傳遞給訪客</p>
<p>標頭區就應該將你產品的優勢或特色表現出來</p>
<h3 id="可信度：讓訪客相信你說的是真實的"><a href="#可信度：讓訪客相信你說的是真實的" class="headerlink" title="可信度：讓訪客相信你說的是真實的"></a>可信度：讓訪客相信你說的是真實的</h3><p>如何建立可信度：</p>
<ol>
<li> 成功案例展示</li>
<li> 客戶的評價</li>
<li> 內容公開透明呈現</li>
<li> 公開實績</li>
<li> 第三方機構獲獎認證</li>
</ol>
<h3 id="行動力：讓訪客理解並信任我們後，還要有行動訴求"><a href="#行動力：讓訪客理解並信任我們後，還要有行動訴求" class="headerlink" title="行動力：讓訪客理解並信任我們後，還要有行動訴求"></a>行動力：讓訪客理解並信任我們後，還要有行動訴求</h3><p>主動提供合作意願給訪客</p>
<p>行動提示主要表現形式有按鈕、電話號碼、線上表單等等</p>
<p>網站說服力 = 理解力+可信度+行動力</p>
<h2 id="電子商務網站的經營準則"><a href="#電子商務網站的經營準則" class="headerlink" title="電子商務網站的經營準則"></a>電子商務網站的經營準則</h2><p>1.清析的轉換目標 - 定位網站的目標</p>
<p>如何專注網站目標</p>
<p>問自己：這些對完成網站目標有幫助嗎？是必須的嗎？這句話或圖形是否能增加訪客對網站的理解和信任？是否能促使顧客採取我們所期望的行動？</p>
<p>2.明確的目標族群 - 定位網站的目標訪客</p>
<p>為了增加網站的說服力，網站應該是為了滿足特定的目標使用者而設計，而不是為所有顧客</p>
<p>3.高度的相關資訊 - 給訪客想要的資訊</p>
<p>訪客是以快速瀏覽的方式看你的網頁，找尋自己需要的關鍵字，確定找到關鍵字覺得有用，才會開始細看</p>
<p>如果資訊不相關，說服力再怎麼強也是白搭</p>
<p>4.簡潔的解決方案 - 給顧客簡單易行的方案</p>
<p>銷售產品或服務本質上是在銷售解決方案</p>
<p>優秀的業務員善於尋找客戶的問題，讓客戶意識到問題後，就可以很容易的把產品包裝成解決方案進行銷售</p>
<p>5.清晰的公開實績 - 增加網站可信度</p>
<p>說服力的核心問題是信任</p>
<p>隨時保持行銷意識，蒐集可增加網站信任的素材</p>
<p>6.明確的承諾保障 - 解決顧客決策壓力</p>
<p>企劃網站請思考：</p>
<ol>
<li> 能給客戶的承諾和保障是什麼？</li>
<li> 這個承諾能打消客戶的疑慮嗎？</li>
<li> 這個承諾的成本和收益那個大？</li>
<li> 怎麼為目標客戶準備一個明確的承諾？</li>
</ol>
<p>7.有力的行動提示 - 主動提示客戶採取行動</p>
<h2 id="電子商務網站的版面設計準則"><a href="#電子商務網站的版面設計準則" class="headerlink" title="電子商務網站的版面設計準則"></a>電子商務網站的版面設計準則</h2><p>好的購買環境會激發顧客的購買熱情</p>
<p>舒爽的頁面配置</p>
<p>舒爽的色彩搭配</p>
<p>愉悅的互動體驗</p>
<p>如客戶能閱讀越多網站上的內容，成交的機會就越大</p>
<h3 id="什麼時候網站外觀會成為購買的主要理由"><a href="#什麼時候網站外觀會成為購買的主要理由" class="headerlink" title="什麼時候網站外觀會成為購買的主要理由"></a>什麼時候網站外觀會成為購買的主要理由</h3><ol>
<li> 決策者對要購買的產品缺乏專業能力判斷時，網站製作的細節會讓人聯想公司產品的用心程度</li>
<li> 網站內容大家都差不多的時候</li>
</ol>
<p>通常取得客戶的聯絡方式比取得完整的資料來得更為重要（除非是要做 CRM），因此盡可能減少表單的欄位不讓訪客造成填寫的負擔</p>
<p>客戶的詳細資料可以再取得聯繫後再逐步獲得，線上表單唯一的目的就是盡可能取得正確的聯繫方式。</p>
]]></content>
      <categories>
        <category>資訊架構</category>
      </categories>
  </entry>
  <entry>
    <title>一些會讓 WordPress 網站變慢的熱門外掛</title>
    <url>/tw/%E4%B8%80%E4%BA%9B%E6%9C%83%E8%AE%93-wordpress-%E7%B6%B2%E7%AB%99%E8%AE%8A%E6%85%A2%E7%9A%84%E7%86%B1%E9%96%80%E5%A4%96%E6%8E%9B/</url>
    <content><![CDATA[<p>WordPress 最吸引人使用的因素莫過於有一大堆實用又豐富的外掛生態，但外掛往往也是造成網站速度變慢的主因之一，沒有經過良好設計的外掛，會因為頻繁的資料庫連線、大範圍的資料庫查詢、在沒用到的頁面引入、或是引入一些不必要的套件而造成網站效能低落，本文列舉出幾套熱門且吃資源的外掛，以及可能的替代方案，還有如何透過土法煉鋼的方式找出吃效能的外掛怪獸，如果你的網站剛好遇到這樣的問題，在升級主機前可以先從外掛檢查下手！</p>
<span id="more"></span>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1630062713767393” display=”yes” title=”5LiA5Lqb5pyD6K6TIFdvcmRQcmVzcyDntrLnq5norormhaLnmoTnhrHploDlpJbmjps=” body=”V29yZFByZXNzIOacgOWQuOW8leS6uuS9v+eUqOeahOWboOe0oOiOq+mBjuaWvOacieS4gOWkp+WghuWvpueUqOWPiOixkOWvjOeahOWkluaOm+eUn+aFi++8jOS9huWkluaOm+W+gOW+gOS5n+aYr+mAoOaIkOe2suermemAn+W6puiuiuaFoueahOS4u+WboOS5i+S4gO+8jOaykuaciee2k+mBjuiJr+WlveioreioiOeahOWkluaOm++8jOacg+WboOeCuumgu+e5geeahOizh+aWmeW6q+mAo+e3muOAgeWkp+evhOWcjeeahOizh+aWmeW6q+afpeipouOAgeWcqOaykueUqOWIsOeahOmggemdouW8leWFpeOAgeaIluaYr+W8leWFpeS4gOS6m+S4jeW/heimgeeahOWll+S7tuiAjOmAoOaIkOe2suermeaViOiDveS9juiQve+8jOacrOaWh+WIl+iIieWHuuW5vuWll+eGsemWgOS4lOWQg+izh+a6kOeahOWkluaOm++8jOS7peWPiuWPr+iDveeahOabv+S7o+aWueahiO+8jOmChOacieWmguS9lemAj+mBjuWcn+azleeFiemLvOeahOaWueW8j+aJvuWHuuWQg+aViOiDveeahOWkluaOm+aAqueNuO+8jOWmguaenOS9oOeahOe2suermeWJm+WlvemBh+WIsOmAmeaoo+eahOWVj+mhjO+8jOWcqOWNh+e0muS4u+apn+WJjeWPr+S7peWFiOW+nuWkluaOm+aqouafpeS4i+aJi++8gQ==” pid=”3371”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>一淘網-提供完整購物搜尋體驗</title>
    <url>/tw/%E4%B8%80%E6%B7%98%E7%B6%B2-%E6%8F%90%E4%BE%9B%E5%AE%8C%E6%95%B4%E8%B3%BC%E7%89%A9%E6%90%9C%E5%B0%8B%E9%AB%94%E9%A9%97/</url>
    <content><![CDATA[<p><a href="http://www.etao.com/"><img src="https://oberonlai.blog/wp-content/uploads/2010/10/011.jpg" alt="一淘網" title="一淘網"></a> 今日從Inside看到這篇<a href="http://www.inside.com.tw/10/13/etao-com">電子商務大比較？一淘網(etao.com) VS. PChome EC搜尋</a> 看完之後覺得非常的開心，因為書中的理論真的有人把它實踐出來。 至於台灣的購物搜尋，使用上的體驗差了十萬八千里，先不提彙編詞彙的部份，在ec搜尋上找iphone4，結果要在第九筆才看的到!? 試回想才發現，以前在yahoo購物中心或拍賣也常常出現這樣的情況，現在才知道是因為根本就沒有做控制詞彙，以及對搜尋結果進行優化。</p>
<span id="more"></span>
<p>我用一淘網進行三組關鍵字的測試：iphone4、iphone 4、apple iphone 4，僅有最後的關鍵字沒有出現商品資訊總結，我再測試iphonee 4，多打了一個e，結果只呈現網頁資訊，沒有任何的商品訊息，或是錯誤修正提示，是比較可惜的地方。 我印象還最深刻的功能，是商品資訊總結中的一個欄位-網友印象，如果這些關鍵字真是由買家所產生的，它所代表的價值不僅是網友購物的參考，更是企業品牌的驗證，藉此檢視公司是否有正確的傳達企業形象。 而更重要的是，設計與形容詞脫離不了關係，這一點是許多產品設計公司會進行的研究，譬如竹子給人的意象形容詞是環保、堅固、踏實，如果今天市場流行環保又耐用的風格，竹子就可能成為這次商品的設計材質， 但這些意象形容詞大多是由公司內部產生，可能有人看到竹子會想到熊貓，進而對於品牌產生認知上的落差，因此如果能夠透過市場來實驗，對於企業而言將是莫大的幫助。 此外，未來還可以依照網友印象來進行商品分類，譬如我想找一支外觀時尚、功能強大又超薄酷炫的手機，搜尋結果就出現iphone4，當然這一切的前提是，這些關鍵字必須要是真的。 整體而言，就如文中所提及的商品資訊總結和邊搜邊買，相信沒有龐大的研究資料，是不可能發展出這樣的瀏覽功能，尤其是商品資訊總覽的精準度，有點類似google搜尋的好手氣；邊搜邊買對於我這種最討厭跟別人買到一樣東西的人而言，影響購買決策的程度有限， 至於讓我最好奇的是，這個購物搜尋的功能推出後，對於淘寶網的銷售量，是否會有所瘋狂成長??</p>
]]></content>
      <categories>
        <category>使用者介面</category>
      </categories>
  </entry>
  <entry>
    <title>一次查看網站在各種裝置下的呈現狀態</title>
    <url>/tw/%E4%B8%80%E6%AC%A1%E6%9F%A5%E7%9C%8B%E7%B6%B2%E7%AB%99%E5%9C%A8%E5%90%84%E7%A8%AE%E8%A3%9D%E7%BD%AE%E4%B8%8B%E7%9A%84%E5%91%88%E7%8F%BE%E7%8B%80%E6%85%8B/</url>
    <content><![CDATA[<p>  人手一機的年代，讓網站如何在各種裝置下能正常使用瀏覽是現今站主也是開發者最頭痛的問題，在沒法持有多種裝置的情況下，使用開發工具先來初步檢視是比較實際可行的做法，XRespond 這套測試工具可以在同一個頁面之中，一覽網站在各裝置的瀏覽狀況，也可以新增更多裝置進行測試，方便站主可以快速檢查在所有螢幕尺寸下是否會出現版面問題，但這畢竟只是改變瀏覽器寬度的測試方式，實際裝置可能會出現的問題還是要在真機上面測試才行。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1440447976062202” display=”yes” title=”5LiA5qyh5p+l55yL57ay56uZ5Zyo5ZCE56iu6KOd572u5LiL55qE5ZGI54++54uA5oWL” body=”5Lq65omL5LiA5qmf55qE5bm05Luj77yM6K6T57ay56uZ5aaC5L2V5Zyo5ZCE56iu6KOd572u5LiL6IO95q2j5bi45L2/55So54CP6Ka95piv54++5LuK56uZ5Li75Lmf5piv6ZaL55m86ICF5pyA6aCt55eb55qE5ZWP6aGM77yM5Zyo5rKS5rOV5oyB5pyJ5aSa56iu6KOd572u55qE5oOF5rOB5LiL77yM5L2/55So6ZaL55m85bel5YW35YWI5L6G5Yid5q2l5qqi6KaW5piv5q+U6LyD5a+m6Zqb5Y+v6KGM55qE5YGa5rOV77yMWFJlc3BvbmQg6YCZ5aWX5ris6Kmm5bel5YW35Y+v5Lul5Zyo5ZCM5LiA5YCL6aCB6Z2i5LmL5Lit77yM5LiA6Ka957ay56uZ5Zyo5ZCE6KOd572u55qE54CP6Ka954uA5rOB77yM5Lmf5Y+v5Lul5paw5aKe5pu05aSa6KOd572u6YCy6KGM5ris6Kmm77yM5pa55L6/56uZ5Li75Y+v5Lul5b+r6YCf5qqi5p+l5Zyo5omA5pyJ6J6i5bmV5bC65a+45LiL5piv5ZCm5pyD5Ye654++54mI6Z2i5ZWP6aGM77yM5L2G6YCZ55Wi56uf5Y+q5piv5pS56K6K54CP6Ka95Zmo5a+s5bqm55qE5ris6Kmm5pa55byP77yM5a+m6Zqb6KOd572u5Y+v6IO95pyD5Ye654++55qE5ZWP6aGM6YKE5piv6KaB5Zyo55yf5qmf5LiK6Z2i5ris6Kmm5omN6KGM44CC” pid=”3034”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>七款掃描 WordPress 網站安全性工具</title>
    <url>/tw/%E4%B8%83%E6%AC%BE%E6%8E%83%E6%8F%8F-wordpress-%E7%B6%B2%E7%AB%99%E5%AE%89%E5%85%A8%E6%80%A7%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>  網站安全性研究部落格 Sucuri 報導，每年被攻擊最慘的內容管理系統 (CMS) 就是 WordPress，除了因為它是全世界最多人使用的開源系統外，週邊的 theme、plugin 也是多到數不清，但也因為這樣開放的系統，遇到無專人專職維護的 WordPress 網站，很容易成為駭客眼中的肥肉，本文分享七款檢查 WP 網站的線上工具，可以快速找出目前網站可能潛藏的漏洞，勤更新至少就能解決大半的問題，剩下主機端的防護就要找值得信賴的主機商，或是願意幫忙處理的網頁設計公司。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1489855664454766” display=”yes” title=”5LiD5qy+5o6D5o+PIFdvcmRQcmVzcyDntrLnq5nlronlhajmgKflt6Xlhbc=” body=”57ay56uZ5a6J5YWo5oCn56CU56m26YOo6JC95qC8IFN1Y3VyaSDloLHlsI7vvIzmr4/lubTooqvmlLvmk4rmnIDmhZjnmoTlhaflrrnnrqHnkIbns7vntbEgKENNUykg5bCx5pivIFdvcmRQcmVzc++8jOmZpOS6huWboOeCuuWug+aYr+WFqOS4lueVjOacgOWkmuS6uuS9v+eUqOeahOmWi+a6kOezu+e1seWklu+8jOmAsemCiueahCB0aGVtZeOAgXBsdWdpbiDkuZ/mmK/lpJrliLDmlbjkuI3muIXvvIzkvYbkuZ/lm6DngrrpgJnmqKPplovmlL7nmoTns7vntbHvvIzpgYfliLDnhKHlsIjkurrlsIjogbfntq3orbfnmoQgV29yZFByZXNzIOe2suerme+8jOW+iOWuueaYk+aIkOeCuumnreWuouecvOS4reeahOiCpeiCie+8jOacrOaWh+WIhuS6q+S4g+asvuaqouafpSBXUCDntrLnq5nnmoTnt5rkuIrlt6XlhbfvvIzlj6/ku6Xlv6vpgJ/mib7lh7rnm67liY3ntrLnq5nlj6/og73mvZvol4/nmoTmvI/mtJ7vvIzli6Tmm7TmlrDoh7PlsJHlsLHog73op6PmsbrlpKfljYrnmoTllY/poYzvvIzliankuIvkuLvmqZ/nq6/nmoTpmLLorbflsLHopoHmib7lgLzlvpfkv6Hos7TnmoTkuLvmqZ/llYbvvIzmiJbmmK/poZjmhI/luavlv5nomZXnkIbnmoTntrLpoIHoqK3oqIjlhazlj7jjgII=” pid=”3139”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>一頁式網頁的優缺點分析</title>
    <url>/tw/%E4%B8%80%E9%A0%81%E5%BC%8F%E7%B6%B2%E9%A0%81%E7%9A%84%E5%84%AA%E7%BC%BA%E9%BB%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>除了使用 WordPress 外，市面上也有非常多專門製作一頁式網頁的服務，會使用一頁式網頁的目的無非是希望可以讓訪客更聚焦於內容，進而完成轉換，在製作的時間上也相對較短，更不用說對於剛起步的沒有太多內容，使用一頁式就是很好的解決方案，但也不是沒有缺點，像是頁面內容的成效不好分析、載入時間過長、訪客要捲很長的頁面、分享到社群只能整頁分享等等，但這些問題理論上還是能透過前端技術來克服，只是相對於多頁式網站會多花功夫來處理。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1559826494124349” display=”yes” title=”5LiA6aCB5byP57ay6aCB55qE5YSq57y66bue5YiG5p6Q” body=”6Zmk5LqG5L2/55SoIFdvcmRQcmVzcyDlpJbvvIzluILpnaLkuIrkuZ/mnInpnZ7luLjlpJrlsIjploDoo73kvZzkuIDpoIHlvI/ntrLpoIHnmoTmnI3li5nvvIzmnIPkvb/nlKjkuIDpoIHlvI/ntrLpoIHnmoTnm67nmoTnhKHpnZ7mmK/luIzmnJvlj6/ku6XorpPoqKrlrqLmm7TogZrnhKbmlrzlhaflrrnvvIzpgLLogIzlrozmiJDovYnmj5vvvIzlnKjoo73kvZznmoTmmYLplpPkuIrkuZ/nm7jlsI3ovIPnn63vvIzmm7TkuI3nlKjoqqrlsI3mlrzliZvotbfmraXnmoTmspLmnInlpKrlpJrlhaflrrnvvIzkvb/nlKjkuIDpoIHlvI/lsLHmmK/lvojlpb3nmoTop6PmsbrmlrnmoYjvvIzkvYbkuZ/kuI3mmK/mspLmnInnvLrpu57vvIzlg4/mmK/poIHpnaLlhaflrrnnmoTmiJDmlYjkuI3lpb3liIbmnpDjgIHovInlhaXmmYLplpPpgY7plbfjgIHoqKrlrqLopoHmjbLlvojplbfnmoTpoIHpnaLjgIHliIbkuqvliLDnpL7nvqTlj6rog73mlbTpoIHliIbkuqvnrYnnrYnvvIzkvYbpgJnkupvllY/poYznkIboq5bkuIrpgoTmmK/og73pgI/pgY7liY3nq6/mioDooZPkvoblhYvmnI3vvIzlj6rmmK/nm7jlsI3mlrzlpJrpoIHlvI/ntrLnq5nmnIPlpJroirHlip/lpKvkvobomZXnkIbjgII=” pid=”3304”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>不需要駭客就能改你的網站!?</title>
    <url>/tw/%E4%B8%8D%E9%9C%80%E8%A6%81%E9%A7%AD%E5%AE%A2%E5%B0%B1%E8%83%BD%E6%94%B9%E4%BD%A0%E7%9A%84%E7%B6%B2%E7%AB%99/</url>
    <content><![CDATA[<p>  Sitemod 是一套 Chrome 瀏覽器的外掛，它的主要用途是提供開發者在使用瀏覽器的檢查工具來修改網站時，可以把暫時修改的項目保存下來，並建立一個獨立的網址，讓你分享給需要看到暫時修改的關係人，同時也可以匯入修改，讓團隊在開發的時候可以共用這一份不影響正式網站運作的暫時修改版本，以做為溝通的依據。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1479264515513881” display=”yes” title=”5LiN6ZyA6KaB6aet5a6i5bCx6IO95pS55L2g55qE57ay56uZIT8=” body=”U2l0ZW1vZCDmmK/kuIDlpZcgQ2hyb21lIOeAj+imveWZqOeahOWkluaOm++8jOWug+eahOS4u+imgeeUqOmAlOaYr+aPkOS+m+mWi+eZvOiAheWcqOS9v+eUqOeAj+imveWZqOeahOaqouafpeW3peWFt+S+huS/ruaUuee2suermeaZgu+8jOWPr+S7peaKiuaaq+aZguS/ruaUueeahOmgheebruS/neWtmOS4i+S+hu+8jOS4puW7uueri+S4gOWAi+eNqOeri+eahOe2suWdgO+8jOiuk+S9oOWIhuS6q+e1pumcgOimgeeci+WIsOaaq+aZguS/ruaUueeahOmXnOS/guS6uu+8jOWQjOaZguS5n+WPr+S7peWMr+WFpeS/ruaUue+8jOiuk+WcmOmaiuWcqOmWi+eZvOeahOaZguWAmeWPr+S7peWFseeUqOmAmeS4gOS7veS4jeW9semfv+ato+W8j+e2suermemBi+S9nOeahOaaq+aZguS/ruaUueeJiOacrO+8jOS7peWBmueCuua6nemAmueahOS+neaTmuOAgg==” pid=”3121”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>世大運官方網站...唉 ?</title>
    <url>/tw/%E4%B8%96%E5%A4%A7%E9%81%8B%E5%AE%98%E6%96%B9%E7%B6%B2%E7%AB%99-%E5%94%89-%F0%9F%98%A5/</url>
    <content><![CDATA[<p>  又是典型的政府網站的設計方式，從 App 的內容就表示規劃者明明就知道使用者需要的是什麼，但執行在網站上面就變成一場災難，雖然 App 也是一團糟，但至少還有選擇關注的國家、項目、得獎數的功能，首頁兩個大 Banner，有 MORE 按鈕卻不能點，內容也沒有重點，浪費了最重要的第一眼空間，然後線上直播都在 Youtube 了，設計一個專區來放影音應該也不難。賽程表似乎只能嵌入官方的圖表，不好用也不好找，中文版本就是公文圖檔與整本 PDF 手冊下載，無法做任何的進階搜尋。整個網站架構大致就是把官方文件放進網站中，對於使用者怎麼找資訊的習慣就完全脫截了，對於難得舉辦世界級賽事的台灣，網站這環節沒有做到位。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1422123564561310” display=”yes” title=”5LiW5aSn6YGL5a6Y5pa557ay56uZLi4u5ZSJIPCfmKU=” body=”5Y+I5piv5YW45Z6L55qE5pS/5bqc57ay56uZ55qE6Kit6KiI5pa55byP77yM5b6eIEFwcCDnmoTlhaflrrnlsLHooajnpLropo/lioPogIXmmI7mmI7lsLHnn6XpgZPkvb/nlKjogIXpnIDopoHnmoTmmK/ku4DpurzvvIzkvYbln7fooYzlnKjntrLnq5nkuIrpnaLlsLHorormiJDkuIDloLTngb3pm6PvvIzpm5bnhLYgQXBwIOS5n+aYr+S4gOWcmOezn++8jOS9huiHs+WwkemChOaciemBuOaTh+mXnOazqOeahOWci+WutuOAgemgheebruOAgeW+l+eNjuaVuOeahOWKn+iDve+8jOmmlumggeWFqeWAi+WkpyBCYW5uZXLvvIzmnIkgTU9SRSDmjInpiJXljbvkuI3og73pu57vvIzlhaflrrnkuZ/mspLmnInph43pu57vvIzmtarosrvkuobmnIDph43opoHnmoTnrKzkuIDnnLznqbrplpPvvIznhLblvoznt5rkuIrnm7Tmkq3pg73lnKggWW91dHViZSDkuobvvIzoqK3oqIjkuIDlgIvlsIjljYDkvobmlL7lvbHpn7Pmh4noqbLkuZ/kuI3pm6PjgILos73nqIvooajkvLzkuY7lj6rog73ltYzlhaXlrpjmlrnnmoTlnJbooajvvIzkuI3lpb3nlKjkuZ/kuI3lpb3mib7vvIzkuK3mlofniYjmnKzlsLHmmK/lhazmloflnJbmqpToiIfmlbTmnKwgUERGIOaJi+WGiuS4i+i8ie+8jOeEoeazleWBmuS7u+S9leeahOmAsumajuaQnOWwi+OAguaVtOWAi+e2suermeaetuani+Wkp+iHtOWwseaYr+aKiuWumOaWueaWh+S7tuaUvumAsue2suermeS4re+8jOWwjeaWvOS9v+eUqOiAheaAjum6vOaJvuizh+ioiueahOe/kuaFo+WwseWujOWFqOiEq+aIquS6hu+8jOWwjeaWvOmbo+W+l+iIiei+puS4lueVjOe0muizveS6i+eahOWPsOeBo++8jOe2suermemAmeeSsOevgOaykuacieWBmuWIsOS9jeOAgg==” pid=”2983”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>五款讓 WordPress 成為專案管理工具的免費外掛</title>
    <url>/tw/%E4%BA%94%E6%AC%BE%E8%AE%93-wordpress-%E6%88%90%E7%82%BA%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E7%9A%84%E5%85%8D%E8%B2%BB%E5%A4%96%E6%8E%9B/</url>
    <content><![CDATA[<p>現今市面上有許多方便使用的專案管理系統，像是 Bitrix24、Asana、Trello 等等，也有像是開源的 Redmine，但除了自由軟體外，線上服務號稱的免費總是有其限制，如果你已經習慣使用 WordPress，何不直接在裡面來管理你的專案呢？這篇文章分享了五款專案管理外掛，好處是可以使用既有資源來做更多事，另一方面這些外掛提供很多設定項，就不會被現成軟體給綁死，完全能客製調整成符合自己企業的業務需求。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1579071328866532” display=”yes” title=”5LqU5qy+6K6TIFdvcmRQcmVzcyDmiJDngrrlsIjmoYjnrqHnkIblt6XlhbfnmoTlhY3osrvlpJbmjps=” body=”54++5LuK5biC6Z2i5LiK5pyJ6Kix5aSa5pa55L6/5L2/55So55qE5bCI5qGI566h55CG57O757Wx77yM5YOP5pivIEJpdHJpeDI044CBQXNhbmHjgIFUcmVsbG8g562J562J77yM5Lmf5pyJ5YOP5piv6ZaL5rqQ55qEIFJlZG1pbmXvvIzkvYbpmaTkuoboh6rnlLHou5/pq5TlpJbvvIznt5rkuIrmnI3li5nomZ/nqLHnmoTlhY3osrvnuL3mmK/mnInlhbbpmZDliLbvvIzlpoLmnpzkvaDlt7LntpPnv5LmhaPkvb/nlKggV29yZFByZXNz77yM5L2V5LiN55u05o6l5Zyo6KOh6Z2i5L6G566h55CG5L2g55qE5bCI5qGI5ZGi77yf6YCZ56+H5paH56ug5YiG5Lqr5LqG5LqU5qy+5bCI5qGI566h55CG5aSW5o6b77yM5aW96JmV5piv5Y+v5Lul5L2/55So5pei5pyJ6LOH5rqQ5L6G5YGa5pu05aSa5LqL77yM5Y+m5LiA5pa56Z2i6YCZ5Lqb5aSW5o6b5o+Q5L6b5b6I5aSa6Kit5a6a6aCF77yM5bCx5LiN5pyD6KKr54++5oiQ6Luf6auU57Wm57aB5q2777yM5a6M5YWo6IO95a6i6KO96Kq/5pW05oiQ56ym5ZCI6Ieq5bex5LyB5qWt55qE5qWt5YuZ6ZyA5rGC44CC” pid=”3332”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>中文 LOGO 產生器</title>
    <url>/tw/%E4%B8%AD%E6%96%87-logo-%E7%94%A2%E7%94%9F%E5%99%A8/</url>
    <content><![CDATA[<p>國外已有許多線上產生 LOGO 的服務，但畢竟是洋人的玩意兒，最重要的中文字型完全沒得選擇，今天分享的這套 LOGO 產生器是中國的服務，可以輸入中文字來產生 LOGO，並內建許多簡體中文字型以及圖示搭配，有許多簡中字型可以選擇，但還是免不了缺了很多繁體字，但相較於國外的服務，至少能選擇中文字型。使用上需注意的是沒有看到任何的版權聲明，簡中字型多半是非商業使用的授權，因此真的需要把產出的 LOGO 應用在商業上，最好還是去取得字型的商業授權，而該工具僅作為一種設計的參考範例較為妥當。</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1485193881587611” display=”yes” title=”5Lit5paHIExPR08g55Si55Sf5Zmo” body=”5ZyL5aSW5bey5pyJ6Kix5aSa57ea5LiK55Si55SfIExPR08g55qE5pyN5YuZ77yM5L2G55Wi56uf5piv5rSL5Lq655qE546p5oSP5YWS77yM5pyA6YeN6KaB55qE5Lit5paH5a2X5Z6L5a6M5YWo5rKS5b6X6YG45pOH77yM5LuK5aSp5YiG5Lqr55qE6YCZ5aWXIExPR08g55Si55Sf5Zmo5piv5Lit5ZyL55qE5pyN5YuZ77yM5Y+v5Lul6Ly45YWl5Lit5paH5a2X5L6G55Si55SfIExPR0/vvIzkuKblhaflu7roqLHlpJrnsKHpq5TkuK3mloflrZflnovku6Xlj4rlnJbnpLrmkK3phY3vvIzmnInoqLHlpJrnsKHkuK3lrZflnovlj6/ku6Xpgbjmk4fvvIzkvYbpgoTmmK/lhY3kuI3kuobnvLrkuoblvojlpJrnuYHpq5TlrZfvvIzkvYbnm7jovIPmlrzlnIvlpJbnmoTmnI3li5nvvIzoh7PlsJHog73pgbjmk4fkuK3mloflrZflnovjgILkvb/nlKjkuIrpnIDms6jmhI/nmoTmmK/mspLmnInnnIvliLDku7vkvZXnmoTniYjmrIrogbLmmI7vvIznsKHkuK3lrZflnovlpJrljYrmmK/pnZ7llYbmpa3kvb/nlKjnmoTmjojmrIrvvIzlm6DmraTnnJ/nmoTpnIDopoHmiornlKLlh7rnmoQgTE9HTyDmh4nnlKjlnKjllYbmpa3kuIrvvIzmnIDlpb3pgoTmmK/ljrvlj5blvpflrZflnovnmoTllYbmpa3mjojmrIrvvIzogIzoqbLlt6Xlhbflg4XkvZzngrrkuIDnqK7oqK3oqIjnmoTlj4PogIPnr4TkvovovIPngrrlpqXnlbbjgII=” pid=”3134”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>五種設計方式確保使用者會捲動頁面往下閱讀</title>
    <url>/tw/%E4%BA%94%E7%A8%AE%E8%A8%AD%E8%A8%88%E6%96%B9%E5%BC%8F%E7%A2%BA%E4%BF%9D%E4%BD%BF%E7%94%A8%E8%80%85%E6%9C%83%E6%8D%B2%E5%8B%95%E9%A0%81%E9%9D%A2%E5%BE%80%E4%B8%8B%E9%96%B1%E8%AE%80/</url>
    <content><![CDATA[<p>  好的網站可以吸引使用者閱讀，能閱讀下去才有可能達成商業目標，所以網站的第一個畫面要能引起使用者的興趣，放些與他們不相關的內容只會增加被秒關閉的速度，其它要注意的地方還有：   1、提供明確的線索來顯示下方還有更多內容，不然有些採用滿版設計的網站很容易讓使用者誤會內容只有這樣。 2、保持在捲動時還能看到導覽選單，提供使用者其它可能瀏覽的內容。 3、使用動畫效果來增加第一個畫面的豐富性。 4、避免客製化捲軸，捲軸是使用者往下瀏覽網站的唯一方式，客製化常會造成使用者的困惑與不便。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1459007177539615” display=”yes” title=”5LqU56iu6Kit6KiI5pa55byP56K65L+d5L2/55So6ICF5pyD5o2y5YuV6aCB6Z2i5b6A5LiL6Zax6K6A” body=”5aW955qE57ay56uZ5Y+v5Lul5ZC45byV5L2/55So6ICF6Zax6K6A77yM6IO96Zax6K6A5LiL5Y675omN5pyJ5Y+v6IO96YGU5oiQ5ZWG5qWt55uu5qiZ77yM5omA5Lul57ay56uZ55qE56ys5LiA5YCL55Wr6Z2i6KaB6IO95byV6LW35L2/55So6ICF55qE6IiI6Laj77yM5pS+5Lqb6IiH5LuW5YCR5LiN55u46Zec55qE5YWn5a655Y+q5pyD5aKe5Yqg6KKr56eS6Zec6ZaJ55qE6YCf5bqm77yM5YW25a6D6KaB5rOo5oSP55qE5Zyw5pa56YKE5pyJ77yaMeOAgeaPkOS+m+aYjueiuueahOe3mue0ouS+humhr+ekuuS4i+aWuemChOacieabtOWkmuWFp+Wuue+8jOS4jeeEtuacieS6m+aOoeeUqOa7v+eJiOioreioiOeahOe2suermeW+iOWuueaYk+iuk+S9v+eUqOiAheiqpOacg+WFp+WuueWPquaciemAmeaoo+OAgjLjgIHkv53mjIHlnKjmjbLli5XmmYLpgoTog73nnIvliLDlsI7opr3pgbjllq7vvIzmj5Dkvpvkvb/nlKjogIXlhbblroPlj6/og73ngI/opr3nmoTlhaflrrnjgIIz44CB5L2/55So5YuV55Wr5pWI5p6c5L6G5aKe5Yqg56ys5LiA5YCL55Wr6Z2i55qE6LGQ5a+M5oCn44CCNOOAgemBv+WFjeWuouijveWMluaNsui7uO+8jOaNsui7uOaYr+S9v+eUqOiAheW+gOS4i+eAj+imvee2suermeeahOWUr+S4gOaWueW8j++8jOWuouijveWMluW4uOacg+mAoOaIkOS9v+eUqOiAheeahOWbsOaDkeiIh+S4jeS+v+OAgg==” pid=”3082”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>介面流暢的單頁式網站產生器</title>
    <url>/tw/%E4%BB%8B%E9%9D%A2%E6%B5%81%E6%9A%A2%E7%9A%84%E5%96%AE%E9%A0%81%E5%BC%8F%E7%B6%B2%E7%AB%99%E7%94%A2%E7%94%9F%E5%99%A8/</url>
    <content><![CDATA[<p>有非常多的單頁式網站產生器，大多都能在前台進行直接編輯，但有時候往往提供的工具過多，在編排上反而會變得複雜，Launchaco 這款很不一樣，無論是它的建置流程與操作介面，一次只專注一件事，並且預設提供多種產品類型的樣版，從 APP 到桌面應用程式都有，服務內容也很佛心，無限制架站數與使用自有網域，一年不用一千五百塊台幣，需要架設很多單頁式網站可以參考看看。</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1567047960068869” display=”yes” title=”5LuL6Z2i5rWB5pqi55qE5Zau6aCB5byP57ay56uZ55Si55Sf5Zmo” body=”5pyJ6Z2e5bi45aSa55qE5Zau6aCB5byP57ay56uZ55Si55Sf5Zmo77yM5aSn5aSa6YO96IO95Zyo5YmN5Y+w6YCy6KGM55u05o6l57eo6Lyv77yM5L2G5pyJ5pmC5YCZ5b6A5b6A5o+Q5L6b55qE5bel5YW36YGO5aSa77yM5Zyo57eo5o6S5LiK5Y+N6ICM5pyD6K6K5b6X6KSH6Zuc77yMTGF1bmNoYWNvIOmAmeasvuW+iOS4jeS4gOaoo++8jOeEoeirluaYr+Wug+eahOW7uue9rua1geeoi+iIh+aTjeS9nOS7i+mdou+8jOS4gOasoeWPquWwiOazqOS4gOS7tuS6i++8jOS4puS4lOmgkOioreaPkOS+m+WkmueorueUouWTgemhnuWei+eahOaoo+eJiO+8jOW+niBBUFAg5Yiw5qGM6Z2i5oeJ55So56iL5byP6YO95pyJ77yM5pyN5YuZ5YWn5a655Lmf5b6I5L2b5b+D77yM54Sh6ZmQ5Yi25p6256uZ5pW46IiH5L2/55So6Ieq5pyJ57ay5Z+f77yM5LiA5bm05LiN55So5LiA5Y2D5LqU55m+5aGK5Y+w5bmj77yM6ZyA6KaB5p626Kit5b6I5aSa5Zau6aCB5byP57ay56uZ5Y+v5Lul5Y+D6ICD55yL55yL44CC” pid=”3316”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>佐藤可士和的超整理術</title>
    <url>/tw/%E4%BD%90%E8%97%A4%E5%8F%AF%E5%A3%AB%E5%92%8C%E7%9A%84%E8%B6%85%E6%95%B4%E7%90%86%E8%A1%93/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2010/11/kashiwa.jpg" alt="佐藤可士和的超整理術" title="佐藤可士和的超整理術"> 對於從事設計，需要處理大量資料，如果沒有辦法有一套整理的邏輯與方法，想必這設計師解決問題的能力一定會有所不足。書中提到的概念很簡單，設計就是找出問題，這案子就已經解決了一半，而這問題的答案，就一定藏在客戶的心中，當找出答案後，才是設計師發揮自我所學的地方， 因此依照這邏輯把設計過程拆成兩大半來開，上半場的發現問題，與下半場的設計執行。而此書乃是著重在上半場的問題發現，要發現客戶問題所在的方法，就是必需運用該書的主題─整理術。 本書主要把整理術分為三個階段： (1)空間整理術-設定優先排序 (2)資訊整理術-導入獨特觀點 (3)思考整理術-將思緒資訊化 (1)空間整理術：藉由從自身週遭的環境開始做起，將私人、辦公場所的物品，依照生活模式依重要性將其取捨，捨棄是與不安的奮鬥，印像最深刻的是看到他公司的辦公環境，桌上沒有半點東西，我以為是為了要拍照，才特地大整理一翻， 想不到他在書中提到，這樣就是他們的辦公環境，運用統一規格的容器，將瑣碎的物品放在一起，就可以簡化視覺上的感受，降低處理業務時的壓力，在自己實際執行的成果上，發現的確有助於降低視覺的疲勞， 以及清理掉不需要的垃圾，清爽的感覺有助於工作的安排，不會桌上亂成一團而感覺工作作不完，養成隨手物品歸位的習慣，讓桌面可長保清潔，在虛擬空間部份，將資料夾盡量減少巢狀結構，以同層即可一目了然為原則，如資料夾過多也可使用搜尋功能，空間整裡的目的在於對實際的物品做排序，以親身體會整理過後的舒暢感。 (2)資訊整理術：在整理物品的時候，為了要取捨，一定要有所依據，如果要取捨辦公用品，一定會考量說那些東西會常用到，這時候，”使用頻率”就決定了這些物品的死活，而”使用頻率”就是導入的觀點， 在整理資訊時，一定要導入觀點才能將資訊做安排，但在解決客戶問題時的觀點，必需要從不同的角度來處理，拋開自以為是，而導入觀點的目的就是要找出答案(遠景)，目前應用過的經驗，在於整理所搜集到的資訊，並分析其利弊後，提出自己的建議， 讓自己有變換觀點的能力。 (3)思考整理術：將思緒轉換成文字，自我檢視非常困難，先從觀察別人開始學起，冷靜客觀的觀察，紀錄關鍵字，再將關鍵字與以分類，導出主軸觀點，方法與資訊整理法雷同，這方面的自我體會尚無，練習將自己的想法語言化，寫日記或是部落格應該都是不錯的練習方法。 總結：該書對於行銷企劃、設計人員都非常適合閱讀，書中舉出了許多實際案例，一窺設計公司與客戶之間的溝通模式。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>使用 Talkwalker Alerts 來取得 WordPress 第一手資訊</title>
    <url>/tw/%E4%BD%BF%E7%94%A8-talkwalker-alerts-%E4%BE%86%E5%8F%96%E5%BE%97-wordpress-%E7%AC%AC%E4%B8%80%E6%89%8B%E8%B3%87%E8%A8%8A/</url>
    <content><![CDATA[<p>長期使用 Google Alerts 發現，有些關鍵字的資訊量少得可憐，不知是演算法的關係還是關鍵字設定有誤，像是 WordPress 平均三五天才有一則通知，而且常常還是 .com 的網站，對於需要每天吸收相關資訊的小編來說這個量嚴重不足。幸好前幾天發現 Talkwalker Alerts 這個服務，它除了會去爬新聞以外，還會爬部落格、推特、論壇的相關內容，實際試用下來，資訊量比 Google Alerts 多了十倍，對於需要追蹤特定資訊的朋友可以試試這服務。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1556952731078392” display=”yes” title=”5L2/55SoIFRhbGt3YWxrZXIgQWxlcnRzIOS+huWPluW+lyBXb3JkUHJlc3Mg56ys5LiA5omL6LOH6KiK” body=”6ZW35pyf5L2/55SoIEdvb2dsZSBBbGVydHMg55m854++77yM5pyJ5Lqb6Zec6Y215a2X55qE6LOH6KiK6YeP5bCR5b6X5Y+v5oaQ77yM5LiN55+l5piv5ryU566X5rOV55qE6Zec5L+C6YKE5piv6Zec6Y215a2X6Kit5a6a5pyJ6Kqk77yM5YOP5pivIFdvcmRQcmVzcyDlubPlnYfkuInkupTlpKnmiY3mnInkuIDliYfpgJrnn6XvvIzogIzkuJTluLjluLjpgoTmmK8gLmNvbSDnmoTntrLnq5nvvIzlsI3mlrzpnIDopoHmr4/lpKnlkLjmlLbnm7jpl5zos4foqIrnmoTlsI/nt6jkvoboqqrpgJnlgIvph4/lmrTph43kuI3otrPjgILlubjlpb3liY3lub7lpKnnmbznj74gVGFsa3dhbGtlciBBbGVydHMg6YCZ5YCL5pyN5YuZ77yM5a6D6Zmk5LqG5pyD5Y6754is5paw6IGe5Lul5aSW77yM6YKE5pyD54is6YOo6JC95qC844CB5o6o54m544CB6KuW5aOH55qE55u46Zec5YWn5a6577yM5a+m6Zqb6Kmm55So5LiL5L6G77yM6LOH6KiK6YeP5q+UIEdvb2dsZSBBbGVydHMg5aSa5LqG5Y2B5YCN77yM5bCN5pa86ZyA6KaB6L+96Lmk54m55a6a6LOH6KiK55qE5pyL5Y+L5Y+v5Lul6Kmm6Kmm6YCZ5pyN5YuZ44CC” pid=”3293”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>使用 WP Enqueue 來管理載入資源</title>
    <url>/tw/%E4%BD%BF%E7%94%A8-wp-enqueue-%E4%BE%86%E7%AE%A1%E7%90%86%E8%BC%89%E5%85%A5%E8%B3%87%E6%BA%90/</url>
    <content><![CDATA[<p>  WordPress 提供很多 API 來管理網站的資源，WP Enqueue 就是其中最常用的一種。以往在寫網頁的時候，當要引入 javascript 或是 css 檔案時，習慣會用 HTML 標籤 script src 或 link stylesheet，但有些檔案並非在每一頁都會用到，只把需要用到的資源載入是能有效增加頁面速度的方法。而 WP Enqueue 就是使用 php 的方式來管理，先使用 wp_register_script 來註冊即將要載入的檔案，再使用 wp_enqueue_script 來進行載入，這樣就可以再下判斷條件來決定何時要載入資源，wp_register_script 還有許多參數可以使用，像是增加版本號、載入順序、在 head 或 foot 載入等等，能更彈性管理網站資源。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1483116688461997” display=”yes” title=”5L2/55SoIFdQIEVucXVldWUg5L6G566h55CG6LyJ5YWl6LOH5rqQ” body=”V29yZFByZXNzIOaPkOS+m+W+iOWkmiBBUEkg5L6G566h55CG57ay56uZ55qE6LOH5rqQ77yMV1AgRW5xdWV1ZSDlsLHmmK/lhbbkuK3mnIDluLjnlKjnmoTkuIDnqK7jgILku6XlvoDlnKjlr6vntrLpoIHnmoTmmYLlgJnvvIznlbbopoHlvJXlhaUgamF2YXNjcmlwdCDmiJbmmK8gY3NzIOaqlOahiOaZgu+8jOe/kuaFo+acg+eUqCBIVE1MIOaomeexpCBzY3JpcHQgc3JjIOaIliBsaW5rIHN0eWxlc2hlZXTvvIzkvYbmnInkupvmqpTmoYjkuKbpnZ7lnKjmr4/kuIDpoIHpg73mnIPnlKjliLDvvIzlj6rmiorpnIDopoHnlKjliLDnmoTos4fmupDovInlhaXmmK/og73mnInmlYjlop7liqDpoIHpnaLpgJ/luqbnmoTmlrnms5XjgILogIwgV1AgRW5xdWV1ZSDlsLHmmK/kvb/nlKggcGhwIOeahOaWueW8j+S+hueuoeeQhu+8jOWFiOS9v+eUqCB3cF9yZWdpc3Rlcl9zY3JpcHQg5L6G6Ki75YaK5Y2z5bCH6KaB6LyJ5YWl55qE5qqU5qGI77yM5YaN5L2/55SoIHdwX2VucXVldWVfc2NyaXB0IOS+humAsuihjOi8ieWFpe+8jOmAmeaoo+WwseWPr+S7peWGjeS4i+WIpOaWt+aineS7tuS+huaxuuWumuS9leaZguimgei8ieWFpeizh+a6kO+8jHdwX3JlZ2lzdGVyX3NjcmlwdCDpgoTmnInoqLHlpJrlj4Pmlbjlj6/ku6Xkvb/nlKjvvIzlg4/mmK/lop7liqDniYjmnKzomZ/jgIHovInlhaXpoIbluo/jgIHlnKggaGVhZCDmiJYgZm9vdCDovInlhaXnrYnnrYnvvIzog73mm7TlvYjmgKfnrqHnkIbntrLnq5nos4fmupDjgII=” pid=”3127”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>優秀 Landing Page 蒐集</title>
    <url>/tw/%E5%84%AA%E7%A7%80-landing-page-%E8%92%90%E9%9B%86/</url>
    <content><![CDATA[<p>在煩惱怎麼設計 Landing Page 嗎？這網站蒐錄許多真實線上公司的著陸頁，除了可以使用色系篩選外，還提供直版的預覽模式，看看這些漂亮的 Landing Page 是如何使用設計來優化轉換率～</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1461574623949537” display=”yes” title=”5YSq56eAIExhbmRpbmcgUGFnZSDokpDpm4Y=” body=”5Zyo54Wp5oOx5oCO6bq86Kit6KiIIExhbmRpbmcgUGFnZSDll47vvJ/pgJnntrLnq5nokpDpjIToqLHlpJrnnJ/lr6bnt5rkuIrlhazlj7jnmoTokZfpmbjpoIHvvIzpmaTkuoblj6/ku6Xkvb/nlKjoibLns7vnr6npgbjlpJbvvIzpgoTmj5Dkvpvnm7TniYjnmoTpoJDopr3mqKHlvI/vvIznnIvnnIvpgJnkupvmvILkuq7nmoQgTGFuZGluZyBQYWdlIOaYr+WmguS9leS9v+eUqOioreioiOS+huWEquWMlui9ieaPm+eOh++9ng==” pid=”3088”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>免費線上 LOGO 設計工具</title>
    <url>/tw/%E5%85%8D%E8%B2%BB%E7%B7%9A%E4%B8%8A-logo-%E8%A8%AD%E8%A8%88%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>超過三千個以上的 LOGO 範本可以使用，還有線上編輯器能進行 LOGO layout 的編排與調整，還有附帶十款的中文字型可以選擇，編輯器可自訂 LOGO 尺寸，需要用在輸出用的大圖也不成問題！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1536730383100627” display=”yes” title=”5YWN6LK757ea5LiKIExPR08g6Kit6KiI5bel5YW3” body=”6LaF6YGO5LiJ5Y2D5YCL5Lul5LiK55qEIExPR08g56+E5pys5Y+v5Lul5L2/55So77yM6YKE5pyJ57ea5LiK57eo6Lyv5Zmo6IO96YCy6KGMIExPR08gbGF5b3V0IOeahOe3qOaOkuiIh+iqv+aVtO+8jOmChOaciemZhOW4tuWNgeasvueahOS4reaWh+Wtl+Wei+WPr+S7pemBuOaTh++8jOe3qOi8r+WZqOWPr+iHquiogiBMT0dPIOWwuuWvuO+8jOmcgOimgeeUqOWcqOi8uOWHuueUqOeahOWkp+WcluS5n+S4jeaIkOWVj+mhjO+8gQ==” pid=”3259”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>免費電子報版型加編輯器</title>
    <url>/tw/%E5%85%8D%E8%B2%BB%E9%9B%BB%E5%AD%90%E5%A0%B1%E7%89%88%E5%9E%8B%E5%8A%A0%E7%B7%A8%E8%BC%AF%E5%99%A8/</url>
    <content><![CDATA[<p>  增加電子報的信任感，設計過的版型以及符合企業形象的色彩計劃是絕對必要的，與網站一樣給人良好的第一印象才是決定能否展開溝通的第一步。Email Monster 提供超過三十套各類型的電子郵件版型，如果找不到適合的，也可以從既有版型開始修改，視覺化編輯器不需寫到任何一行程式碼，非常適合行銷人員使用。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1435198753253791” display=”yes” title=”5YWN6LK76Zu75a2Q5aCx54mI5Z6L5Yqg57eo6Lyv5Zmo” body=”5aKe5Yqg6Zu75a2Q5aCx55qE5L+h5Lu75oSf77yM6Kit6KiI6YGO55qE54mI5Z6L5Lul5Y+K56ym5ZCI5LyB5qWt5b2i6LGh55qE6Imy5b2p6KiI5YqD5piv57WV5bCN5b+F6KaB55qE77yM6IiH57ay56uZ5LiA5qij57Wm5Lq66Imv5aW955qE56ys5LiA5Y2w6LGh5omN5piv5rG65a6a6IO95ZCm5bGV6ZaL5rqd6YCa55qE56ys5LiA5q2l44CCRW1haWwgTW9uc3RlciDmj5DkvpvotoXpgY7kuInljYHlpZflkITpoZ7lnovnmoTpm7vlrZDpg7Xku7bniYjlnovvvIzlpoLmnpzmib7kuI3liLDpganlkIjnmoTvvIzkuZ/lj6/ku6Xlvp7ml6LmnInniYjlnovplovlp4vkv67mlLnvvIzoppboprrljJbnt6jovK/lmajkuI3pnIDlr6vliLDku7vkvZXkuIDooYznqIvlvI/norzvvIzpnZ7luLjpganlkIjooYzpirfkurrlk6Hkvb/nlKjjgII=” pid=”3020”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>六款 WooCommerce 報表分析工具</title>
    <url>/tw/%E5%85%AD%E6%AC%BE-woocommerce-%E5%A0%B1%E8%A1%A8%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>有在經營電子商務的網站，最重要的就是可以了解商品的銷售狀況以及客戶的購買習慣，然而 WooCommerce 內建的分析工具相對薄弱，這時就可以藉助第三方服務來增加報表功能，這篇文章分享了六款 WooCommerce 報表分析工具，有整合站外的線上服務，也有安裝在站內的報表外掛，提供給有需要的朋友！</p>
<span id="more"></span>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1644667302306934” display=”yes” title=”5YWt5qy+IFdvb0NvbW1lcmNlIOWgseihqOWIhuaekOW3peWFtw==” body=”5pyJ5Zyo57aT54ef6Zu75a2Q5ZWG5YuZ55qE57ay56uZ77yM5pyA6YeN6KaB55qE5bCx5piv5Y+v5Lul5LqG6Kej5ZWG5ZOB55qE6Yq35ZSu54uA5rOB5Lul5Y+K5a6i5oi255qE6LO86LK357+S5oWj77yM54S26ICMIFdvb0NvbW1lcmNlIOWFp+W7uueahOWIhuaekOW3peWFt+ebuOWwjeiWhOW8se+8jOmAmeaZguWwseWPr+S7peiXieWKqeesrOS4ieaWueacjeWLmeS+huWinuWKoOWgseihqOWKn+iDve+8jOmAmeevh+aWh+eroOWIhuS6q+S6huWFreasviBXb29Db21tZXJjZSDloLHooajliIbmnpDlt6XlhbfvvIzmnInmlbTlkIjnq5nlpJbnmoTnt5rkuIrmnI3li5nvvIzkuZ/mnInlronoo53lnKjnq5nlhafnmoTloLHooajlpJbmjpvvvIzmj5DkvpvntabmnInpnIDopoHnmoTmnIvlj4vvvIE=” pid=”3377”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>可線上編輯照片的圖庫網站</title>
    <url>/tw/%E5%8F%AF%E7%B7%9A%E4%B8%8A%E7%B7%A8%E8%BC%AF%E7%85%A7%E7%89%87%E7%9A%84%E5%9C%96%E5%BA%AB%E7%B6%B2%E7%AB%99/</url>
    <content><![CDATA[<p>  在免費圖庫已經多到滿出來的年代，付費圖庫只能想辦法提供更多的附加價值來吸引客戶買單，於是 iStock 這家圖庫公司推出了線上圖片編輯工具，直接在線上裁切、加濾鏡、文字，甚至還可以上傳 LOGO，等到設計完成後再付費下載這張圖片，省去後製處理的時間。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1449177188522614” display=”yes” title=”5Y+v57ea5LiK57eo6Lyv54Wn54mH55qE5ZyW5bqr57ay56uZ” body=”5Zyo5YWN6LK75ZyW5bqr5bey57aT5aSa5Yiw5ru/5Ye65L6G55qE5bm05Luj77yM5LuY6LK75ZyW5bqr5Y+q6IO95oOz6L6m5rOV5o+Q5L6b5pu05aSa55qE6ZmE5Yqg5YO55YC85L6G5ZC45byV5a6i5oi26LK35Zau77yM5pa85pivIGlTdG9jayDpgJnlrrblnJbluqvlhazlj7jmjqjlh7rkuobnt5rkuIrlnJbniYfnt6jovK/lt6XlhbfvvIznm7TmjqXlnKjnt5rkuIroo4HliIfjgIHliqDmv77pj6HjgIHmloflrZfvvIznlJroh7PpgoTlj6/ku6XkuIrlgrMgTE9HT++8jOetieWIsOioreioiOWujOaIkOW+jOWGjeS7mOiyu+S4i+i8iemAmeW8teWclueJh++8jOecgeWOu+W+jOijveiZleeQhueahOaZgumWk+OAgg==” pid=”3058”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>喜歡&amp;討厭 WordPress 的地方</title>
    <url>/tw/%E5%96%9C%E6%AD%A1%E8%A8%8E%E5%8E%AD-wordpress-%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
    <content><![CDATA[<p>這兩天被問到這個題目，喜歡 WordPress 的地方很多，但討厭的地方努力想了好久，整理如下：</p>
<p>最喜愛 WordPress 的地方在於背後默默貢獻的每個人，也就是整個社群，每次參加聚會總是可以得到大家無私的分享以及交流，也因為 ＷordPress 認識了許多朋友，出了社會要能交到真心的朋友是很不容易的事情，透過 WordPress 讓我們彼此聯繫在一起。</p>
<span id="more"></span>
<p>對於 WordPress 是沒有到討厭的地步，但如果能夠對開發者更友善一點就更好了，因為常常查文件查得很混亂，像是 <a href="http://developer.wordpress.org/">developer.wordpress.org</a> 裡面 function 的條列方式，必須要一層一層點進去看，而且有 49 個分頁，又是照字母分類，</p>
<p>如果可以依照用途分類會比較容易發掘不曾用過的 Function，或是提供查詢過的紀錄、加入蒐藏功能，應該能省下不少查文件的時間，因爲現在大部分都還是必須要透過 Google 來查。</p>
<p><img src="https://i2.wp.com/oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-12-at-19.04.37.jpg?fit=1024,662&ssl=1"></p>
<p>版面設計的部分可以參考其他框架的文件展示，有固定的左側欄使用 Accordiong 來顯示所有的內容 → <a href="https://laravel.com/docs/7.x">https://laravel.com/docs/7.x</a>，這樣在瀏覽上會有個概觀，也才能知道自己要從哪個部分開始閱讀起。</p>
<p><img src="https://i0.wp.com/oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-12-at-19.05.23.jpg?fit=1024,594&ssl=1"></p>
<p>另外是 Function Name，像是 get_categories()、wp_list_categories()、get_category() 在使用上很難直覺就區分三者之間的差別，只能透過不停的嘗試錯誤才能慢慢記憶起來，但一陣子沒用的話很容易就忘記，只好再花時間回去查。</p>
<p>最後就是 Function 提供的範例不夠，雖然有每個參數的定義與用法，但有時後就是會懶得看，想先從範例來確認這隻 Function 是不是我需要的，等到確定後再去看參數所代表的意思。很好的參考範本就是 w3cschools 的 Try it Yourself，可以讓我實際更換參數並立即看到執行結果，然後先給範例下面才開始解釋 → <a href="https://www.w3schools.com/php/php_oop_classes_objects.asp">https://www.w3schools.com/php/php_oop_classes_objects.asp</a></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-12-at-19.06.02.jpg"></p>
<p>如果以站在使用者的角度，我覺得 Showcase, Themes 跟 Plugins 的呈現方式都還有很多可以改進的地方，現在的版面跟架構比較站在公司的立場來整理，而並非以使用者的目的性來進行分類：把第一個區塊放 Block-Enabled Plugins 就很明顯的是在主推 Block Editor，</p>
<p><img src="https://i2.wp.com/oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-12-at-19.06.46.jpg?fit=1024,707&ssl=1"></p>
<p>但對從來沒用過 Block Editor 的 User 應該會直接跳過這個區塊，滑到頁尾可能就會跳出了，用 Google 找可能比較快，這一點 Envato 就做得很好，根據工具的實際用途來進行分類，這部分是我覺得 <a href="http://wordpress.org/">wordpress.org</a> 可以改善的地方。</p>
<p><img src="https://i1.wp.com/oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-12-at-19.08.29.jpg?fit=1024,637&ssl=1"></p>
<p>但產品本身好，才能造就這麼龐大的生態圈，身為開發者也只能暫時忍受一下這些小小的不便了，畢竟 Automatic 現在應該都全部集中火力在 Block Editor 上面，而且新版越改越好，尤其是右邊的 Block Template 讓我高潮了，覺得又是一個可以好好發揮的地方。</p>
<p><img src="https://i2.wp.com/oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-12-at-19.09.31.jpg?fit=1024,710&ssl=1"></p>
<p>不知道大家對於 WordPress 有沒有覺得其他還可以改善的地方？有的話在下面留言分享吧！</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>在分享連結中加入自己的品牌 LOGO</title>
    <url>/tw/%E5%9C%A8%E5%88%86%E4%BA%AB%E9%80%A3%E7%B5%90%E4%B8%AD%E5%8A%A0%E5%85%A5%E8%87%AA%E5%B7%B1%E7%9A%84%E5%93%81%E7%89%8C-logo/</url>
    <content><![CDATA[<p>每天大家都在轉傳文章，點進去看完後應該也很少會記得是從誰的 FB 或是網站連過去的，Replug 這個服務很妙，它可以在你分享的網頁中，左下角自動加入自己的品牌 LOGO 跟 Call to action，然後連結到自定網址，它的後台還可以查看這個分享連結的瀏覽次數以及按鈕點擊轉換，對於常常分享文章的品牌經營者又多了一個可以曝光的管道。</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1472099676230365” display=”yes” title=”5Zyo5YiG5Lqr6YCj57WQ5Lit5Yqg5YWl6Ieq5bex55qE5ZOB54mMIExPR08=” body=”5q+P5aSp5aSn5a626YO95Zyo6L2J5YKz5paH56ug77yM6bue6YCy5Y6755yL5a6M5b6M5oeJ6Kmy5Lmf5b6I5bCR5pyD6KiY5b6X5piv5b6e6Kqw55qEIEZCIOaIluaYr+e2suermemAo+mBjuWOu+eahO+8jFJlcGx1ZyDpgJnlgIvmnI3li5nlvojlppnvvIzlroPlj6/ku6XlnKjkvaDliIbkuqvnmoTntrLpoIHkuK3vvIzlt6bkuIvop5Loh6rli5XliqDlhaXoh6rlt7HnmoTlk4HniYwgTE9HTyDot58gQ2FsbCB0byBhY3Rpb27vvIznhLblvozpgKPntZDliLDoh6rlrprntrLlnYDvvIzlroPnmoTlvozlj7DpgoTlj6/ku6Xmn6XnnIvpgJnlgIvliIbkuqvpgKPntZDnmoTngI/opr3mrKHmlbjku6Xlj4rmjInpiJXpu57mk4rovYnmj5vvvIzlsI3mlrzluLjluLjliIbkuqvmlofnq6DnmoTlk4HniYzntpPnh5/ogIXlj4jlpJrkuobkuIDlgIvlj6/ku6Xmm53lhYnnmoTnrqHpgZPjgII=” pid=”3105”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>變更基金投資標的轉換系統介面設計</title>
    <url>/tw/%E5%9F%BA%E9%87%91%E8%AE%8A%E6%9B%B4%E6%8A%95%E8%B3%87%E6%A8%99%E7%9A%84%E8%BD%89%E6%8F%9B%E7%B3%BB%E7%B5%B1%E4%BB%8B%E9%9D%A2%E8%A8%AD%E8%A8%88/</url>
    <content><![CDATA[<p>一般投資型保單均包含數十筆基金標的，因隨著投資績效的差異，或是國際市場的動向，投資人可自行選擇改變基金標的或是變更其分配比例，其中屬基金標的轉換流程較為繁瑣，為規畫該系統流程及介面設計，在此將設計過程予以紀錄。 投資標的轉換主要流程如下 選擇可變更之保單號碼。 檢視該保單所包含之基金標的，根據當日參考價值來進行轉出(賣出)之動作。 轉出(賣出)之金額需大於新台幣5,000元整。 轉出(賣出)之金額依照比例轉入(買進)新檔基金，或是就現有基金進行調整。 轉入(買進)新檔基金可依照基金公司下拉選單進行選取。 轉入(買進)新檔基金可依照基金代號選擇字母索引進行選取。 轉入(買進)之比例需為100%($5,000)。 確認轉入(買進)之基金標的。</p>
<h3 id="介面設計過程"><a href="#介面設計過程" class="headerlink" title="介面設計過程"></a>介面設計過程</h3><span id="more"></span>
<h4 id="階段一，操作介面的混淆"><a href="#階段一，操作介面的混淆" class="headerlink" title="階段一，操作介面的混淆"></a>階段一，操作介面的混淆</h4><p>將轉出與轉入視為單一流程，在同一畫面進行動作，簡化操作步驟。並採用調節量表來取代輸入文字欄位，降低輸入錯誤的可能性。 <img src="https://oberonlai.blog/wp-content/uploads/2010/11/change-01.jpg" title="操作介面的混淆"> 實際設計後發現問題，因單一保單包含基金數不固定，從10檔到50檔皆有可能，在版面的呈現上過於冗長，並且在測試後發現，單一畫面難以表達轉出與轉入兩段步驟，原因在於其變更方式， 轉出是用百分比來控制賣出的金額，而轉入的百分比則是用來表達各基金在轉出金額中所佔之比例，同一操縱介面卻代表不同的含義，極易造成使用者混淆，因此經過討論後，決定將此流程分成三部份來執行。</p>
<h4 id="階段二，轉出金額邏輯"><a href="#階段二，轉出金額邏輯" class="headerlink" title="階段二，轉出金額邏輯"></a>階段二，轉出金額邏輯</h4><p>轉出(賣出)的部份，為表達使用者從基金現有參考價值中所賣掉的金額，在介面上先行將調節量表的預設值設為100%，往左移動則代表將賣出多少比例的參考價值，而上方的長條量表則會往右增加，當轉出金額大於5,000元時，量表則會滿表，代表已到轉出最低門檻。 <img src="https://oberonlai.blog/wp-content/uploads/2010/11/change-02.jpg" title="表一"> <img src="https://oberonlai.blog/wp-content/uploads/2010/11/change-03.jpg" title="表二"> <img src="https://oberonlai.blog/wp-content/uploads/2010/11/change-04.jpg" title="表三"> 實地測試後，發現該邏輯與人類的心智模式不符，問題在於要轉出的金額，一般人不會用百分比來做量度，而是直接輸入要賣掉的金額；另一方面，調節量表的左移減少，以及總合量表的右移增加存在著一種違和感，在視覺的呈現上是屬於互斥的關係，需再進行調整。 改以輸入欄位取代比例調節量表，使用者可以直接輸入欲轉出之金額，並將基金現有參考價值資訊整合至修改欄位，方便進行對照；上方價值金額量表為轉出金額之總合，以視覺化呈現「累積」之意涵，超過5,000元門檻以紅字表示繼續累加，讓用戶了解目前轉出金額總和。 <img src="https://oberonlai.blog/wp-content/uploads/2010/11/change-05.jpg" title="表四"> <img src="https://oberonlai.blog/wp-content/uploads/2010/11/change-06.jpg" title="表五"> <img src="https://oberonlai.blog/wp-content/uploads/2010/11/change-07.jpg" title="表六"></p>
<h4 id="階段三，轉入金額之分配比例"><a href="#階段三，轉入金額之分配比例" class="headerlink" title="階段三，轉入金額之分配比例"></a>階段三，轉入金額之分配比例</h4><p>轉入金額乃根據轉出之總和來進行比例分配，當出規劃時，因傳達上的誤解，誤認為轉入的金額是自由增加無上限，因此與轉入同樣設計輸入欄位供用戶直接填寫。在釐清後再行重新調整，依照轉出總金額之百分比進行轉入基金之比例分配，因而重新採用比例調節量表進行修正。 <img src="https://oberonlai.blog/wp-content/uploads/2010/11/change-08.jpg" title="表七"> 另一方面，用戶可不受限於改變現有基金之比例，亦可新增其它基金標的，來進行比例分配。原始新增標的介面希望讓使用者可以使用下拉式選單選擇，亦或是知道基金代號的用戶，可以直接輸入，提供多元的互動方式。 <img src="https://oberonlai.blog/wp-content/uploads/2010/11/change-09.jpg" title="表八"> 然而幾近百檔基金採用下拉式選單，將會造成過於冗長之使用體驗，因而根據不同的基金公司做初步的篩選，有效降低搜尋的時間，而代號部份，則依照字母索引進行篩選，減少用戶鍵盤輸入的困擾。 <img src="https://oberonlai.blog/wp-content/uploads/2010/11/change-10.jpg" title="表九"> <img src="https://oberonlai.blog/wp-content/uploads/2010/11/change-11.jpg" title="表十"></p>
<h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>此次設計主要針對操作的流程及使用者的習慣進行逐步修正，目前持續更新中。</p>
]]></content>
      <categories>
        <category>使用者介面</category>
      </categories>
  </entry>
  <entry>
    <title>增加 WooCommerce 結帳完成後的回購率</title>
    <url>/tw/%E5%A2%9E%E5%8A%A0-woocommerce-%E7%B5%90%E5%B8%B3%E5%AE%8C%E6%88%90%E5%BE%8C%E7%9A%84%E5%9B%9E%E8%B3%BC%E7%8E%87/</url>
    <content><![CDATA[<p>  WooCommerce Thank You Page plugin 是一支可以客製結帳完成後感謝頁面的付費外掛，它提供了一些功能讓客戶買完東西後，還有再次回來網站消費的誘因。像是個人化的問候語、推薦相關商品、下次購買能使用的折價券、顯示該客戶曾經瀏覽過的商品、將客戶導引到最暢銷的商品頁或是促銷活動，以及進行客戶意見調查等等的功能，讓客戶消費完之後還能感受到後續的服務，是能帶給客戶有不一樣消費體驗的重要環節。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1460734554033544” display=”yes” title=”5aKe5YqgIFdvb0NvbW1lcmNlIOe1kOW4s+WujOaIkOW+jOeahOWbnuizvOeOhw==” body=”V29vQ29tbWVyY2UgVGhhbmsgWW91IFBhZ2UgcGx1Z2luIOaYr+S4gOaUr+WPr+S7peWuouijvee1kOW4s+WujOaIkOW+jOaEn+isnemggemdoueahOS7mOiyu+WkluaOm++8jOWug+aPkOS+m+S6huS4gOS6m+WKn+iDveiuk+WuouaItuiyt+WujOadseilv+W+jO+8jOmChOacieWGjeasoeWbnuS+hue2suermea2iOiyu+eahOiqmOWboOOAguWDj+aYr+WAi+S6uuWMlueahOWVj+WAmeiqnuOAgeaOqOiWpuebuOmXnOWVhuWTgeOAgeS4i+asoeizvOiyt+iDveS9v+eUqOeahOaKmOWDueWIuOOAgemhr+ekuuipsuWuouaItuabvue2k+eAj+imvemBjueahOWVhuWTgeOAgeWwh+WuouaItuWwjuW8leWIsOacgOaaoumKt+eahOWVhuWTgemggeaIluaYr+S/g+mKt+a0u+WLle+8jOS7peWPiumAsuihjOWuouaItuaEj+imi+iqv+afpeetieetieeahOWKn+iDve+8jOiuk+WuouaItua2iOiyu+WujOS5i+W+jOmChOiDveaEn+WPl+WIsOW+jOe6jOeahOacjeWLme+8jOaYr+iDveW4tue1puWuouaItuacieS4jeS4gOaoo+a2iOiyu+mrlOmpl+eahOmHjeimgeeSsOevgOOAgg==” pid=”3085”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>增強 WordPress 電子郵件功能</title>
    <url>/tw/%E5%A2%9E%E5%BC%B7-wordpress-%E9%9B%BB%E5%AD%90%E9%83%B5%E4%BB%B6%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>WordPress 的預設電子郵件通知類型較少，而且也自訂電子郵件的內容對於不懂程式的朋友會有一定的難度，Better Notification for WordPress 這支外掛可以針對十幾種情境來發送 email 給需要通知的對象，包含新文章發佈、文章更新、新分類、新增頁面等等，此外還有提供多種欄位的 shortcode 把站內資訊加入到 email 之中，還有提供編輯器介面來設計郵件，讓你可以打造符合企業形象的電子郵件，付費版提供更多的發信情境，巧妙運用能設計出與用戶意想不到的互動方式。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1596932693747062” display=”yes” title=”5aKe5by3IFdvcmRQcmVzcyDpm7vlrZDpg7Xku7blip/og70=” body=”V29yZFByZXNzIOeahOmgkOiorembu+WtkOmDteS7tumAmuefpemhnuWei+i8g+Wwke+8jOiAjOS4lOS5n+iHquiogumbu+WtkOmDteS7tueahOWFp+WuueWwjeaWvOS4jeaHgueoi+W8j+eahOaci+WPi+acg+acieS4gOWumueahOmbo+W6pu+8jEJldHRlciBOb3RpZmljYXRpb24gZm9yIFdvcmRQcmVzcyDpgJnmlK/lpJbmjpvlj6/ku6Xph53lsI3ljYHlub7nqK7mg4XlooPkvobnmbzpgIEgZW1haWwg57Wm6ZyA6KaB6YCa55+l55qE5bCN6LGh77yM5YyF5ZCr5paw5paH56ug55m85L2I44CB5paH56ug5pu05paw44CB5paw5YiG6aGe44CB5paw5aKe6aCB6Z2i562J562J77yM5q2k5aSW6YKE5pyJ5o+Q5L6b5aSa56iu5qyE5L2N55qEIHNob3J0Y29kZSDmiornq5nlhafos4foqIrliqDlhaXliLAgZW1haWwg5LmL5Lit77yM6YKE5pyJ5o+Q5L6b57eo6Lyv5Zmo5LuL6Z2i5L6G6Kit6KiI6YO15Lu277yM6K6T5L2g5Y+v5Lul5omT6YCg56ym5ZCI5LyB5qWt5b2i6LGh55qE6Zu75a2Q6YO15Lu277yM5LuY6LK754mI5o+Q5L6b5pu05aSa55qE55m85L+h5oOF5aKD77yM5ben5aaZ6YGL55So6IO96Kit6KiI5Ye66IiH55So5oi25oSP5oOz5LiN5Yiw55qE5LqS5YuV5pa55byP44CC” pid=”3358”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>天氣預報外掛</title>
    <url>/tw/%E5%A4%A9%E6%B0%A3%E9%A0%90%E5%A0%B1%E5%A4%96%E6%8E%9B/</url>
    <content><![CDATA[<p>  如果你的網站是內容型網站，每天都有固定訪客會來造訪，放置天氣小工具可以增加額外的資訊服務，或是你的產品跟天氣有關，可以根據天氣來推送不同的內容，像是購物網站在天氣不好時可以增加相關產品的曝光，進而提升銷售量，這都是天氣資訊可以延伸應用的做法。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1473901532716846” display=”yes” title=”5aSp5rCj6aCQ5aCx5aSW5o6b” body=”5aaC5p6c5L2g55qE57ay56uZ5piv5YWn5a655Z6L57ay56uZ77yM5q+P5aSp6YO95pyJ5Zu65a6a6Kiq5a6i5pyD5L6G6YCg6Kiq77yM5pS+572u5aSp5rCj5bCP5bel5YW35Y+v5Lul5aKe5Yqg6aGN5aSW55qE6LOH6KiK5pyN5YuZ77yM5oiW5piv5L2g55qE55Si5ZOB6Lef5aSp5rCj5pyJ6Zec77yM5Y+v5Lul5qC55pOa5aSp5rCj5L6G5o6o6YCB5LiN5ZCM55qE5YWn5a6577yM5YOP5piv6LO854mp57ay56uZ5Zyo5aSp5rCj5LiN5aW95pmC5Y+v5Lul5aKe5Yqg55u46Zec55Si5ZOB55qE5pud5YWJ77yM6YCy6ICM5o+Q5Y2H6Yq35ZSu6YeP77yM6YCZ6YO95piv5aSp5rCj6LOH6KiK5Y+v5Lul5bu25Ly45oeJ55So55qE5YGa5rOV44CC” pid=”3107”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何使用 WooCommerce 提供個人化專屬功能</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-woocommerce-%E6%8F%90%E4%BE%9B%E5%80%8B%E4%BA%BA%E5%8C%96%E5%B0%88%E5%B1%AC%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>購物網站提供個人化的專屬訊息更能有效能提升購買率，本文分享了四種方法並提供相對應的外掛或是程式修改方法，包含根據購買清單提供個人化的商品推薦、個人化的顯示訊息、根據客戶行為來給予折價券、販售個人化商品等，更進階的還可以透過瀏覽、銷售數據來提供折扣，但要小心過於個人化的功能要避免讓客戶覺得隱私受到侵犯，尊重客戶的意願才是服務的第一優先。</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1491795330927466” display=”yes” title=”5aaC5L2V5L2/55SoIFdvb0NvbW1lcmNlIOaPkOS+m+WAi+S6uuWMluWwiOWxrOWKn+iDvQ==” body=”6LO854mp57ay56uZ5o+Q5L6b5YCL5Lq65YyW55qE5bCI5bGs6KiK5oGv5pu06IO95pyJ5pWI6IO95o+Q5Y2H6LO86LK3546H77yM5pys5paH5YiG5Lqr5LqG5Zub56iu5pa55rOV5Lim5o+Q5L6b55u45bCN5oeJ55qE5aSW5o6b5oiW5piv56iL5byP5L+u5pS55pa55rOV77yM5YyF5ZCr5qC55pOa6LO86LK35riF5Zau5o+Q5L6b5YCL5Lq65YyW55qE5ZWG5ZOB5o6o6Jam44CB5YCL5Lq65YyW55qE6aGv56S66KiK5oGv44CB5qC55pOa5a6i5oi26KGM54K65L6G57Wm5LqI5oqY5YO55Yi444CB6LKp5ZSu5YCL5Lq65YyW5ZWG5ZOB562J77yM5pu06YCy6ZqO55qE6YKE5Y+v5Lul6YCP6YGO54CP6Ka944CB6Yq35ZSu5pW45pOa5L6G5o+Q5L6b5oqY5omj77yM5L2G6KaB5bCP5b+D6YGO5pa85YCL5Lq65YyW55qE5Yqf6IO96KaB6YG/5YWN6K6T5a6i5oi26Ka65b6X6Zqx56eB5Y+X5Yiw5L6154qv77yM5bCK6YeN5a6i5oi255qE5oSP6aGY5omN5piv5pyN5YuZ55qE56ys5LiA5YSq5YWI44CC” pid=”3145”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何使用 WordPress 打造知識庫</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-wordpress-%E6%89%93%E9%80%A0%E7%9F%A5%E8%AD%98%E5%BA%AB/</url>
    <content><![CDATA[<p>如果公司內部有客服部門，想必每天都為了客人一樣的問題被重覆詢問，這時有線上知識庫的話，就可以請客人先去查看看有沒有他需要的資訊，以降低客服人員的時間成本。使用 WordPress 有很多方式可以設計一套知識庫，可以用建立文章的方式來彙整客人常用的問題，然後搭配站內搜尋外掛來提供更完整的搜尋體驗，或是直接使用文內所介紹的外掛，把專門做知識庫的內容與文章分隔開來。</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1441339095973090” display=”yes” title=”5aaC5L2V5L2/55SoIFdvcmRQcmVzcyDmiZPpgKDnn6XorZjluqs=” body=”5aaC5p6c5YWs5Y+45YWn6YOo5pyJ5a6i5pyN6YOo6ZaA77yM5oOz5b+F5q+P5aSp6YO954K65LqG5a6i5Lq65LiA5qij55qE5ZWP6aGM6KKr6YeN6KaG6Kmi5ZWP77yM6YCZ5pmC5pyJ57ea5LiK55+l6K2Y5bqr55qE6Kmx77yM5bCx5Y+v5Lul6KuL5a6i5Lq65YWI5Y675p+l55yL55yL5pyJ5rKS5pyJ5LuW6ZyA6KaB55qE6LOH6KiK77yM5Lul6ZmN5L2O5a6i5pyN5Lq65ZOh55qE5pmC6ZaT5oiQ5pys44CC5L2/55SoIFdvcmRQcmVzcyDmnInlvojlpJrmlrnlvI/lj6/ku6XoqK3oqIjkuIDlpZfnn6XorZjluqvvvIzlj6/ku6XnlKjlu7rnq4vmlofnq6DnmoTmlrnlvI/kvoblvZnmlbTlrqLkurrluLjnlKjnmoTllY/poYzvvIznhLblvozmkK3phY3nq5nlhafmkJzlsIvlpJbmjpvkvobmj5Dkvpvmm7TlrozmlbTnmoTmkJzlsIvpq5TpqZfvvIzmiJbmmK/nm7TmjqXkvb/nlKjmloflhafmiYDku4vntLnnmoTlpJbmjpvvvIzmiorlsIjploDlgZrnn6XorZjluqvnmoTlhaflrrnoiIfmlofnq6DliIbpmpTplovkvobjgII=” pid=”3038”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何在 WordPress 中加入平台點、會員成就系統</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E5%9C%A8-wordpress-%E4%B8%AD%E5%8A%A0%E5%85%A5%E5%B9%B3%E5%8F%B0%E9%BB%9E%E3%80%81%E6%9C%83%E5%93%A1%E6%88%90%E5%B0%B1%E7%B3%BB%E7%B5%B1/</url>
    <content><![CDATA[<p>現在多數的平台為了讓會員更有向心力或是提升黏著度，採取遊戲化的會員機制已經是越來越常見了，但對不懂程式的朋友來說要從無到有設計這樣的機制難度頗高，幸好有偉大的 WordPress 社群開發了這樣的功能，GamiPress 就是專門提供遊戲化機制的外掛，它可以做平台點數、會員成就、會員排名等三大功能，外掛本身免費，還可以加購他們所開發的延伸外掛，像是使用平台點數購買商品，或讓會員可以直接用現金儲值取得平台點數等等的附加功能，非常適合想要提供會員成就系統的網站使用。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1553241031449562” display=”yes” title=”5aaC5L2V5ZyoIFdvcmRQcmVzcyDkuK3liqDlhaXlubPlj7Dpu57jgIHmnIPlk6HmiJDlsLHns7vntbE=” body=”54++5Zyo5aSa5pW455qE5bmz5Y+w54K65LqG6K6T5pyD5ZOh5pu05pyJ5ZCR5b+D5Yqb5oiW5piv5o+Q5Y2H6buP6JGX5bqm77yM5o6h5Y+W6YGK5oiy5YyW55qE5pyD5ZOh5qmf5Yi25bey57aT5piv6LaK5L6G6LaK5bi46KaL5LqG77yM5L2G5bCN5LiN5oeC56iL5byP55qE5pyL5Y+L5L6G6Kqq6KaB5b6e54Sh5Yiw5pyJ6Kit6KiI6YCZ5qij55qE5qmf5Yi26Zuj5bqm6aCX6auY77yM5bm45aW95pyJ5YGJ5aSn55qEIFdvcmRQcmVzcyDnpL7nvqTplovnmbzkuobpgJnmqKPnmoTlip/og73vvIxHYW1pUHJlc3Mg5bCx5piv5bCI6ZaA5o+Q5L6b6YGK5oiy5YyW5qmf5Yi255qE5aSW5o6b77yM5a6D5Y+v5Lul5YGa5bmz5Y+w6bue5pW444CB5pyD5ZOh5oiQ5bCx44CB5pyD5ZOh5o6S5ZCN562J5LiJ5aSn5Yqf6IO977yM5aSW5o6b5pys6Lqr5YWN6LK777yM6YKE5Y+v5Lul5Yqg6LO85LuW5YCR5omA6ZaL55m855qE5bu25Ly45aSW5o6b77yM5YOP5piv5L2/55So5bmz5Y+w6bue5pW46LO86LK35ZWG5ZOB77yM5oiW6K6T5pyD5ZOh5Y+v5Lul55u05o6l55So54++6YeR5YSy5YC85Y+W5b6X5bmz5Y+w6bue5pW4562J562J55qE6ZmE5Yqg5Yqf6IO977yM6Z2e5bi46YGp5ZCI5oOz6KaB5o+Q5L6b5pyD5ZOh5oiQ5bCx57O757Wx55qE57ay56uZ5L2/55So44CC” pid=”3288”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何在 WordPress 中快速又方便的製作表格</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E5%9C%A8-wordpress-%E4%B8%AD%E5%BF%AB%E9%80%9F%E5%8F%88%E6%96%B9%E4%BE%BF%E7%9A%84%E8%A3%BD%E4%BD%9C%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<p>表格這類的資料形式，在文書軟體上做起來非常容易，但如果是要呈現在網頁上的話，是完全不同的兩件事，如果又不熟 HTML 的話，更是可以三秒就讓表格爆炸，幸好有 TablePress 這套表格外掛，它有視覺化的介面可以設計表格，雖然跟在 Excel 上用起來還是不太一樣，但它可以把設計好的 .csv 或 .xlsx 進行匯入，完成後的表格還有排序以及搜尋功能，非常適合需要用表格呈現大量資料的內容。</p>
<span id="more"></span>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1557869674320031” display=”yes” title=”5aaC5L2V5ZyoIFdvcmRQcmVzcyDkuK3lv6vpgJ/lj4jmlrnkvr/nmoToo73kvZzooajmoLw=” body=”6KGo5qC86YCZ6aGe55qE6LOH5paZ5b2i5byP77yM5Zyo5paH5pu46Luf6auU5LiK5YGa6LW35L6G6Z2e5bi45a655piT77yM5L2G5aaC5p6c5piv6KaB5ZGI54++5Zyo57ay6aCB5LiK55qE6Kmx77yM5piv5a6M5YWo5LiN5ZCM55qE5YWp5Lu25LqL77yM5aaC5p6c5Y+I5LiN54afIEhUTUwg55qE6Kmx77yM5pu05piv5Y+v5Lul5LiJ56eS5bCx6K6T6KGo5qC854iG54K477yM5bm45aW95pyJIFRhYmxlUHJlc3Mg6YCZ5aWX6KGo5qC85aSW5o6b77yM5a6D5pyJ6KaW6Ka65YyW55qE5LuL6Z2i5Y+v5Lul6Kit6KiI6KGo5qC877yM6ZuW54S26Lef5ZyoIEV4Y2VsIOS4iueUqOi1t+S+humChOaYr+S4jeWkquS4gOaoo++8jOS9huWug+WPr+S7peaKiuioreioiOWlveeahCAuY3N2IOaIliAueGxzeCDpgLLooYzljK/lhaXvvIzlrozmiJDlvoznmoTooajmoLzpgoTmnInmjpLluo/ku6Xlj4rmkJzlsIvlip/og73vvIzpnZ7luLjpganlkIjpnIDopoHnlKjooajmoLzlkYjnj77lpKfph4/os4fmlpnnmoTlhaflrrnjgII=” pid=”3295”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何在 WordPress 網站中提供會員刪除帳號的功能</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E5%9C%A8-wordpress-%E7%B6%B2%E7%AB%99%E4%B8%AD%E6%8F%90%E4%BE%9B%E6%9C%83%E5%93%A1%E5%88%AA%E9%99%A4%E5%B8%B3%E8%99%9F%E7%9A%84%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>在一般情況下，網站通常只有註冊、加入會員的機制，很少看到能退出會員、刪除帳號的功能，在尊重會員隱私以及提供更友善的使用體驗下，加入刪除帳號的功能是個不錯的選擇，也可以在刪除前做問卷調查，蒐集會員流失的原因進而改善，這比留著一堆沒有互動的殭屍會員來得更有意義。這篇文章介紹了兩支外掛來做這功能，需要整理會員名單的朋友可以參考看看～</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1595873013853030” display=”yes” title=”5aaC5L2V5ZyoIFdvcmRQcmVzcyDntrLnq5nkuK3mj5DkvpvmnIPlk6HliKrpmaTluLPomZ/nmoTlip/og70=” body=”5Zyo5LiA6Iis5oOF5rOB5LiL77yM57ay56uZ6YCa5bi45Y+q5pyJ6Ki75YaK44CB5Yqg5YWl5pyD5ZOh55qE5qmf5Yi277yM5b6I5bCR55yL5Yiw6IO96YCA5Ye65pyD5ZOh44CB5Yiq6Zmk5biz6Jmf55qE5Yqf6IO977yM5Zyo5bCK6YeN5pyD5ZOh6Zqx56eB5Lul5Y+K5o+Q5L6b5pu05Y+L5ZaE55qE5L2/55So6auU6amX5LiL77yM5Yqg5YWl5Yiq6Zmk5biz6Jmf55qE5Yqf6IO95piv5YCL5LiN6Yyv55qE6YG45pOH77yM5Lmf5Y+v5Lul5Zyo5Yiq6Zmk5YmN5YGa5ZWP5Y236Kq/5p+l77yM6JKQ6ZuG5pyD5ZOh5rWB5aSx55qE5Y6f5Zug6YCy6ICM5pS55ZaE77yM6YCZ5q+U55WZ6JGX5LiA5aCG5rKS5pyJ5LqS5YuV55qE5q6t5bGN5pyD5ZOh5L6G5b6X5pu05pyJ5oSP576p44CC6YCZ56+H5paH56ug5LuL57S55LqG5YWp5pSv5aSW5o6b5L6G5YGa6YCZ5Yqf6IO977yM6ZyA6KaB5pW055CG5pyD5ZOh5ZCN5Zau55qE5pyL5Y+L5Y+v5Lul5Y+D6ICD55yL55yL772e” pid=”3356”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何在 WordPress 網站舉辦線上競賽？</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E5%9C%A8-wordpress-%E7%B6%B2%E7%AB%99%E8%88%89%E8%BE%A6%E7%B7%9A%E4%B8%8A%E7%AB%B6%E8%B3%BD%EF%BC%9F/</url>
    <content><![CDATA[<p>  在網路行銷中舉辦線上競賽是能迅速得到最多關注的方式之一，要開發一個徵稿活動除了比賽規則、主題、視覺設計外，最麻煩的莫過於投票機制的開發，除了要被防作弊、灌水外，還要有適合運作團隊的管理機制，本文分享了幾款不同的活動外掛，正在規劃線上活動的朋友可以參考看看！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1452478944859105” display=”yes” title=”5aaC5L2V5ZyoIFdvcmRQcmVzcyDntrLnq5noiInovqbnt5rkuIrnq7bos73vvJ8=” body=”5Zyo57ay6Lev6KGM6Yq35Lit6IiJ6L6m57ea5LiK56u26LO95piv6IO96L+F6YCf5b6X5Yiw5pyA5aSa6Zec5rOo55qE5pa55byP5LmL5LiA77yM6KaB6ZaL55m85LiA5YCL5b6156i/5rS75YuV6Zmk5LqG5q+U6LO96KaP5YmH44CB5Li76aGM44CB6KaW6Ka66Kit6KiI5aSW77yM5pyA6bq754Wp55qE6I6r6YGO5pa85oqV56Wo5qmf5Yi255qE6ZaL55m877yM6Zmk5LqG6KaB6KKr6Ziy5L2c5byK44CB54GM5rC05aSW77yM6YKE6KaB5pyJ6YGp5ZCI6YGL5L2c5ZyY6ZqK55qE566h55CG5qmf5Yi277yM5pys5paH5YiG5Lqr5LqG5bm+5qy+5LiN5ZCM55qE5rS75YuV5aSW5o6b77yM5q2j5Zyo6KaP5YqD57ea5LiK5rS75YuV55qE5pyL5Y+L5Y+v5Lul5Y+D6ICD55yL55yL77yB” pid=”3061”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何完全客製 WordPress 登入頁面</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E5%AE%8C%E5%85%A8%E5%AE%A2%E8%A3%BD-wordpress-%E7%99%BB%E5%85%A5%E9%A0%81%E9%9D%A2/</url>
    <content><![CDATA[<p>有些網站需要開放後台給企業內部的同仁進行上稿，或是提供給一般使用者進入後台做某些互動，這時與網站形象一致的登入頁面就能顯得更為專業，也能增加網站的信賴感，今天分享的外掛 Login Designer 就是專門設計給不熟程式的朋友來客製化 WordPress 的登入頁面，它除了可以替換掉原本 WordPress 的 Logo 外，還可以更換版面樣式以及設定所有欄位的間距以及顏色，是一套非常方便的外掛。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1563892833717715” display=”yes” title=”5aaC5L2V5a6M5YWo5a6i6KO9IFdvcmRQcmVzcyDnmbvlhaXpoIHpnaI=” body=”5pyJ5Lqb57ay56uZ6ZyA6KaB6ZaL5pS+5b6M5Y+w57Wm5LyB5qWt5YWn6YOo55qE5ZCM5LuB6YCy6KGM5LiK56i/77yM5oiW5piv5o+Q5L6b57Wm5LiA6Iis5L2/55So6ICF6YCy5YWl5b6M5Y+w5YGa5p+Q5Lqb5LqS5YuV77yM6YCZ5pmC6IiH57ay56uZ5b2i6LGh5LiA6Ie055qE55m75YWl6aCB6Z2i5bCx6IO96aGv5b6X5pu054K65bCI5qWt77yM5Lmf6IO95aKe5Yqg57ay56uZ55qE5L+h6LO05oSf77yM5LuK5aSp5YiG5Lqr55qE5aSW5o6bIExvZ2luIERlc2lnbmVyIOWwseaYr+WwiOmWgOioreioiOe1puS4jeeGn+eoi+W8j+eahOaci+WPi+S+huWuouijveWMliBXb3JkUHJlc3Mg55qE55m75YWl6aCB6Z2i77yM5a6D6Zmk5LqG5Y+v5Lul5pu/5o+b5o6J5Y6f5pysIFdvcmRQcmVzcyDnmoQgTG9nbyDlpJbvvIzpgoTlj6/ku6Xmm7Tmj5vniYjpnaLmqKPlvI/ku6Xlj4roqK3lrprmiYDmnInmrITkvY3nmoTplpPot53ku6Xlj4rpoY/oibLvvIzmmK/kuIDlpZfpnZ7luLjmlrnkvr/nmoTlpJbmjpvjgII=” pid=”3307”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何客製 WordPress 後台？</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E5%AE%A2%E8%A3%BD-wordpress-%E5%BE%8C%E5%8F%B0%EF%BC%9F/</url>
    <content><![CDATA[<p>  為了讓不同用途的後台使用者可以有更好的使用體驗，通常我們會把 WordPress 做整理，像是關閉不需顯示的選單、整理後台首頁的區塊、加入自訂訊息等等，除此之外，這篇文章還分享了如何更換品牌 Logo、增加快速連結，甚至是安裝後台用的佈景主題，雖然後台的使用者相對前台少，但好用的介面還是能提升網站更新速度以及操作人員的使用體驗。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1453309291442737” display=”yes” title=”5aaC5L2V5a6i6KO9IFdvcmRQcmVzcyDlvozlj7DvvJ8=” body=”54K65LqG6K6T5LiN5ZCM55So6YCU55qE5b6M5Y+w5L2/55So6ICF5Y+v5Lul5pyJ5pu05aW955qE5L2/55So6auU6amX77yM6YCa5bi45oiR5YCR5pyD5oqKIFdvcmRQcmVzcyDlgZrmlbTnkIbvvIzlg4/mmK/pl5zplonkuI3pnIDpoa/npLrnmoTpgbjllq7jgIHmlbTnkIblvozlj7DpppbpoIHnmoTljYDloYrjgIHliqDlhaXoh6roqILoqIrmga/nrYnnrYnvvIzpmaTmraTkuYvlpJbvvIzpgJnnr4fmlofnq6DpgoTliIbkuqvkuoblpoLkvZXmm7Tmj5vlk4HniYwgTG9nb+OAgeWinuWKoOW/q+mAn+mAo+e1kO+8jOeUmuiHs+aYr+WuieijneW+jOWPsOeUqOeahOS9iOaZr+S4u+mhjO+8jOmblueEtuW+jOWPsOeahOS9v+eUqOiAheebuOWwjeWJjeWPsOWwke+8jOS9huWlveeUqOeahOS7i+mdoumChOaYr+iDveaPkOWNh+e2suermeabtOaWsOmAn+W6puS7peWPiuaTjeS9nOS6uuWToeeahOS9v+eUqOmrlOmpl+OAgg==” pid=”3064”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何幫 WordPress 文章增加閱讀進度條？</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E5%B9%AB-wordpress-%E6%96%87%E7%AB%A0%E5%A2%9E%E5%8A%A0%E9%96%B1%E8%AE%80%E9%80%B2%E5%BA%A6%E6%A2%9D%EF%BC%9F/</url>
    <content><![CDATA[<p>相信大家可能都有在一些比較大型的媒體網站上看過這功能：頁面上方顯示進度條，會隨著頁面捲動的比例增加進度條的進度，藉此來提示讀者文章的閱讀進度。Post Reading Progress 這支外掛可以很方便的達成此功能，它除了可以設定進度條的位置、高度外，還可以調整成符合網站色系的配色工具，想幫自己部落格增加這功能的朋友可以試一試這支外掛。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1602082999898698” display=”yes” title=”5aaC5L2V5bmrIFdvcmRQcmVzcyDmlofnq6Dlop7liqDplrHoroDpgLLluqbmop3vvJ8=” body=”55u45L+h5aSn5a625Y+v6IO96YO95pyJ5Zyo5LiA5Lqb5q+U6LyD5aSn5Z6L55qE5aqS6auU57ay56uZ5LiK55yL6YGO6YCZ5Yqf6IO977ya6aCB6Z2i5LiK5pa56aGv56S66YCy5bqm5qKd77yM5pyD6Zqo6JGX6aCB6Z2i5o2y5YuV55qE5q+U5L6L5aKe5Yqg6YCy5bqm5qKd55qE6YCy5bqm77yM6JeJ5q2k5L6G5o+Q56S66K6A6ICF5paH56ug55qE6Zax6K6A6YCy5bqm44CCUG9zdCBSZWFkaW5nIFByb2dyZXNzIOmAmeaUr+WkluaOm+WPr+S7peW+iOaWueS+v+eahOmBlOaIkOatpOWKn+iDve+8jOWug+mZpOS6huWPr+S7peioreWumumAsuW6puaineeahOS9jee9ruOAgemrmOW6puWklu+8jOmChOWPr+S7peiqv+aVtOaIkOespuWQiOe2suermeiJsuezu+eahOmFjeiJsuW3peWFt++8jOaDs+W5q+iHquW3semDqOiQveagvOWinuWKoOmAmeWKn+iDveeahOaci+WPi+WPr+S7peippuS4gOippumAmeaUr+WkluaOm+OAgg==” pid=”3362”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何快速尋找 WordPress 主題</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%B0%8B%E6%89%BE-wordpress-%E4%B8%BB%E9%A1%8C/</url>
    <content><![CDATA[<p>  Themeshaker 是一套歷史滿悠久的佈景主題搜尋引擎，搜尋速度快以及分類方式是它最大的特點，它可以搜尋免費與付費的外，還可以依照產業、風格、色系、功能、版面來進階篩選或是交叉比對，最厲害的是還可以調整縮圖的尺寸，可以一眼就看到幾十套主題的風格與樣式，有在尋找 WordPress 佈景主題的朋友可以試試～</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1410512982389035” display=”yes” title=”5aaC5L2V5b+r6YCf5bCL5om+IFdvcmRQcmVzcyDkuLvpoYw=” body=”VGhlbWVzaGFrZXIg5piv5LiA5aWX5q235Y+y5ru/5oKg5LmF55qE5L2I5pmv5Li76aGM5pCc5bCL5byV5pOO77yM5pCc5bCL6YCf5bqm5b+r5Lul5Y+K5YiG6aGe5pa55byP5piv5a6D5pyA5aSn55qE54m56bue77yM5a6D5Y+v5Lul5pCc5bCL5YWN6LK76IiH5LuY6LK755qE5aSW77yM6YKE5Y+v5Lul5L6d54Wn55Si5qWt44CB6aKo5qC844CB6Imy57O744CB5Yqf6IO944CB54mI6Z2i5L6G6YCy6ZqO56+p6YG45oiW5piv5Lqk5Y+J5q+U5bCN77yM5pyA5Y6y5a6z55qE5piv6YKE5Y+v5Lul6Kq/5pW057iu5ZyW55qE5bC65a+477yM5Y+v5Lul5LiA55y85bCx55yL5Yiw5bm+5Y2B5aWX5Li76aGM55qE6aKo5qC86IiH5qij5byP77yM5pyJ5Zyo5bCL5om+IFdvcmRQcmVzcyDkvYjmma/kuLvpoYznmoTmnIvlj4vlj6/ku6XoqaboqabvvZ4=” pid=”2937”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何提供文章草稿連結給非 WordPress 管理員</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E6%8F%90%E4%BE%9B%E6%96%87%E7%AB%A0%E8%8D%89%E7%A8%BF%E9%80%A3%E7%B5%90%E7%B5%A6%E9%9D%9E-wordpress-%E7%AE%A1%E7%90%86%E5%93%A1/</url>
    <content><![CDATA[<p>  有時候在更新網站時，會遇到需要審稿的狀態，如果是寫手產出的內容，還可以藉由編輯或管理者來進行審稿，但有時如果是非網站管理員像是老闆或是外部的合作廠商，也想先預覽一下文章，幫他們開帳號再請他們登入後台查看這難度有點高，這時就可以使用 Public Post Preview 這支外掛來產出外部預覽連結，只要勾選 Enable Public Preview 就能快速產出，當外部人員確認無誤後再取消勾選即可，下面這篇文章也提供如何設定連結的有效時間，當超過一定時間後自動讓外部預覽連結失效。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1486852114755121” display=”yes” title=”5aaC5L2V5o+Q5L6b5paH56ug6I2J56i/6YCj57WQ57Wm6Z2eIFdvcmRQcmVzcyDnrqHnkIblk6E=” body=”5pyJ5pmC5YCZ5Zyo5pu05paw57ay56uZ5pmC77yM5pyD6YGH5Yiw6ZyA6KaB5a+p56i/55qE54uA5oWL77yM5aaC5p6c5piv5a+r5omL55Si5Ye655qE5YWn5a6577yM6YKE5Y+v5Lul6JeJ55Sx57eo6Lyv5oiW566h55CG6ICF5L6G6YCy6KGM5a+p56i/77yM5L2G5pyJ5pmC5aaC5p6c5piv6Z2e57ay56uZ566h55CG5ZOh5YOP5piv6ICB6ZeG5oiW5piv5aSW6YOo55qE5ZCI5L2c5bug5ZWG77yM5Lmf5oOz5YWI6aCQ6Ka95LiA5LiL5paH56ug77yM5bmr5LuW5YCR6ZaL5biz6Jmf5YaN6KuL5LuW5YCR55m75YWl5b6M5Y+w5p+l55yL6YCZ6Zuj5bqm5pyJ6bue6auY77yM6YCZ5pmC5bCx5Y+v5Lul5L2/55SoIFB1YmxpYyBQb3N0IFByZXZpZXcg6YCZ5pSv5aSW5o6b5L6G55Si5Ye65aSW6YOo6aCQ6Ka96YCj57WQ77yM5Y+q6KaB5Yu+6YG4IEVuYWJsZSBQdWJsaWMgUHJldmlldyDlsLHog73lv6vpgJ/nlKLlh7rvvIznlbblpJbpg6jkurrlk6Hnorroqo3nhKHoqqTlvozlho3lj5bmtojli77pgbjljbPlj6/vvIzkuIvpnaLpgJnnr4fmlofnq6DkuZ/mj5DkvpvlpoLkvZXoqK3lrprpgKPntZDnmoTmnInmlYjmmYLplpPvvIznlbbotoXpgY7kuIDlrprmmYLplpPlvozoh6rli5XorpPlpJbpg6jpoJDopr3pgKPntZDlpLHmlYjjgII=” pid=”3136”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何用 CSS 幫你的網站上色？</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E7%94%A8-css-%E5%B9%AB%E4%BD%A0%E7%9A%84%E7%B6%B2%E7%AB%99%E4%B8%8A%E8%89%B2%EF%BC%9F/</url>
    <content><![CDATA[<p>幫過許多朋友解決網站的問題，其中關於排版樣式的問題詢問度非常高，所以針對剛入門架 WordPress 網站的朋友整理了一篇 CSS 基礎教學，文章目的不是要讓你變成 CSS 大師，而是當自己的網站有版面問題時可以有個方向來解決它，文中介紹了一些 CSS 的基本除錯原則，希望能幫到有需要的朋友！ [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1444141715692828” display=”yes” title=”5aaC5L2V55SoIENTUyDluavkvaDnmoTntrLnq5nkuIroibLvvJ8=” body=”5bmr6YGO6Kix5aSa5pyL5Y+L6Kej5rG657ay56uZ55qE5ZWP6aGM77yM5YW25Lit6Zec5pa85o6S54mI5qij5byP55qE5ZWP6aGM6Kmi5ZWP5bqm6Z2e5bi46auY77yM5omA5Lul6Yed5bCN5Ymb5YWl6ZaA5p62IFdvcmRQcmVzcyDntrLnq5nnmoTmnIvlj4vmlbTnkIbkuobkuIDnr4cgQ1NTIOWfuuekjuaVmeWtuO+8jOaWh+eroOebrueahOS4jeaYr+imgeiuk+S9oOiuiuaIkCBDU1Mg5aSn5bir77yM6ICM5piv55W26Ieq5bex55qE57ay56uZ5pyJ54mI6Z2i5ZWP6aGM5pmC5Y+v5Lul5pyJ5YCL5pa55ZCR5L6G6Kej5rG65a6D77yM5paH5Lit5LuL57S55LqG5LiA5LqbIENTUyDnmoTln7rmnKzpmaTpjK/ljp/liYfvvIzluIzmnJvog73luavliLDmnInpnIDopoHnmoTmnIvlj4vvvIE=” pid=”3046”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何直接提升電子郵件成功收集的轉換率</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E7%9B%B4%E6%8E%A5%E6%8F%90%E5%8D%87%E9%9B%BB%E5%AD%90%E9%83%B5%E4%BB%B6%E6%88%90%E5%8A%9F%E6%94%B6%E9%9B%86%E7%9A%84%E8%BD%89%E6%8F%9B%E7%8E%87/</url>
    <content><![CDATA[<p>  電子郵件是相對低成本的二次行銷工具，除了可以在客戶離站後做為持續溝通的管道，更能成為分析客戶的基礎資訊，所以如何讓客戶願意留下電子郵件就十分關鍵，常見的就是提供最直接的誘因，像是商品折價券，或是免費電子書等等。而 VYPER 這套服務整合了折價券、電子檔管理，還特別加入了互動小遊戲，留下電子郵件可以得到什麼獎品要用轉盤來決定，透過遊戲化的方式來提升客戶的參與度，此外還能設定彈跳視窗的觸發條件，像是當客戶準備離開網站時才會跳出，有效吸引可能流失的客戶。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1498332123607120” display=”yes” title=”5aaC5L2V55u05o6l5o+Q5Y2H6Zu75a2Q6YO15Lu25oiQ5Yqf5pS26ZuG55qE6L2J5o+b546H” body=”6Zu75a2Q6YO15Lu25piv55u45bCN5L2O5oiQ5pys55qE5LqM5qyh6KGM6Yq35bel5YW377yM6Zmk5LqG5Y+v5Lul5Zyo5a6i5oi26Zui56uZ5b6M5YGa54K65oyB57qM5rqd6YCa55qE566h6YGT77yM5pu06IO95oiQ54K65YiG5p6Q5a6i5oi255qE5Z+656SO6LOH6KiK77yM5omA5Lul5aaC5L2V6K6T5a6i5oi26aGY5oSP55WZ5LiL6Zu75a2Q6YO15Lu25bCx5Y2B5YiG6Zec6Y2177yM5bi46KaL55qE5bCx5piv5o+Q5L6b5pyA55u05o6l55qE6KqY5Zug77yM5YOP5piv5ZWG5ZOB5oqY5YO55Yi477yM5oiW5piv5YWN6LK76Zu75a2Q5pu4562J562J44CC6ICMIFZZUEVSIOmAmeWll+acjeWLmeaVtOWQiOS6huaKmOWDueWIuOOAgembu+WtkOaqlOeuoeeQhu+8jOmChOeJueWIpeWKoOWFpeS6huS6kuWLleWwj+mBiuaIsu+8jOeVmeS4i+mbu+WtkOmDteS7tuWPr+S7peW+l+WIsOS7gOm6vOeNjuWTgeimgeeUqOi9ieebpOS+huaxuuWumu+8jOmAj+mBjumBiuaIsuWMlueahOaWueW8j+S+huaPkOWNh+WuouaItueahOWPg+iIh+W6pu+8jOatpOWklumChOiDveioreWumuW9iOi3s+imlueql+eahOinuOeZvOaineS7tu+8jOWDj+aYr+eVtuWuouaItua6luWCmemboumWi+e2suermeaZguaJjeacg+i3s+WHuu+8jOacieaViOWQuOW8leWPr+iDvea1geWkseeahOWuouaItuOAgg==” pid=”3165”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何設計可重覆使用的 HTML</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E8%A8%AD%E8%A8%88%E5%8F%AF%E9%87%8D%E8%A6%86%E4%BD%BF%E7%94%A8%E7%9A%84-html/</url>
    <content><![CDATA[<p>  在 WordPress 中有一個叫做 Shortcode 的機制，可以用簡短的名稱來取代一大串的 HTML，而當需要修改 Shortcode 裡面的 HTML 時，只要修改一次，所有有使用到這個 Shortcode 的頁面就會一次全部更換，非常方便重覆利用。至於 Shortcode 的建立通常需要請工程師開發，或是可以用這支外掛不需寫程式就能新增，還可以用變數的方式讓固定的 HTML 能產生不同的內容。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1436167429823590” display=”yes” title=”5aaC5L2V6Kit6KiI5Y+v6YeN6KaG5L2/55So55qEIEhUTUw=” body=”5ZyoIFdvcmRQcmVzcyDkuK3mnInkuIDlgIvlj6vlgZogU2hvcnRjb2RlIOeahOapn+WItu+8jOWPr+S7peeUqOewoeefreeahOWQjeeoseS+huWPluS7o+S4gOWkp+S4sueahCBIVE1M77yM6ICM55W26ZyA6KaB5L+u5pS5IFNob3J0Y29kZSDoo6HpnaLnmoQgSFRNTCDmmYLvvIzlj6ropoHkv67mlLnkuIDmrKHvvIzmiYDmnInmnInkvb/nlKjliLDpgJnlgIsgU2hvcnRjb2RlIOeahOmggemdouWwseacg+S4gOasoeWFqOmDqOabtOaPm++8jOmdnuW4uOaWueS+v+mHjeimhuWIqeeUqOOAguiHs+aWvCBTaG9ydGNvZGUg55qE5bu656uL6YCa5bi46ZyA6KaB6KuL5bel56iL5bir6ZaL55m877yM5oiW5piv5Y+v5Lul55So6YCZ5pSv5aSW5o6b5LiN6ZyA5a+r56iL5byP5bCx6IO95paw5aKe77yM6YKE5Y+v5Lul55So6K6K5pW455qE5pa55byP6K6T5Zu65a6a55qEIEhUTUwg6IO955Si55Sf5LiN5ZCM55qE5YWn5a6544CC” pid=”3024”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何讓你的商家網站整合 Google Map 上的評論？</title>
    <url>/tw/%E5%A6%82%E4%BD%95%E8%AE%93%E4%BD%A0%E7%9A%84%E5%95%86%E5%AE%B6%E7%B6%B2%E7%AB%99%E6%95%B4%E5%90%88-google-map-%E4%B8%8A%E7%9A%84%E8%A9%95%E8%AB%96%EF%BC%9F/</url>
    <content><![CDATA[<p>  相較於部落格的推薦文，Google Map 上的評論在現階段較具參考價值，如果你經營的店家評論很不錯，就可以使用這支外掛把 Google Map 上的評論整合進 WordPress 網站中，藉此提升品牌形象！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1493562484084084” display=”yes” title=”5aaC5L2V6K6T5L2g55qE5ZWG5a6257ay56uZ5pW05ZCIIEdvb2dsZSBNYXAg5LiK55qE6KmV6KuW77yf” body=”55u46LyD5pa86YOo6JC95qC855qE5o6o6Jam5paH77yMR29vZ2xlIE1hcCDkuIrnmoToqZXoq5blnKjnj77pmo7mrrXovIPlhbflj4PogIPlg7nlgLzvvIzlpoLmnpzkvaDntpPnh5/nmoTlupflrrboqZXoq5blvojkuI3pjK/vvIzlsLHlj6/ku6Xkvb/nlKjpgJnmlK/lpJbmjpvmioogR29vZ2xlIE1hcCDkuIrnmoToqZXoq5bmlbTlkIjpgLIgV29yZFByZXNzIOe2suermeS4re+8jOiXieatpOaPkOWNh+WTgeeJjOW9ouixoe+8gQ==” pid=”3152”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>如何修改 WordPress 的文章排序</title>
    <url>/tw/%E5%A6%82%E6%9E%9C%E4%BF%AE%E6%94%B9-wordpress-%E7%9A%84%E6%96%87%E7%AB%A0%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>在預設情況下文章會使用發表時間的最新到最舊進行排序，但如果想把某篇文章移到最上方，或是因為內容特性需要從最舊排到最新，那麼可以參考這篇文章的做法來重新進行排序。除了修改文章發表時間外，還可以使用外掛或是修改程式來一併調整，讓重要的內容可以被優先瀏覽。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1533927130047619” display=”yes” title=”5aaC5p6c5L+u5pS5IFdvcmRQcmVzcyDnmoTmlofnq6DmjpLluo8=” body=”5Zyo6aCQ6Kit5oOF5rOB5LiL5paH56ug5pyD5L2/55So55m86KGo5pmC6ZaT55qE5pyA5paw5Yiw5pyA6IiK6YCy6KGM5o6S5bqP77yM5L2G5aaC5p6c5oOz5oqK5p+Q56+H5paH56ug56e75Yiw5pyA5LiK5pa577yM5oiW5piv5Zug54K65YWn5a6554m55oCn6ZyA6KaB5b6e5pyA6IiK5o6S5Yiw5pyA5paw77yM6YKj6bq85Y+v5Lul5Y+D6ICD6YCZ56+H5paH56ug55qE5YGa5rOV5L6G6YeN5paw6YCy6KGM5o6S5bqP44CC6Zmk5LqG5L+u5pS55paH56ug55m86KGo5pmC6ZaT5aSW77yM6YKE5Y+v5Lul5L2/55So5aSW5o6b5oiW5piv5L+u5pS556iL5byP5L6G5LiA5L216Kq/5pW077yM6K6T6YeN6KaB55qE5YWn5a655Y+v5Lul6KKr5YSq5YWI54CP6Ka944CC” pid=”3256”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>客製化 WordPress 後台首頁</title>
    <url>/tw/%E5%AE%A2%E8%A3%BD%E5%8C%96-wordpress-%E5%BE%8C%E5%8F%B0%E9%A6%96%E9%A0%81/</url>
    <content><![CDATA[<p>在網站上線後交接給維護人員進行維護時，往往會發現 WordPress 的後台資訊過多，容易造成一般沒使用過 WordPress 操作人員的困擾，Ultimate Dashboard 這支外掛可以簡易化後台操作介面，開發者可以針對用戶需求自訂後台主頁的頁面捷徑，讓維護人員不用再從左側欄一堆的選單中去尋找入口，減低操作上的負擔。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1571081529665512” display=”yes” title=”5a6i6KO95YyWIFdvcmRQcmVzcyDlvozlj7DpppbpoIE=” body=”5Zyo57ay56uZ5LiK57ea5b6M5Lqk5o6l57Wm57at6K235Lq65ZOh6YCy6KGM57at6K235pmC77yM5b6A5b6A5pyD55m854++IFdvcmRQcmVzcyDnmoTlvozlj7Dos4foqIrpgY7lpJrvvIzlrrnmmJPpgKDmiJDkuIDoiKzmspLkvb/nlKjpgY4gV29yZFByZXNzIOaTjeS9nOS6uuWToeeahOWbsOaTvu+8jFVsdGltYXRlIERhc2hib2FyZCDpgJnmlK/lpJbmjpvlj6/ku6XnsKHmmJPljJblvozlj7Dmk43kvZzku4vpnaLvvIzplovnmbzogIXlj6/ku6Xph53lsI3nlKjmiLbpnIDmsYLoh6roqILlvozlj7DkuLvpoIHnmoTpoIHpnaLmjbflvpHvvIzorpPntq3orbfkurrlk6HkuI3nlKjlho3lvp7lt6blgbTmrITkuIDloIbnmoTpgbjllq7kuK3ljrvlsIvmib7lhaXlj6PvvIzmuJvkvY7mk43kvZzkuIrnmoTosqDmk5TjgII=” pid=”3321”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>將 Instagram 轉換成網站</title>
    <url>/tw/%E5%B0%87-instagram-%E8%BD%89%E6%8F%9B%E6%88%90%E7%B6%B2%E7%AB%99/</url>
    <content><![CDATA[<p>對有在經營 IG 的朋友來說，可以試試 Zine 這套服務，他可以把 IG 的內容轉換成四種不同的 layout，並且可自由選擇字型與配色，讓你的 IG 頁面有不同的風格與樣式，此外還可自訂網域以及網站代管服務，對於已經擁有 IG 帳號但還沒有網站的店家可以考慮從這服務進行初期的網站建置。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1594839793956352” display=”yes” title=”5bCHIEluc3RhZ3JhbSDovYnmj5vmiJDntrLnq5k=” body=”5bCN5pyJ5Zyo57aT54efIElHIOeahOaci+WPi+S+huiqqu+8jOWPr+S7peippuippiBaaW5lIOmAmeWll+acjeWLme+8jOS7luWPr+S7peaKiiBJRyDnmoTlhaflrrnovYnmj5vmiJDlm5vnqK7kuI3lkIznmoQgbGF5b3V077yM5Lim5LiU5Y+v6Ieq55Sx6YG45pOH5a2X5Z6L6IiH6YWN6Imy77yM6K6T5L2g55qEIElHIOmggemdouacieS4jeWQjOeahOmiqOagvOiIh+aoo+W8j++8jOatpOWklumChOWPr+iHquiogue2suWfn+S7peWPiue2suermeS7o+euoeacjeWLme+8jOWwjeaWvOW3sue2k+aTgeaciSBJRyDluLPomZ/kvYbpgoTmspLmnInntrLnq5nnmoTlupflrrblj6/ku6XogIPmha7lvp7pgJnmnI3li5npgLLooYzliJ3mnJ/nmoTntrLnq5nlu7rnva7jgII=” pid=”3354”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>專為 Youtuber 設計的網站產生器</title>
    <url>/tw/%E5%B0%88%E7%82%BA-youtuber-%E8%A8%AD%E8%A8%88%E7%9A%84%E7%B6%B2%E7%AB%99%E7%94%A2%E7%94%9F%E5%99%A8/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/img-rivty.jpeg"></p>
<p>對於有在經營 Youtube 頻到的企業來說，想要在平台上擁有自己的品牌形象無非只能去申請 Youtube 的品牌頻道，但如果想要更彈性的組織影片內容或是更改版面設計，使用 <a href="https://rivyt.com/">RIVYT</a> 這套服務是不二人選。只要輸入頻道名稱，就可以直接在他們的介面中來設計專屬頻道頁面，內建數十款現成的版型以及多樣化的配色可供選擇，還可以自訂在頁面中要出現哪幾部影片以及出現順序，再加入訂閱按鈕以及社群連結，不用十分鐘就可以完成一套企業頻道的專屬網站。</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>專為設計師打造的 WordPress 架站工具</title>
    <url>/tw/%E5%B0%88%E7%82%BA%E8%A8%AD%E8%A8%88%E5%B8%AB%E6%89%93%E9%80%A0%E7%9A%84-wordpress-%E6%9E%B6%E7%AB%99%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>  Semplice 是一家專門針對設計師提供 WordPress 架站工具的公司，與一般 Theme 不一樣的地方是，Semplice 從設計師的需求出發，以 WordPress 為基底而開發全新的使用者介面，包含視覺化編輯器、現成的設計版型、作品集管理功能，非常適合設計師或是接案工作室拿來展示案例與作品。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1436852333088433” display=”yes” title=”5bCI54K66Kit6KiI5bir5omT6YCg55qEIFdvcmRQcmVzcyDmnrbnq5nlt6Xlhbc=” body=”U2VtcGxpY2Ug5piv5LiA5a625bCI6ZaA6Yed5bCN6Kit6KiI5bir5o+Q5L6bIFdvcmRQcmVzcyDmnrbnq5nmnI3li5nnmoTlhazlj7jvvIzoiIfkuIDoiKwgVGhlbWUg5LiN5LiA5qij55qE5Zyw5pa55piv77yMU2VtcGxpY2Ug5b6e6Kit6KiI5bir55qE6ZyA5rGC5Ye655m877yM5LulIFdvcmRQcmVzcyDngrrln7rlupXogIzplovnmbzlhajmlrDnmoTkvb/nlKjogIXku4vpnaLvvIzljIXlkKvoppboprrljJbnt6jovK/lmajjgIHnj77miJDnmoToqK3oqIjniYjlnovjgIHkvZzlk4Hpm4bnrqHnkIblip/og73vvIzpnZ7luLjpganlkIjoqK3oqIjluKvmiJbmmK/mjqXmoYjlt6XkvZzlrqTmi7/kvoblsZXnpLrmoYjkvovnmoTlt6XlhbfjgII=” pid=”3027”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>常用語法速查字典</title>
    <url>/tw/%E5%B8%B8%E7%94%A8%E8%AA%9E%E6%B3%95%E9%80%9F%E6%9F%A5%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<p>  DevDocs 是一套非常方便的服務，它把各大程式語言的說明文件整理在同一份網頁中，搭配搜尋功能可以快速找到想找的功能以及範例寫法，省去各別查找的時間！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1476437962463203” display=”yes” title=”5bi455So6Kqe5rOV6YCf5p+l5a2X5YW4” body=”RGV2RG9jcyDmmK/kuIDlpZfpnZ7luLjmlrnkvr/nmoTmnI3li5nvvIzlroPmiorlkITlpKfnqIvlvI/oqp7oqIDnmoToqqrmmI7mlofku7bmlbTnkIblnKjlkIzkuIDku73ntrLpoIHkuK3vvIzmkK3phY3mkJzlsIvlip/og73lj6/ku6Xlv6vpgJ/mib7liLDmg7Pmib7nmoTlip/og73ku6Xlj4rnr4Tkvovlr6vms5XvvIznnIHljrvlkITliKXmn6Xmib7nmoTmmYLplpPvvIE=” pid=”3111”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>幫 WordPress 媒體庫增加分類與標籤</title>
    <url>/tw/%E5%B9%AB-wordpress-%E5%AA%92%E9%AB%94%E5%BA%AB%E5%A2%9E%E5%8A%A0%E5%88%86%E9%A1%9E%E8%88%87%E6%A8%99%E7%B1%A4/</url>
    <content><![CDATA[<p>如果有組織過架構稍微大一點的 WordPress 網站，內容可能超過百頁，每頁又有許多圖檔的話，內建的媒體庫就會顯得功能不足，Attachment Taxonomies 這支外掛可以幫忙把媒體庫加入分類以及標籤的功能，萬一產品圖有上百上千張的話，就可以使用分類來進行組織，日後在管理上也能依照分類或標籤來進行搜尋或替換。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1575086942598304” display=”yes” title=”5bmrIFdvcmRQcmVzcyDlqpLpq5Tluqvlop7liqDliIbpoZ7oiIfmqJnnsaQ=” body=”5aaC5p6c5pyJ57WE57mU6YGO5p625qeL56iN5b6u5aSn5LiA6bue55qEIFdvcmRQcmVzcyDntrLnq5nvvIzlhaflrrnlj6/og73otoXpgY7nmb7poIHvvIzmr4/poIHlj4jmnInoqLHlpJrlnJbmqpTnmoToqbHvvIzlhaflu7rnmoTlqpLpq5TluqvlsLHmnIPpoa/lvpflip/og73kuI3otrPvvIxBdHRhY2htZW50IFRheG9ub21pZXMg6YCZ5pSv5aSW5o6b5Y+v5Lul5bmr5b+Z5oqK5aqS6auU5bqr5Yqg5YWl5YiG6aGe5Lul5Y+K5qiZ57Gk55qE5Yqf6IO977yM6JCs5LiA55Si5ZOB5ZyW5pyJ5LiK55m+5LiK5Y2D5by155qE6Kmx77yM5bCx5Y+v5Lul5L2/55So5YiG6aGe5L6G6YCy6KGM57WE57mU77yM5pel5b6M5Zyo566h55CG5LiK5Lmf6IO95L6d54Wn5YiG6aGe5oiW5qiZ57Gk5L6G6YCy6KGM5pCc5bCL5oiW5pu/5o+b44CC” pid=”3326”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>幫你的 WordPress 網站增加粉絲專頁曝光</title>
    <url>/tw/%E5%B9%AB%E4%BD%A0%E7%9A%84-wordpress-%E7%B6%B2%E7%AB%99%E5%A2%9E%E5%8A%A0%E7%B2%89%E7%B5%B2%E5%B0%88%E9%A0%81%E6%9B%9D%E5%85%89/</url>
    <content><![CDATA[<p>  今天分享怎麼製作人人喊打的蓋版廣告(沒辦法老闆要Orz)。OptinMonster 這套工具可以製作出漂亮的訂閱表單，也可以嵌入 Facebook 粉絲頁，重點是它能檢視蓋版的成效，也許看到數據就能讓老闆不這麼迷信蓋版廣告了。事實上蓋版廣告還是可以好好利用，重點是出現的時機，站在使用者的角度思考，什麼時候他們會最願意閱讀蓋版廣告的內容，可能是搜尋某些特關鍵字的時候，或是瀏覽頁數超過一定數量時，再推薦他粉絲專頁的讚，有經過規劃的效果相信會比一進站就用蓋版擋住他想閱讀的內容來得好。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1431703123603354” display=”yes” title=”5bmr5L2g55qEIFdvcmRQcmVzcyDntrLnq5nlop7liqDnsonntbLlsIjpoIHmm53lhYk=” body=”5LuK5aSp5YiG5Lqr5oCO6bq86KO95L2c5Lq65Lq65ZaK5omT55qE6JOL54mI5buj5ZGKKOaykui+puazleiAgemXhuimgU9yeinjgIJPcHRpbk1vbnN0ZXIg6YCZ5aWX5bel5YW35Y+v5Lul6KO95L2c5Ye65ryC5Lqu55qE6KiC6Zax6KGo5Zau77yM5Lmf5Y+v5Lul5bWM5YWlIEZhY2Vib29rIOeyiee1sumgge+8jOmHjem7nuaYr+Wug+iDveaqouimluiTi+eJiOeahOaIkOaViO+8jOS5n+ioseeci+WIsOaVuOaTmuWwseiDveiuk+iAgemXhuS4jemAmem6vOi/t+S/oeiTi+eJiOW7o+WRiuS6huOAguS6i+WvpuS4iuiTi+eJiOW7o+WRiumChOaYr+WPr+S7peWlveWlveWIqeeUqO+8jOmHjem7nuaYr+WHuuePvueahOaZguapn++8jOermeWcqOS9v+eUqOiAheeahOinkuW6puaAneiAg++8jOS7gOm6vOaZguWAmeS7luWAkeacg+acgOmhmOaEj+mWseiugOiTi+eJiOW7o+WRiueahOWFp+Wuue+8jOWPr+iDveaYr+aQnOWwi+afkOS6m+eJuemXnOmNteWtl+eahOaZguWAme+8jOaIluaYr+eAj+imvemggeaVuOi2hemBjuS4gOWumuaVuOmHj+aZgu+8jOWGjeaOqOiWpuS7lueyiee1suWwiOmggeeahOiumu+8jOaciee2k+mBjuimj+WKg+eahOaViOaenOebuOS/oeacg+avlOS4gOmAsuermeWwseeUqOiTi+eJiOaTi+S9j+S7luaDs+mWseiugOeahOWFp+WuueS+huW+l+WlveOAgg==” pid=”3017”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>從新學習HTML5 (五) CSS3</title>
    <url>/tw/%E5%BE%9E%E6%96%B0%E5%AD%B8%E7%BF%92html5-%E4%BA%94-css3/</url>
    <content><![CDATA[<p>方塊模型 Flexible Box，父層元素宣告為 display: flex 後，可以使用下列屬性來控制子元素的排列方式：</p>
<p>justify-content - 控制所有子元素的排列方式</p>
<p>屬性有 flex-start flex-end center space-between space-around，space-around 在第一與最後一個元素會留空間可以 around。</p>
<p>flex-direction: column 設定子元素為垂直排列，預設為水平排列</p>
<p>align-items - 設定子元素的垂直對齊方式，屬性有 center flex-start flex-end baseline stretch</p>
<p>flex-wrap:wrap 設定子元素要換行</p>
<p>align-content - 設定在子元素換行的情況下，子元素區域的垂直對其方式，屬性有 center flex-start flex-end space-between space-around stretch</p>
<p>order - 設定子元素的順序</p>
<p>border-image - 讓邊框使用圖片，border-image: url(‘path/border.jpg’) 10 20 30 40 repeat，中間數字為上右下左四個角落圖片要被裁切的範圍，也可以使用百分比，最後一個參數為四個角落以外的圖片延展模式。</p>
<p>columns - 讓在同個標籤內的文字可以分欄，設定方式為 columns: column-width column-count</p>
<p>resize: both - 允許使用者改變元素大小，透過右下角的三角形進行拖曳縮放</p>
<p>CSS 動畫相關：</p>
<p>animation-duration 動畫開始到結束的秒數</p>
<p>animation-iteration-count 動畫重複播放的次數，設定為 infinite 則無限循環</p>
<p>animation-direction 正向播放或是反向播放</p>
<p>animation-delay 延遲播放秒數</p>
<p>window.matchMedia - 用 JS 來設定斷點</p>
<pre class="line-numbers language-none"><code class="language-none">if( window.matchMedia(&#39;(max-width: 1000px)&#39;).matches )&#123;
  alert(&quot;螢幕寬度大於 1000px&quot;);
&#125; else if( window.matchMedia(&#39;(min-width: 1000px)&#39;).matches )&#123;
  alert(&quot;螢幕寬度小於 1000px&quot;);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 用 js 做 RWD
var winW &#x3D; window.matchMedia(&quot;(max-width: 768px)&quot;);
winW.addListener(resizeWidth);
resizeWidth(winW);

function resizeWidth(pMatchMedia)&#123;
  if (pMatchMedia.matches) &#123;
    alert(&#39;&lt; 768&#39;)
  &#125;else &#123;
    alert(&#39;&gt; 768&#39;)
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
  </entry>
  <entry>
    <title>從知名大站學習 UI 設計細節</title>
    <url>/tw/%E5%BE%9E%E7%9F%A5%E5%90%8D%E5%A4%A7%E7%AB%99%E5%AD%B8%E7%BF%92-ui-%E8%A8%AD%E8%A8%88%E7%B4%B0%E7%AF%80-2/</url>
    <content><![CDATA[<p>想一次看到知名網站導覽系統是怎麼設計的嗎？或是首頁文案、圖像該如何搭配才能吸引使用者點擊？Good Web Deisgn 蒐集了知名網站的介面設計，在規劃網站時可以參考其背後的設計思維，進而運用到現行的專案中，當然不同國情會有不同的文化，但做為發想的起點是很不錯的參考！</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1454827291290937” display=”yes” title=”5b6e55+l5ZCN5aSn56uZ5a2457+SIFVJIOioreioiOe0sOevgA==” body=”5oOz5LiA5qyh55yL5Yiw55+l5ZCN57ay56uZ5bCO6Ka957O757Wx5piv5oCO6bq86Kit6KiI55qE5ZeO77yf5oiW5piv6aaW6aCB5paH5qGI44CB5ZyW5YOP6Kmy5aaC5L2V5pCt6YWN5omN6IO95ZC45byV5L2/55So6ICF6bue5pOK77yfR29vZCBXZWIgRGVpc2duIOiSkOmbhuS6huefpeWQjee2suermeeahOS7i+mdouioreioiO+8jOWcqOimj+WKg+e2suermeaZguWPr+S7peWPg+iAg+WFtuiDjOW+jOeahOioreioiOaAnee2re+8jOmAsuiAjOmBi+eUqOWIsOePvuihjOeahOWwiOahiOS4re+8jOeVtueEtuS4jeWQjOWci+aDheacg+acieS4jeWQjOeahOaWh+WMlu+8jOS9huWBmueCuueZvOaDs+eahOi1t+m7nuaYr+W+iOS4jemMr+eahOWPg+iAg++8gQ==” pid=”3073”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>從知名大站學習 UI 設計細節</title>
    <url>/tw/%E5%BE%9E%E7%9F%A5%E5%90%8D%E5%A4%A7%E7%AB%99%E5%AD%B8%E7%BF%92-ui-%E8%A8%AD%E8%A8%88%E7%B4%B0%E7%AF%80/</url>
    <content><![CDATA[<p>  想一次看到知名網站導覽系統是怎麼設計的嗎？或是首頁文案、圖像該如何搭配才能吸引使用者點擊？Good Web Deisgn 蒐集了知名網站的介面設計，在規劃網站時可以參考其背後的設計思維，進而運用到現行的專案中，當然不同國情會有不同的文化，但做為發想的起點是很不錯的參考！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1454827291290937” display=”yes” title=”5b6e55+l5ZCN5aSn56uZ5a2457+SIFVJIOioreioiOe0sOevgA==” body=”5oOz5LiA5qyh55yL5Yiw55+l5ZCN57ay56uZ5bCO6Ka957O757Wx5piv5oCO6bq86Kit6KiI55qE5ZeO77yf5oiW5piv6aaW6aCB5paH5qGI44CB5ZyW5YOP6Kmy5aaC5L2V5pCt6YWN5omN6IO95ZC45byV5L2/55So6ICF6bue5pOK77yfR29vZCBXZWIgRGVpc2duIOiSkOmbhuS6huefpeWQjee2suermeeahOS7i+mdouioreioiO+8jOWcqOimj+WKg+e2suermeaZguWPr+S7peWPg+iAg+WFtuiDjOW+jOeahOioreioiOaAnee2re+8jOmAsuiAjOmBi+eUqOWIsOePvuihjOeahOWwiOahiOS4re+8jOeVtueEtuS4jeWQjOWci+aDheacg+acieS4jeWQjOeahOaWh+WMlu+8jOS9huWBmueCuueZvOaDs+eahOi1t+m7nuaYr+W+iOS4jemMr+eahOWPg+iAg++8gQ==” pid=”3071”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>快速修改 WordPress function.php</title>
    <url>/tw/%E5%BF%AB%E9%80%9F%E4%BF%AE%E6%94%B9-wordpress-function-php/</url>
    <content><![CDATA[<p>  有經營一陣子 WordPress 網站的朋友一定知道，如果要修改某些特定功能，在 Google 上都會找到一些解答說要把程式寫在 Theme 的 function.php 中，為了避免更新被蓋過你加入的程式，通常需要建立子主題來做修改，但如果遇到某些情況不允許建立子主題，或是想做更即時的修改，就可以安裝這 Cusomt Code 這支外掛，它可以直接在後台寫入程式，還可以增加標題與描述來更系統化的整理，方便其它管理者啟用或停用該功能。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1454064788033854” display=”yes” title=”5b+r6YCf5L+u5pS5IFdvcmRQcmVzcyBmdW5jdGlvbi5waHA=” body=”5pyJ57aT54ef5LiA6Zmj5a2QIFdvcmRQcmVzcyDntrLnq5nnmoTmnIvlj4vkuIDlrprnn6XpgZPvvIzlpoLmnpzopoHkv67mlLnmn5Dkupvnibnlrprlip/og73vvIzlnKggR29vZ2xlIOS4iumDveacg+aJvuWIsOS4gOS6m+ino+etlOiqquimgeaKiueoi+W8j+Wvq+WcqCBUaGVtZSDnmoQgZnVuY3Rpb24ucGhwIOS4re+8jOeCuuS6humBv+WFjeabtOaWsOiiq+iTi+mBjuS9oOWKoOWFpeeahOeoi+W8j++8jOmAmuW4uOmcgOimgeW7uueri+WtkOS4u+mhjOS+huWBmuS/ruaUue+8jOS9huWmguaenOmBh+WIsOafkOS6m+aDheazgeS4jeWFgeioseW7uueri+WtkOS4u+mhjO+8jOaIluaYr+aDs+WBmuabtOWNs+aZgueahOS/ruaUue+8jOWwseWPr+S7peWuieijnemAmSBDdXNvbXQgQ29kZSDpgJnmlK/lpJbmjpvvvIzlroPlj6/ku6Xnm7TmjqXlnKjlvozlj7Dlr6vlhaXnqIvlvI/vvIzpgoTlj6/ku6Xlop7liqDmqJnpoYzoiIfmj4/ov7Dkvobmm7Tns7vntbHljJbnmoTmlbTnkIbvvIzmlrnkvr/lhbblroPnrqHnkIbogIXllZ/nlKjmiJblgZznlKjoqbLlip/og73jgII=” pid=”3068”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>快速切換 WordPress 後台登入權限</title>
    <url>/tw/%E5%BF%AB%E9%80%9F%E5%88%87%E6%8F%9B-wordpress-%E5%BE%8C%E5%8F%B0%E7%99%BB%E5%85%A5%E6%AC%8A%E9%99%90/</url>
    <content><![CDATA[<p>  在開發 WordPress 網站的時候，考量到企業內部的人員使用狀況，需要增設許多不同權限的管理員帳號來鎖定特定功能，當增設完成，需要測試該帳號是否擁有正確權限，就必須先登出後再行登入，對於有大量權限要管理的企業光是測試就會花上許多時間，這時候就可以用 User Switching 這支外掛來進行帳號快速切換，方便進行測試或是管理該權限使用者所發佈的內容。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1448307405276259” display=”yes” title=”5b+r6YCf5YiH5o+bIFdvcmRQcmVzcyDlvozlj7DnmbvlhaXmrIrpmZA=” body=”5Zyo6ZaL55m8IFdvcmRQcmVzcyDntrLnq5nnmoTmmYLlgJnvvIzogIPph4/liLDkvIHmpa3lhafpg6jnmoTkurrlk6Hkvb/nlKjni4Dms4HvvIzpnIDopoHlop7oqK3oqLHlpJrkuI3lkIzmrIrpmZDnmoTnrqHnkIblk6HluLPomZ/kvobpjpblrprnibnlrprlip/og73vvIznlbblop7oqK3lrozmiJDvvIzpnIDopoHmuKzoqaboqbLluLPomZ/mmK/lkKbmk4HmnInmraPnorrmrIrpmZDvvIzlsLHlv4XpoIjlhYjnmbvlh7rlvozlho3ooYznmbvlhaXvvIzlsI3mlrzmnInlpKfph4/mrIrpmZDopoHnrqHnkIbnmoTkvIHmpa3lhYnmmK/muKzoqablsLHmnIPoirHkuIroqLHlpJrmmYLplpPvvIzpgJnmmYLlgJnlsLHlj6/ku6XnlKggVXNlciBTd2l0Y2hpbmcg6YCZ5pSv5aSW5o6b5L6G6YCy6KGM5biz6Jmf5b+r6YCf5YiH5o+b77yM5pa55L6/6YCy6KGM5ris6Kmm5oiW5piv566h55CG6Kmy5qyK6ZmQ5L2/55So6ICF5omA55m85L2I55qE5YWn5a6544CC” pid=”3055”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>愛。通用設計</title>
    <url>/tw/%E6%84%9B%E3%80%82%E9%80%9A%E7%94%A8%E8%A8%AD%E8%A8%88/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2010/10/UniversalDesign.jpg" alt="UniversalDesign"> 第一次接觸通用設計，這本書對我而言算是很不錯的入門書，不僅介紹了何謂通用設計，還舉出日常生活中比比皆是的小例子，進而再以設計面及企業面，來強調通用設計的重要性。 通用設計簡單說就是將設計產品儘可能的服務到目標客層中所有類型的人，譬如說可調整高低的兒童座椅，但重點是這是一種觀念，在邁入高齡化社會之餘，人人所需的觀念， 舉捷運博愛座的例子，我們需要的是禮讓有需要的旅客，而不是搞一個藍色超顯眼的座位，不僅造成所需座位者心理的負面感受，在上班巔峰時間有人寧願站著擠也不願被貼上我坐博愛座的標籤， 真正的通用設計，是一般人皆可使用，卻因為多了一些貼心小設計，讓原本不方便使用的人更好使用，盡可能為不同類型的人考量，這才是通用設計的真締。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>找出 SEO 弱點，有效提升你的網站排名</title>
    <url>/tw/%E6%89%BE%E5%87%BA-seo-%E5%BC%B1%E9%BB%9E%EF%BC%8C%E6%9C%89%E6%95%88%E6%8F%90%E5%8D%87%E4%BD%A0%E7%9A%84%E7%B6%B2%E7%AB%99%E6%8E%92%E5%90%8D/</url>
    <content><![CDATA[<p>  Sitechecker 是一套非常方便的網站 SEO 檢驗工具，檢查項目涵蓋範圍很廣，從內容優化開始，它會幫你檢測網頁標題、描述、H1~H6 標籤是否有設定正確、字數判斷、字數與程式字數比等等，再到圖片優化、Favicon 在各瀏覽器以及作業系統下能否正確讀取，還有搜尋引擎索引狀態、www 是否有正確導向，內外部連結檢測，最後還整合 Google Page Speed 的分析結果，此外它還會重點摘要需要處理的緊急問題以及提供解決辦法，讓站主能優化改善來提升排名。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1496470233793309” display=”yes” title=”5om+5Ye6IFNFTyDlvLHpu57vvIzmnInmlYjmj5DljYfkvaDnmoTntrLnq5nmjpLlkI0=” body=”U2l0ZWNoZWNrZXIg5piv5LiA5aWX6Z2e5bi45pa55L6/55qE57ay56uZIFNFTyDmqqLpqZflt6XlhbfvvIzmqqLmn6XpoIXnm67mtrXok4vnr4TlnI3lvojlu6PvvIzlvp7lhaflrrnlhKrljJbplovlp4vvvIzlroPmnIPluavkvaDmqqLmuKzntrLpoIHmqJnpoYzjgIHmj4/ov7DjgIFIMX5INiDmqJnnsaTmmK/lkKbmnInoqK3lrprmraPnorrjgIHlrZfmlbjliKTmlrfjgIHlrZfmlbjoiIfnqIvlvI/lrZfmlbjmr5TnrYnnrYnvvIzlho3liLDlnJbniYflhKrljJbjgIFGYXZpY29uIOWcqOWQhOeAj+imveWZqOS7peWPiuS9nOalreezu+e1seS4i+iDveWQpuato+eiuuiugOWPlu+8jOmChOacieaQnOWwi+W8leaTjue0ouW8leeLgOaFi+OAgXd3dyDmmK/lkKbmnInmraPnorrlsI7lkJHvvIzlhaflpJbpg6jpgKPntZDmqqLmuKzvvIzmnIDlvozpgoTmlbTlkIggR29vZ2xlIFBhZ2UgU3BlZWQg55qE5YiG5p6Q57WQ5p6c77yM5q2k5aSW5a6D6YKE5pyD6YeN6bue5pGY6KaB6ZyA6KaB6JmV55CG55qE57eK5oCl5ZWP6aGM5Lul5Y+K5o+Q5L6b6Kej5rG66L6m5rOV77yM6K6T56uZ5Li76IO95YSq5YyW5pS55ZaE5L6G5o+Q5Y2H5o6S5ZCN44CC” pid=”3157”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>拯救人生的軟體需求規格書</title>
    <url>/tw/%E6%8B%AF%E6%95%91%E4%BA%BA%E7%94%9F%E7%9A%84%E8%BB%9F%E9%AB%94%E9%9C%80%E6%B1%82%E8%A6%8F%E6%A0%BC%E6%9B%B8/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2019/02/116c20fe-5701-4fcf-af8a-8ef2a42978ee-23192-000014e67f8466a1_file.jpg"></p>
<p>前陣子逛 FB 時看到 Udemy 上面這堂原價 7800 的課程 “How to write technical IT requirements to get what you need” 正在限時免費，剛好銜接看板方法不足的需求說明這塊，講師 Anca Onuta 是位非常有經驗的專案經理以及 Scrum Master，課程中同時以三種軟體產品：網站、Mobile App 以及聊天機器人為範例來說明需求文件該如何撰寫。</p>
<p>滿喜歡講師以邊口述邊打字的方式來進行授課，這樣的模式比較容易進入情境，聽不懂英文的的部分也還有重點可以看，雖然 Udemy 有自動字幕的功能，卻因為講師的口音而常常翻譯錯誤，邊聽邊看講師打下的筆記還比較容易理解些。</p>
<p>課堂中也有作業練習，講師也都會幫忙解決疑難雜症，或是想要開發的產品類型並未出現在課程之中，只要跟講師反應她都會再新增相關的範例，只能說現在線上課程好競爭，而 Udemy 更是常常有這種限免或是跳樓大拍賣的優惠，我自己就買了一堆根本沒時間看，只能乖乖找時間補上了～</p>
<p>推薦大家這個粉絲團–&gt;<a href="https://www.facebook.com/softdevtools/">https://www.facebook.com/softdevtools/</a>，這邊常常都會有一堆免費課程的訊息，把他加到 FB 的搶先看就能隨時掌握最新的優惠課程資訊。</p>
<p>“How to write technical IT requirements to get what you need” 這堂課程主要分為八大單元，從介紹需求文件類型開始，到如何組織文件內容、工具介紹以及在撰寫文件時需要注意的問題都非常詳盡，以下就各單元做重點摘錄：</p>
<h2 id="一、需求文件類型"><a href="#一、需求文件類型" class="headerlink" title="一、需求文件類型"></a>一、需求文件類型</h2><p><strong>商業需求文件：</strong><br>描述整個商業計畫、商業目標、所需資源、商業模式等等商營營運各面相的文件，通常是企業經營階層需要的文件，如果是要自己新創事業也會需要。</p>
<p><strong>產品需求文件：</strong><br>描述特定產品的產品計畫、產品目標、產品規格，產品可能有很多個，每個產品都有自己的產品需求文件。</p>
<p><strong>軟體需求文件：</strong><br>描述產品內軟體的規格、功能、特色，也就是本課程主要介紹的需求文件。</p>
<p><strong>用戶需求文件：</strong><br>描述產品使用者的目標、使用行為，以設計出更友善的系統操作介面。</p>
<p>在介紹這些不同文件類型的時，講師有提到 Functionality 以及 Feature 這兩個容易令人搞混的名詞， Functionality 指的是介面背後的行為以及使用流程，是以比較宏觀角度來描述功能，而 Feature 指的是介面的互動方式，像是點擊按鈕改變字體大小，比較偏細部的具體操作步驟。</p>
<p>另外一個重點是，只有在軟體開發的領域時「產品需求文件」會等於「軟體需求文件」因為軟體即為產品本身。</p>
<h2 id="二、將想法具體化成可執行項目的方法-草稿階段"><a href="#二、將想法具體化成可執行項目的方法-草稿階段" class="headerlink" title="二、將想法具體化成可執行項目的方法-草稿階段"></a>二、將想法具體化成可執行項目的方法-草稿階段</h2><ol>
<li> High Level Vision - 把想法寫下來，並說明這些想法想要達成的目標</li>
<li> Scope - 透過哪些功能或內容來達成目標</li>
<li> User Journey - 描述每一個功能的使用步驟以及互動狀態，越細越好，包含顯示欄位、操作流程</li>
</ol>
<p>下圖為講師示範以網站專案為範例的需求文件範本：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/02/e89ea2e5b995e5bfabe785a7-2019-02-04-e4b88be58d8812.00.48.jpg" alt="螢幕快照 2019-02-04 下午12.00.48.jpg"></p>
<p>High Level Vision 是希望可以更容易接觸到客戶、讓客戶找到並瞭解公司的服務項目、並直接與客戶取得聯繫，Scope 則是根據以上目標來列出網站可以放的內容，像是產品或服務列表、團對介紹、顧客回饋、訓練課程以及研討會等等，</p>
<p>然後再逐一發展每個內容裡面的細項，像是團隊介紹裡面可以放團隊成員列表、大頭照、成員簡介，服務列表放入每個服務的名稱與說明，條列完成後，則是根據每個內容去定義的使用歷程，也就是 User Journey。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/02/e89ea2e5b995e5bfabe785a7-2019-02-04-e4b88be58d8812.09.08.jpg" alt="螢幕快照 2019-02-04 下午12.09.08.jpg"></p>
<p>以訓練課程為例，其內容有免費預覽、付費觀賞、線上 QA 等內容，在 User Jourey 的部分則是去思考不同的使用者進入該區塊之後會有的操作，像是以新用戶來說，會先看到訓練課程列表 -&gt; 預覽課程 -&gt; 選擇他想上的課程 -&gt; 付費 -&gt; 取得付費課程 -&gt; 提供小禮物 -&gt; 感謝頁面或是其他課程推薦，而舊用戶也有相對應的操作流程，逐一把它列出。</p>
<p>在草稿階段，我自己做網站企劃的實務經驗，通常是先去爬數家競品網站以及同類型非競品網站後，畫下每個站的網站架構，以及紀錄特定行為的操作步驟流程，像是加入會員、購買商品等等，然後把這些蒐集好的資料做分類，最後把它匯集成客戶網站需求文件的草稿，客戶有了草稿後，再協助他們訂出 High Level Vison、 Scope 以及 User Journey，不然客戶常常也不知道做網站的目的是什麼，裡面要放什麼內容。</p>
<h2 id="三、整理需求文件的工具"><a href="#三、整理需求文件的工具" class="headerlink" title="三、整理需求文件的工具"></a>三、整理需求文件的工具</h2><ol>
<li> 心智圖：這也是我最常用的發想工具，有時候還直接拿心智圖去跟客戶做討論，因為很方便可以看到全貌，也可以專注在細節，我是用 Xmind，講師分享的是 Coggle。</li>
<li> 試算表：用 excel 或是 google 文件的試算表來整理草稿，方便的地方是可以進行排序，快速的找到要先進行開發的內容。</li>
<li> Word 文件：比較正式的需求文件，可以提交給客戶當交付物。</li>
</ol>
<p>使用試算表的整理要點如下：</p>
<ul>
<li>  依照草稿區分 scope 裡面的頁面 / 內容 / 描述 / 顯示資訊 / 使用者歷程 / 技術需求 / 驗收標準 / <strong>優先順序</strong> / 重要性 等等的欄位</li>
<li>  依照草稿提到的內容來動態決定欄位，並整理成精準的文字</li>
<li>  可以視覺化的顯示還有哪邊的內容有缺少</li>
<li>  加入優先等級與重要性欄位，就可以使用排序功能優先顯示要開發的項目</li>
</ul>
<p>下圖為講師的 excel 需求文件範例</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/02/e89ea2e5b995e5bfabe785a7-2019-02-04-e4b88be58d8812.28.35.jpg" alt="螢幕快照 2019-02-04 下午12.28.35.jpg"></p>
<p>先把 Scope 貼上，就成為 Page/Seciton 的項目，然後每個 Scope 裡面的內容，放在第二欄的 Content/Functionalities，其他欄位可以視需要新增刪減，</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/02/e89ea2e5b995e5bfabe785a7-2019-02-04-e4b88be58d8812.30.57.jpg" alt="螢幕快照 2019-02-04 下午12.30.57.jpg"></p>
<p>最後面三個欄位在開發上非常重要，驗收標準、優先度以及重要性，用 Excel 最大好處就是可以進行排序。  </p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/02/e89ea2e5b995e5bfabe785a7-2019-02-04-e4b88be58d8812.33.42.jpg" alt="螢幕快照 2019-02-04 下午12.33.42.jpg"></p>
<p>由於我有 Word 恐懼症，每次都會被他的排版給搞瘋，但如果是比較有規模且制度完善的公司，提交一份 Word 文件應該還是免不了的。整理邏輯跟 Excel 雷同，只是把欄位換成標題，然後把每個內容細項變成是清單目錄。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/02/e89ea2e5b995e5bfabe785a7-2019-02-04-e4b88be58d8812.37.13.jpg" alt="螢幕快照 2019-02-04 下午12.37.13.jpg"></p>
<p>心智圖的整理方式較為直覺且不必擔心太多格式排版的問題。</p>
<h2 id="四、需求文件的基本框架"><a href="#四、需求文件的基本框架" class="headerlink" title="四、需求文件的基本框架"></a>四、需求文件的基本框架</h2><p><strong>1. Description 描述功能的用途、內容</strong><br>列出 Pages 項目裡面應有的內容，以及進一步說明這些內容的欄位、互動功能會如何實現。</p>
<p><strong>2. Action 功能操作的細節 ( User  Journey )</strong><br>需要使用者操作的步驟，像是輸入的資料欄位、資料驗證方式、發送電子郵件、如何取得登入授權。</p>
<p><strong>3.Deliverable 該功能預期的產出物、交付物</strong><br>完成這個 Page 應該會有哪些產出，像是加入會員的表單、註冊會員的頁面、忘記密碼功能等等。</p>
<p>**4.Acceptance Criteria 確認完成的標準<br>**如何說明這個 Page 或功能已經完成，像是會員可以成功登入、註冊帳號、可以使用忘記密碼功能收到密碼重設的連結。</p>
<p>課程提到的文件基本框架的部分我覺得是比較彈性的，可能依照 Scope 裡面 page 或 functionality 的不同而會有不一樣的欄位，但基本上離不開這四大範疇，第三與第四點實務上常忽略的地方，所以每次請客戶驗收時總是會發現自己漏掉頁面，或是工程師開發好的功能卻不是客戶需要的，這就是在前置溝通時期沒有對於完成標準有一致性的認知而造成的誤會，最後的結局總是只能苦命的打掉重做，所以好的需求文件規格書真的可以拯救人生啊。</p>
<h2 id="五、需求文件的技術說明"><a href="#五、需求文件的技術說明" class="headerlink" title="五、需求文件的技術說明"></a>五、需求文件的技術說明</h2><p>描述開發這個產品需要的所有所以技術細節：</p>
<ol>
<li> 程式語言相關：像是使用什麼語言、程式面的特殊需求、可以擴充、方便移轉、需要支援哪些裝置等等</li>
<li> 主機相關：主機規格、機房位置、備份機制、部署流程</li>
<li> 第三方整合相關：需使用到的第三方 SDK 或是 API 介接</li>
<li> 管理者相關：管理者權限、管理層級、可使用功能</li>
</ol>
<p>這部分就是把想得到的技術細節寫下來，但常常會發生邊做邊產生新的技術應用，就要更新這份需求文件，常保這份文件保持在最新狀態是非常重要的。</p>
<h2 id="六、法律要求"><a href="#六、法律要求" class="headerlink" title="六、法律要求"></a>六、法律要求</h2><p>這是最容易被忽略但也最關鍵的部分，如果網站花了大筆時間人力開發，最後卻因為法律問題而導致必須下架，這會是非常嚴重的損失，所以一開始先了解相關的法律規定以及必須揭露的資訊，甚至是需要讓使用者同意的規範，這些都要在寫需求文件階段時一併考量進去。</p>
<h2 id="七、撰寫需求文件的要點"><a href="#七、撰寫需求文件的要點" class="headerlink" title="七、撰寫需求文件的要點"></a>七、撰寫需求文件的要點</h2><p>整理需求通常會從草稿開始，然後整理成可以讓別人看得懂的文件，再透過溝通討論逐步發展出細節，有了細節後繪製 wireframe -&gt; User Flow -&gt; Prototype，可以更方便團隊成員理解產品的內容，但有一點要注意，在還沒有草稿階段時直接進入 wireframe 的繪製很容易會迷失方向，會拘泥在細節上而忘了整體目標，所以較好的作法還是先把 High Level Vision、Scope、User Journey 整理出來，wireframe 當成是輔助溝通的工具為佳。</p>
<p>此外，在整理正式文件的過程中，必須仔細選擇用字遣詞，確保團隊成員可以正確理解，減少假設性的問題，並寫下具體的說明跟解釋，搭配圖片的使用以及有系統的格式整理，在第一次發出這份文件時不要讓他們自己看，而是可以召開會議口頭解釋文件內的所有內容，確保團隊成員都能正確的理解進而減少誤會的產生。</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>我自己是有一份常用的規格清單文件，上完這堂課程之後，可以加入新的欄位來加強文件的完整性以及實用性，也學習到怎麼使用 Excel 來整理並排序，如果未來要開發自己的產品，也是非常實用喔喔喔。</p>
<blockquote>
<p>最近把實務上整理軟體規格書的經驗另外寫成了一篇「<a href="https://oberonlai.blog/tw/how-to-write-the-effective-specification/">企劃人員如何撰寫有效的軟體需求規格文件</a>」，如果有了規格不知道該如何進行報價，可以參考另一篇「<a href="https://oberonlai.blog/tw/how-do-i-make-a-quotation/">我的接案報價學</a>」</p>
</blockquote>
]]></content>
      <categories>
        <category>專案即生活</category>
      </categories>
  </entry>
  <entry>
    <title>提升 WordPress 媒體庫二十倍戰鬥力</title>
    <url>/tw/%E6%8F%90%E5%8D%87-wordpress-%E5%AA%92%E9%AB%94%E5%BA%AB%E4%BA%8C%E5%8D%81%E5%80%8D%E6%88%B0%E9%AC%A5%E5%8A%9B/</url>
    <content><![CDATA[<p>  WordPress 預設的媒體庫當圖片一多的時候就會變成一場災難，因為預設功能是無法幫圖片分資料夾的，搜尋功能又不夠完整，所以當圖找不到時最快方法就是重傳，時間久了就會讓媒體庫肥大。WP Media Folder 這款付費外掛，能夠非常方便建立資料夾來進行圖片分類，還可以透過進階篩選的功能進行搜尋，另外還有超多針對圖片管理的工具，像是檔案自動命名、同步 FTP 資料夾、進階排序等等，最酷的是它還有內建 Gallery，可以快速地把已上傳照片製作成一本本漂亮的相簿，非常適合需要處理大量圖片的網站使用。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1480239672083032” display=”yes” title=”5o+Q5Y2HIFdvcmRQcmVzcyDlqpLpq5TluqvkuozljYHlgI3miLDprKXlips=” body=”V29yZFByZXNzIOmgkOioreeahOWqkumrlOW6q+eVtuWclueJh+S4gOWkmueahOaZguWAmeWwseacg+iuiuaIkOS4gOWgtOeBvembo++8jOWboOeCuumgkOioreWKn+iDveaYr+eEoeazleW5q+WclueJh+WIhuizh+aWmeWkvueahO+8jOaQnOWwi+WKn+iDveWPiOS4jeWkoOWujOaVtO+8jOaJgOS7peeVtuWcluaJvuS4jeWIsOaZguacgOW/q+aWueazleWwseaYr+mHjeWCs++8jOaZgumWk+S5heS6huWwseacg+iuk+WqkumrlOW6q+iCpeWkp+OAgldQIE1lZGlhIEZvbGRlciDpgJnmrL7ku5josrvlpJbmjpvvvIzog73lpKDpnZ7luLjmlrnkvr/lu7rnq4vos4fmlpnlpL7kvobpgLLooYzlnJbniYfliIbpoZ7vvIzpgoTlj6/ku6XpgI/pgY7pgLLpmo7nr6npgbjnmoTlip/og73pgLLooYzmkJzlsIvvvIzlj6blpJbpgoTmnInotoXlpJrph53lsI3lnJbniYfnrqHnkIbnmoTlt6XlhbfvvIzlg4/mmK/mqpTmoYjoh6rli5Xlkb3lkI3jgIHlkIzmraUgRlRQIOizh+aWmeWkvuOAgemAsumajuaOkuW6j+etieetie+8jOacgOmFt+eahOaYr+Wug+mChOacieWFp+W7uiBHYWxsZXJ577yM5Y+v5Lul5b+r6YCf5Zyw5oqK5bey5LiK5YKz54Wn54mH6KO95L2c5oiQ5LiA5pys5pys5ryC5Lqu55qE55u457C/77yM6Z2e5bi46YGp5ZCI6ZyA6KaB6JmV55CG5aSn6YeP5ZyW54mH55qE57ay56uZ5L2/55So44CC” pid=”3124”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>方便的 WordPress 更新工具</title>
    <url>/tw/%E6%96%B9%E4%BE%BF%E7%9A%84-wordpress-%E6%9B%B4%E6%96%B0%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>WordPress 被 hack 的原因很大一部份是因為程式沒有更新，包含 WP 核心、佈景主題與外掛，如果你不常進後台，或是容易忘記更新，就可以使用 Easy Updates Manager 這支外掛來自動化處理，有客製化過的外掛，也可以針對它不自動更新，另外萬一自動更新後的程式有問題，想回到原先的版本，可以再安裝先前介紹過的 wp-rollback 來進行恢復。</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1458170790956587” display=”yes” title=”5pa55L6/55qEIFdvcmRQcmVzcyDmm7TmlrDlt6Xlhbc=” body=”V29yZFByZXNzIOiiqyBoYWNrIOeahOWOn+WboOW+iOWkp+S4gOmDqOS7veaYr+WboOeCuueoi+W8j+aykuacieabtOaWsO+8jOWMheWQqyBXUCDmoLjlv4PjgIHkvYjmma/kuLvpoYzoiIflpJbmjpvvvIzlpoLmnpzkvaDkuI3luLjpgLLlvozlj7DvvIzmiJbmmK/lrrnmmJPlv5joqJjmm7TmlrDvvIzlsLHlj6/ku6Xkvb/nlKggRWFzeSBVcGRhdGVzIE1hbmFnZXIg6YCZ5pSv5aSW5o6b5L6G6Ieq5YuV5YyW6JmV55CG77yM5pyJ5a6i6KO95YyW6YGO55qE5aSW5o6b77yM5Lmf5Y+v5Lul6Yed5bCN5a6D5LiN6Ieq5YuV5pu05paw77yM5Y+m5aSW6JCs5LiA6Ieq5YuV5pu05paw5b6M55qE56iL5byP5pyJ5ZWP6aGM77yM5oOz5Zue5Yiw5Y6f5YWI55qE54mI5pys77yM5Y+v5Lul5YaN5a6J6KOd5YWI5YmN5LuL57S56YGO55qEIHdwLXJvbGxiYWNrIOS+humAsuihjOaBouW+qeOAgg==” pid=”3080”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>方便的免費圖庫下載軟體</title>
    <url>/tw/%E6%96%B9%E4%BE%BF%E7%9A%84%E5%85%8D%E8%B2%BB%E5%9C%96%E5%BA%AB%E4%B8%8B%E8%BC%89%E8%BB%9F%E9%AB%94/</url>
    <content><![CDATA[<p>Unsplash 已是全球最大的免費授權圖庫，使用 Coaster 這套 Mac 軟體可以不用開瀏覽器，直接在應用程式中瀏覽並下載 Unsplash 中的圖片，原價 2.99 美金，輸入優惠碼「betalist」後只要 2 美元，常使用他們家圖庫的朋友不要錯過！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1524514524322213” display=”yes” title=”5pa55L6/55qE5YWN6LK75ZyW5bqr5LiL6LyJ6Luf6auU” body=”VW5zcGxhc2gg5bey5piv5YWo55CD5pyA5aSn55qE5YWN6LK75o6I5qyK5ZyW5bqr77yM5L2/55SoIENvYXN0ZXIg6YCZ5aWXIE1hYyDou5/pq5Tlj6/ku6XkuI3nlKjplovngI/opr3lmajvvIznm7TmjqXlnKjmh4nnlKjnqIvlvI/kuK3ngI/opr3kuKbkuIvovIkgVW5zcGxhc2gg5Lit55qE5ZyW54mH77yM5Y6f5YO5IDIuOTkg576O6YeR77yM6Ly45YWl5YSq5oOg56K844CMYmV0YWxpc3TjgI3lvozlj6ropoEgMiDnvo7lhYPvvIzluLjkvb/nlKjku5blgJHlrrblnJbluqvnmoTmnIvlj4vkuI3opoHpjK/pgY7vvIE=” pid=”3233”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>更快速又有效率的管理 WordPress 文章</title>
    <url>/tw/%E6%9B%B4%E5%BF%AB%E9%80%9F%E5%8F%88%E6%9C%89%E6%95%88%E7%8E%87%E7%9A%84%E7%AE%A1%E7%90%86-wordpress-%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>目前已經有越來越多的佈景主題已經把設定功能整合到「外觀 &gt; 自訂」裡面，在這介面下，最大的好處就是可以直接看到網站修改後的即時預覽，如果也能在這邊一併看到文章發佈的狀態就更方便了，Customize Posts 就是針對這種狀況所設計的外掛，讓你可以在相同的介面下管理文章的發佈日期、作者、標題等所有文章相關欄位，還可以開啟編輯器來進行內容撰寫，只要切換文章狀態就可以即時看到內文的更新。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1531144660325866” display=”yes” title=”5pu05b+r6YCf5Y+I5pyJ5pWI546H55qE566h55CGIFdvcmRQcmVzcyDmlofnq6A=” body=”55uu5YmN5bey57aT5pyJ6LaK5L6G6LaK5aSa55qE5L2I5pmv5Li76aGM5bey57aT5oqK6Kit5a6a5Yqf6IO95pW05ZCI5Yiw44CM5aSW6KeAID4g6Ieq6KiC44CN6KOh6Z2i77yM5Zyo6YCZ5LuL6Z2i5LiL77yM5pyA5aSn55qE5aW96JmV5bCx5piv5Y+v5Lul55u05o6l55yL5Yiw57ay56uZ5L+u5pS55b6M55qE5Y2z5pmC6aCQ6Ka977yM5aaC5p6c5Lmf6IO95Zyo6YCZ6YKK5LiA5L2155yL5Yiw5paH56ug55m85L2I55qE54uA5oWL5bCx5pu05pa55L6/5LqG77yMQ3VzdG9taXplIFBvc3RzIOWwseaYr+mHneWwjemAmeeorueLgOazgeaJgOioreioiOeahOWkluaOm++8jOiuk+S9oOWPr+S7peWcqOebuOWQjOeahOS7i+mdouS4i+euoeeQhuaWh+eroOeahOeZvOS9iOaXpeacn+OAgeS9nOiAheOAgeaomemhjOetieaJgOacieaWh+eroOebuOmXnOashOS9je+8jOmChOWPr+S7pemWi+WVn+e3qOi8r+WZqOS+humAsuihjOWFp+WuueaSsOWvq++8jOWPquimgeWIh+aPm+aWh+eroOeLgOaFi+WwseWPr+S7peWNs+aZgueci+WIsOWFp+aWh+eahOabtOaWsOOAgg==” pid=”3253”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>最最最適合新手入門的 WordPress 服務</title>
    <url>/tw/%E6%9C%80%E6%9C%80%E6%9C%80%E9%81%A9%E5%90%88%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80%E7%9A%84-wordpress-%E6%9C%8D%E5%8B%99/</url>
    <content><![CDATA[<p>  這套名為 CloudPress 的服務令人大開眼界，主要是以網站編輯器為核心功能，每個區塊都有現成的樣版以及十分深入的控制項，無論是要快速架站或是精緻微調都能滿足使用者需求，更方便的地方在於只要申請他們的會員後，直接從他們後台就可以進入一個他幫你開好的 WordPress 網站，直接省略所有的程式、伺服器、資料庫的安裝步驟，就能開始無痛使用 WordPress 網站，當編輯好之後，還提供移轉到主機的功能，到這邊才需要付費，有多種方案可以選擇，依照架站數量最便宜是每月 11.99 美金，如果是第一次使用 WordPress 大推這套服務！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1404315419675458” display=”yes” title=”5pyA5pyA5pyA6YGp5ZCI5paw5omL5YWl6ZaA55qEIFdvcmRQcmVzcyDmnI3li5k=” body=”6YCZ5aWX5ZCN54K6IENsb3VkUHJlc3Mg55qE5pyN5YuZ5Luk5Lq65aSn6ZaL55y855WM77yM5Li76KaB5piv5Lul57ay56uZ57eo6Lyv5Zmo54K65qC45b+D5Yqf6IO977yM5q+P5YCL5Y2A5aGK6YO95pyJ54++5oiQ55qE5qij54mI5Lul5Y+K5Y2B5YiG5rex5YWl55qE5o6n5Yi26aCF77yM54Sh6KuW5piv6KaB5b+r6YCf5p6256uZ5oiW5piv57K+57e75b6u6Kq/6YO96IO95ru/6Laz5L2/55So6ICF6ZyA5rGC77yM5pu05pa55L6/55qE5Zyw5pa55Zyo5pa85Y+q6KaB55Sz6KuL5LuW5YCR55qE5pyD5ZOh5b6M77yM55u05o6l5b6e5LuW5YCR5b6M5Y+w5bCx5Y+v5Lul6YCy5YWl5LiA5YCL5LuW5bmr5L2g6ZaL5aW955qEIFdvcmRQcmVzcyDntrLnq5nvvIznm7TmjqXnnIHnlaXmiYDmnInnmoTnqIvlvI/jgIHkvLrmnI3lmajjgIHos4fmlpnluqvnmoTlronoo53mraXpqZ/vvIzlsLHog73plovlp4vnhKHnl5vkvb/nlKggV29yZFByZXNzIOe2suerme+8jOeVtue3qOi8r+WlveS5i+W+jO+8jOmChOaPkOS+m+enu+i9ieWIsOS4u+apn+eahOWKn+iDve+8jOWIsOmAmemCiuaJjemcgOimgeS7mOiyu++8jOacieWkmueoruaWueahiOWPr+S7pemBuOaTh++8jOS+neeFp+aetuermeaVuOmHj+acgOS+v+WunOaYr+avj+aciCAxMS45OSDnvo7ph5HvvIzlpoLmnpzmmK/nrKzkuIDmrKHkvb/nlKggV29yZFByZXNzIOWkp+aOqOmAmeWll+acjeWLme+8gQ==” pid=”2931”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>架設網站首要之務絕對不是安裝 WordPress</title>
    <url>/tw/%E6%9E%B6%E8%A8%AD%E7%B6%B2%E7%AB%99%E9%A6%96%E8%A6%81%E4%B9%8B%E5%8B%99%E7%B5%95%E5%B0%8D%E4%B8%8D%E6%98%AF%E5%AE%89%E8%A3%9D-wordpress/</url>
    <content><![CDATA[<p>  WordPress 強大的佈景主題、功能多到炸裂的各種外掛，讓人有錯覺可以非常快速的架出一個立即可使用的網站，但沒有事先規劃的結果，就是會造成買到不適合的主題或外掛，既浪費金錢又白花時間，最好的做法就是在架站前，做好足夠的準備，準備的項目可以先從網站架構開始，再到頁面的草圖，決定佈局方式以及頁面內容，有了這方向後再去找適合的主題會更有判斷依據。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1425616644212002” display=”yes” title=”5p626Kit57ay56uZ6aaW6KaB5LmL5YuZ57WV5bCN5LiN5piv5a6J6KOdIFdvcmRQcmVzcw==” body=”V29yZFByZXNzIOW8t+Wkp+eahOS9iOaZr+S4u+mhjOOAgeWKn+iDveWkmuWIsOeCuOijgueahOWQhOeoruWkluaOm++8jOiuk+S6uuaciemMr+imuuWPr+S7pemdnuW4uOW/q+mAn+eahOaetuWHuuS4gOWAi+eri+WNs+WPr+S9v+eUqOeahOe2suerme+8jOS9huaykuacieS6i+WFiOimj+WKg+eahOe1kOaenO+8jOWwseaYr+acg+mAoOaIkOiyt+WIsOS4jemBqeWQiOeahOS4u+mhjOaIluWkluaOm++8jOaXoua1quiyu+mHkemMouWPiOeZveiKseaZgumWk++8jOacgOWlveeahOWBmuazleWwseaYr+WcqOaetuermeWJje+8jOWBmuWlvei2s+WkoOeahOa6luWCme+8jOa6luWCmeeahOmgheebruWPr+S7peWFiOW+nue2suermeaetuani+mWi+Wni++8jOWGjeWIsOmggemdoueahOiNieWclu+8jOaxuuWumuS9iOWxgOaWueW8j+S7peWPiumggemdouWFp+Wuue+8jOacieS6humAmeaWueWQkeW+jOWGjeWOu+aJvumBqeWQiOeahOS4u+mhjOacg+abtOacieWIpOaWt+S+neaTmuOAgg==” pid=”3003”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>相容各家 WordPress 視覺化編輯器的佈景主題</title>
    <url>/tw/%E7%9B%B8%E5%AE%B9%E5%90%84%E5%AE%B6-wordpress-%E8%A6%96%E8%A6%BA%E5%8C%96%E7%B7%A8%E8%BC%AF%E5%99%A8%E7%9A%84%E4%BD%88%E6%99%AF%E4%B8%BB%E9%A1%8C/</url>
    <content><![CDATA[<p>有在使用 WordPress 視覺化編輯器的朋友，像是 Elementor、Divi 可能都會遇到某些無法控制或是設定不夠多的項目，像是主選單的設計、頁尾的版面等等，今天分享的這套佈景主題可以來加強這些功能並相容於現有的視覺化編輯器中，它能調整更多主選的樣式與功能、透明或固定的 Header、選單滑過效果等等，讓你不用修改程式也能自訂你想要的功能。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1539207809519551” display=”yes” title=”V29yZFByZXNzIOimluimuuWMlue3qOi8r+WZqOWkluaOm+eahOWkluaOmw==” body=”5pyJ5Zyo5L2/55SoIFdvcmRQcmVzcyDoppboprrljJbnt6jovK/lmajnmoTmnIvlj4vlg4/mmK8gRWxlbWVudG9y44CBRGl2aSDlj6/og73pg73mnIPpgYfliLDmn5DkupvnhKHms5XmjqfliLbmiJbmmK/oqK3lrprkuI3lpKDlpJrnmoTpoIXnm67vvIzlg4/mmK/kuLvpgbjllq7nmoToqK3oqIjjgIHpoIHlsL7nmoTniYjpnaLnrYnnrYnvvIzku4rlpKnliIbkuqvnmoTpgJnlpZflpJbmjpvlj6/ku6XkvobliqDlvLfpgJnkupvlip/og73kuKbnm7jlrrnmlrznj77mnInnmoToppboprrljJbnt6jovK/lmajkuK3vvIzlroPog73oqr/mlbTmm7TlpJrkuLvpgbjnmoTmqKPlvI/oiIflip/og73jgIHpgI/mmI7miJblm7rlrprnmoQgSGVhZGVy44CB6YG45Zau5ruR6YGO5pWI5p6c562J562J77yM6K6T5L2g5LiN55So5L+u5pS556iL5byP5Lmf6IO96Ieq6KiC5L2g5oOz6KaB55qE5Yqf6IO944CC” pid=”3261”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>秒找 WordPress 外掛</title>
    <url>/tw/%E7%A7%92%E6%89%BE-wordpress-%E5%A4%96%E6%8E%9B-2/</url>
    <content><![CDATA[<p>每次找外掛最困擾的就是不知道該用什麼關鍵字下去找，然後官網的外掛頁面基本上就是做好看的，五萬多筆的資料只能靠那弱不禁風的搜尋功能，陸續有社群在努力改善這件事，而 WPD 就是這樣的服務，他們把外掛依使用目的性劃分，整理成 22 種類別，也可以透過標籤搜尋，另外也提供使用者建立自己的外掛清單，但目前看來沒啥人在用，而且這站搜錄的外掛也只有兩千多筆，因為他們號稱是人工篩選分類的，所以處理上需要花一段時間，但用起來比官方的頁面好一些些，在官方還沒打算把外掛頁的資訊架構重整時，這個站就先擋著用了 Orz</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1417710178335982” display=”yes” title=”56eS5om+IFdvcmRQcmVzcyDlpJbmjps=” body=”5q+P5qyh5om+5aSW5o6b5pyA5Zuw5pO+55qE5bCx5piv5LiN55+l6YGT6Kmy55So5LuA6bq86Zec6Y215a2X5LiL5Y675om+77yM54S25b6M5a6Y57ay55qE5aSW5o6b6aCB6Z2i5Z+65pys5LiK5bCx5piv5YGa5aW955yL55qE77yM5LqU6JCs5aSa562G55qE6LOH5paZ5Y+q6IO96Z2g6YKj5byx5LiN56aB6aKo55qE5pCc5bCL5Yqf6IO977yM6Zm457qM5pyJ56S+576k5Zyo5Yqq5Yqb5pS55ZaE6YCZ5Lu25LqL77yM6ICMIFdQRCDlsLHmmK/pgJnmqKPnmoTmnI3li5nvvIzku5blgJHmiorlpJbmjpvkvp3kvb/nlKjnm67nmoTmgKflioPliIbvvIzmlbTnkIbmiJAgMjIg56iu6aGe5Yil77yM5Lmf5Y+v5Lul6YCP6YGO5qiZ57Gk5pCc5bCL77yM5Y+m5aSW5Lmf5o+Q5L6b5L2/55So6ICF5bu656uL6Ieq5bex55qE5aSW5o6b5riF5Zau77yM5L2G55uu5YmN55yL5L6G5rKS5ZWl5Lq65Zyo55So77yM6ICM5LiU6YCZ56uZ5pCc6YyE55qE5aSW5o6b5Lmf5Y+q5pyJ5YWp5Y2D5aSa562G77yM5Zug54K65LuW5YCR6Jmf56ix5piv5Lq65bel56+p6YG45YiG6aGe55qE77yM5omA5Lul6JmV55CG5LiK6ZyA6KaB6Iqx5LiA5q615pmC6ZaT77yM5L2G55So6LW35L6G5q+U5a6Y5pa555qE6aCB6Z2i5aW95LiA5Lqb5Lqb77yM5Zyo5a6Y5pa56YKE5rKS5omT566X5oqK5aSW5o6b6aCB55qE6LOH6KiK5p625qeL6YeN5pW05pmC77yM6YCZ5YCL56uZ5bCx5YWI5pOL6JGX55So5LqGIE9yemh0dHA6Ly93cHBsdWdpbmRpcmVjdG9yeS5vcmc=” pid=”2975”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>秒速圖片裁切工具</title>
    <url>/tw/%E7%A7%92%E9%80%9F%E5%9C%96%E7%89%87%E8%A3%81%E5%88%87%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>  雖然 Mac 內建的圖片檢視工具已經方便到可以不用開啟 Photoshop 或 Affinity Photo 來處理圖片裁切的作業，但今天看到的這服務更厲害，號稱可以使用人類辨識來批次裁切大量圖片，而且因為只是在瀏覽器中執行，不需要任何後台伺服器的動作，所以圖片上傳非常快，實際測試後效果驚人，主體部份以及人臉辨識精準，非常實用！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1467631046677228” display=”yes” title=”56eS6YCf5ZyW54mH6KOB5YiH5bel5YW3” body=”6ZuW54S2IE1hYyDlhaflu7rnmoTlnJbniYfmqqLoppblt6Xlhbflt7LntpPmlrnkvr/liLDlj6/ku6XkuI3nlKjplovllZ8gUGhvdG9zaG9wIOaIliBBZmZpbml0eSBQaG90byDkvobomZXnkIblnJbniYfoo4HliIfnmoTkvZzmpa3vvIzkvYbku4rlpKnnnIvliLDnmoTpgJnmnI3li5nmm7TljrLlrrPvvIzomZ/nqLHlj6/ku6Xkvb/nlKjkurrpoZ7ovqjorZjkvobmibnmrKHoo4HliIflpKfph4/lnJbniYfvvIzogIzkuJTlm6Dngrrlj6rmmK/lnKjngI/opr3lmajkuK3ln7fooYzvvIzkuI3pnIDopoHku7vkvZXlvozlj7DkvLrmnI3lmajnmoTli5XkvZzvvIzmiYDku6XlnJbniYfkuIrlgrPpnZ7luLjlv6vvvIzlr6bpmpvmuKzoqablvozmlYjmnpzpqZrkurrvvIzkuLvpq5Tpg6jku73ku6Xlj4rkurroh4novqjorZjnsr7mupbvvIzpnZ7luLjlr6bnlKjvvIE=” pid=”3096”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>第一次開網路商店完全指南</title>
    <url>/tw/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%96%8B%E7%B6%B2%E8%B7%AF%E5%95%86%E5%BA%97%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>這篇文章非常詳細的整理了自營網路商店的基本知識以及在選擇開店平台前需要評估的項目，同時附上參考文章以及可以實際運用的 WordPress 外掛或佈景主題，正打算使用 WordPress 開自己第一個網路商店的朋友可以參考看看！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1520748174698848” display=”yes” title=”56ys5LiA5qyh6ZaL57ay6Lev5ZWG5bqX5a6M5YWo5oyH5Y2X” body=”6YCZ56+H5paH56ug6Z2e5bi46Kmz57Sw55qE5pW055CG5LqG6Ieq54ef57ay6Lev5ZWG5bqX55qE5Z+65pys55+l6K2Y5Lul5Y+K5Zyo6YG45pOH6ZaL5bqX5bmz5Y+w5YmN6ZyA6KaB6KmV5Lyw55qE6aCF55uu77yM5ZCM5pmC6ZmE5LiK5Y+D6ICD5paH56ug5Lul5Y+K5Y+v5Lul5a+m6Zqb6YGL55So55qEIFdvcmRQcmVzcyDlpJbmjpvmiJbkvYjmma/kuLvpoYzvvIzmraPmiZPnrpfkvb/nlKggV29yZFByZXNzIOmWi+iHquW3seesrOS4gOWAi+e2sui3r+WVhuW6l+eahOaci+WPi+WPr+S7peWPg+iAg+eci+eci++8gQ==” pid=”3229”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>管理網站所安裝的 APP</title>
    <url>/tw/%E7%AE%A1%E7%90%86%E7%B6%B2%E7%AB%99%E6%89%80%E5%AE%89%E8%A3%9D%E7%9A%84-app/</url>
    <content><![CDATA[<p>  近幾年出現了許多服務可以把現成的網站功能透過 js 程式碼「安裝」到你的網站裡面，有點類似 WordPress 外掛的概念，但這類的服務提供了後台更多報表分析，像是使用的狀況、點擊、瀏覽數等等，尤其是對行銷人員非常重要的頁面追縱分析工具，但當時間一久，有安裝的服務變多了，在管理上就會得麻煩，或是臨時找不工程師卻需要使用服務時，不確定自己有沒有把程式碼裝對，這時透過 Gumshoe 這套服務來管理就非常省事。它蒐集了許多常見的網站工具，並整合多種類型的網站，只要安裝好一次他們的程式碼，接下來就可以透過他們的後台進行工具安裝，也可以使用他們開發的 Chrome 瀏覽器外掛來把各種程式碼自動安裝到網站之中，可大幅減少安裝時的障礙以及方便日後如要停用某些工具的狀況。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1484226628351003” display=”yes” title=”566h55CG57ay56uZ5omA5a6J6KOd55qEIEFQUA==” body=”6L+R5bm+5bm05Ye654++5LqG6Kix5aSa5pyN5YuZ5Y+v5Lul5oqK54++5oiQ55qE57ay56uZ5Yqf6IO96YCP6YGOIGpzIOeoi+W8j+eivOOAjOWuieijneOAjeWIsOS9oOeahOe2suermeijoemdou+8jOaciem7numhnuS8vCBXb3JkUHJlc3Mg5aSW5o6b55qE5qaC5b+177yM5L2G6YCZ6aGe55qE5pyN5YuZ5o+Q5L6b5LqG5b6M5Y+w5pu05aSa5aCx6KGo5YiG5p6Q77yM5YOP5piv5L2/55So55qE54uA5rOB44CB6bue5pOK44CB54CP6Ka95pW4562J562J77yM5bCk5YW25piv5bCN6KGM6Yq35Lq65ZOh6Z2e5bi46YeN6KaB55qE6aCB6Z2i6L+957ix5YiG5p6Q5bel5YW377yM5L2G55W25pmC6ZaT5LiA5LmF77yM5pyJ5a6J6KOd55qE5pyN5YuZ6K6K5aSa5LqG77yM5Zyo566h55CG5LiK5bCx5pyD5b6X6bq754Wp77yM5oiW5piv6Ieo5pmC5om+5LiN5bel56iL5bir5Y276ZyA6KaB5L2/55So5pyN5YuZ5pmC77yM5LiN56K65a6a6Ieq5bex5pyJ5rKS5pyJ5oqK56iL5byP56K86KOd5bCN77yM6YCZ5pmC6YCP6YGOIEd1bXNob2Ug6YCZ5aWX5pyN5YuZ5L6G566h55CG5bCx6Z2e5bi455yB5LqL44CC5a6D6JKQ6ZuG5LqG6Kix5aSa5bi46KaL55qE57ay56uZ5bel5YW377yM5Lim5pW05ZCI5aSa56iu6aGe5Z6L55qE57ay56uZ77yM5Y+q6KaB5a6J6KOd5aW95LiA5qyh5LuW5YCR55qE56iL5byP56K877yM5o6l5LiL5L6G5bCx5Y+v5Lul6YCP6YGO5LuW5YCR55qE5b6M5Y+w6YCy6KGM5bel5YW35a6J6KOd77yM5Lmf5Y+v5Lul5L2/55So5LuW5YCR6ZaL55m855qEIENocm9tZSDngI/opr3lmajlpJbmjpvkvobmiorlkITnqK7nqIvlvI/norzoh6rli5Xlronoo53liLDntrLnq5nkuYvkuK3vvIzlj6/lpKfluYXmuJvlsJHlronoo53mmYLnmoTpmpznpJnku6Xlj4rmlrnkvr/ml6XlvozlpoLopoHlgZznlKjmn5Dkupvlt6XlhbfnmoTni4Dms4HjgII=” pid=”3131”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>網址與 LOGO 一站搞定</title>
    <url>/tw/%E7%B6%B2%E5%9D%80%E8%88%87-logo-%E4%B8%80%E7%AB%99%E6%90%9E%E5%AE%9A/</url>
    <content><![CDATA[<p>  要開始一個新網站最困難的就是網址發想與網站名稱，BrandPa 這個服務就是為了解決這個問題，輸入關鍵字就可以找到適合的網址以及完成度很高的 LOGO 設計，也可以透過產業別來進行搜尋，而且數量不少，費用部份則直接包含網域以及設計費一次買斷。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1422957947811205” display=”yes” title=”57ay5Z2A6IiHIExPR08g5LiA56uZ5pCe5a6a” body=”6KaB6ZaL5aeL5LiA5YCL5paw57ay56uZ5pyA5Zuw6Zuj55qE5bCx5piv57ay5Z2A55m85oOz6IiH57ay56uZ5ZCN56ix77yMQnJhbmRQYSDpgJnlgIvmnI3li5nlsLHmmK/ngrrkuobop6PmsbrpgJnlgIvllY/poYzvvIzovLjlhaXpl5zpjbXlrZflsLHlj6/ku6Xmib7liLDpganlkIjnmoTntrLlnYDku6Xlj4rlrozmiJDluqblvojpq5jnmoQgTE9HTyDoqK3oqIjvvIzkuZ/lj6/ku6XpgI/pgY7nlKLmpa3liKXkvobpgLLooYzmkJzlsIvvvIzogIzkuJTmlbjph4/kuI3lsJHvvIzosrvnlKjpg6jku73liYfnm7TmjqXljIXlkKvntrLln5/ku6Xlj4roqK3oqIjosrvkuIDmrKHosrfmlrfjgII=” pid=”2986”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>網站測速三合一工具</title>
    <url>/tw/%E7%B6%B2%E7%AB%99%E6%B8%AC%E9%80%9F%E4%B8%89%E5%90%88%E4%B8%80%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>  Varvy 這工具除了可以測試 Google 的 Page Speed 外，還可以針對 SEO 與行動裝置做分析，它把測試結果做視覺化的呈現，並且針對每個項目提供具體的修改說明，也同時介紹了許多網站優化的相關知識，可以說是 Page Speed Insight 的加強版。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1416852018421798” display=”yes” title=”57ay56uZ5ris6YCf5LiJ5ZCI5LiA5bel5YW3” body=”VmFydnkg6YCZ5bel5YW36Zmk5LqG5Y+v5Lul5ris6KmmIEdvb2dsZSDnmoQgUGFnZSBTcGVlZCDlpJbvvIzpgoTlj6/ku6Xph53lsI0gU0VPIOiIh+ihjOWLleijnee9ruWBmuWIhuaekO+8jOWug+aKiua4rOippue1kOaenOWBmuimluimuuWMlueahOWRiOePvu+8jOS4puS4lOmHneWwjeavj+WAi+mgheebruaPkOS+m+WFt+mrlOeahOS/ruaUueiqquaYju+8jOS5n+WQjOaZguS7i+e0ueS6huioseWkmue2suermeWEquWMlueahOebuOmXnOefpeitmO+8jOWPr+S7peiqquaYryBQYWdlIFNwZWVkIEluc2lnaHQg55qE5Yqg5by354mI44CC” pid=”2969”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>網頁圖片分析工具</title>
    <url>/tw/%E7%B6%B2%E7%AB%99%E7%9A%84%E8%BC%89%E5%85%A5%E9%80%9F%E5%BA%A6%EF%BC%8C%E9%9D%9E%E5%B8%B8%E5%A4%A7%E4%B8%80%E9%83%A8%E4%BB%BD%E6%98%AF%E7%AB%99%E5%85%A7%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E5%AA%92/</url>
    <content><![CDATA[<p>網站的載入速度，非常大一部份是站內所使用的媒體，尤其是圖片，看過許多網站直接把做成 DM、平面文宣物的高解析度 300 DPI 的圖檔直接上傳網站，這會嚴重拖累網站的載入速度，所以通常我們在提升網站載入速度的評估中，第一件事就是先請站主檢查網站內的圖片是否過大。   今天分享的這個服務就是專門針對網站圖片來進行優化，輸入網址後，它會自動分析出該頁面中所有圖片的載入時間、容量，以及建議每個圖檔要用什麼格式最能有效減少尺寸，讓我們在上傳圖檔前就能先進行優化。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1387324738041193” display=”yes” title=”57ay56uZ55qE6LyJ5YWl6YCf5bqm77yM6Z2e5bi45aSn5LiA6YOo5Lu95piv56uZ5YWn5omA5L2/55So55qE5aqS6auU77yM5bCk5YW25piv5ZyW54mH77yM55yL6YGO6Kix5aSa57ay56uZ55u05o6l5oqK5YGa5oiQIERN44CB5bmz6Z2i5paH5a6j54mp55qE6auY6Kej5p6Q5bqmIDMwMCBEUEkg55qE5ZyW5qqU55u05o6l5LiK5YKz57ay56uZ77yM6YCZ5pyD5Zq06YeN5ouW57Sv57ay56uZ55qE6LyJ5YWl6YCf5bqm77yM5omA5Lul6YCa5bi45oiR5YCR5Zyo5o+Q5Y2H57ay56uZ6LyJ5YWl6YCf5bqm55qE6KmV5Lyw5Lit77yM56ys5LiA5Lu25LqL5bCx5piv5YWI6KuL56uZ5Li75qqi5p+l57ay56uZ5YWn55qE5ZyW54mH5piv5ZCm6YGO5aSn44CC” body=”5LuK5aSp5YiG5Lqr55qE6YCZ5YCL5pyN5YuZ5bCx5piv5bCI6ZaA6Yed5bCN57ay56uZ5ZyW54mH5L6G6YCy6KGM5YSq5YyW77yM6Ly45YWl57ay5Z2A5b6M77yM5a6D5pyD6Ieq5YuV5YiG5p6Q5Ye66Kmy6aCB6Z2i5Lit5omA5pyJ5ZyW54mH55qE6LyJ5YWl5pmC6ZaT44CB5a656YeP77yM5Lul5Y+K5bu66K2w5q+P5YCL5ZyW5qqU6KaB55So5LuA6bq85qC85byP5pyA6IO95pyJ5pWI5rib5bCR5bC65a+477yM6K6T5oiR5YCR5Zyo5LiK5YKz5ZyW5qqU5YmN5bCx6IO95YWI6YCy6KGM5YSq5YyW44CC” pid=”2890”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>網站的門面：網站首頁</title>
    <url>/tw/%E7%B6%B2%E7%AB%99%E7%9A%84%E9%96%80%E9%9D%A2%EF%BC%9A%E7%B6%B2%E7%AB%99%E9%A6%96%E9%A0%81/</url>
    <content><![CDATA[<p>  看標題可能是廢話XD，但事實是許多網站訪客第一步到達的頁面通常會是內頁，從搜尋引擎來的基本上都是有詳細內容的頁面，所以網站首頁就不重要了嗎？在爬蟲發達的年代，首頁扮演著網站導覽的角色，逛完內頁的訪客如果沒離開網站的話，接下來去首頁的機率很高，所以如何利用網站首頁的設計來引導訪客完成商業目標還是非常重要的。   今天分享的網站是專門蒐集「首頁」的網站，可以研究這些漂亮的首頁中，是運用哪些元素來引導訪客，圖像、配色、文案都是值得學習的範例。</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1412380715535595” display=”yes” title=”57ay56uZ55qE6ZaA6Z2i77ya57ay56uZ6aaW6aCB” body=”55yL5qiZ6aGM5Y+v6IO95piv5bui6KmxWETvvIzkvYbkuovlr6bmmK/oqLHlpJrntrLnq5noqKrlrqLnrKzkuIDmraXliLDpgZTnmoTpoIHpnaLpgJrluLjmnIPmmK/lhafpoIHvvIzlvp7mkJzlsIvlvJXmk47kvobnmoTln7rmnKzkuIrpg73mmK/mnInoqbPntLDlhaflrrnnmoTpoIHpnaLvvIzmiYDku6XntrLnq5npppbpoIHlsLHkuI3ph43opoHkuobll47vvJ/lnKjniKzon7LnmbzpgZTnmoTlubTku6PvvIzpppbpoIHmia7mvJTokZfntrLnq5nlsI7opr3nmoTop5LoibLvvIzpgJvlrozlhafpoIHnmoToqKrlrqLlpoLmnpzmspLpm6LplovntrLnq5nnmoToqbHvvIzmjqXkuIvkvobljrvpppbpoIHnmoTmqZ/njoflvojpq5jvvIzmiYDku6XlpoLkvZXliKnnlKjntrLnq5npppbpoIHnmoToqK3oqIjkvoblvJXlsI7oqKrlrqLlrozmiJDllYbmpa3nm67mqJnpgoTmmK/pnZ7luLjph43opoHnmoTjgILku4rlpKnliIbkuqvnmoTntrLnq5nmmK/lsIjploDokpDpm4bjgIzpppbpoIHjgI3nmoTntrLnq5nvvIzlj6/ku6XnoJTnqbbpgJnkupvmvILkuq7nmoTpppbpoIHkuK3vvIzmmK/pgYvnlKjlk6rkupvlhYPntKDkvoblvJXlsI7oqKrlrqLvvIzlnJblg4/jgIHphY3oibLjgIHmlofmoYjpg73mmK/lgLzlvpflrbjnv5LnmoTnr4TkvovjgII=” pid=”2941”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>網頁表單設計注意事項</title>
    <url>/tw/%E7%B6%B2%E9%A0%81%E8%A1%A8%E5%96%AE%E8%A8%AD%E8%A8%88%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85/</url>
    <content><![CDATA[<p>網站要能成功獲得訂單或是客戶資料，從一開始的行銷推廣、著陸頁設計，到產品圖的攝影、文案的設計，好不容易引到用戶到轉換頁，但如果因為設計不良的表單而流失了客戶，前面的心血就完全浪費了，這篇文章整理許多表單設計的要點，雖然標題只有說六個準則，但每一點裡面又延伸更多重點，簡單整理如下，文中有更多的佐證以及為何要這樣的設計的原因。 1、讓 label 放在 input 上面且置左，不要水平排列，會增加視覺移動的距離 2、有相關聯的 input 不要水平排列，可以使用邏輯判斷來顯示，避免表單拖太長 3、input 不要太寬，理想狀態就是跟手機版上面的寬度一樣 4、低於六個以下需要選擇的項目，不要使用 select 用 checkbox 或 radio 讓所有項目可以一次被全部看到 5、所有相關的 input 組織成一份表單，不同類別的組織成另一份表單 6、可以用 tab 鍵切換每一個 input 7、使用 input 遮照，把格式設定好，讓 user 只要填空格就好 8、手機表單可以針對欄位內容需要切換預設輸入鍵盤類型 9、使用邏輯判斷來顯示更多欄位，避免一開始表單拖太長 10、讓正在輸入的 input 有明顯提示 11、在 input 下方說明清楚要求的填寫格式 12、選填或必填用文字說明清楚，避免只用*號 13、輸入密碼欄位時可以選擇顯示或隱藏正在輸入的密碼 14、錯誤訊息在 user 輸入錯的當下就提示，不要等到送出表單時才出現 15、label 的訊息最好一直都在固定位置，placeholder 空白的效果比灰灰的暗示更明確 16、送出表單按鈕可以呼應表單標題或是帶有行動訴求，避免在按鈕附近增加取消或重設按鈕，以及安全驗證的標章來增加用戶的困惑</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1567897553317243” display=”yes” title=”57ay6aCB6KGo5Zau6Kit6KiI5rOo5oSP5LqL6aCF” body=”57ay56uZ6KaB6IO95oiQ5Yqf542y5b6X6KiC5Zau5oiW5piv5a6i5oi26LOH5paZ77yM5b6e5LiA6ZaL5aeL55qE6KGM6Yq35o6o5buj44CB6JGX6Zm46aCB6Kit6KiI77yM5Yiw55Si5ZOB5ZyW55qE5pSd5b2x44CB5paH5qGI55qE6Kit6KiI77yM5aW95LiN5a655piT5byV5Yiw55So5oi25Yiw6L2J5o+b6aCB77yM5L2G5aaC5p6c5Zug54K66Kit6KiI5LiN6Imv55qE6KGo5Zau6ICM5rWB5aSx5LqG5a6i5oi277yM5YmN6Z2i55qE5b+D6KGA5bCx5a6M5YWo5rWq6LK75LqG77yM6YCZ56+H5paH56ug5pW055CG6Kix5aSa6KGo5Zau6Kit6KiI55qE6KaB6bue77yM6ZuW54S25qiZ6aGM5Y+q5pyJ6Kqq5YWt5YCL5rqW5YmH77yM5L2G5q+P5LiA6bue6KOh6Z2i5Y+I5bu25Ly45pu05aSa6YeN6bue77yM57Ch5Zau5pW055CG5aaC5LiL77yM5paH5Lit5pyJ5pu05aSa55qE5L2Q6K2J5Lul5Y+K54K65L2V6KaB6YCZ5qij55qE6Kit6KiI55qE5Y6f5Zug44CCMeOAgeiukyBsYWJlbCDmlL7lnKggaW5wdXQg5LiK6Z2i5LiU572u5bem77yM5LiN6KaB5rC05bmz5o6S5YiX77yM5pyD5aKe5Yqg6KaW6Ka656e75YuV55qE6Led6ZuiMuOAgeacieebuOmXnOiBr+eahCBpbnB1dCDkuI3opoHmsLTlubPmjpLliJfvvIzlj6/ku6Xkvb/nlKjpgo/ovK/liKTmlrfkvobpoa/npLrvvIzpgb/lhY3ooajllq7mi5blpKrplbcz44CBaW5wdXQg5LiN6KaB5aSq5a+s77yM55CG5oOz54uA5oWL5bCx5piv6Lef5omL5qmf54mI5LiK6Z2i55qE5a+s5bqm5LiA5qijNOOAgeS9juaWvOWFreWAi+S7peS4i+mcgOimgemBuOaTh+eahOmgheebru+8jOS4jeimgeS9v+eUqCBzZWxlY3Qg55SoIGNoZWNrYm94IOaIliByYWRpbyDorpPmiYDmnInpoIXnm67lj6/ku6XkuIDmrKHooqvlhajpg6jnnIvliLA144CB5omA5pyJ55u46Zec55qEIGlucHV0IOe1hOe5lOaIkOS4gOS7veihqOWWru+8jOS4jeWQjOmhnuWIpeeahOe1hOe5lOaIkOWPpuS4gOS7veihqOWWrjbjgIHlj6/ku6XnlKggdGFiIOmNteWIh+aPm+avj+S4gOWAiyBpbnB1dDfjgIHkvb/nlKggaW5wdXQg6YGu54Wn77yM5oqK5qC85byP6Kit5a6a5aW977yM6K6TIHVzZXIg5Y+q6KaB5aGr56m65qC85bCx5aW9OOOAgeaJi+apn+ihqOWWruWPr+S7pemHneWwjeashOS9jeWFp+WuuemcgOimgeWIh+aPm+mgkOiorei8uOWFpemNteebpOmhnuWeiznjgIHkvb/nlKjpgo/ovK/liKTmlrfkvobpoa/npLrmm7TlpJrmrITkvY3vvIzpgb/lhY3kuIDplovlp4vooajllq7mi5blpKrplbcxMOOAgeiuk+ato+WcqOi8uOWFpeeahCBpbnB1dCDmnInmmI7poa/mj5DnpLoxMeOAgeWcqCBpbnB1dCDkuIvmlrnoqqrmmI7muIXmpZropoHmsYLnmoTloavlr6vmoLzlvI8xMuOAgemBuOWhq+aIluW/heWhq+eUqOaWh+Wtl+iqquaYjua4healmu+8jOmBv+WFjeWPqueUqCromZ8xM+OAgei8uOWFpeWvhueivOashOS9jeaZguWPr+S7pemBuOaTh+mhr+ekuuaIlumaseiXj+ato+WcqOi8uOWFpeeahOWvhueivDE044CB6Yyv6Kqk6KiK5oGv5ZyoIHVzZXIg6Ly45YWl6Yyv55qE55W25LiL5bCx5o+Q56S677yM5LiN6KaB562J5Yiw6YCB5Ye66KGo5Zau5pmC5omN5Ye654++MTXjgIFsYWJlbCDnmoToqIrmga/mnIDlpb3kuIDnm7Tpg73lnKjlm7rlrprkvY3nva7vvIxwbGFjZWhvbGRlciDnqbrnmb3nmoTmlYjmnpzmr5TngbDngbDnmoTmmpfnpLrmm7TmmI7noroxNuOAgemAgeWHuuihqOWWruaMiemIleWPr+S7peWRvOaHieihqOWWruaomemhjOaIluaYr+W4tuacieihjOWLleiotOaxgu+8jOmBv+WFjeWcqOaMiemIlemZhOi/keWinuWKoOWPlua2iOaIlumHjeioreaMiemIle+8jOS7peWPiuWuieWFqOmpl+itieeahOaomeeroOS+huWinuWKoOeUqOaItueahOWbsOaDkQ==” pid=”3318”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>網頁設計的為與不為</title>
    <url>/tw/%E7%B6%B2%E9%A0%81%E8%A8%AD%E8%A8%88%E7%9A%84%E7%82%BA%E8%88%87%E4%B8%8D%E7%82%BA/</url>
    <content><![CDATA[<p>幾個在介面設計上的原則，摘要整理如下：</p>
<p>1、要提供一致的使用者體驗，即使是在不同的裝置上</p>
<p>2、要設計清楚易瞭的導覽系統</p>
<p>3、要改變已經造訪過連結的顏色</p>
<p>4、要能方便使用者掃視的版面設計</p>
<p>5、要重覆確認是否有失效連結</p>
<p>6、要確保可以點擊的元素看起來可以點擊</p>
<p>7、不要讓訪客等頁面載入等太久</p>
<p>8、不要使用另開視窗</p>
<p>9、不要讓廣告變成內容重點</p>
<p>10、不要改變預設捲軸的操作模式</p>
<p>11、不要自動播放有聲音的影片</p>
<p>12、不要為了好看犧牲使用性</p>
<p>13、不要使用閃爍的圖文內容</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1418561854917481” display=”yes” title=”57ay6aCB6Kit6KiI55qE54K66IiH5LiN54K6” body=”5bm+5YCL5Zyo5LuL6Z2i6Kit6KiI5LiK55qE5Y6f5YmH77yM5pGY6KaB5pW055CG5aaC5LiL77yaMeOAgeimgeaPkOS+m+S4gOiHtOeahOS9v+eUqOiAhemrlOmpl++8jOWNs+S9v+aYr+WcqOS4jeWQjOeahOijnee9ruS4ijLjgIHopoHoqK3oqIjmuIXmpZrmmJPnnq3nmoTlsI7opr3ns7vntbEz44CB6KaB5pS56K6K5bey57aT6YCg6Kiq6YGO6YCj57WQ55qE6aGP6ImyNOOAgeimgeiDveaWueS+v+S9v+eUqOiAheaOg+imlueahOeJiOmdouioreioiDXjgIHopoHph43opobnorroqo3mmK/lkKbmnInlpLHmlYjpgKPntZA244CB6KaB56K65L+d5Y+v5Lul6bue5pOK55qE5YWD57Sg55yL6LW35L6G5Y+v5Lul6bue5pOKN+OAgeS4jeimgeiuk+ioquWuouetiemggemdoui8ieWFpeetieWkquS5hTjjgIHkuI3opoHkvb/nlKjlj6bplovoppbnqpc544CB5LiN6KaB6K6T5buj5ZGK6K6K5oiQ5YWn5a656YeN6bueMTDjgIHkuI3opoHmlLnororpoJDoqK3mjbLou7jnmoTmk43kvZzmqKHlvI8xMeOAgeS4jeimgeiHquWLleaSreaUvuacieiBsumfs+eahOW9seeJhzEy44CB5LiN6KaB54K65LqG5aW955yL54qn54my5L2/55So5oCnMTPjgIHkuI3opoHkvb/nlKjploPniI3nmoTlnJbmloflhaflrrk=” pid=”2979”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>線上保單借款申請網站</title>
    <url>/tw/%E7%B7%9A%E4%B8%8A%E4%BF%9D%E5%96%AE%E5%80%9F%E6%AC%BE%E7%94%B3%E8%AB%8B%E7%B6%B2%E7%AB%99/</url>
    <content><![CDATA[<ul>
<li>  日期：2010/10/15</li>
<li>  用途：提供線上辦理保單借款作業</li>
<li>  參與：系統操作流程規劃、視覺風格設計、介面設計、div/css</li>
<li>  說明：為方便用戶使用保單借款作業，製作線上借款專區進行借款操作。主要的設計重點在於流程的規劃，以及與程式設計溝通說明需求單位之想法，將其化作為圖像ddddd，並將操作介面視覺化，降低使用上之困難度，增加線上借款之可用性。</li>
</ul>
<p>網站首頁 <img src="https://oberonlai.blog/wp-content/uploads/2010/11/01.jpg" alt="網站首頁"> 登入頁面 <img src="https://oberonlai.blog/wp-content/uploads/2010/11/02.jpg" alt="登入頁面"> 密碼變更 <img src="https://oberonlai.blog/wp-content/uploads/2010/11/032.jpg" alt="密碼變更"> 完成交易 <img src="https://oberonlai.blog/wp-content/uploads/2010/11/041.jpg" alt="完成交易"> 借款流程 <img src="https://oberonlai.blog/wp-content/uploads/2010/11/05.jpg" alt="借款流程"></p>
]]></content>
      <categories>
        <category>使用者介面</category>
      </categories>
  </entry>
  <entry>
    <title>線上合約管理服務</title>
    <url>/tw/%E7%B7%9A%E4%B8%8A%E5%90%88%E7%B4%84%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8B%99/</url>
    <content><![CDATA[<p>  有在接案的朋友可能都有這樣的困擾：同時處理多件案子時的合約處理進度、結案、請款時程、預估收入、現金流、客戶名單等等一堆煩人的雜項，剛好 Trackdo 這套服務可以把這些瑣事都整合在一個平台，它包含合約期間的行事曆、款項支出收入的報表、建立合約檔案、管理客戶名單等等，應該還滿適合 SOHO 族使用～</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1466811380092528” display=”yes” title=”57ea5LiK5ZCI57SE566h55CG5pyN5YuZ” body=”5pyJ5Zyo5o6l5qGI55qE5pyL5Y+L5Y+v6IO96YO95pyJ6YCZ5qij55qE5Zuw5pO+77ya5ZCM5pmC6JmV55CG5aSa5Lu25qGI5a2Q5pmC55qE5ZCI57SE6JmV55CG6YCy5bqm44CB57WQ5qGI44CB6KuL5qy+5pmC56iL44CB6aCQ5Lyw5pS25YWl44CB54++6YeR5rWB44CB5a6i5oi25ZCN5Zau562J562J5LiA5aCG54Wp5Lq655qE6Zuc6aCF77yM5Ymb5aW9IFRyYWNrZG8g6YCZ5aWX5pyN5YuZ5Y+v5Lul5oqK6YCZ5Lqb55Gj5LqL6YO95pW05ZCI5Zyo5LiA5YCL5bmz5Y+w77yM5a6D5YyF5ZCr5ZCI57SE5pyf6ZaT55qE6KGM5LqL5puG44CB5qy+6aCF5pSv5Ye65pS25YWl55qE5aCx6KGo44CB5bu656uL5ZCI57SE5qqU5qGI44CB566h55CG5a6i5oi25ZCN5Zau562J562J77yM5oeJ6Kmy6YKE5ru/6YGp5ZCIIFNPSE8g5peP5L2/55So772e” pid=”3093”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>線上年表產生器</title>
    <url>/tw/%E7%B7%9A%E4%B8%8A%E5%B9%B4%E8%A1%A8%E7%94%A2%E7%94%9F%E5%99%A8/</url>
    <content><![CDATA[<p>製作公司網站時，如果是擁有歷史的企業常常喜歡做一些「公司年表」或是「大事紀」之類的說明，雖然可能只有老闆會喜歡看，但為了能完成任務還是要想辦法生出來，這套 online timeline maker 可以很方便產出類似的圖表，除了文字的內容外，還能加入圖片、影片、圖表，另外還整合了 Google 文件，可以很快速的插入現有的事件與年份，最重要的是可以直接用 iframe 嵌進網站，或是輸出成圖片，而且是免費的佛心服務！</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1429254277181572” display=”yes” title=”57ea5LiK5bm06KGo55Si55Sf5Zmo” body=”6KO95L2c5YWs5Y+457ay56uZ5pmC77yM5aaC5p6c5piv5pOB5pyJ5q235Y+y55qE5LyB5qWt5bi45bi45Zac5q2h5YGa5LiA5Lqb44CM5YWs5Y+45bm06KGo44CN5oiW5piv44CM5aSn5LqL57SA44CN5LmL6aGe55qE6Kqq5piO77yM6ZuW54S25Y+v6IO95Y+q5pyJ6ICB6ZeG5pyD5Zac5q2h55yL77yM5L2G54K65LqG6IO95a6M5oiQ5Lu75YuZ6YKE5piv6KaB5oOz6L6m5rOV55Sf5Ye65L6G77yM6YCZ5aWXIG9ubGluZSB0aW1lbGluZSBtYWtlciDlj6/ku6Xlvojmlrnkvr/nlKLlh7rpoZ7kvLznmoTlnJbooajvvIzpmaTkuobmloflrZfnmoTlhaflrrnlpJbvvIzpgoTog73liqDlhaXlnJbniYfjgIHlvbHniYfjgIHlnJbooajvvIzlj6blpJbpgoTmlbTlkIjkuoYgR29vZ2xlIOaWh+S7tu+8jOWPr+S7peW+iOW/q+mAn+eahOaPkuWFpeePvuacieeahOS6i+S7tuiIh+W5tOS7ve+8jOacgOmHjeimgeeahOaYr+WPr+S7peebtOaOpeeUqCBpZnJhbWUg5bWM6YCy57ay56uZ77yM5oiW5piv6Ly45Ye65oiQ5ZyW54mH77yM6ICM5LiU5piv5YWN6LK755qE5L2b5b+D5pyN5YuZ77yB” pid=”3009”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>老闆，我要一碗介面</title>
    <url>/tw/%E8%80%81%E9%97%86%EF%BC%8C%E6%88%91%E8%A6%81%E4%B8%80%E7%A2%97%E4%BB%8B%E9%9D%A2/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2011/09/ordersystem.jpg" alt="訂便當系統介面" title="ordersystem"> 實在是很不想讓這麼醜的東西出現在這邊 公司為了方便員工中午不用去買便當，請資訊部開發了一套線上訂便當系統，流程設計的很簡單易用，只要點五個步驟就可以順利完成訂購，雖然有很多介面的細節可以改善，但依照”系統正確性”而言，這套系統是一百分，能夠使用，而這樣僅供內部使用的系統，介面設計的價值何在? 介面設計包含了許多層面，在這邊我只想提美觀的部份，介面的美化不僅是能夠以更有效率的方式來完成任務，更重要的是能讓人看起來更愉悅，愉悅這檔事，在企業之中很難被量化，無法被量化的事物，在企業中的價值低落，諷刺的是，這是老闆常畫的願景，更好的職場、更好的薪水、更好的升遷管道，還不都是為了能讓員工工作愉悅，提高生產效能。 但為了要完成這件事，絕對比口頭說說要麻煩數倍，而且常常總是會被擺在企業利益之後，從這套訂便當系統中顯而易見。 很多事情事實上沒這麼困難，重點只在於有沒有那份心意：沒有備註欄位做客製化需求、無法加點附屬餐飲、未達訂購門檻負責同事要自行前往取餐…，系統功能能夠正常運作是60分，能夠把人心也coding進去，才是一套真正的服務，人要的是有溫度的服務而不是冷冰冰的系統，也因為這樣，我再也不想用這機器人訂便當了。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>行銷電子報優化策略</title>
    <url>/tw/%E8%A1%8C%E9%8A%B7%E9%9B%BB%E5%AD%90%E5%A0%B1%E5%84%AA%E5%8C%96%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<p>  在以前的專案經驗中，常常發現電子報的設計是最容易被忽略的一環，尤其是當網站改版花了三個月之後，在最後的階段才會想到電子郵件的設計，不管是會員通知信、啟用信、完成購買、或是需要行銷的電子報，往往缺少與網站整體的一致性，而這個最低成本的曝光方式實在是非常值得好好花時間去下功夫研究深入一番。   今天分享的這篇在說明當代電子報的設計趨勢，怎麼設計才能有效提高電子報轉換率，主要重點摘要如下：   一、加入有特色引且吸引人的背景 二、運用有特色的字型當作標題 三、使用 Emoji 表情符號或 icon 四、類似像 win10 tile 的方塊排版 五、把影片用 GIF 摘錄的方式加入 六、強調希望用戶點擊的按鈕 七、讓產品看起來有質感 八、創造霓紅燈符號(台灣應該就是廣告招牌吧XD) 九、做成像 Instagram 的排版 十、讓標題與內文可以並排   文內還有整理許多參考範例，分享給正在燒腦如何提高電子報轉換率的朋友:D</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1391430484297285” display=”yes” title=”6KGM6Yq36Zu75a2Q5aCx5YSq5YyW562W55Wl” body=”5Zyo5Lul5YmN55qE5bCI5qGI57aT6amX5Lit77yM5bi45bi455m854++6Zu75a2Q5aCx55qE6Kit6KiI5piv5pyA5a655piT6KKr5b+955Wl55qE5LiA55Kw77yM5bCk5YW25piv55W257ay56uZ5pS554mI6Iqx5LqG5LiJ5YCL5pyI5LmL5b6M77yM5Zyo5pyA5b6M55qE6ZqO5q615omN5pyD5oOz5Yiw6Zu75a2Q6YO15Lu255qE6Kit6KiI77yM5LiN566h5piv5pyD5ZOh6YCa55+l5L+h44CB5ZWf55So5L+h44CB5a6M5oiQ6LO86LK344CB5oiW5piv6ZyA6KaB6KGM6Yq355qE6Zu75a2Q5aCx77yM5b6A5b6A57y65bCR6IiH57ay56uZ5pW06auU55qE5LiA6Ie05oCn77yM6ICM6YCZ5YCL5pyA5L2O5oiQ5pys55qE5pud5YWJ5pa55byP5a+m5Zyo5piv6Z2e5bi45YC85b6X5aW95aW96Iqx5pmC6ZaT5Y675LiL5Yqf5aSr56CU56m25rex5YWl5LiA55Wq44CC5LuK5aSp5YiG5Lqr55qE6YCZ56+H5Zyo6Kqq5piO55W25Luj6Zu75a2Q5aCx55qE6Kit6KiI6Lao5Yui77yM5oCO6bq86Kit6KiI5omN6IO95pyJ5pWI5o+Q6auY6Zu75a2Q5aCx6L2J5o+b546H77yM5Li76KaB6YeN6bue5pGY6KaB5aaC5LiL77ya5LiA44CB5Yqg5YWl5pyJ54m56Imy5byV5LiU5ZC45byV5Lq655qE6IOM5pmv5LqM44CB6YGL55So5pyJ54m56Imy55qE5a2X5Z6L55W25L2c5qiZ6aGM5LiJ44CB5L2/55SoIEVtb2ppIOihqOaDheespuiZn+aIliBpY29u5Zub44CB6aGe5Ly85YOPIHdpbjEwICB0aWxlIOeahOaWueWhiuaOkueJiOS6lOOAgeaKiuW9seeJh+eUqCBHSUYg5pGY6YyE55qE5pa55byP5Yqg5YWl5YWt44CB5by36Kq/5biM5pyb55So5oi26bue5pOK55qE5oyJ6YiV5LiD44CB6K6T55Si5ZOB55yL6LW35L6G5pyJ6LOq5oSf5YWr44CB5Ym16YCg6ZyT57SF54eI56ym6JmfKOWPsOeBo+aHieipsuWwseaYr+W7o+WRiuaLm+eJjOWQp1hEKeS5neOAgeWBmuaIkOWDjyBJbnN0YWdyYW0g55qE5o6S54mI5Y2B44CB6K6T5qiZ6aGM6IiH5YWn5paH5Y+v5Lul5Lim5o6S5paH5YWn6YKE5pyJ5pW055CG6Kix5aSa5Y+D6ICD56+E5L6L77yM5YiG5Lqr57Wm5q2j5Zyo54eS6IWm5aaC5L2V5o+Q6auY6Zu75a2Q5aCx6L2J5o+b546H55qE5pyL5Y+LOkQ=” pid=”2914”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>製作影像連結</title>
    <url>/tw/%E8%A3%BD%E4%BD%9C%E5%BD%B1%E5%83%8F%E9%80%A3%E7%B5%90/</url>
    <content><![CDATA[<p>  有時候常會需要針對圖片的部份內容進行說明，以往的做法就是單純使用文字敘述，或是在圖片中標註記號來表示目前的文字是在說明圖片中的哪個部份。Pictogon 這套線上服務可以讓你在圖片中「畫」出感應區塊，而當使用者的滑鼠停留在這區塊上時，可以顯示相對應的說明或是點擊後開啟連結，在做產品介紹或是樓層簡介時非常實用！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1466084733498526” display=”yes” title=”6KO95L2c5b2x5YOP6YCj57WQ” body=”5pyJ5pmC5YCZ5bi45pyD6ZyA6KaB6Yed5bCN5ZyW54mH55qE6YOo5Lu95YWn5a656YCy6KGM6Kqq5piO77yM5Lul5b6A55qE5YGa5rOV5bCx5piv5Zau57SU5L2/55So5paH5a2X5pWY6L+w77yM5oiW5piv5Zyo5ZyW54mH5Lit5qiZ6Ki76KiY6Jmf5L6G6KGo56S655uu5YmN55qE5paH5a2X5piv5Zyo6Kqq5piO5ZyW54mH5Lit55qE5ZOq5YCL6YOo5Lu944CCUGljdG9nb24g6YCZ5aWX57ea5LiK5pyN5YuZ5Y+v5Lul6K6T5L2g5Zyo5ZyW54mH5Lit44CM55Wr44CN5Ye65oSf5oeJ5Y2A5aGK77yM6ICM55W25L2/55So6ICF55qE5ruR6byg5YGc55WZ5Zyo6YCZ5Y2A5aGK5LiK5pmC77yM5Y+v5Lul6aGv56S655u45bCN5oeJ55qE6Kqq5piO5oiW5piv6bue5pOK5b6M6ZaL5ZWf6YCj57WQ77yM5Zyo5YGa55Si5ZOB5LuL57S55oiW5piv5qiT5bGk57Ch5LuL5pmC6Z2e5bi45a+m55So77yB” pid=”3090”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>親愛的，我把小圖變大了！</title>
    <url>/tw/%E8%A6%AA%E6%84%9B%E7%9A%84%EF%BC%8C%E6%88%91%E6%8A%8A%E5%B0%8F%E5%9C%96%E8%AE%8A%E5%A4%A7%E4%BA%86%EF%BC%81/</url>
    <content><![CDATA[<p>  以前總以為圖片只有可能縮小不可能放大，但今天看到這套工具嚇死人了，它利用機器學習領域中的類神經網路技術，去分析原本小圖的構造，再用演算法去模擬出不足的像素變成四倍的大圖，只要把圖片上傳，它就會自動完成這一切看似不可思議的動作，它提供兩種演算結果下載，實際測試結果真的滿驚人的，直覺想到的應用場景就是接案時客戶給了小到不行的 LOGO.jpg 檔卻要放在海報上XDD</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1490703071036692” display=”yes” title=”6Kaq5oSb55qE77yM5oiR5oqK5bCP5ZyW6K6K5aSn5LqG77yB” body=”5Lul5YmN57i95Lul54K65ZyW54mH5Y+q5pyJ5Y+v6IO957iu5bCP5LiN5Y+v6IO95pS+5aSn77yM5L2G5LuK5aSp55yL5Yiw6YCZ5aWX5bel5YW35ZqH5q275Lq65LqG77yM5a6D5Yip55So5qmf5Zmo5a2457+S6aCY5Z+f5Lit55qE6aGe56We57aT57ay6Lev5oqA6KGT77yM5Y675YiG5p6Q5Y6f5pys5bCP5ZyW55qE5qeL6YCg77yM5YaN55So5ryU566X5rOV5Y675qih5pOs5Ye65LiN6Laz55qE5YOP57Sg6K6K5oiQ5Zub5YCN55qE5aSn5ZyW77yM5Y+q6KaB5oqK5ZyW54mH5LiK5YKz77yM5a6D5bCx5pyD6Ieq5YuV5a6M5oiQ6YCZ5LiA5YiH55yL5Ly85LiN5Y+v5oCd6K2w55qE5YuV5L2c77yM5a6D5o+Q5L6b5YWp56iu5ryU566X57WQ5p6c5LiL6LyJ77yM5a+m6Zqb5ris6Kmm57WQ5p6c55yf55qE5ru/6ama5Lq655qE77yM55u06Ka65oOz5Yiw55qE5oeJ55So5aC05pmv5bCx5piv5o6l5qGI5pmC5a6i5oi257Wm5LqG5bCP5Yiw5LiN6KGM55qEIExPR08uanBnIOaqlOWNu+imgeaUvuWcqOa1t+WgseS4ilhERA==” pid=”3142”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>親愛的～我把 iPhone 變一頁了！</title>
    <url>/tw/%E8%A6%AA%E6%84%9B%E7%9A%84%EF%BD%9E%E6%88%91%E6%8A%8A-iphone-%E8%AE%8A%E6%88%90%E4%B8%80%E9%A0%81%E4%BA%86%EF%BC%81/</url>
    <content><![CDATA[<p>很難想像一個月前的我，從客廳走到廁所去刷牙需要花十分鐘的時間，不是我家有三百坪，而是因為途中邊走邊回 Line，擠牙膏前還要再打一下，邊刷時還不停的查看對方有沒有回，現在想想覺得自己是有事嗎？</p>
<p>我想上面的場景可能大家都不陌生，當準備要做什麼事時，就因為手機拿了起來，中斷了原本要做的事，然後開始站在原地一動也不動，開始打字或是瀏覽網頁。</p>
<p>如果走在馬路上，這樣的狀況更是屢見不鮮，走到一半前面的人突然停下來開始回訊息；都變綠燈了前面的車子還不走；上了車鑰匙都插了車門卻沒關，一腳還放在外面在滑手機，更不用說遠遠的就看到迎面而來的路人，邊看手機邊朝自己走過來，等到快撞上時才驚覺前面有人…</p>
<span id="more"></span>

<p>如果已經有意識到這些狀況嚴重性的朋友，大推這本「<a href="https://www.justgirl.me/2020/03/blog-post_11.html">深度數位大掃除</a>」，我老婆非常清楚整理了書中重點，趕時間的朋友可以看她的文章就好，而我自己則是照著書中的建議，徹底實施了「<a href="https://oberonlai.blog/%E6%95%B8%E4%BD%8D%E6%96%B7%E6%8D%A8%E9%9B%A2/">數位斷捨離三十天</a>」，也就是完全捨棄非必要的科技，尤其是智慧型手機，真的把手機只當純「電話」來使用。</p>
<p>今天是完成斷捨離一個月後的日子，很高興自己有辦法達成這樣的成就，而且到後來就漸漸習慣不用這些科技，甚至因為要紀錄這件事，還讓我養成日更部落格的習慣，算是意外的收穫，所以這篇文章我想紀錄接下來我會如何運用這些科技，以及如何擺脫被這些科技控制的生活。</p>
<h2 id="我怎麼使用智慧型手機？"><a href="#我怎麼使用智慧型手機？" class="headerlink" title="我怎麼使用智慧型手機？"></a>我怎麼使用智慧型手機？</h2><p>很簡單，當純手機用就好，不要把它當成電腦，賈伯斯不讓他的小孩用 iPad 是有道理的。我移掉了 Line、Messenger 這些讓我從客廳走到廁所要花十分鐘的 App，Facebook、Instagram 也是絕對不能留，社群軟體有數不清的方法來刺激你點開它。</p>
<p>很多可以使用瀏覽器造訪的服務也不用裝，跟工作相關的 App 也全數移掉，因為生產力工具應該是電腦，而不是手機，手機裝了可以工作的 App，就暗示著自己隨時都是處於可以工作的狀態，這是造成數位焦慮的主要原因。</p>
<p>最後努力的結果剩下這些東西：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/IMG_0FF4939D931E-1.jpeg"></p>
<p>我留下了跟出遊有關的工具，以及數位銀行與記帳軟體，另外還有手環的 App，不得不提 Whoscall，想都不用想就保留下來，能過濾電話不僅省下時間，還可以大幅降低心理的焦慮感，以前看到沒看過的來電都會想說是不是客戶的電話而急著要回，現在就用 Whoscall 當第一關，萬一過濾不出來，陌生電話響兩通以上我才會接。</p>
<p>其他移不掉的內建 App 像是 Find My 就沒招了，<a href="https://mrmad.com.tw/iphone-hidden-app-icon-tips">找到一些方法</a>可以把 Wallet、 Watch 這些 App 隱藏，唯獨 Fine My 沒法，有任何方法還請大大告知！</p>
<p>所以之後手機我只會用它來接電話、導航、聽 Podcasts、跟管理個人帳務，以及最重要的：刷牙時拿來當手電筒照明XD，其他任何事情都只會在電腦上面做，要再告訴自己一次：「手機不是電腦，手機就是手機」。</p>
<h2 id="新聞資訊的取得"><a href="#新聞資訊的取得" class="headerlink" title="新聞資訊的取得"></a>新聞資訊的取得</h2><p>以前習慣用 Feedly 來看自己訂閱的 RSS，但裡面已經一堆東西，懶得花時間整理了，直接使用別人已經整理好的新聞服務就好：</p>
<h3 id="國外新聞"><a href="#國外新聞" class="headerlink" title="國外新聞"></a>國外新聞</h3><p>Podcasts 上面最多的節目就是一週世界大事，已經有在聽的是<a href="https://podcasts.apple.com/tw/podcast/%E7%99%BE%E9%9D%88%E6%9E%9Cnews/id1106847606">百靈</a><a href="https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=13&cad=rja&uact=8&ved=2ahUKEwj6ztXeg5ToAhWPwosBHbxkBG4QFjAMegQIAhAB&url=https://podcasts.apple.com/tw/podcast/%25E7%2599%25BE%25E9%259D%2588%25E6%259E%259Cnews/id1106847606&usg=AOvVaw0x01238erTSl2rosbVPam8">果</a>，雖然他們常在講幹話但就是不知不覺的會聽下去XD，科技新聞唯一閱讀<a href="https://daodu.tech/">科技島讀</a>，他們也有 Podcasts，看 Michael 濃縮整理分析近期的科技大事比看其他只會從對岸簡轉繁然後複製貼上的科技媒體網站，來得更深入且發人省思，也因為是付費訂閱，文章品質是有目共睹。</p>
<p>我現在會在週末的時間將累積的文章與 Podcasts 消化一下，一個禮拜更新一次這些新聞我覺得就足夠了，反正有什麼重大新聞，約朋友吃吃飯聊聊天也是可以得到很多資訊，不需要每天都追。</p>
<h3 id="國內新聞"><a href="#國內新聞" class="headerlink" title="國內新聞"></a>國內新聞</h3><p>每早寫文章的時候老婆就會在旁邊即時報導疫情的最新狀況、哪個國家又增加了多少人、台灣又新增哪些案例、中國又怎麼欺負我們…</p>
<p>之前週末的時候會去買報紙來看，但看完一整個肩頸不舒服，應該是拿報紙的姿勢有誤，而造成肩頸僵硬，所以後來就還是放棄看報紙，而且報紙的聳動標題、一堆廣告、滿到一個不行的資訊量，看完一點都沒有充實的感覺，只有累到不行的虛脫感。</p>
<h2 id="專業資訊的取得"><a href="#專業資訊的取得" class="headerlink" title="專業資訊的取得"></a>專業資訊的取得</h2><p>以前每天要花一個小時間的收信，大部分都是我訂閱的國外電子報，關於前端開發、WordPress，或是這禮拜全世界又有什麼新的工具或服務上線，每天追這些東西有時候會覺得很興奮，尤其是發現新的工具或是學到新的技術，但大部分時間都是掃描完之後然後進垃圾桶。</p>
<p>很難想像自己以前要花這麼多時間看電子報，某種程度上來說應該是「<a href="https://www.justgirl.me/2020/03/blog-post.html">冒牌者症候群</a>」在作祟，知道最新的工具與開發技術，在跟人聊天時好像很潮，覺得自己走在產業的尖端，但只是「知道」這個動作，事實上是很淺薄的，沒有仔細去研究、實作、消化、吸收、甚至是產出，都只是茶餘飯後的八卦話題而已。</p>
<p>所以退訂了這一大堆讓我點取消訂閱點到手軟的電子報，反而有辦法把原本收信的時間改為寫文章產出自己的想法，這樣做的成就感遠比被動接受資訊來得充實的多。</p>
<p>至於取得專業資訊的管道，就不得不推今年過年時候買的電子書閱讀器。</p>
<p>在斷捨離的這段期間，我學會了怎麼把線上文件做成電子書的格式放到閱讀器裡面，因為不想在下班時繼續看螢幕，閱讀器是再適合也不過的工具，它比 iPad 好上八萬倍，因為不會有一堆五顏六色的 App 影響你想要唸書的心情，它沒有其他功能，就是「只能看書」。</p>
<p>至於從書中取得專業知識的作法，在許久以前與一位面試的主管聊到，他很訝異我還去書局找電腦書來看，網路這一行的技術每天都在變，當書寫完出版後，書中提及的技術早就都不知道改了幾版了，追蹤網路上大神的 Twitter、FB，才是有辦法學會最新的技術與知識。</p>
<p>我當時覺得很有道理，但現在覺得這只會增加資訊焦慮。</p>
<p>書的特性是它的完整度，可以針對一件事情講得很透徹，而且每本書都是作者花了好幾年的時間所研究、撰寫出來的，特別是技術文章，網路上一篇半小時可以看完的文章，在他背後都累積了不知道多少年的經驗與功力，但為了要控制網路文章的篇幅，很多東西可能只能點到為止。</p>
<p>另外文章內的超連結也是很容易造成閱讀分心的因素，因為無法在一篇文章內講完所有事，所以就只能用外連來處理，我常常就會看文章看到一半點出去，然後點出去的文章又有一堆外連，點到後來都忘記自己原本到底在看什麼。</p>
<p>網路的即時性是無庸置疑地，但要能決定這門技術該不該學、為什麼要學、為什麼要採用它，這些都是必須經過自己深思熟慮過的產出，而閱讀書籍可以加深並且放慢這樣的思考過程，可以避免被新技術牽著鼻子走，進而找到自己的學習步調。</p>
<p>接下來我會採取邊閱讀邊紀錄的作法，把書中的內容消化吸收，每晚一小時的專注閱讀，在每早上班前半小時來做紀錄與產出，至於工作上遇到的問題多半都是當下去 Google，對自己有幫助的內容自然就會出現。這樣做可以讓自己不用每天追一堆永遠追不完的資訊，從資訊焦慮的束縛中解放出來。</p>
<h2 id="與社群的關係"><a href="#與社群的關係" class="headerlink" title="與社群的關係"></a>與社群的關係</h2><p>我已經限制自己每天只能在晚上六點～七點使用 Line、Messenger，其他有要事聯絡則透過 Email 或是電話聯繫，想聊天打屁就約出來吃火鍋，對於 Facebook 也已經很習慣不再去查看右上角到底有多少未讀通知。</p>
<p>至於自己很在意的線上社群，我會努力想辦法盡量透過實體聚會交流，線上的部分就是分享自己的心得或是技術文章，希望把自己所學的東西可以回饋給這個社群，畢竟受人幫助太多，自己能回饋的太少，只能盡力去做自己覺得應該做的事。</p>
<p>而自己也終於可以放下按讚數、留言數，願意看而且看得懂的朋友真心為他高興，算是多做了一件功德，看不懂的也希望可以埋下種子，未來有朝一日一定會發芽茁壯，重點是不要再讓自己再被 Facebook 所精心設計的心理機制給控制，這些都是注意力企業，靠著抓住我們的注意力來賺取收入，甚至是成為有心人士的與論操作工具。</p>
<h2 id="成就盤點"><a href="#成就盤點" class="headerlink" title="成就盤點"></a>成就盤點</h2><p>最後整理一下自己在斷捨離三十天做了哪些事：</p>
<ul>
<li>  跟排隊買口罩的大媽們聊天打屁交換情報</li>
<li>  星期一～五每天運動三十分鐘</li>
<li>  學會修紗窗</li>
<li>  學會書桌貼皮</li>
<li>  複習怎麼煮咖哩飯</li>
<li>  打造了自己的設計系統</li>
<li>  完成了一個專案</li>
<li>  看了三本英文書</li>
<li>  看了三本中文書</li>
<li>  每天都更新文章</li>
</ul>
<p>不得不說自己好屌XD，從來不曉得自己一個月可以做這麼多事，但還是要謝謝在這段期間願意容忍我突然說什麼要斷捨離而改變聯繫方式的親朋好友們，沒有你們的支持我沒辦法完成這件事！數位斷捨離真的很簡單，大家也可以試試看，下次見～</p>
]]></content>
      <categories>
        <category>老人碎念</category>
      </categories>
  </entry>
  <entry>
    <title>讓你的網站也有跟 FB 貼文一樣的表情符號回饋</title>
    <url>/tw/%E8%AE%93%E4%BD%A0%E7%9A%84%E7%B6%B2%E7%AB%99%E4%B9%9F%E6%9C%89%E8%B7%9F-fb-%E8%B2%BC%E6%96%87%E4%B8%80%E6%A8%A3%E7%9A%84%E8%A1%A8%E6%83%85%E7%AC%A6%E8%99%9F%E5%9B%9E%E9%A5%8B/</url>
    <content><![CDATA[<p>從去年開始，FB 貼文除了可以點「讚」，還可以選擇其它四種心情，也有越來越多的粉絲團利用這功能舉辦活動，但 Facebook 提供嵌入到網站的 Like 小工具，還是只能點讚，如果你希望也有其它表情符號可以點的話可以參考 Emojics 這個服務，簡單來說它就是提供一種回饋機制，讓網站本身除了「讚」以外還有其它心情可以選擇，這服務還提供後台數據可以進行分析，只是目前並無與 Facebook 數據連動。</p>
<span id="more"></span>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1587186854721646” display=”yes” title=”6K6T5L2g55qE57ay56uZ5Lmf5pyJ6LefIEZCIOiyvOaWh+S4gOaoo+eahOihqOaDheespuiZn+Wbnumliw==” body=”5b6e5Y675bm06ZaL5aeL77yMRkIg6LK85paH6Zmk5LqG5Y+v5Lul6bue44CM6K6a44CN77yM6YKE5Y+v5Lul6YG45pOH5YW25a6D5Zub56iu5b+D5oOF77yM5Lmf5pyJ6LaK5L6G6LaK5aSa55qE57KJ57Wy5ZyY5Yip55So6YCZ5Yqf6IO96IiJ6L6m5rS75YuV77yM5L2GIEZhY2Vib29rIOaPkOS+m+W1jOWFpeWIsOe2suermeeahCBMaWtlIOWwj+W3peWFt++8jOmChOaYr+WPquiDvem7nuiumu+8jOWmguaenOS9oOW4jOacm+S5n+acieWFtuWug+ihqOaDheespuiZn+WPr+S7pem7nueahOipseWPr+S7peWPg+iAgyBFbW9qaWNzIOmAmeWAi+acjeWLme+8jOewoeWWruS+huiqquWug+WwseaYr+aPkOS+m+S4gOeoruWbnumli+apn+WItu+8jOiuk+e2suermeacrOi6q+mZpOS6huOAjOiumuOAjeS7peWklumChOacieWFtuWug+W/g+aDheWPr+S7pemBuOaTh++8jOmAmeacjeWLmemChOaPkOS+m+W+jOWPsOaVuOaTmuWPr+S7pemAsuihjOWIhuaekO+8jOWPquaYr+ebruWJjeS4pueEoeiIhyBGYWNlYm9vayDmlbjmk5rpgKPli5XjgII=” pid=”3349”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>【 書摘 】資訊圖表設計術</title>
    <url>/tw/%E8%B3%87%E8%A8%8A%E5%9C%96%E8%A1%A8%E8%A8%AD%E8%A8%88%E8%A1%93/</url>
    <content><![CDATA[<p><a href="https://www.books.com.tw/products/0010761309">https://www.books.com.tw/products/0010761309</a></p>
<p>久聞 Re-lab 團隊的大作，此書分享了他們的成功案例以及實作流程，書中對於資訊架構的介紹以及使用者研究的經驗，在軟體開發的領域亦非常受用，印象最深刻的是他們說明如何透過實驗來找到正確的溝通對象。案例是環境資訊協會想要推廣減少一次性使用物品為推廣目標，該協會想要推廣給平常不會特別關注環保議題的非同溫層族群，因此請來 Re-lab 來協助此次專案。</p>
<p>在溝通對象不明確的情況下，他們採取了以下三個步驟：</p>
<p>1.假設溝通群眾：</p>
<p>首先取得正確的命題：誰有動機減少一次性物品的使用？然後使用心智圖來進行發想，從關鍵字來進一步聯想可能的族群，ex: 一次性物品的使用缺點 &gt; 很醜 &gt; 沒有品味 &gt; 注重生活品質的人</p>
<p>2.具體描述溝通群眾的樣貌：</p>
<p>把假設的溝通族群，開始進行分類，根據他們的年紀、關心的議題、身份來進行描述。</p>
<p>3.在社群上快速測試以得出結論：</p>
<p>根據上述的溝通族群設計相對應的文案與圖像，並且設計問卷來了解假受測族群的想法，然後去 FB 上買廣告，根據假設對象來下關鍵字，再從貼文的觸及人數、按讚數、分享數、留言數以及問卷回收率與內容來評估哪個族群對該議題最在意。</p>
<p>過往在面對客戶的案件需求時，客戶總會希望這個網站可以給越多人看越好，不管男女老少都是他們想要吸引的對象，站在客戶的立場這是很正常的事情，但現在成熟的產業為了發展出更多的營收，會去垂直細分各種不同族群的需求，進而開發相對應的產品，因此如果沒有對溝通對象有一定程度的了解，很難吸引他們的注意力。</p>
<p>再加上每天都有爆炸多的資訊要獲得使用者的注意力，沒有策略的溝通方式難度會是異常的高，除非像是病毒行銷常用的手法，足以引起大眾的好奇心進而造成瘋傳，這背後也是一連串縝密的策劃的。</p>
<p>以下就其他各章節進行摘錄：</p>
<p>資訊圖表的原理與概念</p>
<p>改變資訊的揭露方式就可以讓系統自我調節，進而改善整個系統的問題。</p>
<p>Has Rosling 瑞典數據大師</p>
<p>吸引讀者的方法</p>
<ol>
<li> 提出他們可能關心的問題</li>
<li> 明確點出讀者沒有意識到的認知落差</li>
<li> 一開始就讓讀者知道我們要傳達的資訊跟他有什麼關</li>
<li> 讓讀者覺得有收穫才能獲得轉分享</li>
</ol>
<p>吸引法則</p>
<ol>
<li> 記憶點：一次一個重點</li>
<li> 資訊層次：安排資訊的層級、結構</li>
<li> 視覺動線：上到下、左到右，要違反這規則需要有明確的視覺引導</li>
<li> 設計方法：封閉性、相似性、相鄰性、連續性</li>
<li> 顏色運用：根據傳達資訊屬性選擇顏色</li>
<li> 互動性：透過文案進行引導</li>
</ol>
<p>資訊圖相關資源：</p>
<p><a href="https://www.facebook.com/Info2Act">https://www.facebook.com/Info2Act</a></p>
<p><a href="http://jeremycflin.github.io/">http://jeremycflin.github.io</a></p>
<p><a href="http://ai2html.org/">http://ai2html.org</a></p>
<p><a href="http://www.tubegraphics.co.jp/">http://www.tubegraphics.co.jp</a></p>
<p><a href="https://infogra.me/">https://infogra.me</a></p>
<p><a href="https://informationisbeautiful.net/">https://informationisbeautiful.net</a></p>
<p><a href="https://www.good.is/infographics">https://www.good.is/infographics</a></p>
]]></content>
      <categories>
        <category>資訊架構</category>
      </categories>
  </entry>
  <entry>
    <title>資訊架構設計流程一：研究</title>
    <url>/tw/%E8%B3%87%E8%A8%8A%E6%9E%B6%E6%A7%8B%E8%A8%AD%E8%A8%88%E6%B5%81%E7%A8%8B%E4%B8%80%EF%BC%9A%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<p>資訊架構設計流程概觀：研究&gt;策略&gt;設計&gt;實作&gt;管理。這些看似完美無缺的架構當中，對於有經驗的網站企劃者而言，彷彿只會出現在夢裡，要如何落實在工作過程中，必需靠的不只是理論，還有做人處事的道理。</p>
<h3 id="理論難道真的只是理論"><a href="#理論難道真的只是理論" class="headerlink" title="理論難道真的只是理論?"></a>理論難道真的只是理論?</h3><p>非常多的網站，往往都是在傖促中蘊釀出來，原因不外乎是在公司草創階段，網站的角色只是輔助工具，縱使是以電子商務為主要營收之公司，內部也缺乏專業人才，最後通常以技術導向為出發點，開始進行網站架設的專案。特別是在傳統產業，老闆的直覺架設網站需要的就是技術，因而未將網站的發展策略納入公司營運方針中，最後變成雙頭馬車，各自為陣。 談到關於網路媒體的組織共識，不得不提到這次台北市市長選舉的蘇貞昌陣營所規劃的「新媒體部門」(本人僅就組織規劃為探討重點，無任何政治色彩)</p>
<span id="more"></span>
<p>在這種大範圍以及急迫性的專案中，相信應該是不可能有太多的時間來做研究，而會是以策略來做整體執行的依據，這關係到主事者的視野，坦白說這會是一場賭注，選民不見得會買單，但從設計的角度來看，蘇陣營的做法至少為台灣的選戰增添了不同的面貌，視覺傳達首次在這樣的選舉場合中被大量的利用。 回到企業的本身，對於老闆而言，情況好像也沒好到那裡去，礙於商業競爭及預算的考量，研究這檔事很少會被列為主要的工作項目，就算有也只是淺度的調查。</p>
<h3 id="雞生蛋？蛋生雞？"><a href="#雞生蛋？蛋生雞？" class="headerlink" title="雞生蛋？蛋生雞？"></a>雞生蛋？蛋生雞？</h3><p>通常一個網站的發展策略，往往都會是照著企業主的想法來規劃。最近有兩位朋友想請我幫忙做網站，一個是單純的企業網站，一個是電子商務網站，雖然類型不同，但相同處在於老闆的主觀意識決定了整個網站的發展架構，也因此策略往往會比研究結果先形成，最後變成是由研究來佐證策略，而不是由研究結果導出經營策略。 我詢問朋友，新創網站何不問問目標對象的想法？或是有無看過類似的國內外網站？得到的答案，背後的動機都是以保護自己的創意為出發點，換作是我，我可能也會這樣做，但是如要讓人能敞開胸懷接受想法，彼此的信任就要從做人處事，以及建立客觀的研究開始， 因此順著老闆的思維脈絡來進行研究工作，會是比較實際的做法，也藉此能獲得老闆的認同，以利未來專案的運行。</p>
<h3 id="策略性的研究"><a href="#策略性的研究" class="headerlink" title="策略性的研究"></a>策略性的研究</h3><p>可研究、要研究的東西實在太多，但絕對不能不研究的就是老闆的想法，有時會因為必須推動該推動的工作，而要擬定研究方針，這過程不僅是資料的呈現，更是要揣摩上意來進行運作，但整體而言，主要不會脫離這三大方向： <img src="https://oberonlai.blog/wp-content/uploads/2010/10/021.jpg" alt="網站企劃三原則"></p>
<h4 id="商業情境"><a href="#商業情境" class="headerlink" title="商業情境"></a>商業情境</h4><p>站在老闆的角度來思考，這些就是公司的商業背景，舉凡像是公司產品的賣點在那？想要賣給誰？跟我們搶生意的是誰？通路怎麼鋪？成本如何控制？消費市場的風向等等，而對於網站規劃者，更是要優先了解關於公司的文化、政治及組織架構。 了解的目的在於可以先區分出組織中的利害關係人，從中尋找問題的答案；並且在初次的會議中，能夠召集所有網站架設的關係人，解釋資訊架構就如同圖書館中的書籍分類，這些分類的方式，會因為公司的商業策略、內容提供、以及目標對象有所不同， 最好的方式，可以提供各面向的實際錯誤範例，來說明缺乏良好的資訊架構所造成的危機，透過影像的說明，讓全體有共識，也藉此觀察企業內部是否有潛在的溝通問題。 取得全體共識後，可針對各別部門進行意見蒐集，這些所蒐集到的資料，可移至內容分析時進行比對。</p>
<h4 id="內容管理"><a href="#內容管理" class="headerlink" title="內容管理"></a>內容管理</h4><p>主要是指對於網站內容的系統化管理。網站中包含許多資料，像是照片、圖片、影片或是文字等類型，而這些資料的產生來源，或是更新頻率以及存放結構，都關係到網站是否能經營良好。 內容研究的時機，在現有網站決定改版的情況下，來逐頁檢視不足之處，從下而上的觀點，發現對於網站發展目標不符合的設計，或是違反通用原則的不良設計。譬如像是過多的導覽選項，或是沒有清楚標明所在頁面等缺失。 而對於新創網站，則是要先了解未來要放上網站的內容，無論是格式或是來源，均先取得初步的認識，以利後續規劃之架構，以及技術上的評估。 要做內容分析的研究，可以先行了解組織目的，譬如這次網站改版，是想增加公司網站的行銷功能，在研究時，就可以針對現行網站的廣告類型來做蒐集，可能有分為側欄廣告、橫幅廣告、flash互動式廣告、純文字廣告、置入型廣告等等，再從這些內容中進行分析， 分析的重點在於先找出這些廣告位於網站中的那一階層、那一分類項目下，再行描述這些樣本的格式、呈現位置、方式，再將這些重點與行銷目標加以結合，找出新的方式或是可行辦法。 內容分析的重點，不外乎是重新釐清網站發展目標以突顯其特色，甚至可分析同業之網站內容，截取其優點並加以運用，都是在進行內容分析時，可以研究的方向。</p>
<h4 id="目標對象"><a href="#目標對象" class="headerlink" title="目標對象"></a>目標對象</h4><p>一個網站可能要給許多不同身份、年齡或是性別的用戶使用，能夠越了解目標對象的使用習慣，在實際設計上會更有方向和依據。在未能與使用者直接接觸的情況下，流量分析統計以及搜尋字串分析或是很好的間接觀察方法。 流量統計可以觀察網頁瀏覽的趨勢，透過目標的設定，來檢討專案的執行成果；而搜尋字串研究，更可以從用戶的角度，來了解他們會使用什麼樣的字眼，來搜尋公司的相關訊息，也可藉此發展控制詞彙，增加搜尋時的準確度。 此外，實際進行使用者測試，是最直接的研究方法，或是以卡片排序法來進行資訊架構的發展，在網路服務高度競爭的市場上，消費者的注意力十分有限，如何在這競爭中脫穎而出，關鍵就在於企業對於用戶的了解，所發展出的功能，因此將使用者為中心的設計觀念，是現今網站架設非常注重的一環。</p>
<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>對於網站的研究可從這三方面著手：商業情境、內容管理、目標對象。雖然對於目前的業主而言，投資研究似乎在網站的專案中，尚未被視為必備的關鍵流程，但少了這階段，未來可能需要花更多的時間和金錢來重新建置網站，而且在經營的過程中，一定會碰到許多無法解釋的現象，唯有放下成見，向用戶學習，才能走的長遠，進而達到企業願景。</p>
]]></content>
      <categories>
        <category>網站企劃</category>
      </categories>
  </entry>
  <entry>
    <title>資訊架構設計流程三-設計和說明文件</title>
    <url>/tw/%E8%B3%87%E8%A8%8A%E6%9E%B6%E6%A7%8B%E8%A8%AD%E8%A8%88%E6%B5%81%E7%A8%8B%E4%B8%89-%E8%A8%AD%E8%A8%88%E5%92%8C%E8%AA%AA%E6%98%8E%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2010/11/3363169836_a71515444e_o.png"> 利用經過視覺設計化的圖表進行溝通，圖表的設計方向需提供不同的切入點描述全貌，亦需如同提案般依照不同的目標對象提供適切的圖表呈現方式。 視覺化圖表溝通的原則，盡量以簡單扼要的方式說明，並謹記少即是多的理論。圖表可以表達的有所有網站的內容元件由何構成，以及各元件間彼此的互存關係，像是藍圖(blueprint)以及框架圖(wire frame)。</p>
<span id="more"></span>
<p>藍圖可以是任何形式，用以說明網站包含的架構、各頁面之間的連動關係、系統的操作流程、甚至是的user story、腳本等各種形式，其主要的目的，就是說明網站如何瀏覽、使用者會看到什麼、下一步該如何走等等相關的用以溝通的文件，該工程師看的就是系統操作流程，給老闆看的就是用戶進入網站後如何達成購買行為。 參考網站 <a href="http://www.jjg.net/ia/visvocab/chinese.html">http://www.jjg.net/ia/visvocab/chinese.html</a> 一個網站之中不可能只有一份藍圖，因此需要內容對映和清單(庫存)，也就是總表將所有的藍圖做超連結。並且應加藍圖做模組化、系統化，方便日後的新增與維護。 框架圖可以協助資訊架構師決定網頁內容以及排定次序，並可依照擬真度從低到高做區分，而決定框架圖的擬真程度，也是必須視對像而定。 可以使用內容對映和清單將所有的藍圖、框架圖、內容模型、控制詞彙做一統整。 資訊架構風格指南是指為因應不斷更新中的網站能夠繼續維持統一視覺風格所訂定的規範，譬如某些標準、原則、上線流程、介面的pattern等等。 參考網站 <a href="http://ui-patterns.com/">http://ui-patterns.com/</a> <a href="http://www.patternry.com/%22">http://www.patternry.com/</a></p>
]]></content>
      <categories>
        <category>網站企劃</category>
      </categories>
  </entry>
  <entry>
    <title>資訊架構設計流程二-策略</title>
    <url>/tw/%E8%B3%87%E8%A8%8A%E6%9E%B6%E6%A7%8B%E8%A8%AD%E8%A8%88%E6%B5%81%E7%A8%8B%E4%BA%8C-%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<p>在從事網頁設計的經驗中，常常在第一次接洽時，遇到下列的問題： <strong><em>1.我們想做網站，內容沒有很多，越簡單越好。</em></strong> <strong><em>2.我們想做網站，只要和<a href="http://www.xxx.com一模一樣就好./">www.XXX.com一模一樣就好。</a></em></strong> <strong><em>3.我們想做網站，請報價</em></strong> <img src="https://oberonlai.blog/wp-content/uploads/2010/12/01.jpg" alt="長期受大雄威脅而患有被害幻想症的哆啦A夢"> 長期受大雄威脅而患有被害幻想症的哆啦A夢</p>
<span id="more"></span>
<p>起初我的第一個反應常常是一頭霧水，但經過很多這樣的例子後，我開始從客戶的立場去了解提出這些問題背後的動機。如果我今天想要在家中安裝太陽能發電板，我想我問廠商的第一個問題也會是「請幫我安裝跟隔壁鄰居的一樣的太陽能版」、「安裝一片多少錢？」。 從自己的角度看待自己的專業，當然會有許多知識領域的細節，但以消費者的立場，並不需要知道汽車的運作原理，因此該如何從專業領域的範疇，銜接至客戶的需求認知，透過白話翻譯的溝通，在配合上才能有給彼此空間的機會，因此通常我會將話題往下追問，透過資訊架構設計四步驟。 <img src="https://oberonlai.blog/wp-content/uploads/2010/12/02.jpg" alt="資訊架構設計四步驟"> 資訊架構設計四步驟 通常一個網站專案到我手上時，大部份都是實作的階段，有些研究或策略部份會已發展的相當有成果，有些則不然，因此判斷自己在此專案中所扮演之角色，往往是首要之務。關於何謂研究的部份，可參考先前的文章[資訊架構設計流程一：研究](<a href="http://goo.gl/F9mjT">http://goo.gl/F9mjT</a> target=)，今天的主題是以策略為主。 在實務經驗之中，所謂真正的策略，是採用科學的研究方法，將老闆心目中的想法，發展成實際可執行之策略， <img src="https://oberonlai.blog/wp-content/uploads/2010/12/03.jpg" alt="資訊架構設計前的假設"> 資訊架構設計前的假設 但事實上，無論對於剛創業之中小企業，亦或上市上櫃大企業，對於策略的發展始終有著無法明確掌握的模糊感，這種不確定性，往往會導致老闆做出較有安全感，但卻不是長久之計之決策，因此在商業策略的發展中，鮮少有企業家能夠與這種不安定感共存，走出與一般人不同的道路。 話說回來，商業策略與網站之間有關係嗎？所謂的網站不就是是一些程式技術建構出來的虛擬世界嗎？事實上，構成網站除了程式技術外，還包含了要放那些內容的規劃，而這些內容的規劃，往往關係到企業的商業策略，而這些規劃也是依據資訊架構設計策略所發展出來的結果，更明確的說，資訊架構設計策略還是發展商業策略的好方法。 原因是，透過網路能讓老闆知道消費者的想法，進而去調整修改營運目標與方向；而網路上也常常是試水溫的絕佳管道，那些產品會賣、那些會滯銷，都可以透過資訊架構的設計，來測試老闆心中想的做法是否可行， 另一方面，當商業策略發展至一定階段，還能回過頭來搭配不同的策略性網站，假如公司想趁聖誕節做一波促銷活動，就可以規劃有時效性的活動網站，或是已採用官網與消費者溝通品牌許久，可採用著陸網頁來直接接觸買家，不同的商業策略又會有不同的網站設計角度，關於網站的類型，可以參考李查背包客之交響曲四樂章，皆有詳細說明其使用背景或情況。 <a href="http://blog.rsbag.net/?p=170">掌握網路行銷活動的節奏—序曲：網路行銷訊息的出現</a> <a href="http://blog.rsbag.net/?p=188">掌握網路行銷活動的節奏-行雲流水的快板獨奏曲：著陸網頁</a> <a href="http://blog.rsbag.net/?p=190">掌握網路行銷活動的節奏-活潑輕快的第三樂章：微型網站</a> <a href="http://blog.rsbag.net/?p=194">掌握網路行銷活動的節奏-氣勢磅礡的最後樂章：企業網站</a> 這篇文章先行淺談商業策略與資訊架構設計策略之關連，後續將針對資訊架架構策略說明其實際作用以其相關做法。</p>
]]></content>
      <categories>
        <category>網站企劃</category>
      </categories>
  </entry>
  <entry>
    <title>資訊架構設計流程二-策略(二)</title>
    <url>/tw/%E8%B3%87%E8%A8%8A%E6%9E%B6%E6%A7%8B%E8%A8%AD%E8%A8%88%E6%B5%81%E7%A8%8B%E4%BA%8C-%E7%AD%96%E7%95%A5%E4%BA%8C/</url>
    <content><![CDATA[<p>接下來，進一步說明資訊架構策略可以提供企業或組織那些指導原則： &lt;一&gt;資訊架構組織管理 對於一間企業而言，將如何把組織體系做一明確之劃分，常常考驗著主事者的智慧以及對於公司部門職掌之了解程度。而在劃分網站維護小組組織時，資訊架構策略可以提供中央式或聯邦式管理政策之參考依據。所謂的中央式是指將所有網站維護所有相關之人員，集中至同一組織之中進行整合，而聯邦式是指各部門自行維護所屬頁面，並於最後上線前交由負責單位把關。</p>
<span id="more"></span>
<p>透過資訊架構設計，可清楚了解到公司網站內容及政治文化適合那種屬性，如果是組織龐大且各部門業務繁忙，可統一交由中央單位進行內容維護；如維護部門人力有限，則可採用聯邦制降低人力成本之負擔。 &lt;二&gt;技術整合 因網站發展方向透過資訊架構設計將有明確目標，而關於網站中使用者可能採取的行動、任務，或是操作模式，均已運用藍圖將其說明清楚，因而在技術的整合上，可事先規劃其職掌分配，並且清點技術漏洞，及早進行補強。 &lt;三&gt;判斷公司現況，選擇由何種角度進行資訊架構設計 在研究過程之中，公司內部之商業情境，也能一併做一通盤了解，在判斷公司現況後，可由上往下、或是下往上進行整體資訊架構設計。上往下的情況可能發生在新主管上任的狀態下，因尚未取得部門同仁之信任，必須由上司進行整體之規劃，對於未來發展方向說明其具體實踐之目標與方法，進而取得全體認同； 而下往上的情況可能發生在網站原始資訊架構以沿用多年，在難以大幅度的變動下，從各別部門或是單一同仁進行意見蒐集，運用個人觀點來重新審視整體資訊架構之問題。 &lt;四&gt;組織系統與標籤系統 網站的內容該如何分類？依使用者身分？依使用者年齡？選單名稱該如何撰寫？是否能被目標對象所理解？因資訊架構策略乃由研究對象所發展出來，因而在這類的相關問題上，均能得到有依據的執行方向。 &lt;五&gt;與網頁內容寫作者溝通寫作模式與類型 因網站整體發展方向有明確之目標，在與網頁內容寫作者溝通時將更有所依據，而不致於文案產生與目標對象不符合其屬性，而造成代溝之謬誤。 &lt;六&gt;定義中介資料 資訊架構策略提供清楚的網站發展輪廓，對於中介資料的撰寫上，將更能掌握其模式，以下就功能性區分不同中介資料之參考 1.管理性中介資料-檔案或資料夾命名方式 2.結構性中介資料-網頁更新日顯示標準格式應為 08/08/10 3.描述性中介資料-描述產品的方式，包含顏色、形狀、特性、產地等項目為 4.全域中介資料-版權聲明的寫法與規格 5.區域中介資料-提供檔案下載時的附加說明 6.特定文件中介資料-最新消息的強調寫法，加粗並且用紅色 &lt;七&gt;導覽系統設計 主導覽列、搜尋系統、輔助導覽系統(路徑列等)，均可透過資訊架構策略的提供，來決定設計上之參考依據。 統整以上七點，發展資訊架構策略，可以獲得組織劃分的參考、公司內部技術資源的事先規劃與整合、判斷資訊架構設計的方向、設計組織系統、標籤系統、導覽系統、定義中介資料的參考，在下一部份，將會介紹該如何從研究所獲取的大量資料，轉化為實際可執行之策略方針。</p>
]]></content>
      <categories>
        <category>網站企劃</category>
      </categories>
  </entry>
  <entry>
    <title>購買 WordPress 付費主題的其它選擇</title>
    <url>/tw/%E8%B3%BC%E8%B2%B7-wordpress-%E4%BB%98%E8%B2%BB%E4%B8%BB%E9%A1%8C%E7%9A%84%E5%85%B6%E5%AE%83%E9%81%B8%E6%93%87/</url>
    <content><![CDATA[<p>  WordPress 付費主題好用的地方在於有許多現成的頁面以及控制功能可以直接使用，只要匯入展示資料，再逐一把內容替換為自己需要的內容即可。但往往有太多功能的主題反而在設定上會變的太複雜，再加上如果後台的操作體驗設計不佳的話，使用付費主題會成為一場夢靨，尤其是在 Themeforest 上面購買的主題遇到困難的機率很高，建議是有用過 WordPress 一段時間以上的朋友再去購買使用付費主題，或是可以參考其它的主題商店，比較小間的主題開發商他們通常會開發自己的編輯器，所以在使用經驗上較為一致，在使用授權上也比較有彈性，提供給正準備買主題的朋友參考！</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1443153259125007” display=”yes” title=”6LO86LK3IFdvcmRQcmVzcyDku5josrvkuLvpoYznmoTlhbblroPpgbjmk4c=” body=”V29yZFByZXNzIOS7mOiyu+S4u+mhjOWlveeUqOeahOWcsOaWueWcqOaWvOacieioseWkmuePvuaIkOeahOmggemdouS7peWPiuaOp+WItuWKn+iDveWPr+S7peebtOaOpeS9v+eUqO+8jOWPquimgeWMr+WFpeWxleekuuizh+aWme+8jOWGjemAkOS4gOaKiuWFp+Wuueabv+aPm+eCuuiHquW3semcgOimgeeahOWFp+WuueWNs+WPr+OAguS9huW+gOW+gOacieWkquWkmuWKn+iDveeahOS4u+mhjOWPjeiAjOWcqOioreWumuS4iuacg+iuiueahOWkquikh+mbnO+8jOWGjeWKoOS4iuWmguaenOW+jOWPsOeahOaTjeS9nOmrlOmpl+ioreioiOS4jeS9s+eahOipse+8jOS9v+eUqOS7mOiyu+S4u+mhjOacg+aIkOeCuuS4gOWgtOWkoumdqO+8jOWwpOWFtuaYr+WcqCBUaGVtZWZvcmVzdCDkuIrpnaLos7zosrfnmoTkuLvpoYzpgYfliLDlm7Dpm6PnmoTmqZ/njoflvojpq5jvvIzlu7rorbDmmK/mnInnlKjpgY4gV29yZFByZXNzIOS4gOauteaZgumWk+S7peS4iueahOaci+WPi+WGjeWOu+izvOiyt+S9v+eUqOS7mOiyu+S4u+mhjO+8jOaIluaYr+WPr+S7peWPg+iAg+WFtuWug+eahOS4u+mhjOWVhuW6l++8jOavlOi8g+Wwj+mWk+eahOS4u+mhjOmWi+eZvOWVhuS7luWAkemAmuW4uOacg+mWi+eZvOiHquW3seeahOe3qOi8r+WZqO+8jOaJgOS7peWcqOS9v+eUqOe2k+mpl+S4iui8g+eCuuS4gOiHtO+8jOWcqOS9v+eUqOaOiOasiuS4iuS5n+avlOi8g+acieW9iOaAp++8jOaPkOS+m+e1puato+a6luWCmeiyt+S4u+mhjOeahOaci+WPi+WPg+iAg++8gQ==” pid=”3043”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>超完整 WordPress 電子報工具</title>
    <url>/tw/%E8%B6%85%E5%AE%8C%E6%95%B4-wordpress-%E9%9B%BB%E5%AD%90%E5%A0%B1%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>如果要讓訪客可以定時收到網站的最新資訊或是優惠折價，最常見的做法就是提供電子報的訂閱功能讓訪客追縱，而最常見的電子報服務就是 Mailchimp，雖然它有推出 WordPress 外掛但有些項目的管理還是要離開 WordPress 後台，而且資料都還是保存在第三方的主機中，如果想要自己保管會員資料就可以使用 MailPoet 這套專為 WordPress 設計的電子報外掛，它提供了很完整的電子報功能，像是 Email 模版、視覺化編輯器、訂閱者管理，以及最重要的開信數據分析，而且如果沒有超過 2000 位訂閱者這些功能都是免費，非常適合中小型網站來使用。</p>
<span id="more"></span>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1585978458175819” display=”yes” title=”6LaF5a6M5pW0IFdvcmRQcmVzcyDpm7vlrZDloLHlt6Xlhbc=” body=”5aaC5p6c6KaB6K6T6Kiq5a6i5Y+v5Lul5a6a5pmC5pS25Yiw57ay56uZ55qE5pyA5paw6LOH6KiK5oiW5piv5YSq5oOg5oqY5YO577yM5pyA5bi46KaL55qE5YGa5rOV5bCx5piv5o+Q5L6b6Zu75a2Q5aCx55qE6KiC6Zax5Yqf6IO96K6T6Kiq5a6i6L+957ix77yM6ICM5pyA5bi46KaL55qE6Zu75a2Q5aCx5pyN5YuZ5bCx5pivIE1haWxjaGltcO+8jOmblueEtuWug+acieaOqOWHuiBXb3JkUHJlc3Mg5aSW5o6b5L2G5pyJ5Lqb6aCF55uu55qE566h55CG6YKE5piv6KaB6Zui6ZaLIFdvcmRQcmVzcyDlvozlj7DvvIzogIzkuJTos4fmlpnpg73pgoTmmK/kv53lrZjlnKjnrKzkuInmlrnnmoTkuLvmqZ/kuK3vvIzlpoLmnpzmg7PopoHoh6rlt7Hkv53nrqHmnIPlk6Hos4fmlpnlsLHlj6/ku6Xkvb/nlKggTWFpbFBvZXQg6YCZ5aWX5bCI54K6IFdvcmRQcmVzcyDoqK3oqIjnmoTpm7vlrZDloLHlpJbmjpvvvIzlroPmj5DkvpvkuoblvojlrozmlbTnmoTpm7vlrZDloLHlip/og73vvIzlg4/mmK8gRW1haWwg5qih54mI44CB6KaW6Ka65YyW57eo6Lyv5Zmo44CB6KiC6Zax6ICF566h55CG77yM5Lul5Y+K5pyA6YeN6KaB55qE6ZaL5L+h5pW45pOa5YiG5p6Q77yM6ICM5LiU5aaC5p6c5rKS5pyJ6LaF6YGOIDIwMDAg5L2N6KiC6Zax6ICF6YCZ5Lqb5Yqf6IO96YO95piv5YWN6LK777yM6Z2e5bi46YGp5ZCI5Lit5bCP5Z6L57ay56uZ5L6G5L2/55So44CC” pid=”3347”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>跟 iPhone X 學習產品展示技巧</title>
    <url>/tw/%E8%B7%9F-iphone-x-%E5%AD%B8%E7%BF%92%E7%94%A2%E5%93%81%E5%B1%95%E7%A4%BA%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>  以前最害怕聽到客戶說他們的產品展示頁要跟 Apple 一樣有質感，先不提預算問題，也不提產品攝影跟文案，只要稍微跟他們講解每一個畫面中的動態細節，就會換來一種不可思議的表情，然後接下來就會說他們不用這麼複雜的動態效果，只要簡單大概的就好，我想他們應該也明白魔鬼在細節裡，但也明白魔鬼的可怕XD。這次 iPhone X 產品頁的動態效果與之前的相比，算是少了很多，主要還是在捲動頁面的時候，每一個元素包含主標題、次標、產品圖都會有微幅的動態，有興趣的朋友可以去查關鍵字「 視差滾動 Parllax 」，如果有在用 WordPress 視覺化編輯器像是 Divi 之類的，也能做到類似的效果，但與 Apple 完全手刻的就還是有些差距了…</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1442245689215764” display=”yes” title=”6LefIGlQaG9uZSBYIOWtuOe/kueUouWTgeWxleekuuaKgOW3pw==” body=”5Lul5YmN5pyA5a6z5oCV6IG95Yiw5a6i5oi26Kqq5LuW5YCR55qE55Si5ZOB5bGV56S66aCB6KaB6LefIEFwcGxlIOS4gOaoo+acieizquaEn++8jOWFiOS4jeaPkOmgkOeul+WVj+mhjO+8jOS5n+S4jeaPkOeUouWTgeaUneW9sei3n+aWh+ahiO+8jOWPquimgeeojeW+rui3n+S7luWAkeism+ino+avj+S4gOWAi+eVq+mdouS4reeahOWLleaFi+e0sOevgO+8jOWwseacg+aPm+S+huS4gOeoruS4jeWPr+aAneitsOeahOihqOaDhe+8jOeEtuW+jOaOpeS4i+S+huWwseacg+iqquS7luWAkeS4jeeUqOmAmem6vOikh+mbnOeahOWLleaFi+aViOaenO+8jOWPquimgeewoeWWruWkp+amgueahOWwseWlve+8jOaIkeaDs+S7luWAkeaHieipsuS5n+aYjueZvemtlOmsvOWcqOe0sOevgOijoe+8jOS9huS5n+aYjueZvemtlOmsvOeahOWPr+aAlVhE44CC6YCZ5qyhIGlQaG9uZSBYIOeUouWTgemggeeahOWLleaFi+aViOaenOiIh+S5i+WJjeeahOebuOavlO+8jOeul+aYr+WwkeS6huW+iOWkmu+8jOS4u+imgemChOaYr+WcqOaNsuWLlemggemdoueahOaZguWAme+8jOavj+S4gOWAi+WFg+e0oOWMheWQq+S4u+aomemhjOOAgeasoeaomeOAgeeUouWTgeWclumDveacg+acieW+ruW5heeahOWLleaFi++8jOacieiIiOi2o+eahOaci+WPi+WPr+S7peWOu+afpemXnOmNteWtl+OAjCDoppblt67mu77li5UgUGFybGxheCDjgI3vvIzlpoLmnpzmnInlnKjnlKggV29yZFByZXNzIOimluimuuWMlue3qOi8r+WZqOWDj+aYryBEaXZpIOS5i+mhnueahO+8jOS5n+iDveWBmuWIsOmhnuS8vOeahOaViOaenO+8jOS9huiIhyBBcHBsZSDlrozlhajmiYvliLvnmoTlsLHpgoTmmK/mnInkupvlt67ot53kuoYuLi4=” pid=”3040”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>踏入機器學習領域的第一步，架個 WordPress 吧!（咦）</title>
    <url>/tw/%E8%B8%8F%E5%85%A5%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E9%A0%98%E5%9F%9F%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%8C%E6%9E%B6%E5%80%8B-wordpress-%E5%90%A7%EF%BC%88%E5%92%A6%EF%BC%89/</url>
    <content><![CDATA[<p>  沒想到竟然還真的有人針對 WordPress 寫 AI 領域相關應用的外掛，從幫助寫作到優化內容一應俱全，個人最喜愛的是 Kindred Posts，可以讓機器人學習自己網站的 GA 數據以及網站訪客的瀏覽習慣，然後推薦更精準的相關文章，這類應用有很大的想像空間啊～</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1430886900351643” display=”yes” title=”6LiP5YWl5qmf5Zmo5a2457+S6aCY5Z+f55qE56ys5LiA5q2l77yM5p625YCLIFdvcmRQcmVzcyDlkKch77yI5ZKm77yJ” body=”5rKS5oOz5Yiw56uf54S26YKE55yf55qE5pyJ5Lq66Yed5bCNIFdvcmRQcmVzcyDlr6sgQUkg6aCY5Z+f55u46Zec5oeJ55So55qE5aSW5o6b77yM5b6e5bmr5Yqp5a+r5L2c5Yiw5YSq5YyW5YWn5a655LiA5oeJ5L+x5YWo77yM5YCL5Lq65pyA5Zac5oSb55qE5pivIEtpbmRyZWQgUG9zdHPvvIzlj6/ku6XorpPmqZ/lmajkurrlrbjnv5Loh6rlt7HntrLnq5nnmoQgR0Eg5pW45pOa5Lul5Y+K57ay56uZ6Kiq5a6i55qE54CP6Ka957+S5oWj77yM54S25b6M5o6o6Jam5pu057K+5rqW55qE55u46Zec5paH56ug77yM6YCZ6aGe5oeJ55So5pyJ5b6I5aSn55qE5oOz5YOP56m66ZaT5ZWK772e” pid=”3013”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>載入小動畫製作工具</title>
    <url>/tw/%E8%BC%89%E5%85%A5%E5%B0%8F%E5%8B%95%E7%95%AB%E8%A3%BD%E4%BD%9C%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>在這什麼都有產生器的年代，大從網站、APP，小到今天要介紹的載入動畫產生器，什麼神奇的產生器都有人開發XD~ 而這套動畫產生器可以設計出當圖片或頁面還沒載入時的過場小動畫，預設有多種樣式可以選擇，還可以調整顏色、旋轉速度、角度、尺寸等等，更佛心的還提供三種格式下載，包含 gif、svg 與 css，可以應用在不同形式的內容上。</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1437752892998377” display=”yes” title=”6LyJ5YWl5bCP5YuV55Wr6KO95L2c5bel5YW3” body=”5Zyo6YCZ5LuA6bq86YO95pyJ55Si55Sf5Zmo55qE5bm05Luj77yM5aSn5b6e57ay56uZ44CBQVBQ77yM5bCP5Yiw5LuK5aSp6KaB5LuL57S555qE6LyJ5YWl5YuV55Wr55Si55Sf5Zmo77yM5LuA6bq856We5aWH55qE55Si55Sf5Zmo6YO95pyJ5Lq66ZaL55m8WER+IOiAjOmAmeWll+WLleeVq+eUoueUn+WZqOWPr+S7peioreioiOWHuueVtuWclueJh+aIlumggemdoumChOaykui8ieWFpeaZgueahOmBjuWgtOWwj+WLleeVq++8jOmgkOioreacieWkmueoruaoo+W8j+WPr+S7pemBuOaTh++8jOmChOWPr+S7peiqv+aVtOmhj+iJsuOAgeaXi+i9iemAn+W6puOAgeinkuW6puOAgeWwuuWvuOetieetie+8jOabtOS9m+W/g+eahOmChOaPkOS+m+S4ieeoruagvOW8j+S4i+i8ie+8jOWMheWQqyBnaWbjgIFzdmcg6IiHIGNzc++8jOWPr+S7peaHieeUqOWcqOS4jeWQjOW9ouW8j+eahOWFp+WuueS4iuOAgg==” pid=”3032”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>載入最快、效能最好的 WordPress 佈景主題</title>
    <url>/tw/%E8%BC%89%E5%85%A5%E6%9C%80%E5%BF%AB%E3%80%81%E6%95%88%E8%83%BD%E6%9C%80%E5%A5%BD%E7%9A%84-wordpress-%E4%BD%88%E6%99%AF%E4%B8%BB%E9%A1%8C/</url>
    <content><![CDATA[<p>在挑選佈景主題使用的時候，除了版型好看、操作便利外，最容易被忽略的就是載入速度，基本上付費版型不太可能提供免費試裝讓你行測試，展示頁面的主機環境變數又太多，還好這篇文章找出了 51 款速度飛快的佈景主題，測量標準是以頁面載入速度、檔案容量、請求數來進行評比，另外還有分不同網站型態來進行排行，還在找佈景主題的朋友可以來參考看看～</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1517839714989694” display=”yes” title=”6LyJ5YWl5pyA5b+r44CB5pWI6IO95pyA5aW955qEIFdvcmRQcmVzcyDkvYjmma/kuLvpoYw=” body=”5Zyo5oyR6YG45L2I5pmv5Li76aGM5L2/55So55qE5pmC5YCZ77yM6Zmk5LqG54mI5Z6L5aW955yL44CB5pON5L2c5L6/5Yip5aSW77yM5pyA5a655piT6KKr5b+955Wl55qE5bCx5piv6LyJ5YWl6YCf5bqm77yM5Z+65pys5LiK5LuY6LK754mI5Z6L5LiN5aSq5Y+v6IO95o+Q5L6b5YWN6LK76Kmm6KOd6K6T5L2g6KGM5ris6Kmm77yM5bGV56S66aCB6Z2i55qE5Li75qmf55Kw5aKD6K6K5pW45Y+I5aSq5aSa77yM6YKE5aW96YCZ56+H5paH56ug5om+5Ye65LqGIDUxIOasvumAn+W6pumjm+W/q+eahOS9iOaZr+S4u+mhjO+8jOa4rOmHj+aomea6luaYr+S7pemggemdoui8ieWFpemAn+W6puOAgeaqlOahiOWuuemHj+OAgeiri+axguaVuOS+humAsuihjOipleavlO+8jOWPpuWklumChOacieWIhuS4jeWQjOe2suermeWei+aFi+S+humAsuihjOaOkuihjO+8jOmChOWcqOaJvuS9iOaZr+S4u+mhjOeahOaci+WPi+WPr+S7peS+huWPg+iAg+eci+eci++9ng==” pid=”3227”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>開始設計前，想想你的使用者</title>
    <url>/tw/%E9%96%8B%E5%A7%8B%E8%A8%AD%E8%A8%88%E5%89%8D%EF%BC%8C%E6%83%B3%E6%83%B3%E4%BD%A0%E7%9A%84%E4%BD%BF%E7%94%A8%E8%80%85/</url>
    <content><![CDATA[<p>網頁設計有別於平面設計，它除了提供訊息的傳遞外，還必須考量不同的裝置、使用情境以及互動方式，也因為它是互動的，就必須要提供易於操作的介面。這幾年因為網頁技術的發展，以及網站開發工具的便利性，看到很多炫技的網站，圖片飛來 fade 去是基本盤，還有一堆小元素在旁邊蠕動，以及讓老電腦發燙的動畫效果，這些說明了網頁設計的發展已經到了一種前所未有的高度，但也要小心，也許使用者根本看不到內容就只能被迫離開…</p>
<p>[mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1419483824825284” display=”yes” title=”6ZaL5aeL6Kit6KiI5YmN77yM5oOz5oOz5L2g55qE5L2/55So6ICF” body=”57ay6aCB6Kit6KiI5pyJ5Yil5pa85bmz6Z2i6Kit6KiI77yM5a6D6Zmk5LqG5o+Q5L6b6KiK5oGv55qE5YKz6YGe5aSW77yM6YKE5b+F6aCI6ICD6YeP5LiN5ZCM55qE6KOd572u44CB5L2/55So5oOF5aKD5Lul5Y+K5LqS5YuV5pa55byP77yM5Lmf5Zug54K65a6D5piv5LqS5YuV55qE77yM5bCx5b+F6aCI6KaB5o+Q5L6b5piT5pa85pON5L2c55qE5LuL6Z2i44CC6YCZ5bm+5bm05Zug54K657ay6aCB5oqA6KGT55qE55m85bGV77yM5Lul5Y+K57ay56uZ6ZaL55m85bel5YW355qE5L6/5Yip5oCn77yM55yL5Yiw5b6I5aSa54Kr5oqA55qE57ay56uZ77yM5ZyW54mH6aOb5L6GIGZhZGUg5Y675piv5Z+65pys55uk77yM6YKE5pyJ5LiA5aCG5bCP5YWD57Sg5Zyo5peB6YKK6KCV5YuV77yM5Lul5Y+K6K6T6ICB6Zu76IWm55m854eZ55qE5YuV55Wr5pWI5p6c77yM6YCZ5Lqb6Kqq5piO5LqG57ay6aCB6Kit6KiI55qE55m85bGV5bey57aT5Yiw5LqG5LiA56iu5YmN5omA5pyq5pyJ55qE6auY5bqm77yM5L2G5Lmf6KaB5bCP5b+D77yM5Lmf6Kix5L2/55So6ICF5qC55pys55yL5LiN5Yiw5YWn5a655bCx5Y+q6IO96KKr6L+r6Zui6ZaLLi4u” pid=”2981”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>除了購物車，WooCommerce 還可以做什麼？</title>
    <url>/tw/%E9%99%A4%E4%BA%86%E8%B3%BC%E7%89%A9%E8%BB%8A%EF%BC%8Cwoocommerce-%E9%82%84%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BB%80%E9%BA%BC%EF%BC%9F/</url>
    <content><![CDATA[<p>  沒看到這篇文章真的不知道，想不到 WooCommerce 還能做出一堆獵奇的功能，基本的線上訂房、訂閱付費不意外，整合 Facebook 與 Amazon 商店好像眉毛有挑高一點，做拍賣、設計商品好像有點酷，做多人供應商、代購直運會發出 WOW 的聲音，還能變客戶管理系統、POS 機…有這必要嗎？只能說用的人多毛就多，就必須有人來開發這些毛了…</p>
<span id="more"></span>
<p>  [mxp_fb2wp_display_embed sender=”449900911783585” item=”share” post_id=”449900911783585_1423828737724126” display=”yes” title=”6Zmk5LqG6LO854mp6LuK77yMV29vQ29tbWVyY2Ug6YKE5Y+v5Lul5YGa5LuA6bq877yf” body=”5rKS55yL5Yiw6YCZ56+H5paH56ug55yf55qE5LiN55+l6YGT77yM5oOz5LiN5YiwIFdvb0NvbW1lcmNlIOmChOiDveWBmuWHuuS4gOWghueNteWlh+eahOWKn+iDve+8jOWfuuacrOeahOe3muS4iuioguaIv+OAgeiogumWseS7mOiyu+S4jeaEj+Wklu+8jOaVtOWQiCBGYWNlYm9vayDoiIcgQW1hem9uIOWVhuW6l+WlveWDj+ecieavm+acieaMkemrmOS4gOm7nu+8jOWBmuaLjeizo+OAgeioreioiOWVhuWTgeWlveWDj+aciem7numFt++8jOWBmuWkmuS6uuS+m+aHieWVhuOAgeS7o+izvOebtOmBi+acg+eZvOWHuiBXT1cg55qE6IGy6Z+z77yM6YKE6IO96K6K5a6i5oi2566h55CG57O757Wx44CBUE9TIOapny4uLuaciemAmeW/heimgeWXju+8n+WPquiDveiqqueUqOeahOS6uuWkmuavm+WwseWkmu+8jOWwseW/hemgiOacieS6uuS+humWi+eZvOmAmeS6m+avm+S6hi4uLg==” pid=”2996”]</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>2019/03/29 WordPress 板橋小聚會後小記</title>
    <url>/tw/2019-03-29-wordpress-meetup/</url>
    <content><![CDATA[<p>第一次在板橋小聚上台分享，把這幾年來的工作方式簡單整理一下，但最大的收獲是聽到站長路可的分享，關於如何處理混亂這件事情。一直以來我總是希望能掌控專案中的每個細節，從需求訪談、規格制定到修改項目都能確定就確定了，不要再變動，所以嘗試了各種文件格式、專案管理工具、issue tracking 就是希望可以避免再有變動這件事發生。</p>
<p>但不管再怎麼努力想要掌控這一切，總是會有不受控制的時候，因為跟人合作就是會有非常多的變數，所以對於預期之外的狀況就常常讓自己心煩意亂，反而打壞了工作節奏甚至影響自己的情緒。因此能聽到路可分享「擁抱混亂、混亂是常態」這樣的觀點，讓我重新認識到某些事情沒有照著計畫走不一定是自己的管理能力不夠，而是要如何與混亂相處，並且保持彈性的做事方式來面對混亂，是日後在工作上要時時提醒自己的方向與目標。</p>
<p>昨日會後的小組討論也很有收穫，認識了幾位新朋友，其中一位竟然還看過我早期工作室的網站，覺得又驚又喜，以前參加聚會的時候我都會像個花蝴蝶般的到處發名片，好像可以認識很多人很有趣，但現在覺得只要能認識一位新朋友並且好好的聊聊就很足夠了，談話內容的質比量來得重要的許多。</p>
<p>以下就分享內容做簡單的摘要紀錄：</p>
<p>第一位講者為賴俊吾 Oberon Lai，也是本站的主編 + 網站管理員，目前主要從事 WordPress 網站的客製化佈景主題開發，同時也在經營 WordPress 主機代管服務，主要分享的內容分為四大部分，從一人接案的陷阱、團隊合作的真諦到如何尋找合作夥伴以及團隊工作時常用的工具分享。</p>
<h2 id="一人接案的陷阱"><a href="#一人接案的陷阱" class="headerlink" title="一人接案的陷阱"></a>一人接案的陷阱</h2><p>現在架網站的工具非常方便，現成的模板套一套不用三天就可以完成一個很有樣子的網站，但以接案的情況來說，問題常常出在溝通這個環節，如果無法有效理解客戶需求，前期的溝通與事後的結案，就會花上好幾個月的時間，而且現在資訊發達，客戶也會知道你用的工具，所以造成專業不被尊重，成為客戶的工具人。</p>
<p>一人接案的好處是利潤獨佔，但以個人工作室來說，多是小企業會找上門來，因為個人作業讓客戶覺得比較彈性也比較好講話，所以常常必須付出像是全職工作的時間來幫客戶做事，也因此同一時間很難再去接其他案子，而且企業主對於外包的要求常常會高於公司內的員工，長時間下來接案者不但無法獲得充足的休息，更危險的是沒有時間去增進自己的能力。</p>
<p>雖然說自由工作者這頭銜聽起來很自由，但如果專案不順利錢收不進來，這種壓力會讓人完全失去自由，就連想讓自己放個假也不敢，更不用說來自客戶的壓力以及害怕自己做不出來的壓力，這些都是一個人接案時所必須承受的負擔。</p>
<h2 id="團隊合作的真諦"><a href="#團隊合作的真諦" class="headerlink" title="團隊合作的真諦"></a>團隊合作的真諦</h2><p>雖然也是有很多人可以一人接案過得舒舒服服的，但每個人的個性不同，適合的工作方式也不一樣，因此團隊合作也是很不錯的一種方式，但這個社會什麼樣的人都有，許多人打著合作的名義但骨子裡卻是想要只滿足自己的利益。</p>
<p>對於團隊合作來說，不是一方凹另外一方的關係，也不是因為這領域我什麼都不懂所以找你合作，更不是因為要賣你產品所以提出合作，真正的合作關係，比較像是一種婚姻關係的承諾，這種關係會讓彼此為了團隊的成長而付出，像是執行者思考者怎麼樣的工作流程會讓專案更順暢、業務人員思考者怎麼加強自己的競爭力而提高報價，這些都是要靠自己去學習來加強。</p>
<p>同時團隊成員彼此間也要互相學習，互相理解彼此在工作上的難處以及思考邏輯，才能增加溝通的品質以及增進彼此的了解。能夠做到這樣的良性循環，才是一個團隊合作的模式。</p>
<h2 id="如何尋找團隊夥伴"><a href="#如何尋找團隊夥伴" class="headerlink" title="如何尋找團隊夥伴"></a>如何尋找團隊夥伴</h2><p>要找到合適的團隊夥伴靠的真的是緣分，像是曾經一起工作過的同事、在業界有配合作的同行、或是曾一起參與舉辦活動的夥伴，重點是要有一起共事過，對於很多事情的處理態度，就能知道有沒有辦法一起跟他合作。</p>
<p>因為共事過，當專案遇到困難或是瓶頸的時候他的處理態度是如何？他犯錯時會不會承認還是裝死？自己犯錯時他是幫你一起想辦法彌補還是放馬後砲？外部提出不合理的要求他會怎麼應對等等，這些困境只有在一起合作時才有辦法看的出來，而這時候就是很好的判斷時機。</p>
<h2 id="團隊合作的工具"><a href="#團隊合作的工具" class="headerlink" title="團隊合作的工具"></a>團隊合作的工具</h2><p>主要分為以下三類：</p>
<p>(一) 專案管理工具</p>
<p>好的專案管理工具可以一目瞭然目前所有專案的進度，已經完成了什麼、哪些優先的項目還沒完成、這週預計完成哪些項目。</p>
<p><strong>Ora -</strong> <a href="https://ora.pm/"><strong>https://ora.pm</strong></a></p>
<p><img src="https://i0.wp.com/oberonlai.blog/wp-content/uploads/2019/03/CleanShot-2019-03-30-at-11.58.51.jpg?fit=1024,521&ssl=1"></p>
<p>前陣子剛結束 beta 版，是非常好用的看板管理系統，他可以依照專案流程去分割不同的 Board，並且提供行事曆介面去安排每一個 task 的執行時間，還有完整的報表統計工具，可以檢視哪個 task 花了最多時間，免費方案可以加入三個成員，對於小團隊非常適合。</p>
<p>更多關於看板方法的應用可以參考這篇—&gt;<a href="https://oberonlai.blog/tw/scrum-kanban/">https://oberonlai.blog/scrum-kanban/</a></p>
<p><strong>Adobe XD -</strong> <a href="https://www.adobe.com/tw/products/xd.html"><strong>https://www.adobe.com/tw/products/xd.html</strong></a></p>
<p><img src="https://i2.wp.com/oberonlai.blog/wp-content/uploads/2019/03/CleanShot-2019-03-30-at-12.04.55@2x.jpg?fit=1024,717&ssl=1"></p>
<p>設計軟體大廠 Adobe 所推出的介面設計工具 XD，在設計介面的效能與功能上，好過 Photoshop 或 Illustrator 大概八千倍左右，另外還內建製作 Prototype ，以及團隊溝通上最方便的規格產出的功能，參考以下連結 —&gt; <a href="https://xd.adobe.com/spec/a5ead5cd-a1fe-4783-6a4a-84b5beeb926c-d3db/">https://xd.adobe.com/spec/a5ead5cd-a1fe-4783-6a4a-84b5beeb926c-d3db/</a></p>
<p>工程師可以直接在設計稿看到圖像的尺寸規格以及位置資訊，同時也可以在介面上寫<br>回饋，以最直覺的視覺化的方式來紀錄問題，發起的問題會形成討論串，完成後可以標記已解決，達到 issue tracking 系統的效果。</p>
<p>雖然這套是 Adobe 推出的，但他完全免費，不用付費就可以使用這套軟體的所有功能，他的付費點卡在要 share 規格的連結上限，免費版可以產出兩份設計稿的規格，如果當下只有一個專案在進行中，就非常夠用了。</p>
<p><strong>Projecthuddle - <a href="https://projecthuddle.io/">https://projecthuddle.io</a></strong></p>
<p><img src="https://i0.wp.com/oberonlai.blog/wp-content/uploads/2019/03/CleanShot-2019-03-30-at-12.14.37.jpg?fit=1024,520&ssl=1"></p>
<p>Projecthuddle 是一套 WordPress 的付費外掛，他的主要功能就是如上述 Adobe XD 所產生的規格連結一樣，但差異在 Adobe XD 只能針對由設計稿來產生規格連結，而 Projecthuddle 是可以針對網站來下註解。也就是說如果你的架站流程是用現成的佈景主題來架設，所以不會有設計稿的產出，這時候用這外掛就可以在主機上的網站產生下註解的功能，與客戶討論時會節省許多時間。</p>
<p>(二) 現金流管理工具</p>
<p>專案管理最重要的部分就是現金流的管理，尤其時間比較久的專案或是同時間有許多專案在進行的時候，能看到所有專案的收款進度以及收款時間點就能安排接下來的工作優先順序。</p>
<p><strong>Fuelapp -</strong> <a href="https://fuelapp.io/"><strong>https://fuelapp.io</strong></a></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/03/CleanShot-2019-03-30-at-12.21.23.jpg"></p>
<p>Fuelapp 是一款可以方便管理專案現金流的線上工具，他除了可以設定結案時間、收款時間外，還可以在線上直接製作報價單，最貼心的是還可以把報價單存樣板，如果日後有類似的案件就可以直接從樣板來產出報價單，大幅減少重新製作的時間。</p>
<p>此外還有圖表分析工具，可以讓你檢視近期專案的狀況，像是專案平均時程、每月平均案量、結案率等等的數據，每月審視這些數據可以再來調整專案的製作流程。</p>
<p>Fuelapp 的免費方案是限制輸入三個專案，對於小型工作室應該是足夠使用。</p>
<p>(三) 知識共享工具</p>
<p>團隊之間要互相學習，最好的方式就是共享彼此收集到的資訊，讓成員們可以自由取用。</p>
<p><strong>Eagle - <a href="https://eagle.cool/">https://eagle.cool</a></strong></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2019/03/CleanShot-2019-03-30-at-12.29.37.jpg"></p>
<p>Eagle 是一套圖片管理工具，同時也可以作為書籤管理工具，其強大之處在於他的分類方式非常彈性，除了常見的資料夾分類外，還可以下 tag 以及自動分類的智慧型資料夾，在搜尋上除了關鍵字搜尋外，還可以使用顏色進行搜尋，或是使用進階搜尋來選圖片形狀、類型、時間等等的各種欄位。</p>
<p>而作為團隊知識工具最方便的地方，在於他可以把蒐集到的圖片打包成一個資源庫，而這個資源庫是一個獨立的檔案，這檔案可以非常方便分享，裝有 Eagle 的電腦匯入這個資源庫之後，立刻就可以看到所有已加入的圖片。</p>
<p>資源庫的讀取路徑也可以自行設定，所以說只要團隊成員把自己的資源庫放在雲端硬碟上，讓其他夥伴把資源庫同步到自己電腦後，當有人新增圖片時，其他人也就可以同步看到最新的資訊，完全不需要再靠通訊軟體傳來傳去，即時線上同步。</p>
<p>這套軟體除了是台灣人開發的以外，而且不同於現在流行的訂閱制，它採用一次性買斷的方式進行銷售，也就是說只要付一次錢，就可以免費享受未來的更新功能，實在是超佛心啊啊啊～</p>
<p>目前講者已收集了 218 個 WordPress 相關的書籤，如果有購買該軟體的朋友，可以透過該連結下載資源庫後匯入到自己的 Eagle 裡面，就能立刻同步這些 WordPress 資源。</p>
<p><a href="https://www.dropbox.com/s/45vnpp9ojzbq5qm/oberonlai-wordpress-library.eaglepack?dl=1">https://www.dropbox.com/s/45vnpp9ojzbq5qm/oberonlai-wordpress-library.eaglepack?dl=1</a></p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>團隊合作也是一種使用者體驗，能幫彼此多著想、多思考怎麼做會讓成員工作更順利，這才是團隊合作的一種默契，也是能長久走下去的關鍵。</p>
<p>完整簡報檔連結：<a href="https://www.dropbox.com/s/p7x0igt5u9ocawa/20190329-WP%E6%9D%BF%E8%81%9A%E7%B0%A1%E5%A0%B1-oberonlai.pdf?dl=0">https://www.dropbox.com/s/p7x0igt5u9ocawa/20190329-WP%E6%9D%BF%E8%81%9A%E7%B0%A1%E5%A0%B1-oberonlai.pdf?dl=0</a></p>
<p>會後跟一位媽媽聊到關於接案合約的內容，以及需要注意的地方，我把自己以前常用的合約範本分享出來，這份合約是每次結束一個專案後就會 update 的版本，所以他已經被我不知道更新過幾百次了，希望就還是可以能保障自己，有需要的朋友請自取，然後再改良成自己的無敵版本吧XD</p>
<p>合約範本連結：<a href="https://docs.google.com/document/d/1yug-Nh-l_1Jzp-Cu9eyUk96EXyKkbghWG_hiKIgAyRM/edit">https://docs.google.com/document/d/1yug-Nh-l_1Jzp-Cu9eyUk96EXyKkbghWG_hiKIgAyRM/edit</a></p>
<h2 id="被-WordPress-拯救的人生-站長路可"><a href="#被-WordPress-拯救的人生-站長路可" class="headerlink" title="被 WordPress 拯救的人生 - 站長路可"></a>被 WordPress 拯救的人生 - 站長路可</h2><p>路可是位很特別的講師，一整個氣場強大而且皮膚好好(?)，而且好會說故事簡報做的又漂亮，他的名字由來也很有梗，原來是指哪條路可走哪條路不可走，聽的時候一直覺得如果當年接案有聽到他的分享，應該可以少走很多冤枉路，但就像路可說的，每條路都是對於自我的修煉，要去克服自己的弱點才會成長進步。</p>
<p>以下重點摘錄：</p>
<p>對於授課這件事情，每位講師都有一套自己的系統，但這些方法論，不一定適用在每個的身上，所以透過自身經驗的分享，希望讓聽者可以汲取到自己需要的那部分，進而產生共鳴與回饋。</p>
<p>路可分享自己創業的故事，從一開始的人間失控說起，創業是自我修煉的過程，能克服就能進到下一步，很多時候會觸及到內心的深處，而不只是創業的理論而已。</p>
<p>困境就是想辦法解決，路可分享了創業上的八個困境，最早不知道自己要幹嘛，跑去雲南流浪，去了邊界的一個窮到爆炸的村莊，期間也做過網拍，沒賺到什麼錢，後來去上班認識一位老闆願意栽培他做網站，但老闆身體不好，常常要去洗腎，在照顧老闆的過程中，同時也開始自學 WordPress。</p>
<p>第二個困境是遇見恐怖情人以自殺逼婚 (這一段故事要聽路可現場說才精彩)，總之最後為了要逃離這人飛去美國的朋友家，開始研究網路創業，如果可以放下羞恥，就是突破的開始，只要曾經跌落人生的谷底、被打趴，能站起來後就什麼都沒在怕的了。</p>
<p>剛開始接案很擔心會做不到客戶的要求，但後來理解到許多事情都是可以溝通的，替代的方案也很多，重點是要能解決客戶的問題，萬一真的不能做就坦白說不能做。</p>
<p>在修煉之前覺得 po 文被當成小白被嘲笑很丟臉，修煉後覺得丟臉也不會怎麼樣，多 po 文就會讓嘲笑過你的人閉嘴，拜演算法所賜，塗鴉牆上面最後會看到你貼文的人都是喜歡你的人。</p>
<p>開始進行一日一書摘，發文是很重的練習，練習怎麼組織內容，表達自己的想法，另外用部落格文章來投放臉書廣告，一天一百元沒有負擔，來摸索如何增加廣告投放效益，偶爾也會轉貼到相關社團，不會只是單純的複製貼上，會先觀察社團屬性，思考成員的想法再來進行貼文。</p>
<p>兩三篇文章同時廣告，搭配一日一書摘，從 0 到 5000 粉絲不是問題，反正做下去就知道，但接下來的困境是流量粉絲不能當飯吃，要如何將流量變現，會用 WordPress 就是一個很大的優勢。</p>
<p>有了自媒體之後，接案接到手軟，從來沒缺過案子，不用上接案平台去比價比稿，自媒體發酵，客戶自動找上門。另外轉發專業文章到個人 FB，不用怕丟臉，成為行動孵化器，走到哪就跟人談行銷，幫忙看網站、粉絲專頁，如果你可以解決他的問題，他就會幫你介紹更多客戶。</p>
<p>另外寫部落格文章投稿到媒體平台也是會有意外的收穫，曾經投稿到關鍵評論網結果獲得 GQ 雜誌的採訪機會，去社團主動幫網友解決問題，主動私訊協助。</p>
<p>服務流程要能夠專業化，合約文件該有的要有，只要能夠穩住現金流，就能活得下來了，接案很難賺大錢，先能活下去再說。</p>
<p>最討厭被客戶要求看作品集，如果你目前的作品數量不多，把客戶的焦點移轉到解決他的問題。</p>
<p>不一定要把自己變很得最強，而是要讓所有人都想跟你合作，要有專注力、有精神，成為一個有熱情有夢想的人。</p>
<p>與客戶對話時別用工程師邏輯，也要練習聽出客戶的弦外之音，也就是他真正想要解決的問題。跟客戶聊他聽得懂的，客戶聽不懂工程師邏輯。</p>
<p>與客戶的應對態度要友善，但不要低聲下氣，不要滿足客戶的每個要求，聲音要有自信，私下的生活習慣也要有品質，氣場比實力重要。</p>
<p>在社群經營上同樣性質的內容大家看久了會膩，最大困難就是好不容易發現有一招可以 work，但過沒幾個月就沒效了。重點是高價值的文章內容太長太硬，一般人不會天天看，所以也要發些軟性的內容，目前累積最多讚的是勵志文，用軟性文章吸引人持續追蹤，並且練習說一個好故事。</p>
<p>量的累積會帶來質的突變，專注在自己的路上面，該發生的事情就會自然發生。</p>
<p>接案上如果算客戶便宜，還是會被凹，如何做一個有原則的接案者，做人友善但也要有原則，不需要妥協來委屈自己，篩選客戶才能遠離折磨，有自己的原則才不需要附和人。</p>
<p>經營自己的網站就是篩選客戶的第一關卡，因為看過文章而來的客戶頻率就會很合，因為已經先認同你的觀點，有人覺得報價太貴，但事實是怎麼樣都會有人覺得貴，接案路上要遠離折磨。</p>
<p>曾經推出一萬元的行銷課，如果是以投資類型的課程不算貴，但在行銷業界算是高單價，高價銷售是為了自己的修煉，也就是不要小看自己的價值。</p>
<p>接案者常常覺得事情太多間不夠，生活總是陷入混亂，事實上混亂就是常態，是一種非常正常的循環過程，混亂不是罪惡，在自我成長的過程中就一定會有混亂的發生，讓混亂進來，再去想辦法克服混亂。</p>
<p>最不想做的事情就是一個突破點，創業會放大自身每個弱點，而自己能想到最聰明方法通常不是最好的方法，縮小目標，每天進步一點，然後擁抱混亂，是成長的必要。</p>
<p>目前在做的計畫是重新架個人網站，然後計畫寫一本書，做架站教學，並成立 Line 群討論組，把整個架站過程錄下來變成教學，重新投入教學才覺得又活了起來，自己想做的事是創業者的社群，教學不單純只是理論方法，而是社群一起學習，一邊走一邊學才是真正有效的教學。</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>【 書摘 】Building Web Apps with WordPress</title>
    <url>/tw/building-web-apps-with-wordpress/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/250w-1.jpeg"></p>
<p>能夠看到這麼多實務技巧以及如此全面的 WordPress 開發書籍，就覺得買這台電子書閱讀器值回票價了！</p>
<p>Building Web Apps with WordPress 是由 Jason Coleman&amp;Brian Messenlehner 合力撰寫的一本關於如何使用 WordPress 開發 Web App 的程式書籍，雖然標題是寫 Web Apps，但對於想要致力於開發 Theme 或是 Plugin 的朋友都非常適合，因為它涵蓋了所有在開發 WordPress 時會涉及的議題。</p>
<p>像是從檔案結構、資料庫結構，到怎麼開發外掛、佈景主題，CPT、Taxonomy、OOP 開發技巧、User Role、WordPress API、安全性、ES6、WordPress REST API、Gutenberg Block editor、Multisite、本地化、效能優化、規模化、WooCommerce、整合 PHP Libraries 等等，</p>
<p>最後一章還預測了未來 WordPress 會走到哪個方向，對於想要掌握開發趨勢、學習基礎、進階技巧，個人超級大推這一本，看完之後一整個對於 WordPress 有了全新的認識。</p>
<span id="more"></span>
<p>全書的範例檔在這邊 –&gt; <a href="https://github.com/bwawwp/bwawwp">https://github.com/bwawwp/bwawwp</a>，裡面用了一個 SchoolPress Open Source 當教學範例—&gt;<a href="https://github.com/bwawwp/schoolpress">https://github.com/bwawwp/schoolpress</a>，Jason Coleman 是  <a href="https://www.strangerstudios.com/">Stranger Studios</a> 的創辦人，這公司開發了 <a href="https://github.com/bwawwp/schoolpress">Paid Membership Pro</a> 這隻外掛。</p>
<p>本書共有 18 個章節、1546 頁，每一章我會努力的用中文做摘要，再加入我自己的經驗做腦補，希望有辦法能在一個月之內整理完這個大工程，好長的一條路啊，開始走囉～</p>
<h2 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h2><p><a href="#cp1">一、Building Web Apps with WordPress / 使用 WordPress 打造 Web Apps</a></p>
<p><a href="https://oberonlai.blog/building-web-apps-with-wordpress-basic/">二、WordPress Basic / WordPress 基本介紹</a></p>
<p><a href="https://oberonlai.blog/%E3%80%90-%E6%9B%B8%E6%91%98-%E3%80%91building-web-apps-with-wordpress-using-wordpress-plugin-%E4%BD%BF%E7%94%A8-wordpress-%E5%A4%96%E6%8E%9B/">三、Using WordPress Plugin / 使用 WordPress 外掛</a></p>
<p>四、Themes / 佈景主題</p>
<p>五、Custom Post Types, Post Metadata, and Taxonomy / 自訂文章、文章欄位、文章分類</p>
<p>六、Users, Roles, and Capabilities / 使用者、角色、權限</p>
<p><a href="https://oberonlai.blog/building-web-apps-with-wordpress-api-objects-and-helper-functions/">七、Working with WordPress API, Objects, and Helper Functions / 使用 WordPress API、物件、與實用函式</a></p>
<p>八、Secure WordPress / 加強安全性</p>
<p>九、JavaScript Frameworks and Workflow / JavaScript 框架與工作流程</p>
<p>十、WordPress REST API</p>
<p>十一、Project Gutenberg, Blocks, and Custom Block Types / 關於古騰堡編輯器</p>
<p>十二、WordPress Multisite Networks / 多站網路管理</p>
<p>十三、Localizing WordPress Apps / 多語系</p>
<p>十四、WordPress Optimization and Scaling / WordPress 效能優化與規模化</p>
<p>十五、Ecommerce / 電子商務</p>
<p>十六、Mobile Apps Power by WordPress / 用 WordPress 運作手機應用程式</p>
<p>十七、PHP Libraries, Web Service Integrations, and Platform Migrations / PHP 函式庫、網頁服務與平台整合</p>
<p>十八、The Future / 未來</p>
<h2 id="一、Building-Web-Apps-with-WordPress-使用-WordPress-打造-Web-Apps"><a href="#一、Building-Web-Apps-with-WordPress-使用-WordPress-打造-Web-Apps" class="headerlink" title="一、Building Web Apps with WordPress / 使用 WordPress 打造 Web Apps"></a>一、Building Web Apps with WordPress / 使用 WordPress 打造 Web Apps</h2><p>在開始之前，作者先來定義什麼叫做網頁應用程式 Web App 。</p>
<h2 id="Web-網站"><a href="#Web-網站" class="headerlink" title="Web / 網站"></a><strong>Web / 網站</strong></h2><p>由許多頁面所構成，使用網頁瀏覽器進行瀏覽與操作</p>
<h2 id="App-Application-應用程式"><a href="#App-Application-應用程式" class="headerlink" title="App(Application) / 應用程式"></a><strong>App(Application) / 應用程式</strong></h2><p>由很多可以互動的功能所組成的軟體</p>
<h2 id="Web-App-網頁應用程式"><a href="#Web-App-網頁應用程式" class="headerlink" title="Web App / 網頁應用程式"></a><strong>Web App / 網頁應用程式</strong></h2><p>可以運作在瀏覽器上面的軟體，或是泛指帶有更多互動的網站，Web App 的特徵如下：</p>
<p>（一）有互動元素可以進行互動</p>
<p>（二）任務優先於內容，可以解決某些問題或是產出某些東西的網站</p>
<p>（三）有登入註冊會員系統，可以儲存會員資料</p>
<p>（四）完整的裝置相容性，可以取得裝置的硬體使用權限，像是相機、地理位置定位</p>
<p>（五）沒有網路在離線狀態時也能使用</p>
<p>（六）與其他平台串接整合，使用各種服務的 API</p>
<p>因為觀察到 Web App 的趨勢，Google 推出了 Progressive Web App ( PWA ) 的技術來讓網站方便整合 Web App 的特性，使用 WordPress 架站的話可以利用 <a href="https://wordpress.org/plugins/pwa/">PWA plugin</a> 讓現行網站具備 Web App 的功能，關於 PWA 的特性如下：</p>
<p>（一）有獨立的 URL：Web App 在現今的開發框架上多半採用 Single Page 單頁式的方式來呈現操作介面，然後透過 Ajax 去呼叫資料來載入並顯示內容，所以整個 Web App 就只有一頁，在某些情況下對使用者體驗不佳，所以 PWA 可以把不同的內容用 Rewrite 的方式拆分成不同的網址，然每個頁面可以獨立被連到。</p>
<p>（二）頁面切換沒有延遲或是必須等待載入的感覺，因為如同第一點所提，整個網站只有一頁，所以切換頁面完全不用讀取，需要等待的只有透過 Ajax 載入資料的時間。</p>
<p>（三）連線為 HTTPS</p>
<p>（四）使用 Responsive Web Design ( RWD ) 技術來頁面相容於各種裝置</p>
<p>（五）載入快速，因為只有一頁</p>
<p>（六）使用本地儲存技術讓網站在沒有連線的狀況下也可以使用儲存在客戶端的資料來呈現內容，待裝置與網路連線後再把本地資料傳送給伺服器進行儲存</p>
<p>（七）加入桌面捷徑 Add to Home Screen 功能：因為 Web App 必須透過瀏覽器執行，為了讓使用者可以方便再次進入，開發者通常都會希望使用者把這個網址加入桌面的圖示變成像手機原生的 App 一樣，不用再開啟瀏覽器即可再次造訪</p>
<p>Google 提供了 <a href="https://developers.google.com/web/tools/lighthouse">Lighthouse Tool</a> 來測試你的網站是否支援 PWA 功能。</p>
<blockquote>
<p>如果還是有朋友不了解什麼叫做 Web App，可以打開一下 Google Map、Google 文件、Gmail，這些使用瀏覽器就可以造訪的服務或軟體，就是很標準的 Web App。</p>
<p>也因為這樣的技術已經成熟到一個階段了，有非常多的軟體公司在靠著這樣的服務在創造營收，Netflix、Office 365、Dropbox，這樣的商業模式叫做軟體及服務 Software as a Service ( SAAS )，這類服務最典型的收費模式就是訂閱制，而本書常提及的外掛 Paid Membership Pro 就是一套可以設計 SAAS 服務的工具。</p>
</blockquote>
<h2 id="為什麼要用-WordPress-做-Web-Apps"><a href="#為什麼要用-WordPress-做-Web-Apps" class="headerlink" title="為什麼要用 WordPress 做 Web Apps"></a><strong>為什麼要用 WordPress 做 Web Apps</strong></h2><p>網頁技術百百種，為什麼要選擇 WordPress？首要原因當然就是因為你已經用它做過很多網站了，而你非常熟悉它，閉著眼睛都可以數得出來後台左側選單依序有哪些，如果今天要開發一套工具，當然是非他莫屬！</p>
<p>除了個人因素外，其他客觀原因還有：</p>
<p>（ㄧ）內容管理超級好用，常有的欄位都已內建，不夠用還可以自行新增，或是創造新的文章類型</p>
<p>（二）會員管理簡單易用又安全，密碼自動 Md5 加密，角色權限分層直接內建完整，不夠用一樣可以自行新增</p>
<p>（三）第三方的外掛數量爆炸多，而且大部分都是免費，付費的功能超多價格又能負擔得起</p>
<p>（四）彈性很高，WordPress 可以做各種類型的網站，通常一間新創公司對於網站的需求大致如下：使用者一頁式網頁宣傳服務 -&gt; 加入表單搜集名單 –&gt; 加入部落格 —&gt; 做 SEO —&gt; 社群分享 —&gt; 增加論壇 –&gt; 加入付費機制 —&gt; 加入付費會員專屬內容或功能 —&gt; UI 改版 —&gt; 優化網站並擴大硬體規格 —&gt; 多語系 —&gt; 加入 PWA –&gt; 上架 APP 等等，以上這些步驟 WordPress 全部都有相對應的外掛或服務可以利用</p>
<p>（五）WordPress 核心維護團隊對於安全性漏洞的修補速度快</p>
<p>（六）建置成本低，WordPress 程式碼是免費的，PHP / MySQL 免費、大部分的外掛也都是免費，初期要負擔的成本就是主機租賃的費用</p>
<blockquote>
<p>Open Source 軟體我覺得最重要的就是社群，因為 WordPress 本身是免費的，能否有辦法得到社群的技術資源是關鍵。我自己最早用的開源 CMS 是 Xoops，當年的資源少得可憐，一遇到問題只能去國外論壇爬文，就算提問也很少得到解答。</p>
<p>Xoops 相關的外掛更是少到不行，台灣只有吳弘凱老師有固定持續在開發新的模組，很謝謝他當年的分享！所以之後嘗試了 Joomla，Joomla 在台灣有固定的小聚，而且還剛好在上班的地方附近，但我一次也沒去過，因為 Joomla 的後台操作邏輯太奇妙了…</p>
<p>至於現在 WordPress 的社群就不用講了，在多位大大的努力之下，早已遍地開花，偶爾想上去正體中文社團幫忙回答一些問題，只要問題ㄧ PO 出來一分鐘內立馬就會有人主動回覆，根本搶不到XD</p>
<p>更不用說還有國際級的 WordPress 活動 WordCamp 也在台灣成功舉辦兩次了，只能說當年改用 WordPress 一整個是壓對寶！也因為用的人超多，一堆能想得到的各種應用都有人做出來，國外的 WordPress 商業模式也已非常成熟，從主機到各種進階的外掛應有盡有！</p>
</blockquote>
<p>作者對於一些關於 WordPress 的批評也作出了回應：</p>
<p>（ㄧ）WordPress 只是拿來寫部落格用的工具：早在 WordPress 3.0 加入 Custom Post Type 的機制後，WordPress 就能用來製作各種類型的內容網站，形象官網、新聞媒體、購物商城，只要網站需要資訊呈現的內容，WordPress 都能輕鬆應付！</p>
<p>（二）WordPress 無法適應大型網站：WordPress.com 就是一個最好的範例，相同的原始碼，可以承載世界頂尖的媒體網站，像是 <a href="http://www.bbcamerica.com/">BBC America</a>、<a href="https://techcrunch.com/">TechCrunch</a>、<a href="https://about.fb.com/news/">Facebook Newsroom</a>，就跟其他框架一樣，分散式架構、快取、CDN 都可以應用在 WordPress 上面，看人會不會用而已。</p>
<p>（三）WordPress 不安全：WordPress 的核心程式碼有全世界專門的團隊在維護，有嚴重的漏洞發生時很快就會釋出更新，跟請一位工程師自行開發的網站比起來，完全不用擔心哪天工程師離職了就沒人維護，歷年來的 WordPress 更新紀錄可以參考 <a href="https://wordpress.org/download/releases/">Release Note</a>。</p>
<p>（四）WordPress 的外掛爛透了：有些真的很爛，而且出問題了根本找不到開發者，但這幾年來因為市場的規模擴大，越來越多公司投入外掛開發，商業模式的成熟讓外掛品質有顯著的提升，也讓公司賺進大把的鈔票，又因此吸引更多公司投入，形成良性的競爭循環。</p>
<blockquote>
<p>個人覺得最功不可沒的就是 Envato，他們把整個 WordPress 的商業生態給建立了起來，早期投入的廠商獲得豐厚的果實，讓後期投入的開發者無不絞盡腦汁設計出各種類型的高品質商品，值接促進更多企業願意選擇 WordPress 作為架站系統，這樣的循環持續下去，如果哪天 WordPress 的全球市占率超過 50% 我也一點都不意外。</p>
</blockquote>
<h2 id="何時不要用-WordPress-做-Web-Apps"><a href="#何時不要用-WordPress-做-Web-Apps" class="headerlink" title="何時不要用 WordPress 做 Web Apps"></a><strong>何時不要用 WordPress 做 Web Apps</strong></h2><p>（一）如果你的商業模式是要把網站連 Source Code 都要一起售出的時候：WordPress 採用的的是 GPL 授權，它的主要授權方式是任何人都可以自由的修改、散播程式碼，而用在 WordPress 裡面的所有程式也必須言用 GPL 授權。</p>
<p>如果今天你的 App 是架在自己的主機上，販售的是會員使用權限，像是付費會員有更多進階功能或內容，那麼這跟 GPL 授權沒有關係。</p>
<p>但如果這套系統是要裝在對方的主機上，那麼就不得根據「程式碼」來進行收費，因為所有 WordPress 的 source code 都是開源的，而你客製過的程式也必須遵守開源的規範，必須以相同的授權進行免費散播，同時讓人有自由修改的權利。</p>
<p>簡單來說，當你使用 WordPress 進行創作的時候，如果要給其他人使用，都是必須照著 GPL 的規範，所以如果你是計畫要賣掉網站來賺錢，WordPress 就不是一個合適的選項。</p>
<blockquote>
<p>因為 GPL 的授權方式，現在可以找到一堆 GPL Download 的服務，這些服務從各種管道取得付費程式的原始碼，然後用低於市價或是訂閱制的方式銷售這些程式，然後聲稱他們收的是「維護費」，並強調他們提供的程式 100% 正版，絕對沒有後門，而且還會定期更新。</p>
<p>之前看過一篇訪談，被訪者是幾間知名外掛大廠的負責人，談對於 GPL 授權以及 GPL Download 的想法，多數老闆對於 GPL Download 斥之以鼻，但也有老闆不在意，因為他們賣的不是程式碼，而是「服務」，協助使用者解決問題或是開發更多新功能才是他們的核心價值。</p>
<p>身為開發者的我當然很度爛 GPL Download，但與其要去防堵這些堵不完的網站似乎不太可能，因為 GPL 的授權條款就是這樣運作的，WordPress 看來也沒打算改變，只能專注在提供更好的服務。</p>
<p>對於使用者而言，如果你不擔心程式碼是否為正版、不在意是否有售後服務、不關心開發者的心血，那就還是去乖乖買正版，因為不買正版你就沒有這麼多價格實惠又功能強大的外掛可以用，只能花大錢、花時間、花精力請一個世界級的團隊幫你開發了。</p>
</blockquote>
<p>（二）如果你的技術人員有其他更熟悉的技術，像是 Asp.net、Ruby、JAVA，那就不要用 WordPress，可以快速把商業需求實作出來的技術才是重點，用什麼技術取決於執行人員的掌握度。</p>
<p>（三）如果你的網站很單純，未來不需要持續更新或加入更多的新功能，甚至是連內容的更新都不需要，這種可以用幾個 HTML 頁面就搞定的網站，就不要用 WordPress。</p>
<p>（四）如果你需要高度即時互動的網站，像是可以即時聊天的線上遊戲、或是需要每秒更新內容的網站，這種就不要用 WordPress 來架。但這並非是 WordPress 的問題，而是傳統網站系統架構的問題，因為所有使用者請求都要經過伺服器，再透過後端語言來處理請求結果必顯示在畫面上。</p>
<p>WordPress 這兩年已開始透過 Gutenberg 這個編輯器來設計不需要透過後端伺服器來進行資料的處理，大量使用 JavaScript 、REST API 與非同步技術來改善傳統網站的流程，也許在未來即時互動網站也適合使用 WordPress 來處理。</p>
<h2 id="WordPress-vs-MVC-Framework"><a href="#WordPress-vs-MVC-Framework" class="headerlink" title="WordPress vs. MVC Framework"></a><strong>WordPress vs. MVC Framework</strong></h2><p>從早年的 Blog 成長為 CMS 內容管理系統，到現在有非常成熟的 API 以及豐富的 Hook 機制， WordPress 已成為網站開發框架 ( Platform )。</p>
<p>相較於強調其他 MVC 框架，WordPress 沒有採取非常正規的MVC 設計模式，但還是有可以互相對應的地方。Plugin 可以看作是 Model，控制資料的部分，Theme 是 View，負責視覺呈現的介面，而 Template Loader 則可以看作 Controller。</p>
<p>當造訪 WordPress 網站時一律會達到 index.php，再透過 Theme 的模版系統來決定資料要呈現在哪一個模板上，也就是 Controller 負責的工作。</p>
<blockquote>
<p>MVC 模式（Model–view–controller）是軟體工程中的一種軟體架構模式，把軟體系統分為三個基本部分：模型（Model）、視圖（View）和控制器（Controller），</p>
<p><strong>MVC</strong>模式的目的是實現一種動態的程式設計，使後續對程式的修改和擴充簡化，並且使程式某一部分的重複利用成為可能。</p>
<p>ＷikiPedia</p>
</blockquote>
<h2 id="SchoolPress-專案介紹"><a href="#SchoolPress-專案介紹" class="headerlink" title="SchoolPress 專案介紹"></a><strong>SchoolPress 專案介紹</strong></h2><p><a href="https://schoolpress.me/">SchoolPress</a> 是一個開源的專案，它是運作在多站網路上面的一套系統，主要功能為讓學校的老師可以透過這套系統來管理班級、課程內容、出作業以及管理學生提交的作業，主要的架構簡要如下：</p>
<ul>
<li>  商業模式為學校付錢給老師使用，老師使用來管理班級學生</li>
<li>  每一個學校是多站網路下面的一個子站，網址使用子網域</li>
<li>  班級管理是用 BuddyPress 的 Groups</li>
<li>  老師出的作業是 CPT</li>
<li>  學生交的作業是 CPT</li>
<li>  學年度是班級 CPT 的 Taxonomy</li>
<li>  系所示班級 CPT 的 Taxonomy</li>
<li>  Theme 使用 <a href="https://wordpress.org/themes/memberlite/">MemberLite</a></li>
</ul>
<p>了解這個專案的內容結構對於接下來的範例會比較有概念。</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>mvc</tag>
        <tag>webapp</tag>
      </tags>
  </entry>
  <entry>
    <title>【 業配 】接案路上少的那一位 WordPress 工程師</title>
    <url>/tw/how-can-oberon-help-you/</url>
    <content><![CDATA[<blockquote>
<p>我的工作舒適圈範圍涵蓋網站企劃、介面設計、前端程式設計、客製化 WordPress 佈景主題與開發 WordPress 外掛，雖然範圍有點大，但也持續深耕探索，在了解自己後更勇於面對挑戰，因為找到了屬於自己的工作模式。</p>
</blockquote>
<p>自己當年剛開始接案的時候什麼都不懂，尤其是技術相關的議題，每次被客戶問到時總是說沒問題，結果真的開始做的時候才發現問題一大堆，後來參加了很多小聚認識了很多工程師大大，也一起合作過不少的案子，跟他們一起接案就是會有種安心感，覺得再難的問題都有他們可以依靠。</p>
<p>雖然時間久了身邊的朋友會來來去去，但唯獨工程師朋友都是十年交情以上，雖然身處在不同的公司，但都還是會每天一起遠端工作，交換彼此每天遇到的鳥事、分享新的技術工具，從他們身上我學到了太多太多，像是遇到緊急狀況時臨危不亂、遇到複雜問題能理性的分析思考並進行拆解的模式、寫程式時的嚴謹態度、放下該放下的、糾結該糾結的、以及該擺爛的時候要擺爛XD</p>
<p>一晃眼十年過去了，因為被工程師的人格吸引不知不覺自己也變成工程師，然後看著許多新入行的朋友，跟他們分享接案路上的各種地雷與 💩，同時也跟他們一起合作接案，協助他們處理程式相關的問題，才驚覺自己已經變成當年自己很依賴的工程師，專門在拆炸彈跟處理很棘手的問題，也因此意外發現原來自己很喜歡這樣的挑戰，透過這些挑戰來讓自己獲得成就感。</p>
<p><strong>現在，因為找到自己的工作模式後，我更熱於接受這樣的挑戰</strong>！</p>
<span id="more"></span>

<p>以前採用專案計價的方式，我只要第一眼看到專案金額餵不飽自己的就立刻放生，縱使是很有興趣的專案也沒法接，生活的壓力就擺在眼前，哪裏還管得到什麼興趣，但剛入行的朋友一切都還在學習中，如何談案件金額都是要花很多年的時間才能磨練出一套自己的心法，也因此最需要協助的草創階段卻很難找到有經驗的工程師來一起合作。</p>
<p>除非你跟我一樣運氣好，找到不計較錢的工程師XD，或是可以找 <a href="https://oberonlai.blog/tw/">Oberon Lai</a> 幫忙，使用時薪計算的方式對彼此都彈性，做多少算多少，不會因為請了工程師而吃掉專案的大半利潤。</p>
<h2 id="用-WordPress-接案哪還需要工程師？"><a href="#用-WordPress-接案哪還需要工程師？" class="headerlink" title="用 WordPress 接案哪還需要工程師？"></a>用 WordPress 接案哪還需要工程師？</h2><p>事實上大部分的情況還真的不需要，WordPress 的資源太豐富，看得懂一點英文下對關鍵字就能找到超級多的工具或教學，更不用說還有 <a href="https://www.facebook.com/groups/wordpresstw">WordPress Taiwan 正體中文</a> 社團，以及每個月全台都有的 <a href="https://wp-meetups.com/">WordPress 小聚</a>，只要帶著誠懇的心以及學習的熱情去參與互動，裡面的每位大大都會給你滿到溢出來的收穫。</p>
<p>那有什麼情況會需要工程師的協助呢？根據過往的經驗，多半是當網站已經做到八成了，安裝了付費主題以及許多進階的付費外掛後，所產生的衝突或是無法排除的狀況，像是版面跑版、手機版顯示錯誤、樣式修正等等這些介面呈現的問題，很多細節必須透過前端的程式語言來進行調整，如果對 HTML、CSS、JS 沒有一定程度的了解，這些問題就會無法排除，當然，要鑽研的話還是有很多資源可以學習。</p>
<p>另一種狀況是找不到客戶需求的相對應外掛，雖然 WordPress 各種千奇百怪的工具都有，但常常就是少了客戶要的那一種，或是有找到堪用的，但就還是只差一點就能滿足客戶需求。最常見的就是要符合台灣商業情境的應用，像是串接國內服務商的 API 或是 WordPress 要與客戶內部系統做整合，這些都是需要全客製化的開發作業。</p>
<p>因此，雖然 Themeforest 已經有成千上萬的精美版型可以挑選，但總是會有版型功能無法滿足需求的時候，同時為了要增加接案者本身的價值，面臨到自己能力之外的客戶需求是不可能躲得掉的，這時候就會非常需要一位 WordPress 工程師來從旁協助。</p>
<h2 id="WordPress-工程師-vs-PHP-工程師"><a href="#WordPress-工程師-vs-PHP-工程師" class="headerlink" title="WordPress 工程師 vs. PHP 工程師"></a>WordPress 工程師 vs. PHP 工程師</h2><p>WordPress 的核心是用 PHP 這門程式語言寫成的，理論上會寫 PHP 的工程師都有能力來客製化開發 WordPress，然而很多事情要達成相同的目標可以有很多不同的作法，有經驗的 PHP 工程師會使用自己熟悉的方式來修改 WordPress，但這樣可能會衍生一些問題，像是外掛更新之後東西會不見，或是造成安全性與效能的問題。</p>
<p>WordPress 是一個既有的框架，就跟其他的程式框架一樣，有自己的規則與設計哲學在裡面，它是在 2003 年誕生的，十幾年的歷史雖然有不少包袱，但早已是一套非常成熟的框架，有數以千計的工程師貢獻過核心程式碼，這些都讓 WordPress 不斷的進化與成長 ( 也常常進化到爆炸就是了 🤣 )，這是其他框架現階段很難達到的規模。</p>
<p>要如何判斷一位工程師對於 WordPress 的熟悉度呢？可以從以下三點來切入：</p>
<h3 id="一、對於-Hook-機制的理解"><a href="#一、對於-Hook-機制的理解" class="headerlink" title="一、對於 Hook 機制的理解"></a>一、對於 Hook 機制的理解</h3><p>Hook 機制是 WordPress 可以擁有成千上萬各式各樣外掛的主要原因，透過「掛」載的動作就能在不需修改核心程式碼的情況下，加入新的功能，這樣當核心程式碼在更新的時候，新功能一樣可以被保留下來。看過太多被硬改 WordPress 核心程式碼的狀況，然後客戶被廠商要求 WordPress 不得更新…</p>
<p>WordPress 的更新除了會加入新功能以外，還會修補許多安全性漏洞，畢竟它是全世界市佔率最高的架站工具，也會引來想要大展身手的攻擊者，所以如果不能更新 WordPress，那可能只能把主機的網路線拔掉才會 100% 安全。</p>
<p>為了要能更新 WordPress 程式，Hook 機制是絕對必要的，而且透過它，還能提供開放介面讓其他工程師來修改自己寫好的外掛，而 Hook 有兩種：action 與 filter，更多關於 Hook 的介紹可以<a href="https://oberonlai.blog/tw/building-web-apps-with-wordpress-basic/">參考這篇我寫的文章</a>。</p>
<h3 id="二、對於-Loop-與操作資料庫方式的理解"><a href="#二、對於-Loop-與操作資料庫方式的理解" class="headerlink" title="二、對於 Loop 與操作資料庫方式的理解"></a>二、對於 Loop 與操作資料庫方式的理解</h3><p>WordPress 第二個核心是 Loop，它是顯示所有文章內容的機制，傳統 PHP 的作法是先建立資料庫連線，然後寫資料庫語法，把需要的資料取得後，再用迴圈的方式呼叫出來，而 WordPress 使用 Loop 簡化了這樣的流程，還提供許多豐富的 API 來自訂要取得的資料內容。</p>
<p>雖然 PHP 工程師還是可以使用傳統的方法來做資料庫的操作，但前面提到，WordPress 已經有全世界的工程師幫你開發出各種 API，無論是針對安全性、效能，都是經過持續的優化再優化，沒有道理不用它，透過這些 API 除了簡化開發流程、增加安全性與效能外，更能學習到世界上其他工程師是如何處理相同問題的邏輯與思維，這對於開發者本身會有很大的幫助。</p>
<p>更多關於 WordPress Loop 與資料庫操作的介紹可以<a href="https://oberonlai.blog/tw/building-web-apps-with-wordpress-plugin/">參考這篇我整理的文章</a>。</p>
<h3 id="三、對於-WordPress-安全性的理解"><a href="#三、對於-WordPress-安全性的理解" class="headerlink" title="三、對於 WordPress 安全性的理解"></a>三、對於 WordPress 安全性的理解</h3><p>上文提到，因為 WordPress 的成功引來了一大群攻擊者，要如何維護 WordPress 的安全性，都已經是許多國外企業的核心服務項目，最有名的就是 <a href="https://www.wordfence.com/">Wordfence</a>，他們是一間專門開發 WordPress 防火牆外掛的公司，通時也常發表關於 WordPress 核心程式、佈景主題與外掛的漏洞研究報告。</p>
<p>常看他們的報告會發現，很多外掛的漏洞常發生在缺少驗證程式執行者的身份、執行者的請求來源以及對於惡意程式碼的過濾，這些議題在其他框架也都會遇到，只是因為 WordPress 很大，還有專門的機構來研究漏洞，所以當看到 WordPress 安全性相關的新聞報導時別驚慌，去客觀理解漏洞產生的原因後，就能知道該如何防範。</p>
<p>因此為了提升安全性，使用 WordPress 內建的 API 會是比較好的選擇，另外在執行寫入動作前，先用 curent_user_can() 檢查使用者權限、wp_nonce_url() 確認傳送資料的來源是否為同一個網站、sanitize_*() 過濾使用者輸入的內容、esc_*() 過濾從資料庫取得的內容，再搭配資料的驗證，像是是否為空值、手機號碼是否為 10 碼等等，這些基本功做到就能防止一般常見的攻擊手法，更多關於 WordPress 安全性議題可以<a href="https://developer.wordpress.org/themes/theme-security/">參考這篇文章</a>。</p>
<p>-–</p>
<p>以上的判斷準則可以很初步的知道這位工程師對於 WordPress 是否有相關經驗，至於其他的主觀條件像是長的正或歪、身高有沒有 186、有沒有不良嗜好就大家自己看著辦了XD</p>
<h2 id="為什麼一定要找-Oberon-Lai"><a href="#為什麼一定要找-Oberon-Lai" class="headerlink" title="為什麼一定要找 Oberon Lai ?"></a>為什麼一定要找 Oberon Lai ?</h2><p><strong>事實上好像也不用</strong> 🤣</p>
<p>有 WordPress 的案件需求，通常只要到 WordPress 正體中文社團 PO 個文，下面就會二三十個留言「已私訊」的蓋樓，我每次都很好奇最後發文者會選擇哪一位，同時也在思考萬一我要去爭取的話，該怎麼獲得這個機會？</p>
<p><strong>但不瞞各位說，其實我很害怕主動去爭取機會。</strong></p>
<p>除了還怕被拒絕外，同時也怕被其他人覺得手上沒有案子很丟臉，都已經出來接案這麼久，啊不是很有經驗？怎麼現在還需要跟人家搶案子來做？文章寫得好像很厲害，好像永遠不會缺工作一樣，想不到還是一樣要跟其他人競爭…</p>
<p>除了面子問題外，更深層的原因還是自信心不足，每次看到其他大大的分享與討論，我總是會有一種低人一等的感覺，因為除了自己不是本科出身以外，更覺得自己不是成功的接案者…</p>
<p>我嘗試過三次全職接案之路。</p>
<p>第一次做到繳不出房租來，所幸在親戚的介紹下進入一間保險公司上班當網站企劃，才有了穩定收入再也不用擔心生活費，但做了五年之後，對於公司的制度文化有太多太多的想法，於是決定要離職出來建立符合自己期待的公司。</p>
<p>第二次接案撐了一年半，比第一次因為沒案子所以做不下去來得好一些，案源算是比較穩，但問題出在專案管理，每個案子花了太多時間，然後每天都在跟客戶爭論當初報價單沒有提到的功能是否該製作，最後一整個放棄自己，客戶想改啥就隨便他改，只要拿得到尾款能活下去就好。</p>
<p>而且上個案子結不了案，新的案子又來，雖然知道會忙不過來但還是要接，因為不曉得錢到底何時會進來，因此常常工作堆在一起根本無法消化，最後受不了，還是逃離接案的生活去了一間遊戲公司上班。</p>
<p>又能夠回到固定領月薪的日子覺得超開心，相較於每個案子都要面對不同的老闆，上班只要搞定一個就覺得輕鬆八百倍，於是就這樣做了三年，但內心仍然一直有著想要再次挑戰自己的想法，直到因為公司經營方向與我個人理念不符後，我又離職了…</p>
<p>第三次出來接案到現在快滿三年了，這次接案學會跟朋友一起合作，承接單價比較高的案件，但還是偶爾會發生一個案子要做上半年甚至是一年的狀況，然後跟第二次接案的時候一樣，最後自己都放棄了一些堅持，再加上受到疫情的影響，案源又開始不太穩定。</p>
<p>於是一直思索著該如何讓自己的接案之路順暢以及又能保有自我的方法，最終得到的結論：使用時薪的方式來工作，每個月固定請款，做多少算多少，再也不用因為報價單裡面的項目在爭執不休，也不用只想著要結案而放棄堅持，就這樣，突然間我好像開竅了，只是花了十年的時間而已XD</p>
<p>知道做的事情可以得到相對應的回報之後，就願意以更積極的態度去面對挑戰，不管是主動去接從來沒做過的案子，或是堅持每天寫文章記錄學習到的東西以及過去的工作經驗，都是重新面對與檢視自己最脆弱的環節，看清楚後就沒什麼好怕了，就跟開發很複雜的功能一樣，只要把任務拆解成很多小環節，逐一完成小地方，最後就能完成大目標。</p>
<p>面對不懂的事物就去研究它，沒有人一生下來就什麼都懂的，看到神人前輩也不用覺得自卑，因為他們一定都已經努力了比我更多倍的時間在這些事情上，不能只看到表面的結果而貶低自己，這樣對自己不公平的。</p>
<p>所以為什麼要找 Oberon Lai 成為接案路上的那一位 WordPress 工程師？也許你念過我寫過的幾篇文章、曾經看過我分享的東西，甚至是在某些聚會上有過一面之緣，但這些都不是重點，而是我找到了一種可以彼此互惠的合作模式，這樣的合作模式讓專案的過程更透明化，更能讓彼此<strong>一起學習如何接案才能接的</strong>更順暢。</p>
<h2 id="恩？找工程師不就是解決程式問題嗎？還可以學到如何做專案？"><a href="#恩？找工程師不就是解決程式問題嗎？還可以學到如何做專案？" class="headerlink" title="恩？找工程師不就是解決程式問題嗎？還可以學到如何做專案？"></a>恩？找工程師不就是解決程式問題嗎？還可以學到如何做專案？</h2><p>開頭提到，自己剛開始接案的時候什麼都不懂，不管是找案源、報價、合約書、專案管理、客戶溝通這些作業都是亂七八糟，然後透過長年不斷的學習以及踩雷無數的經驗後<a href="https://oberonlai.blog/how-to-write-the-effective-specification/">才逐漸發展成一套方法</a>，雖然這方法不一定適用每個人，但如果在接案初期就有人可以告訴我這些事，我一定可以少走超多冤枉路。</p>
<p>而且光是有認識的朋友可以一起吐苦水、抱怨雞歪的人，還可以得到一些實務上的建議，就可以讓接案之路走得不這麼孤獨，彼此分享經驗互相學習，事情會看得比較開，不讓自己鑽牛角尖。</p>
<p>另一方面接案者如果對開發技術有越多的理解，未來跟客戶洽談時的眼界就會越廣，並且在與其他技術人員溝通時，能很快的抓到重點，進而獲得客戶的尊重。雖然網路學習資源多到看不完，但身邊有願意分享的工程師，學習速度會快上八倍。</p>
<p>我寫過不少技術文章分享自己的學習心得，每天睡前的讀物都是程式類書籍，同時又很喜歡新工具、新服務，<a href="https://www.producthunt.com/">Product Hunt</a> 跟 <a href="https://www.indiehackers.com/">Indie Hackers</a> 是我每天必逛的網站，我超愛跟朋友分享這些東西，認識我的朋友都知道，我這個人有問必答沒在藏私的，能與人真誠的交流是我最在意的事情。</p>
<h2 id="喔喔，聽起來很不錯！具體的合作方式會是如何進行？"><a href="#喔喔，聽起來很不錯！具體的合作方式會是如何進行？" class="headerlink" title="喔喔，聽起來很不錯！具體的合作方式會是如何進行？"></a>喔喔，聽起來很不錯！具體的合作方式會是如何進行？</h2><p>如果你暫時沒案件需求只想交朋友的話，可以寫信給我 <a href="mailto:m615926@gmail.com">m615926@gmail.com</a>，有空檔的話我就會回信跟你聊天打屁XD，萬一我回的比較慢還請見諒，因為我逼自己嚴格遵守著一天只能收信兩次、一天只能開一次通訊軟體&amp;社群媒體的規定，不然太容易讓自己分心了，<a href="https://oberonlai.blog/%e8%a6%aa%e6%84%9b%e7%9a%84%ef%bd%9e%e6%88%91%e6%8a%8a-iphone-%e8%ae%8a%e6%88%90%e4%b8%80%e9%a0%81%e4%ba%86%ef%bc%81/">這年頭專注能力是一種超級寶貴的技能</a>。</p>
<p>如果你有 WordPress 網站需要客製化，麻煩也請發信給我，可以的話附上你的電話，比較複雜的需求電話聊比較快。通常客製化 WordPress 會有以下幾種狀況：</p>
<ol>
<li> 客戶需要建立全新的網站</li>
<li> 客戶已有網站但需要改版</li>
<li> 客戶網站已使用 WordPress 付費佈景主題完成 80%，剩下 20% 需要進行客製修改</li>
<li> 客戶網站已為 WordPress，因業務需求要新增功能或頁面</li>
<li> 其他 WordPress 障礙排除，像是網站速度慢、被置入惡意程式碼等等</li>
</ol>
<p>以下就各種狀況的需求描述做簡單的說明：</p>
<h3 id="一、客戶需要建立全新的網站"><a href="#一、客戶需要建立全新的網站" class="headerlink" title="一、客戶需要建立全新的網站"></a>一、客戶需要建立全新的網站</h3><p>具體描述事項：客戶產業、網站類型、網站目標、網站地圖、核心頁面、核心功能等等，以及其他一些特殊的功能或需求是客戶特別在意的，最常聽到的就是要讓中國境內可以連得到他們的網站。</p>
<h3 id="二、客戶已有網站但需要改版"><a href="#二、客戶已有網站但需要改版" class="headerlink" title="二、客戶已有網站但需要改版"></a>二、客戶已有網站但需要改版</h3><p>具體描述事項：改版原因、改版方向、如何定義這次的改版是成功的？通常客戶想改版往往是因為時間到了或是「覺得」該改了等這些主觀的理由，以這樣的出發點改版執行者會很辛苦，因為所有的標準都在老闆的腦海了。客觀的作法是先研究既有網站的數據、使用者意見回饋，以及找出明確的商業目標，盡可能以量化的方式來衡量改版的效益，像是「希望改版之後訂單能成長 5%」。</p>
<h3 id="三、部分客製修改"><a href="#三、部分客製修改" class="headerlink" title="三、部分客製修改"></a>三、部分客製修改</h3><p>具體描述事項：哪些頁面或功能未符合客戶的預期，明確指出需要修改的介面以及希望的效果。像是英文佈景主題預設的中文字型客戶不喜歡，希望可以改成 Noto Sans TC 或是微軟正黑體。</p>
<h3 id="四、新增功能"><a href="#四、新增功能" class="headerlink" title="四、新增功能"></a>四、新增功能</h3><p>具體描述事項：新功能的操作流程，包括前台介面使用者如何操作，以及後台管理者該如何管理該功能的具體項目。像是新增聯繫客服的固定按鈕在視窗的右下方，點下去後會有對話框讓客戶輸入訊息，輸入後客服人員會在 Email 收到通知，他們就可以登入 WordPress 後台與客戶進行對話，而所有的對話紀錄都會保存在後台以便後續追蹤。</p>
<h3 id="五、障礙排除"><a href="#五、障礙排除" class="headerlink" title="五、障礙排除"></a>五、障礙排除</h3><p>具體描述事項：遇到哪種類型的障礙，像是網站後台讀取緩慢、瀏覽前台時會自動被跳轉到不知名的頁面、出現程式碼錯誤訊息等等，通常這種情況我這邊需要後台或是主機的登入權限才有辦法進行檢修，可以另外提供我層級較低的帳號以利排除。</p>
<p>當收到需求來信後，我會根據你的狀況提供幾種可能的作法，如果我們有共識的話，我就會以我們討論的內容進行開發時數評估，範例如下：</p>
<p>(一) 前置作業 – 8 小時</p>
<ul>
<li>  收集彙整參考平台之網站架構 / 功能 – 2hr</li>
<li>  資料欄位 / 網站架構確認 – 4hr</li>
<li>  頁面風格確認 – 1hr</li>
<li>  開發環境與程式碼部署配置 – 1hr</li>
</ul>
<p>(二) 頁面切版 – 視頁數而定</p>
<ul>
<li>  基礎架構&amp;RWD 開發 – 4hr</li>
<li>  首頁前端程式開發 – 4hr</li>
<li>  首頁後端資料串接 – 4hr</li>
<li>  內頁前端程式開發 – 2hr / 頁</li>
<li>  內頁後端資料串接 – 2hr / 頁</li>
</ul>
<p>(三) 會員功能開發 – 5 小時</p>
<ul>
<li>  會員註冊登入需求確認 – 1hr</li>
<li>  註冊 / 登入機制開發 – 2hr</li>
<li>  Facebook Login 整合 – 2hr</li>
</ul>
<p>(四) …</p>
<p>最後再把小時數加總乘以單位時薪，就可以得到大概的預算範圍，前置作業的資料準備以及各項功能需求如果越明確的話，就能花費越少的時間在進行溝通，以及減少實際開發出來後的修改時間。如果想了解如何整理需求文件的話，可以參考我的這篇文章：<a href="https://oberonlai.blog/how-to-write-the-effective-specification/">企劃人員如何撰寫有效的軟體需求規格文件</a>。</p>
<p>等實際開工後為了避免時數超過預算，我會透過共享計時工具、共享開發中原始碼、共享開發清單的方式來讓你隨時可以掌控時數的流向，另外還會透過每週的定期回顧，檢視上週的完成進度以及接下來預計要開發的功能。</p>
<p>在共同管理專案的模式下，隨時都可以針對客戶的回饋進行開發順序的調整，避免糾結在「不是那麼重要」的細節，而是專注在真正的核心需求上面，這一整套的合作方法我稱作為「敏捷式接案」，更多關於敏捷式接案的說明與由來可以參考我的這篇文章：<a href="https://oberonlai.blog/how-do-i-make-a-quotation/">我的接案報價學</a>。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>很開心有緣能讓你看到這篇文章，我喜歡以交朋友的方式來跟人一起合作，也喜歡跟願意學習交流的朋友來讓彼此一起成長，希望我能成為你接案路上值得信賴與依靠的那一位工程師！<a href="mailto:m615926@gmail.com">Mail 給我吧</a>！</p>
]]></content>
      <categories>
        <category>WordPress</category>
        <category>網站企劃</category>
        <category>老人碎念</category>
        <category>專案</category>
        <category>Email</category>
        <category>商業模式</category>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>專案管理</tag>
        <tag>WordPress 工程師</tag>
        <tag>敏捷式接案</tag>
      </tags>
  </entry>
  <entry>
    <title>【 心得 】我的接案報價學</title>
    <url>/tw/how-do-i-make-a-quotation/</url>
    <content><![CDATA[<blockquote>
<p>摘要：我認為好的報價要能符合時間比例原則，並以單位時薪來展現自我價值，在這樣的前提之下，使用User Story&amp;任務拆解的工時估算法，從前置作業、頁面數量與功能開發三個大方向進行預估，並搭配透明化、定期主動回報工作進度的共同管理專案模式，讓客戶可以根據當月已開發時數 (費用) 決定優先順序，站在客戶立場，能隨時掌握專案進度並調整開發方向，減少時間成本的浪費，對於接案者來說，保持每月現金流是能持續自我精進的關鍵。</p>
</blockquote>
<p>坦白說，接案這麼多年，我最討厭的部分就是洽談工作這個環節，從搭上線開始，初步了解需求，然後碰面洽談，整理會議記錄、網站規格、報價單、合約書，寄給客戶之後開始針對報價單的內容逐一刪減，被砍價是理所當然，而議價是我覺得最難受的過程，彷彿在說我這個人不值這個價，雖然理智上知道這是商業談判的一環，但心理上很容易就會跟自己過不去。</p>
<p>接下來就是合約書，要提交給客戶的法務審查，審完後提出修改，當然修改條件我也不可能全部接受，於是中間又是一連串的來回，最後，真正開案大概是第一次會面之後的三個月了，而這三個月所花費的時間還沒有產生任何一毛的收入。</p>
<span id="more"></span>

<p>以往我的報價方式是用我每月的生活成本來計算，一般來說如果是要架設企業官網的話，我會從企劃、設計到程式開發等工作項目估算很模糊的開發時間，假設我一個月生活成本 10 萬塊，而這個案子我估計兩個月可以做完，那我總價就會報 20 萬元，如果沒在兩個月內做完，我就開始賠本了。</p>
<p>所以我會想盡辦法用各種文件以及約定結案日期來讓專案可以在兩個月內完成，於是就給了自己很大的壓力，每週固定會議、追客戶資料、整理修改需求單、驗收確認表，同時還要處理設計、開發，但做這麼多行政作業的結果，真的能在設下的時間點內結掉的專案少之又少。</p>
<p>所以每當下一次專案開始的時候，又會給自己增加更多的行政作業來確保案件如期執行，然後樂觀地期待著這次應該沒問題了吧！當重複失敗了 N 次以後，才開始認真重新檢視自己的工作流程，歸納出以下三點原因：</p>
<h2 id="自己個性的使然"><a href="#自己個性的使然" class="headerlink" title="自己個性的使然"></a>自己個性的使然</h2><p>我熱愛做網站，為了要做網站，我願意學習各種相關知識，更希望透過自己學到的知識，去幫助需要的人，同時也能讓自己有飯吃，所以我會成為自由接案者純粹是因為我喜歡接觸到不同領域的人，然後透過我的專業技能去解決他們的問題並讓自己獲得成就感。</p>
<p>這樣的理想主義是我做網站的初衷，但，接案久了就會不知道被第幾版的修改需求單給澆熄了熱情，每天在做的事情就是跟客戶爭執說這些功能並非在當初的報價範圍裡面所以沒辦法做，但更多時候就是睜一眼閉一眼做給客戶，因為爭論要做不做的時間已經夠我把這功能做完了，但背後更大的原因其實是我「害怕衝突」。</p>
<p>這樣最後的結果就是一直被凹，有苦自己吞，不停的告訴自己沒關係，這些新加的東西我應該很快就能處理完，多做就是多學，這些多做的客戶會感謝我、會介紹更多客戶給我，弄不完就加班拼，這次拼一下、撐過去就是我的了、男人就是要能忍耐，然後把自己變成只是為了要能結案收尾款的工作機器…</p>
<p>因此在結案時間不變的情況下，工作量卻是多了好幾倍，每多開發一個功能就要多一道修改驗收的流程，這樣完全不可能在原本預計的時間內完成。</p>
<h2 id="客戶對於外包專案的認知"><a href="#客戶對於外包專案的認知" class="headerlink" title="客戶對於外包專案的認知"></a>客戶對於外包專案的認知</h2><p>準時結案這事除了要靠自己的努力外，剩下九成九的關鍵都是要看客戶對於這個專案的認知，對於客戶來說，通常需要發包就代表他們公司內部沒有專人可以處理這件事，所以投資了預算無非就是希望可以得到預期的結果。</p>
<p>但很多公司往往忽略了外包的溝通成本，畢竟「預期的結果」公司內部不同職位的人會有不同的看法，更不用說還要傳達給公司外部的接案者，光是一個按鈕的位置可能就可以討論好幾個禮拜，而這些討論在還沒具體執行前都是一團謎，等公司內部討論出一個結論後，可能幾個禮拜的時間就用完了，而對我來說我卻還是要遵守結案時間。</p>
<p>再加上負責專案的窗口往往都有自己原本的工作要做，所以等待網站需要的資料、文案、素材也會花上很長一段時間，其他像是等待確認製作方向、驗收製作項目等等，這些全都不是我可以掌控的因素，在這樣的情況下要讓專案可以準時結束自然是難上加難。</p>
<h2 id="其他外力因素"><a href="#其他外力因素" class="headerlink" title="其他外力因素"></a>其他外力因素</h2><p>像是打籃球手指頭吃蘿蔔乾、小孩出生、家人生病、窗口離職、職務交接、老闆出差、颱風、武漢肺炎等等的各種外力因素，都可以造成專案的延宕。</p>
<p>總結以上三點人為與非人為因素，我得到了一個結論：「專案永遠不可能在一開始約定的結案日期結案」。</p>
<h3 id="到底何謂結案？"><a href="#到底何謂結案？" class="headerlink" title="到底何謂結案？"></a>到底何謂結案？</h3><p>認清了這個事實以後，我開始反思結案的定義，依照傳統合約的定義方式，只要乙方把報價單裡面的項目全部製作完成，並且收回尾款就算是結案，但，這樣的定義有一個非常大的漏洞，所謂的「製作完成」只是乙方單方面的認知，對於甲方來說，乙方的產出到底能否符合商業上與管理上的需求，這樣的認知是非常主觀的。</p>
<p>最常聽到的就是當甲方看到成品時發現某個他認知「理所當然會有」的功能結果沒有，就會很驚訝的問說：「這功能不是基本的嗎」？然後乙方就會不爽，覺得自己的專業被質疑，開始解釋這功能當初沒有寫進報價單所以沒有開發，於是雙方就會進入僵持，直到某方退讓或是協調出雙方都能接受的作法。</p>
<p>事實上，要解決這問題在報價階段就要先討論出每個功能的細部規格，並且能讓雙方對於要執行的項目都有正確的認知，但實際情況是認知這件事每個人都會有所落差，而且窗口的認知跟他的老闆也不一定相同，窗口認可的成品到老闆那關被打槍也是屢見不鮮。</p>
<p>再來，如果我在還沒有得到任何收入前，都要幫每個客戶花這麼多的時間來確認每個功能，等到真正開工後早就餓死了，更不用說他們可以拿這份報價單去找其他更划算的團隊來執行，除非可以把確認規格這環節作為服務的收費項目，不然這樣的作法是不切實際的。</p>
<p>其次，雙方的目標不一樣是讓結案如此困難的原因，甲方要能透過這個專案的產出來達成商業目標，而乙方是要嚴守當初報價的內容，避免無止境的修改需求或新功能讓自己或公司陷入營運的困境，但商場上每天都是瞬息萬變，昨天討論的內容可能今天就會被推翻，更不用說是在兩個月前討論的規格，怎麼可能在兩個月後完全一模一樣，所以乙方就會非常辛苦，為了要結案可能要做某些退讓，同時也要堅守底線不然案子賠到脫褲子，還要不讓夥伴覺得被凹，這工作真的裡外不是人。</p>
<p>從這樣的合作關係衍伸思考下去，因為利益衝突，甲方也不可能得到乙方 100% 的專業協助，但甲方當初尋求外部廠商協助不就是為了獲得這些專業建議？雖然以職場道德來看，乙方收了錢就是要盡心盡力把工作做到 100%，但人性不可能無時無刻永遠都保持完美，當修改到第 101 個版本、案子走了超過一年還沒收到第二筆款項，還能對這專案保有專注度並持續提供專業建議的人大概只剩下聖人，而我早就擺爛了。</p>
<p>所以我對於結案的認知，並非收到尾款或是過了約定結案時間後才算結案，而是乙方可以滿足甲方的商業目標而提供持續性的專業建議，當甲方決定暫停該專案或是結束與乙方的合作關係，這才是結案的時間點。</p>
<h2 id="敏捷式接案"><a href="#敏捷式接案" class="headerlink" title="敏捷式接案"></a>敏捷式接案</h2><p>真正了解到自己為何每次接案都無法在預計時間內完成後，開始思考怎麼樣的合作方式是可以符合自己的個性又能滿足客戶需求，最後我得到了「敏捷式接案」這個答案。</p>
<p>敏捷式接案的核心精神是捨棄傳統的報價單、合約書，改用時薪估價、Email 約定合作細節，並透明化開發過程，像是分享時間記錄、開放版本控管權限、每週固定回報進度等等，再根據實際花費時數來計算費用，以月結的方式來減少發案方的一次性大額開銷與維持接案方的固定現金流。</p>
<p>而且很多時候沒有做下去都不知道會發生什麼事，談的時候很愉快，結果實際做起跟彼此的想像落差很大，但真的發生也沒關係，就直接終止合作，敏捷式接案隨時都能「結案」，不需要為了硬撐合約書上的結案時間而折磨彼此，更不用吵已經做的進度佔專案總金額的多少比例。</p>
<p>敏捷式接案的具體執行步驟如下：</p>
<h3 id="開發小時數預估"><a href="#開發小時數預估" class="headerlink" title="開發小時數預估"></a>開發小時數預估</h3><p>當第一次聽完客戶的需求描述後，一定會有一大堆實作的問題待確認，但這階段為了要讓客戶有預算上的心理準備，做出初步的開發小時數評估是必要的。通常我會從三個方向切入：</p>
<ul>
<li>  <strong>前置作業</strong> - 研究客戶參考網站的網站架構、清查哪些頁面是客戶所需，以及建置開發環境所需的小時數評估</li>
<li>  <strong>頁面設計</strong> - 以完成單頁所需時間來評估，首頁或是已知的特殊頁面會花比較多的小時數，頁面設計的總小時數會依頁面數量而變動</li>
<li>  <strong>特定功能</strong> - 客戶再三強調的特定功能，可能會有多個，每個功能加入需求確認的時數，然後初步拆解開發這個功能需要哪些步驟</li>
</ul>
<p>這些任務需要花費多久的時間，全部都是建立在對自己工作習慣的認識，所以平常就要養成記錄工作時數的習慣，然後定期回顧有沒有造成什麼時間的浪費，久了自然而然就能越估越準。</p>
<p>當開始記錄工作小時數之後，任務拆解也就變得很自然，因為每個工作項目都要記錄的話，就能知道自己接下來要做的事情是什麼，雖然常常會有自己漏想的步驟，但因為有了記錄，在回顧的時候就會發現到原本做 A 功能只需 10 個 task，結果做完後發現竟然變成 15 個，檢視多出來的項目就能知道自己少了什麼，下次再做類似功能的時候就能修正自己的評估。</p>
<p>假設今天接到一個需要開發某種平台的案件，小時數預估的範例如下：</p>
<p>(一) 前置作業 - 8 小時</p>
<ul>
<li>  收集彙整參考平台之網站架構 / 功能 - 2hr</li>
<li>  資料欄位 / 網站架構確認 - 4hr</li>
<li>  頁面風格確認 - 1hr</li>
<li>  開發環境與程式碼部署配置 - 1hr</li>
</ul>
<p>(二) 頁面切版 - 視頁數而定</p>
<ul>
<li>  基礎架構&amp;RWD 開發 - 4hr</li>
<li>  首頁前端程式開發 - 4hr</li>
<li>  首頁後端資料串接 - 4hr</li>
<li>  內頁前端程式開發 - 2hr / 頁</li>
<li>  內頁後端資料串接 - 2hr / 頁</li>
</ul>
<p>(三) 會員功能開發 - 5 小時</p>
<ul>
<li>  會員註冊登入需求確認 - 1hr</li>
<li>  註冊 / 登入機制開發 - 2hr</li>
<li>  Facebook Login 整合 - 2hr</li>
</ul>
<p>(四) 簡訊驗證功能開發 - 6 小時</p>
<ul>
<li>  簡訊驗證流程確認 - 1hr</li>
<li>  簡訊廠商 API 文件研究 - 1hr</li>
<li>  會員註冊 API 串接 - 4hr</li>
</ul>
<p>(五) 前台發文功能開發 - 9 小時</p>
<ul>
<li>  發文管理需求確認 - 1hr</li>
<li>  介面設計 - 4hr</li>
<li>  介面功能 - 4hr</li>
</ul>
<p>(六) 廣告管理功能 - 4 小時</p>
<ul>
<li>  廣告管理需求確認 - 1hr</li>
<li>  廣告管理外掛 API 文件研究 - 1hr</li>
<li>  前台版面整合廣告管理外掛 - 2hr</li>
</ul>
<p>把每項功能拆解任務後，粗估每個項目所需時間，再把所有小時數進行加總乘以時薪，就可以估算出開發這個平台至少要準備多少預算，萬一超出客戶預算太多，就直接從清單中去刪減，留下真正需要的功能，或是請客戶準備好需求文件，以減少每個項目的需求確認時間。</p>
<h3 id="共同管理專案"><a href="#共同管理專案" class="headerlink" title="共同管理專案"></a>共同管理專案</h3><p>待預算經過客戶確認後，就能開工了。對，不用訂金、報價單、合約書，彼此合作的約定只需要透過 Email 保存即可，這時候只要在收信軟體開一個專案的資料夾，然後把關於這個案件的信件全都往裡面丟即可。</p>
<p>接下來各種工作上需要用到的工具都盡量採用雲端服務，主要目的是可以把文件分享給客戶，讓客戶可以清楚看到目前整理了什麼、執行到哪裡，並且可以直接在上面進行留言或討論。以下列出我常用的工具：</p>
<p><strong><a href="https://www.google.com.tw/intl/zh-TW/sheets/about/">Google 試算表</a></strong> - 在清查網站架構、功能與資料欄位的時候使用，能直接在上面與客戶討論哪些頁面需要新增，或是刪除不需要的功能</p>
<p><strong><a href="https://www.figma.com/">Figma</a></strong> - 雲端設計軟體，可以設計線框圖、介面、網站原型，支援多人同時編輯，並可以直接在上面註記留言</p>
<p><a href="https://www.markup.io/"><strong>Markup</strong></a> - 能直接在網站上註記留言的服務，這用來討論參考網站或是已經有網站雛形時非常好用，直接在畫面上標記留言可以清楚溝通要討論的地方，比起單純文字描述來得有效率的多</p>
<p><a href="https://github.com/"><strong>Github</strong></a> - 程式碼版本控管服務，把客戶帳號加進來，讓客戶可以看到每一次的 Commit，如果公司內部有工程師，也能同步檢視程式碼品質</p>
<p><a href="https://ora.pm/"><strong>Ora</strong></a> - 看板管理工具，可以很靈活的分類工作項目，並整合多種不同的檢視模式，在看板、待辦清單、日曆檢視之間可以快速切換，同時還能記錄每個工作項目的執行時間，上傳該工作項目所需文件，最重要的是報表檢視功能，可以查看每個專案的花費時間</p>
<p><strong><a href="https://freedcamp.com/">Freedcamp</a></strong> - 彙整修改清單的工具，與 Ora 性質類似，但 Ora 我比較習慣用來管理自己所有專案的工作時間，Freedcamp 主要提供給客戶管理修改驗收清單</p>
<p>以上的工具每一個都可以分享給客戶，讓他們隨時可以查看自己的工作狀況，有需要的時後也都可以在上面討論，透過 Ora 可以讓客戶知道我每天的工作小時數 ( 費用 )，進而隨時調整專案的方向</p>
<h3 id="定期回顧"><a href="#定期回顧" class="headerlink" title="定期回顧"></a>定期回顧</h3><p>當然，這麼多工具客戶不可能每天都上去看，因此每週的定期摘要回顧非常重要。我會在每週一上午發信給客戶，回報上週的工作內容、時間記錄以及本週預計要執行的項目，同時提醒客戶哪些東西待確認以及製作網站所需文件的準備。</p>
<p>在時間記錄的回報上，Ora 的報表功能超級方便，它可以整理出如下的圖表：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/08/CleanShot-2020-08-05-at-10.57.22-1024x821.jpg"></p>
<p>另外還可以匯出 CSV 檔列出每項 Task 的開始與結束時間，透過這樣的回顧來讓合作透明化，進而產生信賴感，最重要的是可以隨時掌握專案的開發進度，如果發現某些次要功能花費了太多時間，而核心功能卻完全沒有進展，就可以立刻調整開發順序，專注在最重要的工作項目上面。</p>
<p>最後到了月底，就能以整月份的工作時數向客戶請款，因為每週的開銷客戶都能看得到，所以在請款上就能減少疑慮，相較於以往的請款方式，每一期的款項都必須要先檢查是否有達成合約上的付款條件，萬一在請款條約上有不同的認知，就會演變成接案方覺得該拿到款項，但發案方卻認為還沒有滿足付款條件的窘境，這時候就必須花時間討論出共識來。</p>
<p>在討論請款的過程中，對接案方來說感覺很差，因為做了事卻無法準時拿到酬勞，而發案方也會很害怕，害怕付了錢之後就找不到人，因此定期回顧 + 月結可以很大程度消弭彼此的不安感，讓接案者可以每月有固定的現金流，而發案方可以攤提大筆費用的一次性開銷。</p>
<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>事實上國外的接案平台大部分都已經是採用時薪制了，國內的平台在這方面還是停留在固定金額的報價方式，這會導致發案者對於專案的預算評估過低，因為他們並不清楚開發一個網站到底需要多少時間成本，而很多小型工作室為了生存，就算賠錢也要先把案子簽下來，先拿到訂金撐過這個月再說。</p>
<p>因為案件金額低，接案者只能用量來彌補每月的資金缺口，當同時接了大量的案件後，要能順利準時結案除非多請人手幫忙，不然只能等著唱開天窗，但要請人經營成本又會上升，所以又要再接更多的案子，就這樣進入惡性的循環。</p>
<p>另一方面，當一個購物網站花 5,000 塊就可以找得到人做，對整體的接案市場並不是一件好事，從前期溝通、規劃、設計、開發、修改，就要花費非常多的時間，但發案者對於這樣的流程可能並不了解，所以價格普偏偏低，而剛出來接案的人以為這就是市場行情，長久下來的結果就是發案方得不到專業服務，接案方得不到應有報酬。</p>
<p>因此我認為好的報價要能符合時間比例原則，並以單位時薪來展現自我價值，同時搭配透明化、定期主動回報工作進度的共同管理專案模式，讓客戶可以根據當月已開發時數 (費用) 決定優先順序，站在客戶立場，能隨時掌握專案進度並調整開發方向，減少時間成本的浪費，對於接案者來說，保持每月現金流是能長久自我經營的關鍵。</p>
<h2 id="敏捷式接案-Q-amp-A"><a href="#敏捷式接案-Q-amp-A" class="headerlink" title="敏捷式接案 Q&amp;A"></a>敏捷式接案 Q&amp;A</h2><p>當然，任何方法用在真實世界總是會遇到很多挑戰，下面整理出一些我常被問到的問題：</p>
<h3 id="Q1-沒訂金、沒報價單、沒合約會不會沒保障？"><a href="#Q1-沒訂金、沒報價單、沒合約會不會沒保障？" class="headerlink" title="Q1. 沒訂金、沒報價單、沒合約會不會沒保障？"></a>Q1. 沒訂金、沒報價單、沒合約會不會沒保障？</h3><p>就算有訂金、報價單、合約也常常會有做到一半人不見或是錢燒完收不回尾款的案子，所謂的保障，對雙方來說就是時間到了看得到成果並且拿得到酬勞，一堆文件作業也都是為了要確保雙方能信守承諾，萬一當其中一方背信時有求償損失的備案而已。</p>
<p>對接案者來說，時薪計價最大的風險就是在於一個月的款項請不到，也就是白做工一個月，相較於以往好幾個月才能請一次款，只損失一個月的工作小時數已經是不幸的大幸了，而且只花一個月的時間就可以認識一間公司或一個人，不用花上好幾個月或好幾年的時間才知道，已經算是少走很多冤枉路了。</p>
<p>當然，如果要上法院，每週定期回報記錄 Email 都能拿來作為證據，但還是要衡量官司打下去的成本是否會讓自己深陷泥沼，畢竟一般有規模的公司都會有法務部門來專責處理法律糾紛，個人或小型工作室這方面就會比較吃虧。</p>
<p>對發案方來說，合作一個月的過程當中就能知道對方的工作方式，像是有沒有定期回報進度、是否有固定產出，如果發現苗頭不對，不用等到一個月，可能幾週就能知道是否要提早結清工作時數並尋找下一間合作廠商，如果有合約在，片面解約都是需要付出成本的，所以為了避免罰則，縱使知道合作對象有問題，還是必須要硬撐下去走完合約，通常最後的結果都不會太好。</p>
<h3 id="Q2-預估工作項目跟實際執行時間有落差？"><a href="#Q2-預估工作項目跟實際執行時間有落差？" class="headerlink" title="Q2. 預估工作項目跟實際執行時間有落差？"></a>Q2. 預估工作項目跟實際執行時間有落差？</h3><p>在網站還沒有完成架構圖、需求確認、操作流程確認等等的內容前，所有的估時都是憑著過去經驗來做預測的，就像要做一個購物網站，基本會有的功能像是購物車、結帳、金流、物流串接等等，這些都有過去的時數可以參考，但每家公司的商業情境不同，管理需求也不同，因此實際執行上一定會跟當初預估的工作項目有所落差。</p>
<p>但透過每週的定期回顧，就會慢慢釐清整個專案到底有多大，以及目前的完成進度百分比，所以重點應該是放在持續的追蹤與溝通，只要能透明化專案的資訊，客戶就不會覺得計時是黑箱作業而產生不信任感。</p>
<h3 id="Q3-開會也要計時？"><a href="#Q3-開會也要計時？" class="headerlink" title="Q3. 開會也要計時？"></a>Q3. 開會也要計時？</h3><p>一個專案最花時間的地方不是坐在電腦前面寫程式，而是釐清客戶的需求以及確認成品是否有滿足客戶需求，初期的需求溝通的越明確，就越能減少後期修改的時間，但要能協助沒有網站專業知識的客戶釐清需求是一門學問，而且很多時候懂得這些專業知識的客戶也會把需求變得錯綜複雜。</p>
<p>這是人之常情，在一個專案被發起時，公司內部會有許多的聲音需要整合，好的整合是可以排出優先順序，但大部分情況是包山包海，因此會產生矛盾與衝突，譬如說客服部希望在每頁的頁首可以放上明顯的客服信箱連結，以減少客服電話的量，但業務部希望放上聯絡電話，就能跟客戶進行直接銷售。</p>
<p>沒有整合好的需求就會變成 Email 跟聯絡電話同時以超巨大的 48px 顯示在頁首，什麼都要顯眼最後就會變成什麼都不顯眼，這時候釐清客戶的需求後就能提供相對應的作法，譬如說在電腦版顯示 Email、手機版顯示電話號碼，或是採取 A/B test 來實驗怎麼放會比較好，這些都是接案者的經驗，這些經驗沒有辦法 Google 得到，因為這是根據客戶的情境所設計的。</p>
<p>問出正確的問題、提出有效的作法、釐清真正重要的目標，這就是開會時接案者所提供的服務內容，就像美劇上常看到的心理醫生諮詢一樣，都是需要鐘點費的。</p>
<h3 id="Q4-為何這個工作項目要花這麼多時間？"><a href="#Q4-為何這個工作項目要花這麼多時間？" class="headerlink" title="Q4. 為何這個工作項目要花這麼多時間？"></a>Q4. 為何這個工作項目要花這麼多時間？</h3><p>有些客戶會質疑某些工作項目應該不會太複雜，花這麼多時間不太合理，這樣的情況有兩種，一種是任務沒有被正確的拆解，像是要做購物網站，購物功能只被當作是一個工作項目，購物功能包含有前台頁面的建置、商品管理、訂單管理、金物流串接、會員功能等等的細項，如果只列了一個購物功能可能就要會花費數十個小時來開發，從總小時數來看就會覺得這個單一工作項目花了太多時間。</p>
<p>另一種情況是客戶懂技術，他們以自己過去的經驗來判斷，所以會覺得某些時間的花費不合理。當然，工程師程度有高有低，做事的方式也會有所不同，這時候版本控管就是很好的溝通管道，因為程式碼的透明，客戶可以看到專案的原始碼，進而提出改善建議，也能判斷承接的工程師是否有辦法勝任這個工作。</p>
<p>我自己是還沒遇過被質疑某個工作項目的花費時間，但每次卡關時我一定會先暫停計時，因為我的認知是只要卡關就是代表自身能力不足，需要花時間再學習、研究、實踐，而客戶不是花錢來讓我學習的，所以遇到卡關時一定會停止計時來避免客戶的花費。</p>
<h3 id="Q5-程式的保固期間該如何計算？"><a href="#Q5-程式的保固期間該如何計算？" class="headerlink" title="Q5. 程式的保固期間該如何計算？"></a>Q5. 程式的保固期間該如何計算？</h3><p>不用計算。</p>
<p>通常保固指的是當專案已經過了約定結案日期後，如果還有發生程式上的臭蟲需要被修復的維護期間，在保固期間內的 Bug 修改，接案方有責任協助處理，這時候問題就來了，到底什麼是「臭蟲」？網站開不了？功能無法正常使用？實際用起來應該這樣改比較好？</p>
<p>關於臭蟲的定義也是一個吵不完的話題，常常客戶覺得是 Bug 的地方也許是某個邏輯沒有正確實現，但對於接案方來說這個邏輯並沒有在當初開發時接受到客戶的需求，而且結案時不都已經驗收過了，怎麼會現在才發現有這樣的問題？或是更多時候是使用者發現的 Bug，可能是公司內部操作人員或是外部使用者，這些都讓臭蟲的定義很難有一個明確的標準。</p>
<p>回到保固的定義，指的是過了「約定結案日期」後的維護，以敏捷式接案的定義來看，並沒有所謂的結案日期，因此也就沒有保固這樣的概念。網站上線後有問題，持續的以時薪計價進行修改臭蟲或是根據使用者回饋進行調整，就不用為了保固範圍而犧牲能讓網站變得更好的改進措施，而接案方也能提供更多實務上的建議讓網站達成商業目標。</p>
<blockquote>
<p>如果你認同這樣的理念並想嘗試這樣的模式來進行專案的話，可以參考我的「<a href="https://oberonlai.blog/tw/how-can-oberon-help-you/">合作方式</a>」</p>
</blockquote>
]]></content>
      <categories>
        <category>商業模式</category>
        <category>專案</category>
        <category>專案即生活</category>
        <category>網站企劃</category>
        <category>老人碎念</category>
        <category>接案</category>
      </categories>
      <tags>
        <tag>敏捷式接案</tag>
        <tag>報價</tag>
        <tag>接案</tag>
        <tag>看板方法</tag>
        <tag>WordPress 接案</tag>
      </tags>
  </entry>
  <entry>
    <title>寫給網頁設計師-如何整合html頁面至Wordpress（三）</title>
    <url>/tw/html2wordpress-3/</url>
    <content><![CDATA[<p>6. <strong>增加企業部落格文章</strong>-–新增文章功能 企業部落格的內容新增方式，是要以文章為主體，新增方法如下 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/addarticle.jpg" alt="新增部落格文章" title="addarticle"> 在左方工具列找到文章 &gt; 新增文章，再輸入標題與文章內容，與分頁不同的是，它沒有模版可以選擇，另外它還可以對文章進行分類與下標籤，這對於網站的搜尋引擎最佳化作業提供運用的空間，完成後點選右方藍色的發表按鈕，新文章就可以發表完成。</p>
<span id="more"></span>
<p>7.<strong>設定網站起始首頁與部落格網址</strong>-–運用外掛Home Page Control 現在我們已經完成的頁面有網站首頁、關於我們、服務項目、聯絡我們，以及剛剛新增部落格的幾篇文章，現在試著連到網站首頁，會發現是以部落格為主要頁面，而不是我們所設計的網站首頁，這時就需要工具來幫忙設定一下，而這工具就是我們之前安裝的Home Page Control。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/homepagecontrol3.jpg" alt="自訂首頁和部落格目錄名稱" title="homepagecontrol3"> 在選擇首頁的部份，點選下拉選單，會發現有我們剛剛所建立的四頁分頁，網站首頁、關於我們、服務項目以及聯絡我們，只要選擇網站首頁，按下儲存後，再回到首頁查看，就會發現我們已經成功改變首頁為我們自己設定的網站首頁了。 而自定部落格目錄名稱則是把網址設成你自己想要的，這名稱一定要設，不然你就沒有網址可以連到你的部落格，另外順帶一提網址的結構，我個人是喜歡用我自己命名的分頁名稱做為網址結尾，看起來清爽又乾淨， <img src="https://oberonlai.blog/wp-content/uploads/2011/09/url.jpg" alt="自訂網址結構" title="url"> 從左方工具選單設定 &gt; 固定網址，勾選最後一個自訂結構，並輸入/%postname%/，這樣我們就可以回去網誌分頁設定目錄名稱 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/url2.jpg" alt="設定目錄名稱" title="url2"> 點選編輯，就可以更改目錄名稱，建議最好是用英文，像聯絡我們就用contact簡單易懂的單字。看到這邊各位應該知道，這目錄名稱並不是我們通常所使用的資料夾名稱，而是可自行命名的，所以這名稱不用真的符合資料夾的名稱。 能夠做到這邊，基本上網站已經完成八成了，剩下最後的關鍵—導覽列的設定。 &lt;四&gt;設定導覽列 在wordpress 3.0的版本開始，在左方的工具列 &gt; 外觀，找的到選單的選項，如果你沒看到的話，趕緊更新一下版本吧，因為這是wordpress正式邁向內容管理系統 (CMS) 的重大一步，就是因為這超級無敵好用的內建選單功能!!! <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav.jpg" alt="自訂選單功能" title="nav"> 以我用過xoops和joomla的經驗來說，wordpress的選單設定實在是設計的最傑出的，簡單說，只有wordpress是從”非工程師”的角度來設計所有的設定流程。 然而雖然3.0版有內建的選單功能，但是你安裝的佈景主題也必須要有設定選單的函式，在這篇文章所提供的這份模版主題，我已經有把它加入選單功能，增加的方法需要修改function.php，對，就是之前我說沒事不要進來，進來會出人命的地方，所以我已經設定好兩組選單，一個是在header的主選單組，一個是在footer的頁尾選單組， 其它類型的選單像是次選單我們可以用Sidebar來設定，因此基本上要動到fucntion.php的機會不高，但我相信各位都有像魯夫一樣不去冒險會死掉的精神，或是有時需要增加特定選單的狀況，我稍後會介紹該如何新增一組選單組。 正常的做法，在我們網誌分頁已經都設定好的同時，相對應的選項程式也會自行產出，我們只要把這些選項加到選單組即可。開始建立之前，我把先把顯示選項調整如下圖 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/option.jpg" alt="點選右上角的顯示選項" title="option"> 在右上角有一個顯示選項，點下去時上方欄位會整個展開 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/option2.jpg" alt="顯示欄位選擇" title="option2"> 依照圖中選項來勾選，裡面的設定包含是否要顯示選單的id或class名，以及連結目標(target)等等，並把不必要的欄位隱藏，這樣比較好辦事。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav2.jpg" alt="建立選單組" title="nav2"> 第一步先建立你的選單組，最好是用英文命名，因為這會是css辨識選單組的名稱。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav4.jpg" alt="控制選單組位置" title="nav4"> 我建立了一個選單組名為main，左側的佈景主題位置就是可以選擇要把選單組顯示在那一個地方，而這些位置，是透過php的一段語法所控制的，主選單位置語法位於header.php與頁尾選單則在footer.php裡面。 假設現在我們要把剛剛新增的選單組main放在主選單的位置，只要在佈景主題位置主選單的下拉清單就可以看到我們所新增的main，選擇它按儲存，這樣就完成選單組的位置安排了。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav5.jpg" alt="選擇選單組的位置" title="nav5"> 如圖選擇剛剛所建立的選單組main即可 決定好位置之後，那選單組的選項呢?聰明的你一定有看到左下方的網誌分頁 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav6.jpg" alt="增加選單組的選項" title="nav6"> 我們剛剛所建立的分頁，都顯示在這邊，按選擇全部，並新增至選單，最後儲存選單，不到三秒，選單就搞定了，但是順序有點亂，而且還沒有看到最重要的企業部落格選單，接下來，我們做自訂鍊結的部份。 還記得之前我們在Home-Page Control所設定的部落格目錄嗎?先開個新網頁，去連到你的部落格，譬如這是我的部落格網址，<a href="https://oberonlai.blog/wblog%EF%BC%8C%E6%8A%8A%E5%AE%83%E8%A4%87%E8%A3%BD%E4%B8%8B%E4%BE%86">https://oberonlai.blog/wblog，把它複製下來</a> <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav8.jpg" alt="增加自訂鍊結" title="nav8"> 把網址貼到鍊結網址的欄位中，並把選項名稱命名為企業部落格，最後按新增至選單，就完成部落格的連結了。 依照這邏輯，看你是想連google還是yahoo都隨便你，只要把網址貼進去就好，當選項都成功加入選單組之後，我們再來把它整理一下。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav9.jpg" alt="當前選項順序" title="nav9"> 這是目前的選單順序，我看它很不順眼，我想把網站首頁放第一個、然後是關於我們、服務項目…，最後是聯絡我們，調整的方法非常簡單也直覺 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav10.jpg" alt="拖曳選項改變順序" title="nav10"> 是地，就是脫拖一下這麼簡單，第一次看到這種UI出現在wordpress時，感動的都快要掉淚了，特別是最近在用xoops，還要填數字來改變順序的蠢方法比起來，wordpress根本就是佛心來的，另外也可以用拖曳來決定層級，實在是直覺到爆炸。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav11.jpg" alt="設定class名" title="nav11"> 按下選項右邊的小三角型，會出現一些選項，包含要讓css辨識名稱，或是網頁的開啟目標都可以設在這邊，每個選項都可以獨立設定，如果要用圖片做選單就非常方便了。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav12.jpg" alt="完成選單順序" title="nav12"> 完成選單順序，記得點儲存選單，就這樣，打完收工。 其它類型的選單，像是次選單或功能選單等等，我們一律都可以用原有的sidebar來解決。sidebar本來是wordpress設計來建立一些瀏覽部落格的輔助工具，在這個版本之中，也可以把選單組加入到sidebar中，這樣可以更方便的來控制次選單。 接著我們再來新增一組關於我們的子選單，新增選單組請參考上面的步驟。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav13.jpg" title="nav13"> 我新增了選單組叫做sub-about，裡面包含了兩個選單，公司歷史與公司文化。 接著選擇左方工具列&gt;外觀&gt;模組，就會看到可以放在sidebar的所有功能。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav14.jpg" alt="啟用模組功能" title="nav14"> 在這邊可以看到許多部落格會常用到的功能，像是文章彙整、近期迴響等功能，這些模組你有空的自己玩看看，當然也可以用裝外掛的方式進行擴充。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav15.jpg" alt="將自訂選單加入sidebar" title="nav15"> 現在我們只要找到自訂選單，然後把它優雅的拖曳到Sidebar Widget欄位中， <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav16.jpg" alt="sidebar選擇選單組" title="nav16"> 然後就會看到如圖中的選項，如果沒有看到請重新整理一下即可，給子選單一個標題，然後用下拉選單選擇我們剛剛建立的選單組sub-about，完成後按下儲存，即成功新增子選單到sidebar中。 假設我們把其它頁面的子選單也都完成了，要來陸續增加到sidebar之中，但你一定會發現，sidebar雖然可以增加很多組選單組，去前臺的看的時候，會發現每一個分頁都是共用所有一樣的sidebar，也就是說，在關於我們可以看到服務項目的子選單，在服務項目也可以看到關於我們的子選單，但這世界不應該是這樣的啊啊啊啊! 當有人說一樣的東西完美無缺的時候，請小心這個人，它不是業務員就是購物頻道主持人，但我都不是，所以我要在這邊來講講wordpress的壞話，那就是他無法從模組這邊設定我那一個分頁要套用那一個模組，這是內容管理系統的基本功能，wordpress如果要朝標準的cms發展，就不能不加入這樣的功能。 之所以抱怨這麼多，是因為之前真的被它玩到了，為了解決不同分頁有不同模組的問題，我甚至一度想直接把次選單做在網誌分頁裡面，把天殺的sidebar踢的遠遠的，雖然很蠢，但至少控制權在自己手上。 後來谷了許多資料，光是這種功能要怎麼下關鍵字查詢就已經夠難了，有找到的多半不是我要的效果，最後在卡了將近三天左右，總算找到了不甚完美的解決辦法，就是安裝一個外掛，叫做Widget logic。 <a href="http://wordpress.org/extend/plugins/widget-logic/">下載點</a> 以一般安裝外掛的方式安裝，完成後會在模組的Sidebar Widget裡面，再展開其中一個我們所做的選單組，就會發現多了一個欄位叫做widget logic <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav17.jpg" alt="widget logic" title="nav17"> 大家一定會困惑，單單多了一個這樣的欄位，要如何去判斷那一頁該出現相對應的sidebar，而這也是為何它不是完美解的原因，因為它要自行輸入判斷的語法…..暈~ <a href="http://edblog.net/archives/2063">艾德的部落格天空</a>是我找到這個解決辦法的地方，沒有他我現在大概還在原地吃屎，他提供了一些判斷的語法。 <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav18.jpg" alt="widget logic的判斷語法" title="nav18"> 看似有點複雜但實際上很好懂，我們想要的功能在第三點—is_page(‘分頁名稱’) ，我們把網誌分頁網址的結尾，也就是我們自己命名的名稱當做判斷的依據， <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav19.jpg" alt="widget logic的判斷依據" title="nav19"> 分頁”關於我們”叫做aboutus，那就回到模組的widget logic中，寫is_page(‘aboutus’) ， <img src="https://oberonlai.blog/wp-content/uploads/2011/09/nav20.jpg" alt="寫入判斷語法" title="nav20"> 就是這樣 如果是同一組選單組，想要同時出現在兩個或三個分頁中該怎麼辦?我嘗試在google analytics裡面需要常常用到但也是把我搞得半死的正規表示法，或的表示法是，也就是你的鍵盤的shift+\，所以如果我想讓同一個選單組出現在兩個分頁中，只要寫成這樣 <strong>is_page(“aboutus”)is_page(“contact”)</strong> 依照以上的解法，總算可以這個問題，但理想中還是希望可在設定Sidebar Widget的同時，多出一個欄位選擇出現位置，使用上會較為直覺，如果各位知道有更好的方法請務必讓我知道，不然只能期待下個版本推出時能夠有所改善了。 關於選單的部份，只要依循著上述的使用流程，基本上都能完成我們所需要的功能，但有時總是會有例外的情況，所以我再把關於wordpress的選單設定，解釋其程式碼所負責的部份，讓日後各位可針對自己的需求來修改。 首先先打開function.php，可以在第三行找到一個註解-增加選單功能 <img src="https://oberonlai.blog/wp-content/uploads/2011/10/nav21.jpg" alt="解釋nav function" title="nav21"> 這邊有句判斷式，當函式register_nav_menus存在時，增加一組陣列，第一個資料叫做header-menu，辨識的名稱為主選單，第二個資料叫做footer-menu，名稱為頁尾選單 大家在看這一段的時候，重點就是header-menu和footer-menu，而它們的名稱有沒有似曾相識? <img src="https://oberonlai.blog/wp-content/uploads/2011/10/nav22.jpg" alt="選單的容器" title="nav22"> 這兩個名字主選單與頁尾選單就是定義在這一頁之中會出現的佈景主題位置 在funtion.php之中定義的這兩個選單，主要是將選單的功能開啟，雖然它是以選單的功能和位置來命名，但在這邊的設定最主要是在告訴系統我們有兩套選單。 ‘header-memu’ =&gt; ‘主選單’ 引號中的名稱皆可自行定義，前面的英文是在調用這組選單時的辨識名稱，而後面的中文字則如上述所提到的是控制後臺選單的位置名稱，如果你覺得兩組不夠應付你網站中的選單，只要在這邊增加 ‘your-menu’ =&gt; ‘你的選單’, 即可，看需求來增加。 接著我們來看在開啟選單功能後，該如何把這些選單定義到我們希望它出現的位置，先以header-menu為例，這是主選單的部份，我習慣的做法是把主選單放在header.php，所以先打開這個檔案， 在第55行可以找到定義選單。 <img src="https://oberonlai.blog/wp-content/uploads/2011/10/nav23.jpg" alt="header-menu的位置" title="nav23"> wp_nav_menu是在wordpress中調用選單的函式，後面接的 ‘theme_location’ =&gt; ‘header-menu’ 則是代表套用這個佈景主題所擁有的選單，也就是我們自己定義的header-menu。 以此類推，foot-menu也是一樣的寫法，打開footer.php，在第5行可以看到同樣的語法 <img src="https://oberonlai.blog/wp-content/uploads/2011/10/nav24.jpg" alt="footer-menu的位置" title="nav24"> 跟上面一樣的wp_nav_menu，只是換成footer-menu 透過以上的解說，我們就能彈性控制選單的位置，譬如今天我的主選單是在側欄而不是在上方，就可以把wp_nav_menu這一段整行剪下貼到index.php裡面的某個你自己定義的div中，或是要定義一個頁面中的常用功能選單，都可以運用這樣的方式來做設定，相信已能滿足絕大多數的需求。</p>
<h2 id="lt-五-gt-設計css"><a href="#lt-五-gt-設計css" class="headerlink" title="&lt;五&gt;設計css"></a>&lt;五&gt;設計css</h2><p>當把所有網誌分頁的html都建置完成後，最後再來設計css。wordpress的css很單純，就是一個檔案style.css，通常我習慣的做法是，使用chrome瀏覽器的檢視元素 <img src="https://oberonlai.blog/wp-content/uploads/2011/10/css01.jpg" alt="chrome瀏覽器的檢視元素" title="css01"> 使用google瀏覽器chrome，打開頁面，在空白的地方按右鍵，選擇最下方的檢視元素 <img src="https://oberonlai.blog/wp-content/uploads/2011/10/css02.jpg" alt="檢視元素內容" title="css02"> 當滑鼠移到某段div時，網頁中會出現相對應的區塊，而在檢視元素中點擊某段標籤，它也會呈現出相對應的css，並且可以勾選或關閉來即時檢視css的套用效果，十分的方便，要修改時再去尋找相對應的id或class即可。 在style.css的檔案中，我把初始化的語法用import來匯入reset.css，如果各位有自己的初始化語法，就貼在reset.css即可，剩下的就是在把你寫好的css全部貼過來吧!</p>
<h2 id="lt-六-gt-結論"><a href="#lt-六-gt-結論" class="headerlink" title="&lt;六&gt;結論"></a>&lt;六&gt;結論</h2><p>每一套open cms都有自己的特性，也都有自己的支持者，但以一位網頁設計師的角度而言，我還是會推薦wordpress，因為它建立頁面的方式最直覺，在選單的控制上也非常彈性，外掛的數量也是多到爆炸，要能夠讓我相信一套cms很好用，只要頁面好增加，選單好控制就夠了，其它都是附屬的附加價值。 不像xoops增加頁面是要用模組的概念，沒有裝模組你就沒有頁面，而joomla則是要分單元，分類、文章，選單的控制更是麻煩，相信有做過的人就能理解我在說什麼。 所以為了讓還未碰觸過open cms的朋友們少走些冤枉路，我以自身的經驗來分享wordpress如何快速的與我們現有的作業結合，希望能對大家有所幫助，有任何疑問或是有更好的做法也歡迎留言給我，畢竟我也完全沒學過程式，很多自己摸索的不一定是最好的方法，還請各位不吝指教，先感謝各位了!</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>【 工具 】使用 ODS starter theme 開發 WordPress 佈景主題</title>
    <url>/tw/ods-starter-theme/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>坦白說做了這麼多年的專案，始終覺得沒有找到一套適合自己的 Starter Theme，不管是官方的還是很多社群朋友推薦的，用起來都還是有卡卡的感覺。</p>
<p>後來看到現在很多網路公司都會開發自己的 <a href="https://designsystemsrepo.com/design-systems-recent">Design System</a>，驚覺到要有一套自己的系統才能讓整個工作流程更加順暢，進而建立自己的標準化規格，讓未來的自己好過些。</p>
<p>以往在進行 A 專案的時候，都會去爬以前寫過的程式碼，它們可能散落在 BCD 專案裡面，但時間一久再加上年紀變大，常常想不起來之前寫過的東西放在哪個專案裡面。</p>
<p>另一方面，自己在寫的時候很少遵循什麼 Code Standard，所以就算找到之前的程式碼，也會先碎碎念自己以前怎麼會把 Code 寫成這副德行，然後真的要用的時候都還要再花時間進行整理。</p>
<p>而且雖然是自己寫的東西，但不少的寫法都是 Google 來的，為什麼要這樣寫？這樣寫的用意是什麼？當專案結束拿到尾款後，這些問題就也隨風而去了，當下次再碰到類似的狀況要修改成不同的功能，又要再花很多時間來重新研究。</p>
<p>基於這些理由，<a href="https://ods.obeornlai.blog/">ODS - Oberon Design System</a> （歐迪賽系統XD）就誕生了～～～</p>
<span id="more"></span>

<p><a href="https://ods.oberonlai.blog/"><img src="https://oberonlai.blog/wp-content/uploads/2020/04/screenshot-1024x768.jpg"></a></p>
<h2 id="什麼是-Oberon-Design-System？"><a href="#什麼是-Oberon-Design-System？" class="headerlink" title="什麼是 Oberon Design System？"></a>什麼是 Oberon Design System？</h2><p>歐迪賽系統分為兩個部分， UI 元件與 WordPress PHP Function。我把近期的專案整理成一個一個獨立的 UI 元件，然後在做 WordPress 的時候也把常用到的 WP_Query、Function 根據範本收集起來，並且做了截圖以及功能的說明。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/04/CleanShot-2020-04-18-at-09.53.58.jpg"></p>
<p>每個 UI 元件會有四個不同的頁籤，分別是不同開發階段的程式碼，有前端的 Pug、Scss 與 JS，以及在 WordPress 之中要如何實現這個元件的 PHP 寫法。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/04/CleanShot-2020-04-25-at-12.10.16.jpg"></p>
<p>針對 WordPress 的部分，依照開發 Theme、Plugin、WP-Admin 與 WooCommerce 來區分，然後把註解附上，幫助自己之後要用的時候能理解程式的寫法。</p>
<p>PHP 的部分可以直接使用，但前端的部分因為我是根據自己的工作流程所整理的，因此會包含一些打包工具的設定，像是 Pug、Scss 的編譯、ES6 的 Module 與 Babel，這部分就是 ODS Starter Theme 派上用場的時候了。</p>
<h2 id="ODS-Starter-Theme-介紹"><a href="#ODS-Starter-Theme-介紹" class="headerlink" title="ODS Starter Theme 介紹"></a>ODS Starter Theme 介紹</h2><p>以前我在開始新專案的時候，會直接把上一個專案的資料夾直接複製一份出來，然後把裡面用不到的東西刪一刪，這樣做的問題是很多東西不敢刪，因為怕會刪到之後可能要用到的東西，搞得還是要去上一個專案找程式碼來複製貼上。</p>
<p>但有了 ODS 之後，我可以把 Starter Theme 精簡到不能再精簡，只留下最必要的基本功能與範本，遇到要用的東西再去 ODS 複製貼上就好，這樣就再也不用擔心會漏掉什麼必要的功能而要把所有東西都塞進去了。</p>
<p>ODS Starter Theme 從這邊下載—&gt; <a href="https://github.com/oberonlai/ods"></a><a href="https://github.com/oberonlai/ods">https://github.com/oberonlai/ods</a><strong>，</strong>以下就資料夾結構做說明：</p>
<h3 id="themes-ods-src"><a href="#themes-ods-src" class="headerlink" title="themes/ods/src"></a><strong>themes/ods/src</strong></h3><p>該資料夾放的是所有前端開發需要用到的檔案，包含 Pug、Scss、JS 與圖片。</p>
<h3 id="themes-ods-src-layouts"><a href="#themes-ods-src-layouts" class="headerlink" title="themes/ods/src/_layouts"></a><strong>themes/ods/src/_layouts</strong></h3><p>該資料夾放的是 Pug 的核心模板 temp.pug，它定義了所有頁面的基本框架，以及需要引入的模板。</p>
<h3 id="themes-ods-src-partials"><a href="#themes-ods-src-partials" class="headerlink" title="themes/ods/src/_partials"></a><strong>themes/ods/src/_partials</strong></h3><p>該資料夾放的是 Pug 的區塊模板，像是 Header、Footer 以及其他可以模組化的元件。</p>
<h3 id="themes-ods-assets"><a href="#themes-ods-assets" class="headerlink" title="themes/ods/assets"></a><strong>themes/ods/assets</strong></h3><p>執行 npm run build 之後會產生的靜態資源檔，也就是編譯 img、js、css 的資料夾，這些是 Theme 需要引入的檔案。</p>
<h3 id="themes-ods-dev"><a href="#themes-ods-dev" class="headerlink" title="themes/ods/dev"></a><strong>themes/ods/dev</strong></h3><p>執行 npm run start 之後產生的靜態資源檔，通常為前端開發時所用的資源，因此除了 img、css、js 以外，還會包含編譯 Pug 後的 Html 檔。</p>
<p>其他根目錄中的 PHP 檔就是 WordPress Theme 的基本檔案，排除各種範本只留下最基本的 index.php，以及 header 與 footer，functions.php 只放了引入靜態資源檔的 Action 以及一些版本資訊移除的 Filter，和根據案件需求啟用或關閉 Gutenberg 編輯器的 Filter。</p>
<p>就這樣，沒有預設任何資料夾的整理方式，只留下必要的檔案，要找 Code 去 ODS 找，要找範本去 <a href="https://developer.wordpress.org/themes/basics/template-hierarchy/">Theme Hierarchy</a> 找，用久用熟了很自然的就能針對需要的內容開相對應的範本檔案，就不用再留下一堆可能用不到的東西了。</p>
<p>至於註冊 Custom Post Type、Taxonomy、WordPress API 一律放在外掛來處理，Theme 只留下最基本的外觀樣式。</p>
<h2 id="ODS-Starter-Theme-使用說明書"><a href="#ODS-Starter-Theme-使用說明書" class="headerlink" title="ODS Starter Theme 使用說明書"></a>ODS Starter Theme 使用說明書</h2><p>接下來用我在實際專案上的工作流程來說明如何使用 ODS Starter Theme：</p>
<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a><strong>前置作業</strong></h3><p>主要是安裝 Node 與 NPM，以及最重要的 WordPress 本機開發環境，Node 與 NPM 根據使用的作業系統有不同的安裝方法，我是 Mac 我用 <a href="https://www.itread01.com/content/1550405718.html">Homebrew</a>。</p>
<p>本機開發環境我用 Valet，可以參考我之前的整理的文章 - <a href="https://oberonlai.blog/valetpress-setup/">Mac 限定 WordPress 本機開發環境 Valet + ValetPress</a>，也可以使用 <a href="https://localwp.com/">Local</a> ，安裝上方便很多而且 PC 跟 Mac 都可以使用。</p>
<p>環境都搞定之後，先把 <a href="https://github.com/oberonlai/ods">ODS Starter Theme</a> clone 到本機 WordPress wp-content/themes 的目錄底下，如果是用 ValetPress 的話更方便，把 git clone <a href="https://github.com/oberonlai/ods.git">https://github.com/oberonlai/ods.git</a> 寫在腳本裡面，這樣新開一個站的時候就可以自動把 Theme 安裝好並且啟用，甚至把下面相關的指令一併變成腳本。</p>
<p>接下來先安裝一個很方便的套件 npm 叫做 <a href="https://www.npmjs.com/package/npm-upgrade">npm-upgrade</a>，它可以偵測再 package.json 裡面的套件是否有新的版本，輸入以下指令進行安裝：</p>
<p>$ npm i -g npm-upgrade</p>
<p>接下來開啟 Terminal 把目錄切換到 wp-content/themes/ods 底下，先跑一次 npm-update</p>
<p>wp-content/themes/ods$ npm-upgrade</p>
<p>Checking for outdated dependencies for “/Users/oberonlai/Sites/Hellowp/wp-content/themes/ods/package.json”…<br>[====================] 6/6 100%</p>
<p>New versions of active modules available:</p>
<p>  uikit                                 ^3.4.0   →   ^3.4.1<br>  parcel-plugin-custom-dist-structure   ^1.1.3   →   ^1.1.9 </p>
<p>? Update “uikit” in package.json from ^3.4.0 to ^3.4.1? Yes</p>
<p>? Update “parcel-plugin-custom-dist-structure” in package.json from ^1.1.3 to ^1.1.9? Yes</p>
<p>These packages will be updated:</p>
<p>  uikit                                 ^3.4.0   →   ^3.4.1<br>  parcel-plugin-custom-dist-structure   ^1.1.3   →   ^1.1.9 </p>
<p>? Update package.json? Yes</p>
<p>它會逐一問你是否要更新現有的 Node 套件，跟 WordPress 外掛一樣，為了安全性考量，每個新的專案我都會習慣先更新，接下來才會安裝它們：</p>
<p>wp-content/themes/ods$ npm install</p>
<p>npm notice created a lockfile as package-lock.json. You should commit this file.<br>npm WARN ods No description<br>npm WARN ods No repository field.<br>npm WARN ods No license field.</p>
<p>removed 1 package, updated 3 packages and audited 10259 packages in 12.748s</p>
<p>23 packages are looking for funding<br>  run `npm fund` for details</p>
<p>found 0 vulnerabilities</p>
<p>到這邊 Node 的環境就準備完成了，接下來是開發工具的介紹。</p>
<h3 id="Parcel"><a href="#Parcel" class="headerlink" title="Parcel"></a><strong>Parcel</strong></h3><p><a href="https://parceljs.org/"><img src="https://oberonlai.blog/wp-content/uploads/2020/04/CleanShot-2020-04-18-at-11.13.47.jpg"></a></p>
<p>前端開發的流程越來越複雜，常常有時候光設定環境半天就去了而且還搞不定 (怒)，於是有了 Parcel 的出現來拯救大家。</p>
<p>這套打包工具我從前年就注意到了，它號稱不用寫任何設定檔，只要裝上之後，它就會根據你寫的語言來自動安裝相對應的套件，十分方便，而且編譯速度飛快，再搭配快取的話一整個爽度十足。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/04/CleanShot-2020-04-18-at-11.51.03.jpg"></p>
<p>但也因為這樣的方便性，當想要做一些客製化調整的時候讓我完全不知道怎麼下手，再加上東西太新相關討論太少，所以遲遲無法把它用在正式的專案上。</p>
<p>去年年中推出了 Parcel 2，非常興奮的立馬來測試，結果還是無法解決其中一個我最在意的問題：那就是編譯後根據檔案格式來分類資料夾，因為預設的狀況是所有編譯好的檔案全都會在同一層目錄，看了超礙眼。</p>
<p>直到今年年初想說來看看有沒有解決這個問題了，但 Parcel 2 目前還有上百個 issue 還沒解決，更不用說我在意的問題被排在好後面，準備放棄之餘，碰巧逛到神人出來拯救大眾了，這位大大叫 Vladimir Mikulic，他寫了一支 <a href="https://github.com/VladimirMikulic/parcel-plugin-custom-dist-structure">parcel-plugin-custom-dist-structure</a> 可以完美分類 dist 資料夾，而且設定十分簡單，</p>
<p>只要在 package.json 裡面定義好某種格式的檔案會去到哪一個資料夾名稱，剩下的它會自動幫你搞定。</p>
<p>“customDistStructure”: {<br>    “config”: {<br>      “.js”: “js”,<br>      “.css”: “css”,<br>      “img”: [<br>        “.jpg”,<br>        “.png”,<br>        “.svg”<br>      ]<br>    },<br>    “options”: {<br>      “development”: true<br>    }<br>  }</p>
<p>.js 檔會去 js 資料夾，.jpg、.png、.svg 會去 img 資料夾，這樣就可以解決我的問題了，而且 Vladimir Mikulic 大大超用心，回報 issue 每天都會即時更新處理狀態，實在是太感謝他，讓我終於能在正式專案中使用 Parcel 了！</p>
<p>目前我是用 Parcel 1 的版本，因為這支外掛只支援一代，Parcel 與分類資料夾的外掛都已經定義在 ODS 的 package.json 裡面了，所以只要下 npm install 就可以一次安裝完成。</p>
<p>需要注意的地方是 scripts 的部分：</p>
<p>“scripts”: {<br>  “build”: “parcel build –no-content-hash src/js/script.js src/sass/style.scss src/img/** –no-source-maps -d assets”,<br>  “start”: “parcel serve src/*.pug –no-source-maps -d dev”<br>},</p>
<p>當執行 npm run start 的時候，會啟用 Parcel 的本地環境，然後會即時更新所有檔案的修改狀態，預設 port 是 localhost:1234，然後會把檔案編譯到 dev 這跟資料夾</p>
<p>當執行 npm run build 的時候，會執行 Parcel 的 Build 指令，也就是編譯出正式環境需要用的檔案，給 Theme 的只需要靜態資源檔，然後放在 assets 這個資料夾，wp_enqueue_script 的檔案路徑也是指到這邊。</p>
<p>更多 Parcel CLI 可以參考官方文件 —&gt; <a href="https://zh-tw.parceljs.org/cli.html">https://zh-tw.parceljs.org/cli.html</a></p>
<h3 id="UIKit"><a href="#UIKit" class="headerlink" title="UIKit"></a><strong>UIKit</strong></h3><p><a href="https://getuikit.com/"><img src="https://oberonlai.blog/wp-content/uploads/2020/04/CleanShot-2020-04-18-at-12.28.17-1024x746.jpg"></a></p>
<p>自從三年前發現了它之後，它現在是我每個專案的必備 CSS 框架，與最熱門的 Bootstrap 或其他框架不同，它不用再裝其他套件就可以使用 Modal、Slideshow、Sticky Menu 之類的效果，</p>
<p>當然也提供了很多 CSS class 來做版面的設計，像是 Container、Grid、Column，它提供的元件超級豐富也超實用，我沒事的時候就會打開他們的網站把每個元件都瀏覽一遍用法，現在都能把常用的背起來了。</p>
<p>另一方面，它的 JS API 也非常完整，完整到我可以借用它來開發<a href="https://oberonlai.blog/flash-stories-technical/">一套編輯器</a>，下面會說明在前端開發時如何運用以及客製化 UIKit，ODS 列出的所有元件，都是根據它衍伸而來的，熟悉它了之後做介面就會超快而且又有組織。</p>
<p>跟 Parcel 一樣，UIkit 已經整合到 ODS Starter Theme 裡面，安裝一次 npm install 後即可使用。</p>
<h3 id="Pug"><a href="#Pug" class="headerlink" title="Pug"></a><strong>Pug</strong></h3><p><a href="https://pugjs.org/api/getting-started.html"><img src="https://oberonlai.blog/wp-content/uploads/2020/04/1CO3fAi5OwGbOEU6k1eueJA-1024x576.jpeg"></a></p>
<p>Pug 可以省去寫 HTML 關閉的標籤，還可以少打 class、style 這些屬性的英文字，然後透過縮排來定義層級，再搭配變數、迴圈、判斷式、引入等等的功能來模組化 HTML。</p>
<p>其中最方便的地方是在於資料結構的定義，找到 themes/ods/src/ 裡面有一支 pug.config.js 的設定檔，可以事先定義好需要用到的變數並且用物件的方式來呈現。</p>
<p>module.exports = {<br>  locals: {<br>    header: [<br>      {<br>        navbar: [<br>          {<br>            src: “img/logo.svg”,<br>            nav: [<br>              {<br>                text: “Menu1”,<br>                href: “#”<br>              },<br>              {<br>                text: “Menu2”,<br>                href: “#”<br>              }<br>            ]<br>          }<br>        ]<br>      }<br>    ],<br>    frontPage: [<br>      {<br>        slidershow: [<br>          {<br>            src: “img/default.jpg”,<br>            title: “文章標題”,<br>            desc:”文章摘要”,<br>            text: “閱讀更多”,<br>            href: “#”<br>          },<br>          {<br>            src: “img/default.jpg”,<br>            title: “文章標題”,<br>            desc:”文章摘要”,<br>            text: “閱讀更多”,<br>            href: “#”<br>          }<br>        ],<br>        loop: [<br>          {<br>            title: “最新消息”,<br>            titleEn: “LATESTED NEWS”,<br>            list: [<br>              {<br>                src: “img/default.jpg”,<br>                title: “文章標題”,<br>                date: “2019.05.21”,<br>                href: “#”,<br>                text: “文章分類”<br>              }<br>            ]<br>          }<br>        ],<br>      }<br>    ],<br>  }<br>};</p>
<p>通常拿到這設計稿的時候，我會先把這份資料整理出來，先從 Header 與 Footer 的資料開始，像是選單有哪些、連結有什麼，再來是分頁面，首頁 Front Page、關於頁 About，把頁面裡面所有的文字都打好 JSON。</p>
<p>這樣做的好處是在整理 JSON 的時候我就可以先定義之後做 ACF 要開的欄位名稱，以及順過所有欄位的邏輯與定義，一開始會花上不少時間做這份 JSON，但之後就會很開心，因為在寫 HTML 的時候就不用一直複製貼上了，範例如下：</p>
<p>each i in header<br>  header.uk-padding<br>    each j in i.navbar<br>      h1.uk-text-center#logo<br>        img.uk-width-1-6(src=j.src)<br>      ul.uk-flex.uk-flex-center.uk-margin-top<br>        each k in j.nav<br>          li.uk-margin-left.uk-margin-right<br>            a.text-dark(href=k.href)=k.text</p>
<p>使用 each 把 header 陣列裡面的東西印出來，然後再使用第二次 each 把 header 裡面的 navbar 陣列印出來，第三次把 navbar 裡面的 nav 選單印出來，需要分多少階層看個人習慣，我是喜歡把屬於 Header 的東西都塞在同一個陣列裡面。</p>
<p>最開心的部分是 each k in j.nav 這邊，自動就會撈出 nav 裡面的東西，所以我就不用 li 重複貼上好幾次，要修改 class 的話只要改一個就好。</p>
<p>更進階的用法是可以加入判斷式，範例如下：</p>
<p>ul.uk-flex.uk-flex-center.uk-margin-top<br>  each k,index in j.nav<br>    if index===0<br>      li.uk-margin-left.uk-margin-right.uk-active<br>        a.text-dark(href=k.href)=k.text<br>    else<br>      li.uk-margin-left.uk-margin-right<br>        a.text-dark(href=k.href)=k.text</p>
<p>多一個參數叫做 index，當 index = 0 也就是第一個選單的時候，li 多加一個 uk-active 的 class 來表示目前所在頁面的選單套用不同的樣式，或是也可以把 class 寫在 JSON 裡面，這樣就可以很靈活的來控制迴圈裡面的東西。</p>
<p>其他還有 Extends、Block 也是常會用的東西，所有頁面的基本框架是放在 src/_layouts/temp.pug 裡面，而首頁 index.pug 則是延伸了 temp.pug：</p>
<p>doctype html<br>html<br>  head<br>    title ODS Starter<br>    meta(charset=’utf-8’)<br>    meta(name=’viewport’ content=’width=device-width, initial-scale=1.0, maximum-scale=1’)<br>    link(rel=’stylesheet’ href=’/sass/style.scss’)<br>    link(rel=’icon’ href=’/img/fav.png’ type=’image/png’)<br>    block head_end</p>
<p>  body</p>
<pre><code>include ../\_partials/header.pug

//- 內容區塊
.content
  block content

include ../\_partials/footer.pug

script(src=&#39;/js/script.js&#39;)

block body\_end
</code></pre>
<p>include 是載入其他模組化的 pug，像是 header 與 footer，而 block head_end、content、body_end 是預先把洞挖好來讓其他 pug 可以寫入這個地方。</p>
<p>extends _layouts/temp</p>
<p>block content<br>  .uk-container<br>    h1.uk-text-center.heading-medium 這是首頁</p>
<p>extends 是衍伸 temp.pug 這個模板，而 block content 就是剛剛在 temp.pug 裡面定義好的一個區塊，寫在這邊的 pug 就會替換 temp.pug 裡面 block content 的部分。</p>
<p>隨著專案的進行我會把 pug 細分成很多獨立的檔案，拆分出來的 .pug 就可以很方便的整理進 ODS 裡面，或是需要之前寫過的元件的時候，也能從 ODS 拿出來立即使用。</p>
<h3 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a><strong>Sass</strong></h3><p><img src="https://oberonlai.blog/wp-content/uploads/2020/04/2000px-Sass_Logo_Color.svg_-1024x768.png"></p>
<p>Sass 是一套 CSS 的擴充語法，它可以讓 CSS 擁有程式語言常見的功能，像是定義變數、迴圈、判斷式等等，根據寫法的不同又分為 Sass 與 Scss，Sass 跟 Pug 比較類似，可以少寫很多括號跟分號，而 Scss 乍看之下比較像傳統的 CSS，然後多了跟 Sass 一樣的功能。</p>
<p>因為閱讀上的習慣，我自己是寫 Scss 比較多，而 UIkit 的原始碼也是用 Scss 寫的，所以比較方便的 Sass 反而比較少用到。</p>
<p>前面提到 UIKit 的眾多元件，除了省下很多的開發時間外，讓我覺得最大的收穫是如何組織 CSS 檔案。最早在寫 CSS 的時候，每個頁面的每個元件有各自獨立的 class 名稱，雖然看似很有組織，但實際在運作時會發現很多頁面都會有重複的元件。</p>
<p>後來採取了 <a href="http://getbem.com/introduction/">BEM</a> 這個 CSS 組織方法，也就是依照 Block、Element、Modifier 這樣的邏輯來命名，一開始用的時候覺得好有系統，而且要回頭再改的時候也很方便找。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/04/github_captions.jpg"></p>
<p>但幾個專案下來之後我發現，在寫 HTML 命名 class 的時候，因爲要想這個元件到底是 Block 還是 Element，或是 Modifier 要怎麼下，寫到後來覺得很煩，因為很不直覺，必須要思考 HTML 的規則。</p>
<p>在這個時期，我事實上是很討厭使用像是 Bootstrap 或是 UIKit 這一類的 Framework，因為我覺得他們很肥，而且要寫一個帶有圓角、陰影的按鈕要塞一堆 class 在 HTML 裡面，整個看起來超髒超亂。</p>
<p>但人總是會變的，現在的我完全回不去以前自己命名 class 的寫法了，轉而擁抱這種當初自己嫌得要命的方式，最大的關鍵在於它讓我可以很直覺得像是在寫 CSS 一樣寫 HTML。</p>
<p>後來才知道這樣的方法叫做 Functional CSS，也就是把每個 CSS 屬性都變成一個獨立的 class，一個 class 只管一件事，當我要設定 font-size 為 12px 就是 .text-xsmall，背景要白色就是 .background-default。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/04/CleanShot-2020-04-25-at-09.49.42.jpg"></p>
<p>一個 h1 可能就帶有四個 class，如果考慮到 RWD 的狀態可能還會更多，但因為這些 class 我知道它們的意義是什麼，所以在寫的時候可以立馬翻譯成 CSS，完全不用思考 class 到底該如何命名。</p>
<p>UIKit 本身就提供許多現成的 class 可以使用，所以以前還不熟的時候沒事就是去逛他們的文件，把每個元件該怎麼用、class 有哪些一遍又一遍的重複看，再搭配實作幾個專案下來，差不多已經記得大部分常用的寫法。</p>
<p>在 ODS 的 src/sass 目錄中，主要分為 components、helpers、partials、vendors 這四個資料夾，以下說明這四個資料夾的用途：</p>
<p><strong>src/scss/componets</strong> - 放覆寫 UIKit 元件的 Scss 檔，可能會有 heading.scss、button.scss、text.scss 等等，所以檔案名稱就是對應 UIKit 的元件名稱，這樣找起來很方便</p>
<p><strong>src/scss/helpers</strong> - 放一些讓自己寫 Scss 好用的工具，以及管理所有的變數</p>
<p><strong>src/scss/partials</strong> - 放頁面區塊為主的 Scss 檔案為放在這邊，像是 header、footer 以及 UIKit 沒有需要自行定義的元件</p>
<p><strong>src/scss/vendors</strong> - 放第三方的元件的 Scss 檔，像是 WordPress 本身的 Style 或是控制 Facebook Social Plugin 的樣式</p>
<p>新專案我的設計步驟如下：</p>
<p><strong>一、整理變數</strong></p>
<p>首先開啟 src/scss/helpers/variable.scss，裡面是 UIKit 大部分會常用到的變數，所以如果你很幸運遇到有組織邏輯的設計師，這些變數可以很快的就整理出來。</p>
<p>$global-small-margin: 10px !default;<br>$global-margin: 20px !default;<br>$global-medium-margin: 40px !default;<br>$global-large-margin: 70px !default;</p>
<p>$global-color: #000 !default;<br>$global-muted-background: #EDEDED !default;<br>$global-primary-background: #fc9202 !default;<br>$global-muted-color: #999 !default;<br>$global-background: #fff !default;<br>$global-secondary-background: #ffe400 !default;<br>$global-success-background: #32d296 !default;<br>$global-warning-background: #faa05a !default;<br>$global-danger-background: #f0506e !default;</p>
<p>$global-link-color: #1e87f0 !default;<br>$global-link-hover-color: #0f6ecd !default;</p>
<p>$global-small-gutter: 15px !default;<br>$global-gutter: 30px !default;<br>$global-medium-gutter: 40px !default;</p>
<p>$global-font-family: ‘Noto Sans TC’,’PingFang TC’,’微軟正黑體’,Arial, sans-serif;</p>
<p>$breakpoint-small: 640px !default;<br>$breakpoint-medium: 960px !default;<br>$breakpoint-large: 1200px !default;<br>$breakpoint-xlarge: 1600px !default;</p>
<p><strong>二、選擇要引入的 Scss</strong></p>
<p>打開 src/scss/style.scss，這支檔案是控制所有要引入的 Scss 檔，UIKit 有固定的載入順序，所以儘可能的別去變動它，裡面有所有元件的 Scss 檔案，先確認該專案會用到哪些元件，把要用到的取消註解，算是減少一些不必要的 style。</p>
<p>// scss<br>// @import url(‘<a href="https://fonts.googleapis.com/css?family=Noto+Serif+TC:300,400,500,700,900&amp;display=swap&amp;subset=chinese-traditional&#39;">https://fonts.googleapis.com/css?family=Noto+Serif+TC:300,400,500,700,900&amp;display=swap&amp;subset=chinese-traditional&#39;</a>);<br>@import url(“<a href="https://fonts.googleapis.com/earlyaccess/notosanstc.css&quot;">https://fonts.googleapis.com/earlyaccess/notosanstc.css&quot;</a>);</p>
<p>@import “helpers/mixin”;<br>@import “helpers/variable”;<br>@import “helpers/reset”;</p>
<p>@import “../../node_modules/uikit/src/scss/variables-theme.scss”;<br>@import “../../node_modules/uikit/src/scss/mixins.scss”;</p>
<p>// Elements<br>@import “../../node_modules/uikit/src/scss/components/link.scss”;<br>@import “../../node_modules/uikit/src/scss/components/heading.scss”;<br>// @import “../../node_modules/uikit/src/scss/components/divider.scss”;<br>@import “../../node_modules/uikit/src/scss/components/list.scss”;<br>@import “../../node_modules/uikit/src/scss/components/description-list.scss”;<br>// @import “../../node_modules/uikit/src/scss/components/table.scss”;<br>@import “../../node_modules/uikit/src/scss/components/icon.scss”;<br>// @import “../../node_modules/uikit/src/scss/components/form-range.scss”;<br>@import “../../node_modules/uikit/src/scss/components/form.scss”; // After: Icon, Form Range<br>@import “../../node_modules/uikit/src/scss/components/button.scss”;</p>
<p>// Layout<br>@import “../../node_modules/uikit/src/scss/components/section.scss”;<br>@import “../../node_modules/uikit/src/scss/components/container.scss”;<br>@import “../../node_modules/uikit/src/scss/components/grid.scss”;<br>// @import “../../node_modules/uikit/src/scss/components/tile.scss”;<br>@import “../../node_modules/uikit/src/scss/components/card.scss”;</p>
<p>…</p>
<p><strong>三、根據實際寫的狀態加入 Scss</strong></p>
<p>假設當今天在用 UIKit 的 Accordion 的時候，發現樣式需要調整，這時後就新增一個 accordion.scss 並放在 /src/scss/componets 的目錄下，然後在 style.scss 最下面寫 @import “components/accordion” 來引入覆寫的檔案，這樣之後要修改 Accordion 的樣式時找起來就非常方便。</p>
<p>雖然 UIKit 用起來真的十分方便，但即使有經過引入檔案的控管，編譯完之後 CSS 檔案至少都還是會落在 100 kb 出頭左右，相較於最近很紅的 <a href="https://tailwindcss.com/docs/controlling-file-size/#app">Tailwindcss</a> 以及其他 CSS framework 比起來肥了好幾倍。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/04/CleanShot-2020-04-25-at-11.25.09.jpg"></p>
<p>主因還是在 UIKit 包含了很多現成的元件方便開發者使用，這在開發上可以省去很多 JS 的撰寫時間，但 Tailwindcss 近期也準備推出 UI components 了，也許之後會跳槽到 Tailwindcss 也說不定XD</p>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a><strong>ES6</strong></h3><p>自從經過上一個專案的洗禮之後，對於 ES6 的模組化開發稍微比較有概念了，所以在之後的專案上，有寫到 JS 的部分就會開始採用新版的語法，因為不管是檔案引入或是相容性 Parcel 都幫忙把環境搞定了。</p>
<p>JS 的資料夾目錄跟 Scss 一樣，也是分為 components、helpers、partials，少了 vendors 是因為用 import 就可以直接把第三方工具引入。</p>
<p>ODS Starter Theme 裡面預設的就只有 src/heleprs/Variable.js，主要是用來定義所有的 JS 變數，然後透過 script.js 的引入，可以讓實際運作的程式比較不會有落落長的 Selector 而妨礙閱讀。</p>
<p>import UIkit from ‘uikit’;<br>import Icons from ‘uikit/dist/js/uikit-icons’;<br>UIkit.use(Icons);</p>
<p>import { Variable } from “./helpers/Variable”;<br>const vars = new Variable();</p>
<p>document.addEventListener(‘DOMContentLoaded’,()=&gt;{<br>  vars.logo.classList.add(‘logo-class’);<br>})</p>
<p>可以看到 UIKit 跟它的 icon 在最前面被引入，這樣如果需要使用 UIkit 的 API 就可以直接拿來用。接下來是引入變數檔案，並且宣告物件 vars 來拿變數，像是 vars.logo 這樣。</p>
<p>其他像是 ES6 新增的 const、let、箭頭函式、類別都可以直接使用，打包的時候 Parcel 都會幫忙編譯為 ES5 的版本以支援較舊的瀏覽器。</p>
<h3 id="打包前端資源"><a href="#打包前端資源" class="headerlink" title="打包前端資源"></a><strong>打包前端資源</strong></h3><p>前端開發完成後，執行 npm run build 就可以把 CSS、JS、圖片檔打包到 assets 資料夾裡面，可以打開 themes/ods/functions.php 這支檔案，看到以下的內容：</p>
<?php
if ( ! defined( 'ABSPATH' ) ) { exit;}

function ods\_scripts() {
if ( ! is\_admin() ) {
wp\_enqueue\_script( 'ods\_js', get\_template\_directory\_uri() . '/assets/js/script.js','','',true ); // name,path,jq,version,footer
wp\_enqueue\_style( 'ods\_style', get\_template\_directory\_uri() . '/assets/css/style.css', array(), '', 'all' );
}
}
add\_action( 'wp\_enqueue\_scripts', 'ods\_scripts' );// 載入全站 js/css

remove\_action('wp\_head', 'feed\_links\_extra', 3);
remove\_action('wp\_head', 'feed\_links', 2);
remove\_action('wp\_head', 'rsd\_link');
remove\_action('wp\_head', 'wlwmanifest\_link'); 
remove\_action('wp\_head', 'index\_rel\_link');
remove\_action('wp\_head', 'parent\_post\_rel\_link', 10, 0);
remove\_action('wp\_head', 'start\_post\_rel\_link', 10, 0);
remove\_action('wp\_head', 'adjacent\_posts\_rel\_link', 10, 0);
remove\_action('wp\_head', 'wp\_generator');
remove\_action('wp\_head', 'adjacent\_posts\_rel\_link\_wp\_head', 10, 0);
remove\_action('wp\_head', 'rel\_canonical');
remove\_action('wp\_head', 'wp\_shortlink\_wp\_head', 10, 0);
remove\_action('wp\_head', 'print\_emoji\_detection\_script', 7 );
remove\_action('wp\_print\_styles', 'print\_emoji\_styles' );
remove\_action('welcome\_panel', 'wp\_welcome\_panel');
remove\_filter('the\_excerpt', 'wpautop');
add\_filter('show\_admin\_bar','\_\_return\_false');
// add\_filter('use\_block\_editor\_for\_post', '\_\_return\_false', 10); // 啟用 or 關閉 Gutenberg

在 wp\_enqueure\_srcipts 的路徑就是 assets 的檔案，這樣就可以開始進行 WordPress PHP 的撰寫了，最後一行的 Hook Filter 在於控制是否要停用 Gutenberg 編輯器，這就看專案性質決定了。

## 小結

透過 ODS Starter Theme 可以把佈景主題的檔案縮減到只留下必要的內容，然後再從專案的實際過程中去加入需要的範本，並從 ODS 去複製相對應的元件或 PHP 來開發 Theme。

另一方面整合各種前端工具來加速頁面切版的工作，透過 Parcel 來提升編譯的速度 ( 或是換 MBP 16 inch )，這就是目前我每個專案的工作流程，也是多年來踩過無數雷、試過一堆工具的血淚史。

也許未來還會有新的工具出來取代現在的作法，同時間我也還在實驗用 Plugin 寫 PHP 類別來整理各種 WP\_Query 以及做資料邏輯處理的組織方式，這樣 Theme 就真的單純是管理 View 而不會去干涉到資料，等有心得再分享出來～

總之這十年來在工作上越深入越覺得自己懂得東西好少，但又有一種信心，只要給我時間我就有辦法找到解決方案並真正的解決它，我想這就是為什麼寫程式會成為我每天的樂趣 ( 痛苦 ) 吧 XD]]></content>
      <categories>
        <category>WordPress</category>
        <category>HTML5</category>
        <category>PHP</category>
        <category>JavaScript</category>
        <category>saas</category>
        <category>F2E</category>
      </categories>
      <tags>
        <tag>f2e</tag>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title>【 心得 】WordPress 外掛開發日記 (一) - 架構</title>
    <url>/tw/wordpress-plugin-boilerplate/</url>
    <content><![CDATA[<p>一年前的這個時候，從早到晚都在跟 WordPress 的佈景主題打交道，除了忙案子以外，空檔時就在研究哪些前端框架可以更快速的與 WordPress 做整合，想不到十二個月過去了，現在每天都改成在寫外掛，離前端程式開發越來越遠，停下腳步回頭來看，感覺是該來好好整理一下這陣子的開發心得了。</p>
<p>為了方便閱讀我拆成以下幾個章節來紀錄：</p>
<p><a href="https://oberonlai.blog/tw/wordpress-plugin-boilerplate">一、WordPress 外掛架構 - 紀錄曾經使用過的架構以及目前作法</a><br><a href="https://oberonlai.blog/tw/wordpress-and-composer">二、WordPress 開發實用 Composer 套件 - 介紹在寫外掛的時候可以加速開發的套件</a><br>三、載入佈景主題範本 - 如何在外掛裡面使用範本檔修改前端介面並整合前端開發流程<br>四、整合 PHPUnit 單元測試 - 避免改東牆壞西牆的問題再次發生<br>五、自動化部署 - 讓 WordPress 搭上 DevOps 的列車🚄<br>六、WordPress 外掛更新 - 自行管理未上架 wordpress.org 的外掛版本維護</p>
<p>如果是對 WordPress 外掛開發完全沒概念的朋友，我建議先閱讀 <a href="https://developer.wordpress.org/plugins/">Plugin Developer Handbook</a> 會比較完整，或是買<a href="https://oberonlai.blog/tw/building-web-apps-with-wordpress/">這本書</a>來看在學習上會比較有脈絡與系統性。而這系列文是我的實務經驗，所以很多地方可能還是會有不足之處，希望能遇到大大再幫我指點迷津了 🙏</p>
<p>第一篇文章主要紀錄了我在組織外掛結構的過程，並透過不斷的打掉重練來找到自己最舒服的方式，讓我們開始吧～</p>
<span id="more"></span>

<p>雖然不知道出來混為何一定要還，但還是手癢開始把這一年多來改寫外掛的日常紀錄一下XD，從開始入坑 Composer 到學著寫下第一行單元測試，再到外掛的自管更新以及自動化部署，寫到一半發現餅華太大，只好拆成多篇來寫 &gt; &lt; 第一篇介紹目前我慣用的 Starter Plugin ( 好像沒這種說法XD ) 與工作流程，以及隨著時間演進的組織方法，所以萬一明天點開來看發現跟今天看到的內容不一樣還請見諒，文章也是需要重構的XD 文中如有不足之處還煩請大大指點迷津了 🙏</p>
<h2 id="WordPress-外掛架構"><a href="#WordPress-外掛架構" class="headerlink" title="WordPress 外掛架構"></a>WordPress 外掛架構</h2><p>以佈景主題來說，有很多公司推出初始佈景主題 ( Starter Theme ) 可以入門，相較之下外掛就少很多，原因可能是外掛的組織方式太自由了，基本上我可以把所有的程式碼全都塞進到帶有標頭的 PHP 檔案即可，不需要拆分任何檔案與資料夾，但如果是做功能複雜或是大型外掛的擴充，這樣做會被未來的自己罵到臭頭XD</p>
<p>剛開始實作的時候我是採用「 <a href="https://wppb.me/">WordPress Plugin Boilerplate Generator</a>」，不管要做的功能是大還是小，我覺得遵循這套架構可以讓檔案很有邏輯與系統，它的特色是在於把前後台的資料夾切分開來，然後透過一層又一層的類別來做載入。</p>
<pre class="line-numbers language-none"><code class="language-none">── LICENSE.txt
├── README.txt
├── admin
│   ├── class-my-plugin-admin.php
│   ├── css
│   │   └── my-plugin-admin.css
│   ├── index.php
│   ├── js
│   │   └── my-plugin-admin.js
│   └── partials
│       └── my-plugin-admin-display.php
├── includes
│   ├── class-my-plugin-activator.php
│   ├── class-my-plugin-deactivator.php
│   ├── class-my-plugin-i18n.php
│   ├── class-my-plugin-loader.php
│   ├── class-my-plugin.php
│   └── index.php
├── index.php
├── languages
│   └── my-plugin.pot
├── my-plugin.php
├── public
│   ├── class-my-plugin-public.php
│   ├── css
│   │   └── my-plugin-public.css
│   ├── index.php
│   ├── js
│   │   └── my-plugin-public.js
│   └── partials
│       └── my-plugin-public-display.php
└── uninstall.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但經過幾個專案後發現不太順手，問題在於它把勾點 ( Hook ) 跟要跑在勾點上的函式切開來，常常在找這支函式是跑在哪個勾點上時會花上一些時間，更不用說在寫勾點的時候還需要切換檔案很容易混亂。</p>
<p>其次是很多功能很難界定它到底是屬於前台還後台，像是在做 REST API 我有時候會放在 public，有時候忘記又會放在 admin，要找的時候自己都會搞混。</p>
<p>然後最麻煩的地方是檔案的載入，WPPB 是使用 require 的方式來引入，所以如果新增檔案或是修改檔名的時候都會需要手動修改，最常發生的情況就是類別寫完後一直跑不動，追查後才發現根本忘記引入了 😅</p>
<p>所以一直在找尋著有沒有更好的架構可以來開發外掛，找了老半天都沒有適合自己的，索性就來發展一套自己的邏輯吧～</p>
<p>剛好當時在看「<a href="https://www.books.com.tw/products/0010688181">現代 PHP</a> 」這本書，對於 Composer 很有興趣，就開始試著把 Composer 整合進 WordPress 的開發流程之中。</p>
<p>Composer 可以簡單的理解為是一套可以安裝 PHP 外掛的工具，可以把別人寫好的 PHP 類別透過 Composer 安裝後進行使用。</p>
<p>除此之外，它還可以幫助開發者做自動載入、套件更新管理，甚至還可以安裝 WP 的外掛，透過它來管理 WP 網站的外掛，你也可以上傳自己寫的套件，把一些常用的類別打包好後上傳，下次要用時直接透過 Composer 進行安裝。</p>
<p>更多 Composer 的實作細節會隨著下文逐一帶到，回到 WordPress 外掛開發架構的需求，我想要的是可以依照專案規模自行增加資料夾結構以及檔案命名，尤其是外掛開發的初期功能還很陽春，可能幾個檔案就搞定，等到外掛發展的越來越大，我可以隨時調整檔案結構以符合商業邏輯的變動。</p>
<p>參考了很多免費與付費外掛的結構後，目前已發展出一套自己的 SOP，大概的順序如下</p>
<h3 id="1-建立基本架構"><a href="#1-建立基本架構" class="headerlink" title="1.建立基本架構"></a>1.建立基本架構</h3><p>建立外掛的第一步就是在 wp-content/plugins 底下建立資料夾，然後新增主檔案與 src (source) 資料夾放主程式，這樣就完成最基本的結構了。</p>
<pre class="line-numbers language-none"><code class="language-none">my-plugin
├── my-plugin.php
└── src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果專案有前端的部分需要處理，我會開 assets 資料夾，裡面會放圖檔、CSS 與 JavaScript 等靜態檔案：</p>
<pre class="line-numbers language-none"><code class="language-none">my-plugin
└── assets
    ├── css
    │   ├── admin.css
    │   └── public.css
    ├── img
    │   └── img1.jpg
    └── js
        ├── admin.js
        ├── ajax.js
        └── public.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>前後台的靜態檔就用檔名來區分，前台就是 public 後台是 admin，如果有需要做 Ajax 的 JS 檔也是會放在這邊。如果要進一步的整合 Node.js 來做前端的檔案編譯，assets 下面會再區分 src 跟 dist，然後才放 img、css 與 js 資料夾，之前有實作過整合最近非常紅的 CSS 框架 Tailwindcss，這部分會在之後的文章提到。</p>
<p>再來如果這個外掛有需要處理範本的話，我會再另外開一個 views 資料夾，這資料夾就像是佈景主題一樣，專門放範本檔：</p>
<pre class="line-numbers language-none"><code class="language-none">my-plugin
└── views
    ├── loops
    │   └── post.php
    ├── page-about.php
    ├── page-contact.php
    ├── partials
    │   └── pagination.php
	├── woocommerce
    │   └── checkout
    ├── template-2col.php
    └── template-blank.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>views 除了放對應 slug 的範本檔之外，也放了頁面範本，loops 資料夾放的是需要跑在 WP_Query 裡面的列表類內容，而 partials 放的是所有頁面會共用到的元件，像是分頁導覽 pagination。如果是做 WooCommerce 的 Extension 我會再多開一個資料放 WC 的範本檔，這樣就能從外掛來修改 WC 相關頁面的內容。</p>
<p>再來是 src 裡面的結構，嘗試了很多命名方法，最喜歡的應該是 MVC 模式：</p>
<pre class="line-numbers language-none"><code class="language-none">my-plugin
└── src
    ├── controllers
    │   └── cpt.php
    └── models
        └── cpt.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>View 的部分我把它獨立在 src 的資料夾外面，原因是 src 的資料夾會透過 PSR-4 的 Autoload 載入，但 WP 的範本檔並不支援這樣的機制，所以把 views 獨立在 src 以外避免被自動載入。</p>
<p>Models 資料夾我放的是需要新增或修改資料庫結構的類別，最常見的就是新增 Custom Post Type，或是需要修改預設的文章或頁面 post type、新增 options、widget，我都會放在 Models 資料夾下面。</p>
<p>Controllers 則是負責處理 Models 裡面各種 post type 或是 option 的 CRUD，以及各種 WP 內建機制的處理，像是 REST API、WP Cron、Shortcode 等等，基本上這個資料夾會放所有的邏輯處理類別，需要呼叫類別的程式也是放在這邊。</p>
<p>如果有多個 CPT 需要處理多種操作，我會再新增新的資料夾來做區分：</p>
<pre class="line-numbers language-none"><code class="language-none">my-plugin
└── src
    ├── controllers
    │   ├── cpt.php
    │   ├── cpt1
    │   │   ├── Api.php
    │   │   ├── Router.php
    │   │   ├── Post.php	
    │   │   └── Shortcode.php
    │   └── cpt2
    │       ├── Post.php
    │       └── Widget.php
    └── models
        └── cpt.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>雖然從 MVC 的角度下去分類看似很清楚，但實作後常發現自己會混淆 M 跟 C 的部分，我曾經在一個專案中把 Shortcode 放在 Controllers，另一個專案卻放在 Models 裡面，或是要註冊 Rest API 我就常會舉棋不定，這到底該放在哪裡好？</p>
<p>於是索性就不分 Models 跟 Controllers 了，直接以 WordPress 資料表結構來區分資料夾：</p>
<pre class="line-numbers language-none"><code class="language-none">my-plugin
└── src
    ├── posts
    │   ├── cpt1
    │   │   ├── Ajax.php
    │   │   ├── Field.php
    │   │   └── Cpt1.php
    │   └── cpt2
    │       ├── Api.php
    │       ├── Cpt2.php
    │       └── Shortcode.php
    ├── terms
    │   ├── taxonomy1
    │   │   └── Field.php
    │   └── taxonomy2
    │       └── Api.php
    ├── options
    │   ├── Field.php
    │   └── Menu.php
    └── user
        └── Field.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最常處理的是 wp_posts，所以 posts 資料夾下面會放各個 CPT 的資料夾，options 是做設定頁面的，對應的資料表是 wp_options，user 是使用者相關，對應的資料表是 wp_users，至於 Taxonomy 我也會跟 Post 拆開獨立放在 terms 的資料夾底下，在結構上會更清楚些。</p>
<p>然後每個 cpt 的資料夾底下，會有一支跟 CPT slug 同名的檔案，裡面放的會是註冊 CPT 的功能，下一篇文章會示範如何使用 Composer 套件來註冊 CPT，其他的 Field.php 、Ajax.php、Api.php 就是管理該 CPT 的相對應功能。</p>
<p>所以整個資料夾的邏輯就是以資料類型 &gt; 功能來區分，對我來說可以再也不用判斷這功能到底是屬於 Models 還是 Controllers。</p>
<p>最後則是單元測試的資料夾：</p>
<pre class="line-numbers language-none"><code class="language-none">my-plugin
└── tests
    └── cpt
        └── cptTest.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>測試的部分比較複雜，之後會再以獨立篇幅來進行說明。</p>
<p>另外如果是要做 i18n 本地化，就需要再新增一個 languages 資料夾，翻譯用的 .pot 檔可以透過 WP CLI 產生。</p>
<pre class="line-numbers language-none"><code class="language-none">$ wp i18n make-pot . languages&#x2F;my-plugin.pot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>資料夾結構會是這樣：</p>
<pre class="line-numbers language-none"><code class="language-none">my-plugin
└── languages
    └── my-plugin.pot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>最後視專案的需求，資料夾結構可以是這樣：</p>
<pre class="line-numbers language-none"><code class="language-none">my-plugin
├── my-plugin.php
└── src
    └── cpt1
        └── Cpt1.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以逐漸發展成這樣：</p>
<pre class="line-numbers language-none"><code class="language-none">my-plugin
├── assets
│   ├── css
│   │   ├── admin.css
│   │   └── public.css
│   ├── img
│   │   └── img1.jpg
│   └── js
│       ├── admin.js
│       ├── ajax.js
│       └── public.js
├── my-plugin.php
├── src
│   ├── posts
│   │   ├── cpt1
│   │   │   ├── Ajax.php
│   │   │   ├── Field.php
│   │   │   └── Cpt1.php
│   │   └── cpt2
│   │       ├── Api.php
│   │       ├── Cpt2.php
│   │       └── Shortcode.php
│   ├── terms
│   │   ├── taxonomy1
│   │   │   └── Field.php
│   │   └── taxonomy2
│   │       └── Api.php
│   ├── options
│   │   ├── Field.php
│   │   └── Menu.php
│   └── user
│       └── Field.php
├── tests
│   └── cpt
│       └── cptTest.php
└── views
    ├── loops
    │   └── post.php
    ├── page-about.php
    ├── page-contact.php
    ├── partials
    │   └── pagination.php
    ├── template-2col.php
    ├── template-blank.php
    └── woocommerce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在實務中我最常變動的部分是 src 資料夾，除了需求的新增外，做程式碼重構也都會常常修改這邊，以往只要資料夾名稱或是檔案有新增刪除，透過手動引入的方式就必須要全部修改，有沒有更方便且更彈性的作法呢？有！答案就是 Composer。</p>
<h3 id="2-設定-Composer-環境"><a href="#2-設定-Composer-環境" class="headerlink" title="2.設定 Composer 環境"></a>2.設定 Composer 環境</h3><p>安裝 Composer 的教學網路非常多，這邊主要示範給 WordPress 外掛開發者的環境設定。第一步先開啟終端機然後把目錄切到正在開發的外掛底下：</p>
<pre class="line-numbers language-none"><code class="language-none">$ cd wp-content\plugins\my-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然後執行 composer init</p>
<pre class="line-numbers language-none"><code class="language-none">$ composer init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>composer 會用對話式的介面來協助我們進行設定，依序要回答六個問題：</p>
<pre class="line-numbers language-none"><code class="language-none">This command will guide you through creating your composer.json config.

Package name (&lt;vendor&gt;&#x2F;&lt;name&gt;) [oberonlai&#x2F;my-plugin]: 
Description []: 
Author [Oberon Lai &lt;m615926@gmail.com&gt;, n to skip]: 
Minimum Stability []: stable
Package Type (e.g. library, project, metapackage, composer-plugin) []: project
License []: propreitary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>基本上因為這不是要上傳到 Composer 套件庫 Packagist 的套件，我習慣都直接採用預設值，如果有特殊需求可以再個別調整，第七題是關鍵，它會問你是否要安裝相依套件：</p>
<pre class="line-numbers language-none"><code class="language-none">Define your dependencies.

Would you like to define your dependencies (require) interactively [yes]? 
Search for a package: a7&#x2F;autoload
Enter the version constraint to require (or leave blank to use the latest version): <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>輸入套件名稱 a7/autoload 按下 Enter 後 Composer 就會開始自動搜尋 Packagist 上面的所有 PHP 套件並且指定安裝的版本，如果要安裝最新版就直接 Enter 下一步即可，<a href="https://github.com/a7/autoload">a7/autoload</a> 這個套件可以把指定資料夾裡面的檔案全部自動載入，如果沒有它就需要一個一個手動指定要自動載入的資料夾。</p>
<p>完成後接下來又會再問一次是否要搜尋其他套件，這邊我們什麼都不輸入直接下 Enter 即可。</p>
<p>接下來它會詢問是否要安裝只有在開發時才需要的套件，像是做單元測試 PHPUnit 這一類只會在開發環境中需要的套件就可以在這邊安裝，但目前我們先跳過，之後講解單元測試的文章再另行說明：</p>
<pre class="line-numbers language-none"><code class="language-none">Would you like to define your dev dependencies (require-dev) interactively [yes]? no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接下來就會看到整個 Composer 設定檔的草稿，它會請你確認是否正確，輸入 Enter 即可，這樣就完成 composer.json 設定檔了。</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;name&quot;: &quot;oberonlai&#x2F;my-plugin&quot;,
    &quot;type&quot;: &quot;project&quot;,
    &quot;require&quot;: &#123;
        &quot;a7&#x2F;autoload&quot;: &quot;^2.1&quot;
    &#125;,
    &quot;license&quot;: &quot;propreitary&quot;,
    &quot;authors&quot;: [
        &#123;
            &quot;name&quot;: &quot;Oberon Lai&quot;,
            &quot;email&quot;: &quot;m615926@gmail.com&quot;
        &#125;
    ],
    &quot;minimum-stability&quot;: &quot;stable&quot;
&#125;

Do you confirm generation [yes]? yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最後它會問你是否要安裝設定檔中的套件，按下 Enter 即可</p>
<pre class="line-numbers language-none"><code class="language-none">Would you like to install dependencies now [yes]? yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最後就會出現安裝完成的訊息，這就代表我們已經把 Composer 已經所需套件準備完成：</p>
<pre class="line-numbers language-none"><code class="language-none">No lock file found. Updating dependencies instead of installing from lock file. Use composer update over composer install if you do not have a lock file.
Loading composer repositories with package information
Updating dependencies
Lock file operations: 1 install, 0 updates, 0 removals
  - Locking a7&#x2F;autoload (2.1)
Writing lock file
Installing dependencies from lock file (including require-dev)
Package operations: 1 install, 0 updates, 0 removals
  - Installing a7&#x2F;autoload (2.1): Extracting archive
Generating autoload files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>觀察我們外掛的目錄，會發現多了 composer.json、composer.lock 以及 vendor 資料夾，未來我們任何從 Composer 安裝的套件都會放在 vendor 這個資料夾底下，至於該如何引入這些套件以及讓 src 資料夾的檔案可以自動載入呢？讓我們開始寫 code 吧～</p>
<h3 id="3-加入-Autoload-機制"><a href="#3-加入-Autoload-機制" class="headerlink" title="3.加入 Autoload 機制"></a>3.加入 Autoload 機制</h3><p>打開外掛的主檔案，我把一些常用的寫法存成了 VSCode 的 Snippet，內容如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

 <span class="token comment">/**
 * @link              https://oberonlai.blog
 * @since             1.0.0
 * @package           ODS
 *
 * @wordpress-plugin
 * Plugin Name:       Oberon Plugin
 * Plugin URI:        https://oberonlai.blog
 * Description:       Oberon Lai Blog Demo Plugins
 * Version:           1.0.0
 * Author:            Oberon Lai
 * Author URI:        https://oberonlai.blog
 * License:           GPL-2.0+
 * License URI:       http://www.gnu.org/licenses/gpl-2.0.txt
 * Text Domain:       ods
 * Domain Path:       /languages
 */</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_VERSION'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'1.0.0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_PLUGIN_URL'</span><span class="token punctuation">,</span> <span class="token function">plugin_dir_url</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_PLUGIN_DIR'</span><span class="token punctuation">,</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_PLUGIN_BASENAME'</span><span class="token punctuation">,</span> <span class="token function">plugin_basename</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Autoload
 */</span>
<span class="token keyword">require_once</span><span class="token punctuation">(</span> <span class="token constant">ODS_PLUGIN_DIR</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'vendor/autoload.php'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
\<span class="token constant">A7</span>\<span class="token function">autoload</span><span class="token punctuation">(</span> <span class="token constant">ODS_PLUGIN_DIR</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'src'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>外掛 Header 頭幾行的註解是必要的，具體內容可以參考 Handbook，define 的常數定義我會先把幾個常用的路徑存起來，因為 plugin_dir_xxx 在不同層級的檔案下會對應到不同的路徑，直接在主檔案存起來才能正確對應到外掛的根目錄。</p>
<p>再往下看就是最關鍵的 Autoload，第一個 require_once 載入的是 vendor/autoload.php，也就是透過 Composer 安裝的套件只需要這一行就可以全部自動引入，使用時只需要透過 Namespace 的 use 關鍵字即可使用，</p>
<p>而下一行的 \A7\autoload 則是指定自動載入 src 目錄底下所有的檔案，不管有幾層目錄、多少檔案，透過它就可以自動完整載入，縱使修改了檔名或是資料夾名稱，依舊都能正常運作。</p>
<p>a7\autoload 是由 Aaron Holbrook 所開發的，觀察他的程式碼，他使用了迴圈去掃描指定目錄的所有檔案，然後再透過 autoload 機制去逐一載入，雖然該套件已經有兩年多沒更新了，但用到目前為止都非常的穩定沒出過任何問題，因此它成為我每個專案的必備套件。</p>
<p>到這邊自動載入就完成了，日後如果我新增或修改任何 src 資料夾裡面的任何檔案名稱，就再也不用重新調整載入的路徑了，一勞永逸 🎉</p>
<h3 id="4-Git-設定"><a href="#4-Git-設定" class="headerlink" title="4. Git 設定"></a>4. Git 設定</h3><p>為了要能做到版本控管與自動部署，Git 版控也是我每個必用的工具，早期看到朋友的作法是直接把整個 wp-content 資料夾都納入版控，好處是所有外掛的更新都可以從 git 來管理，於是我也採用這樣的作法，但經過幾個專案後發現有些問題：</p>
<p>首先是必須要把客戶整個站的 wp-content 都 clone 下來，遇到比較大型的站這對我 128GB 的 MBP 負擔很大…</p>
<p>其次在設定 .gitignore 時要處理比較多的部分，有時候也會不小心把需要 ignore 的東西給 commit 進去。另外如果要提供給客戶下載正在開發中的外掛時，直接 download 就會抓回一大包，客戶還要從一大包之中去找到正確的外掛。</p>
<p>所以我現在都是一支外掛做一個版控，好處是本機開發環境只要安裝可能需要的外掛即可，不用把整包 wp-content 跟資料庫載到自己的電腦，然後 gitignore 也比較好設定，主要我會把測試相關以及 vendor 資料夾忽略掉，</p>
<p>測試主要會在本機以及測試機執行，所以不宜把所有的套件都上傳到正式機，這部分需要透過自動化部署工具來決定哪些套件該裝哪些不用裝，這部分會在自動部署一文中提及。</p>
<p>另外的好處是在 Github 頁面上可以設定 Releases 功能來讓客戶下載指定版本，也能看到每個版本更新的項目。</p>
<p>但如果一個專案裡面需要開發多支外掛，或是有改過一些既有的外掛需要納入版控時，數量一多就會不好管理，於是我採用 Github 的 Organization 來進行分類。把同一個專案不同外掛的存放庫都集中管理。</p>
<p>在本機的部分就使用 VSCode 的工作區功能，把需要處理到的外掛都加進到同一個工作區，然後在 commit 的時候透過內建的 Git 工具各自處理。</p>
<h3 id="5-WordPress-Coding-Standard"><a href="#5-WordPress-Coding-Standard" class="headerlink" title="5.WordPress Coding Standard"></a>5.WordPress Coding Standard</h3><p>到這邊就已經完成了開發環境的基本設定，但在真正開始 coding 之前，有件事雖然不是強制但我還是逼著自己習慣，那就是 WordPress 程式碼規範。</p>
<p>PHP 有一套自己的程式碼規範，叫做 PHP Standards Recommendations ( PSR )，雖然 WordPress 是用 PHP 寫的，但在規範上有許多地方不一樣，雖然自己本身從來沒在照什麼規範寫程式，但自從知道有這東西後就還是覺得要嘗試看看，來建立自己寫程式的習慣。</p>
<p>因為我都是在寫 WordPress，所以就理所當然的照著 WP 的規範走，一開始很不習慣，到現在老實說也還是很不自在，常常光是要整理格式就打斷了程式邏輯的思考，所以整理規範這件事我都是放在重構的時候來做，第一次在寫的時候就不管它了XD</p>
<p>後來透過 Terry Lin 大大的推薦知道 VSCode 有個好工具叫做 <a href="https://marketplace.visualstudio.com/items?itemName=wongjn.php-sniffer">PHP Sniffer</a>，可以選擇要遵循的規範並且在編輯器中即時顯示不符合規範之處，另外還可以搭配快速鍵進行修正，可以搞定我最討厭的變數對齊：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-boilerplate/wordpress-plugin-boilerplate-03.jpg"></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-boilerplate/wordpress-plugin-boilerplate-04.jpg"></p>
<p>自動修正可以修到七八成，剩下的只要補上 PHPDoc 的說明即可。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-boilerplate/wordpress-plugin-boilerplate-01.jpg"></p>
<p>安裝 PHP Sniffer 記得要在它的設定裡面將 PHPCS Standard 改成 WordPress，這樣就會以 WordPress 的程式碼規範來檢查，更多這部分的說明可以參考<a href="https://ithelp.ithome.com.tw/articles/10244668?sc=hot">使用 PHP CodeSniffer 幫助熟悉 WordPress 程式碼風格</a>。</p>
<p>安裝與設定完成後，就會看到有不符合規範的地方會在下面出現紅色波浪線，滑鼠停留在上面一下下就會出現規範說明，然後根據說明進行修改即可。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-boilerplate/wordpress-plugin-boilerplate-02.jpg"></p>
<p>這邊補充一下，有時候會遇到無法符合規範的狀況，像是要使用其他外掛的變數名稱，而這外掛並沒有依照規範來寫，另外一種狀況是 WordPress 規範中類別的檔名要用 class-xxx.php，有 template tag 的要用 xxx-template.php 這樣，</p>
<p>但在研究 PHPUnit 單元測試的時候發現這樣無法運作，原因是 PHPUnit 測試檔要載入被測試的類別時，必須要用 PSR-4 的機制來載入，然後 PSR-4 規定類別叫什麼檔名就要叫什麼，</p>
<p>如果類別叫做 User，則檔名就一定要叫做 User.php，寫 class-User.php 會無法載入，我測試過用 require 或 include 也無法正確載入，最後只能忽略某些 WordPress 程式碼規範。</p>
<p>忽略的常用方法有兩種，分為忽略當行或多行，單行的話直接在該行後面加入註解，並把規則名稱寫在註解中即可</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$AbCd</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'bbb'</span><span class="token punctuation">;</span> <span class="token comment">//phpcs:ignore WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>WordPress 程式碼規範規定變數名稱必須要用底線而非駝峰式寫法，這時候直接在後面接上 //phpcs:ignore 加規則名稱，規則名稱可以在 PHP Sniffer 跳出的提示視窗中進行複製</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-boilerplate/wordpress-plugin-boilerplate-05.jpg"></p>
<p>如果一次要忽略多行就更簡單了，只要用兩個註解把要忽略的部分包住即可：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// @codingStandardsIgnoreStart</span>
<span class="token variable">$AbCd</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'bbb'</span><span class="token punctuation">;</span>
<span class="token variable">$ACaaa</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'abcdefg'</span><span class="token punctuation">;</span>
<span class="token comment">// @codingStandardsIgnoreEnd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>在開發 WordPress 外掛時整合 Composer 可以很方便的安裝一些實用的套件以及自由組織資料夾內容，這樣在程式重構上能達到最大的彈性，另一方面，透過 Coding Standard 養成程式撰寫的習慣可以幫未來的自己或是團隊成員理解程式碼，接下來我們繼續挖掘 Composer 有什麼好物可以用吧～</p>
]]></content>
      <categories>
        <category>外掛開發</category>
      </categories>
      <tags>
        <tag>boilerplate</tag>
        <tag>composer</tag>
        <tag>phpcs</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>從網站經營的法則介紹好用 WordPress 外掛</title>
    <url>/tw/wordpress-plugin-for-marketing/</url>
    <content><![CDATA[<p><img src="https://oberonlai.blog/wp-content/uploads/2015/10/wordpress-plugin-for-marketing-00-1024x654.jpg" alt="wordpress-plugin-for-marketing-00">   日前友人推薦 <a href="https://www.udemy.com/">udemy</a> 這個網站，於是選了幾堂免費的課程來看看，用完之後驚為天人，不僅介面方便易用，影片與簡報的呈現清楚易瞭，再加上還可做筆記、問老師問題等多種互動功能，搭配 APP 更可以隨時隨地上課，觀察一些新課程的報名數，才知道這網站已經是非常具有規模的線上學習中心了。</p>
<span id="more"></span>
<p>  但在這麼龐大的線上學習資料庫中，卻發現到中文課程實在少之又少，這對於英文苦手的我不免覺得可惜，直到上週才發現國內科技大站「癮科技」有與 udemy 合作，準備推廣中文課程內容，想不到隔沒幾天就發現癮科技站長吳顯二大大，製作了一門<a href="https://www.udemy.com/internetrule/">如何經營網站的實用課程</a>，重點是原價 99 鎂特價只要 1 鎂，二話不說立刻購買(已恢復為 99 元美金)。   吳老師很用心的把兩小時的課程拆成七個段落，每個段落再細分為 2~4 個小節，每段影片都控制在 10 分鐘以內，吳老師使用白版以圖表的方式說明課程內容，在學習上很輕鬆沒有負擔，因此每段影片看完都能很明確的記得這部影片的重點是什麼(搭配老師有時背對鏡頭或出鏡的笑點更能有效保持學習專注力XD)。   這段課程簡單明瞭的提出經營網站的法則，吳老師影片中也有提到歡迎大家整理成逐字稿分享，但我打字沒那麼快，所以只能用重點整理了。另一方面，因本站長期關注 WordPress 網站開發，發現到很多文章都是以功能的角度來介紹 WordPress 外掛，久而久之難免會因為工具好用，而忘記當初為何要用這工具的目的，最後變成為了功能而功能，卻忽略使用者的基本需求。   因此想藉由吳老師的課程來介紹 Wordpress 有那些好用的網站經營工具，來協助大家可以更方便、更快速的達成我們想要的目標，未來也會不定期更新這些工具清單，當然也歡迎大家推薦好用的工具囉！   想了解什麼是 Wordpress ?可以參考這一篇文章—&gt;<a href="https://oberonlai.blog/wordrpess-for-business/">WordPress部落格是中小企業架公司網站的解決方案？</a>   <img src="https://oberonlai.blog/wp-content/uploads/2015/10/wordpress-plugin-for-marketing-01-1024x570.jpg" alt="wordpress-plugin-for-marketing-01">  </p>
<h2 id="一、快速建立可用模式並不斷修正作法"><a href="#一、快速建立可用模式並不斷修正作法" class="headerlink" title="一、快速建立可用模式並不斷修正作法"></a>一、快速建立可用模式並不斷修正作法</h2><p> </p>
<p>課程重點： 網路經營的核心概念，就是把想好的功能盡快實作出來，然後去觀察這 100% 的功能中，那些是最多人常用的 5%，接下來把這常用的 5% 放大成 100%，再去觀察這 100% 中最常用的功能然後加以放大，如此循環這個精益求精的過程便能聚焦在使用者核心需求上，開發團隊也就不會浪費時間在使用者不需要的功能上。</p>
<p>  WordPress 相關資源：   1.快速租主機與網址可以參考文章—&gt;<a href="https://oberonlai.blog/install-wordpress-in-7-minutes/">買網址租主機外加安裝WordPress只要7分鐘又18秒24</a>   2.免費的主題、外掛數量非常多，且質都有一定的水準，常見的功能 WordPress 幾乎都有相對應的外掛可以使用。 WordPress 主題搜尋—&gt;<a href="https://wordpress.org/themes/browse/new/">https://wordpress.org/themes/browse/new/</a> WordPress 外掛搜尋—&gt;<a href="https://wordpress.org/plugins/">https://wordpress.org/plugins/</a>   3.付費的主題、外掛在國外已經形成龐大的市場，相較於免費版，付費的能提供更多功能與選項，減少程式碼的撰寫。 國外 WordPress 市集介紹—&gt;<a href="https://oberonlai.blog/themeforest-how-to-buy-theme-and-plugin/">Themeforest 教學</a> 三十秒找到理想主題—&gt;<a href="http://everytheme.com.tw/">EveryTheme</a>   4.運用更方便的新型態所見即所得網頁編輯器來調整版面與動線，藉此確認頁面成效。 <a href="http://codecanyon.net/item/visual-composer-page-builder-for-wordpress/242431?ref=oberonlai" title="wordpress-visual-composer"><img src="https://oberonlai.blog/wp-content/uploads/2014/05/wordpress-for-business-website-tool-1.jpg" alt="wordpress-for-business-website-tool-1"></a> Visual Composer 介紹—&gt;<a href="https://oberonlai.blog/wordpress-for-business-website-tool/">WordPress Visual Composer 視覺化編輯器外掛</a>   5.安裝 Google Analytics 網站分析工具，找出使用者常用功能與頁面。 Google Analytics Dashboard for WP—&gt;<a href="https://wordpress.org/plugins/google-analytics-dashboard-for-wp/">https://wordpress.org/plugins/google-analytics-dashboard-for-wp/</a> Better Google Analytics—&gt;<a href="https://wordpress.org/plugins/better-analytics/">https://wordpress.org/plugins/better-analytics/</a>   6.安裝 A/B Test 工具，找出那一種頁面的呈現方式最具有效益。 Optimizely—&gt;<a href="https://wordpress.org/plugins/optimizely/screenshots/">https://wordpress.org/plugins/optimizely/screenshots/</a> Nelio AB Testing—&gt;<a href="https://wordpress.org/plugins/nelio-ab-testing/">https://wordpress.org/plugins/nelio-ab-testing/</a>    </p>
<h2 id="二、流量的三個來源"><a href="#二、流量的三個來源" class="headerlink" title="二、流量的三個來源"></a>二、流量的三個來源</h2><p> </p>
<p>課程重點： 1.網站的三種流量來源：直接流量、社群流量、搜尋引擎流量。網站創立初期很難取得直接流量與搜尋流量，因此社群的推薦與分享就格外重要，創造內容來獲得社群的曝光與能見度。但是這種流量往往來得快去得也快，因此要能從這些流量之中建立起與訪客互動的管道，譬如像是訂閱電子報、加入會員等等的方式，未來有新品時可以發送訊息給他們，久而久之等需求發生時，就會來到我們的網站，這時才有直接流量或搜尋流量的產生。   2.創造社群分享要找有龐大粉絲的團主，透過他們的影響力進行分享才能達到事半功倍的擴散效果。實際做法是尋找這些團主可能會碰到的問題，協助他們解決或是進行合作，讓他們能願意分享傳播。譬如：採訪喬喬爸如何管理喬喬智慧型裝置使用時間。   3.網站的內容規劃可以跟著文化節慶走，事先想好一年 52 週每週的主題，然後根據這主題進行內容發想，或是了解你的目標族群接下來會發生的事件，根據他們的需求整理相對應的內容。譬如：五月天的日本演唱會下月舉行，本月就能整理出日本行的攻略或與音樂相關的景點。另外事件懶人包也能有效帶來流量，幫助訪客快速了解一個事件的來龍去脈。</p>
<p>  WordPress 相關資源：   1.電子報工具 MailPress—&gt;<a href="https://wordpress.org/plugins/mailpress/">https://wordpress.org/plugins/mailpress/</a> Newsletter—&gt;<a href="https://wordpress.org/plugins/newsletter/">https://wordpress.org/plugins/newsletter/</a> Feedburner Email Subscription—&gt;<a href="https://wordpress.org/plugins/feedburner-email-subscription/">https://wordpress.org/plugins/feedburner-email-subscription/</a> 將網站文章變成 RSS 來訪客用 Email 訂閱 Elegant Subscription Popup—&gt;<a href="https://wordpress.org/plugins/elegant-subscription-popup/">https://wordpress.org/plugins/elegant-subscription-popup/</a> 彈出視窗提醒訂閱電子報   2.會員系統相關工具 WP-Members: Membership Framework—&gt;<a href="https://wordpress.org/plugins/wp-members/screenshots/">https://wordpress.org/plugins/wp-members/screenshots/</a> User Meta—&gt;<a href="https://wordpress.org/plugins/user-meta/">https://wordpress.org/plugins/user-meta/</a>   <img src="https://oberonlai.blog/wp-content/uploads/2015/10/wordpress-plugin-for-marketing-02.jpg" alt="wordpress-plugin-for-marketing-02"> BadgeOS—&gt;<a href="https://wordpress.org/plugins/badgeos/">https://wordpress.org/plugins/badgeos/</a> 可以幫網站的會員加入成就徽章機制 Nextend Facebook Connect—&gt;<a href="https://wordpress.org/plugins/nextend-facebook-connect/">https://wordpress.org/plugins/nextend-facebook-connect/</a> 使用 Facebook 帳號成為會員 Roost Web Push—&gt;<a href="https://wordpress.org/plugins/roost-for-bloggers/">https://wordpress.org/plugins/roost-for-bloggers/</a> 網站推播工具   3.社群功能整合工具 WP Facebook Like Button—&gt;<a href="https://wordpress.org/plugins/wp-fb-share-like-button/">https://wordpress.org/plugins/wp-fb-share-like-button/ </a> 文章加入 Facebook 讚功能 GetSocial—&gt;<a href="https://wordpress.org/plugins/wp-share-buttons-analytics-by-getsocial/">https://wordpress.org/plugins/wp-share-buttons-analytics-by-getsocial/</a> 加入社群分享功能 Facebook Likebox Slider by ARScode—&gt;<a href="https://wordpress.org/plugins/arscode-social-slider-free/screenshots/">https://wordpress.org/plugins/arscode-social-slider-free/screenshots/</a> 顯示粉絲團小工具    </p>
<h2 id="三、網際網路的法則-大者恆大"><a href="#三、網際網路的法則-大者恆大" class="headerlink" title="三、網際網路的法則 - 大者恆大"></a>三、網際網路的法則 - 大者恆大</h2><p> </p>
<p>課程重點： 1.投放廣告的原則與網路經營的核心概念一樣，Facebook 貼文假設一天六篇，設定好 KPI 譬如是分享數，只要在設定時間內達成 KPI，立刻去幫這則貼文投放廣告。假設有兩篇貼文因達成 KPI 而開始進行廣告投放，後續持續追縱其分享數，如其中一則分享數達成指定目標，再行放大其廣告投放量，這就是大者恆大的法則。   2.推廣產品亦是同樣道理，先從自有管道中進行曝光，像是電子報、粉絲團，當某些產品銷售特別突出時，再去下廣告來加強產品的曝光量，因而商品貨源要能保持多樣化且充足，才能達到測試的目的，如果商品不足可以去尋找有分潤導購機制的產品來進行測試。</p>
<p>  WordPress 相關資源：   1.購物車相關工具 <img src="https://oberonlai.blog/wp-content/uploads/2015/10/wordpress-plugin-for-marketing-03.jpg" alt="wordpress-plugin-for-marketing-03"> WooCommerce—&gt;<a href="https://wordpress.org/plugins/woocommerce/">https://wordpress.org/plugins/woocommerce/</a> 全球最多人使用的購物車外掛</p>
<p>WooCommerce 金流串接介紹—&gt;<a href="https://cloudwp.pro/blog/woocommerce-checkout/">https://cloudwp.pro/blog/woocommerce-checkout/</a></p>
<p>Amazon Affiliates—&gt;<a href="http://codecanyon.net/item/woocommerce-amazon-affiliates-wordpress-plugin/3057503?s_phrase=&s_rank=23&ref=oberonlai">http://codecanyon.net/item/woocommerce-amazon-affiliates-wordpress-plugin/3057503?s_phrase=&amp;s_rank=23&amp;ref=oberonlai</a> 導購亞馬遜商品外掛</p>
<p>WooCommerce LINE PAY 金流模組—&gt;<a href="https://wordpress.org/plugins/wc-payment-gateway-line-pay/">https://wordpress.org/plugins/wc-payment-gateway-line-pay/</a></p>
<p>   </p>
<h2 id="四、流量的來源-搜尋"><a href="#四、流量的來源-搜尋" class="headerlink" title="四、流量的來源 - 搜尋"></a>四、流量的來源 - 搜尋</h2><p> </p>
<p>課程重點： 1.要得到搜尋必需要創造好的內容，內容有四種象限，第一象現為時下新聞網站的文章，內容短且淺又薄，跟社會熱門事件結合，過了明天即沒有存在價值，而新聞網站靠的是每日產出可以帶來高流量的文章來刺激點擊率，進而維持網站的整體流量。第二象現為幫網友解決問題的文章，此類的文章壽命較長且能創造長期的被動流量，經營長久能累積網站品牌，不容易隨著時間的流逝而失去價值，並且可將文章集結成冊，發展出不一樣的線下通路。現今的內容農場則是結合此兩者，以聳動的標題與沒有根據的解答來取得瀏覽量，因並非產出真正實質有幫助的內容，終將受到時間的考驗。 第三象限為資料索引型的網站內容，具有代表性的例子是維基百科，將網站資料分門別類，方便有需要的使用者進行搜尋，此類網站頁面瀏覽量會非常高，因其內容具有參考價值，能吸引使用者的持續瀏覽。 第四象限則是最困難達成的王道型文章，該文章非常有深度並且具有指標性，能直接讓人談論該議題時直接聯想到該文章。   2.創作內容的方法可以藉由載體的轉換做為依據。譬如把熱門的 Youtube 演講影片打成逐字稿，方便使用者搜尋，也容易讓使用者進行分享，進而帶動流量的提升，讓 Google 更容易找到你的網站。   3.對於搜尋引擎最友善的網頁形式是部落格，包含文章標題、摘要、內文、標籤、最新文章、最熱門文章、回應等等的欄位。已寫好的文章不要去變動它的網址或內文，這會讓 Google 不認得這篇文章，但記得要持續更新文章，更新的方式可以透過增加內容、補充說明，或是吸引網友回應，都是能增加文章熱門度的方式。   4.在規劃全站關鍵字的時候，要先確認該組關鍵字能導引使用者完成我們希望他達到的任務，像是完成購買、訂閱電子報等等。確認那些關鍵字是核心關鍵字的做法，可以透過購買 Google AdWords 來測試，或是找目標關鍵字出現在前三名的網站進行導購合作或交換連結，或是置放連結於留言中進行曝光。</p>
<p>  WordPress 相關資源：   1.各類型網站付費主題 新聞類網站—&gt;<a href="http://themeforest.net/search?utf8=%E2%9C%93&term=news&view=list&sort=sales&date=&category=wordpress/blog-magazine&price_min=&price_max=&sales=&rating_min=&ref=oberonlai">http://themeforest.net/search?utf8=%E2%9C%93&amp;term=news&amp;view=list&amp;sort=sales&amp;date=&amp;category=wordpress%2Fblog-magazine&amp;price_min=&amp;price_max=&amp;sales=&amp;rating_min=&amp;ref=oberonlai</a> 電子商務網站—&gt;<a href="http://themeforest.net/search?utf8=%E2%9C%93&term=&view=list&sort=sales&date=&category=wordpress/ecommerce&price_min=&price_max=&sales=&rating_min=&ref=oberonlai">http://themeforest.net/search?utf8=%E2%9C%93&amp;term=&amp;view=list&amp;sort=sales&amp;date=&amp;category=wordpress%2Fecommerce&amp;price_min=&amp;price_max=&amp;sales=&amp;rating_min=&amp;ref=oberonlai</a> 知識庫網站—&gt;<a href="http://themeforest.net/search?utf8=%E2%9C%93&term=faq&view=list&sort=&date=&price_min=&price_max=&sales=&rating_min=&ref=oberonlai">http://themeforest.net/search?utf8=%E2%9C%93&amp;term=faq&amp;view=list&amp;sort=&amp;date=&amp;price_min=&amp;price_max=&amp;sales=&amp;rating_min=&amp;ref=oberonlai</a> 資料索引型網站—&gt;<a href="http://themeforest.net/category/wordpress/corporate/directory-listings?ref=oberonlai">http://themeforest.net/category/wordpress/corporate/directory-listings?ref=oberonlai</a>   2.影音網站整合工具 YouTube Embed—&gt;<a href="https://wordpress.org/plugins/youtube-embed/">https://wordpress.org/plugins/youtube-embed/</a> TEDTalks Embedder—&gt;<a href="https://wordpress.org/plugins/tedtalks-embedder/">https://wordpress.org/plugins/tedtalks-embedder/</a> SoundCloud Master—&gt;<a href="https://wordpress.org/plugins/soundcloud-master/">https://wordpress.org/plugins/soundcloud-master/</a> Free Stock Photos Foter—&gt;<a href="https://wordpress.org/plugins/free-stock-photos-foter/">https://wordpress.org/plugins/free-stock-photos-foter/</a> 尋找網路免費圖庫自動插入   3.追縱訪客行為工具 Leadin—&gt;<a href="https://wordpress.org/plugins/leadin/">https://wordpress.org/plugins/leadin/</a>   4.SEO工具 Control Center—&gt;<a href="https://wordpress.org/plugins/control-center/">https://wordpress.org/plugins/control-center/</a> 追縱入站關鍵字的狀態 Yoast SEO—&gt;<a href="https://wordpress.org/plugins/wordpress-seo/">https://wordpress.org/plugins/wordpress-seo/</a>    </p>
<h2 id="五、流量的來源-忠誠流量"><a href="#五、流量的來源-忠誠流量" class="headerlink" title="五、流量的來源 - 忠誠流量"></a>五、流量的來源 - 忠誠流量</h2><p> </p>
<p>課程重點： 現在要創建一個全新的社群平臺非常困難，因為題目跟功能大部份都已經有人做了，如果真的要做，要能夠找到沒有人做過的題目並且還要有足夠的目標群眾。比較好的方法是先進入現有社群，努力成為該社群中的意見領袖，然後才能有影響力進而帶動忠實跟隨者，接著解決現有平臺的缺失或重大問題，才有可能發生新社群平臺的技術轉移，從而支撐起一個全新的社群平臺。</p>
<p>  WordPress 相關資源： <img src="https://oberonlai.blog/wp-content/uploads/2015/10/wordpress-plugin-for-marketing-04.jpg" alt="wordpress-plugin-for-marketing-04"> BuddyPress—&gt;<a href="https://wordpress.org/plugins/buddypress/">https://wordpress.org/plugins/buddypress/</a> 新增類似 Facebook 社群機制外掛 bbPress—&gt;<a href="https://wordpress.org/plugins/bbpress/">https://wordpress.org/plugins/bbpress/</a> 新增論壇機制外掛    </p>
<h2 id="六、流量的來源-和網路典範服務學習網路經營方法"><a href="#六、流量的來源-和網路典範服務學習網路經營方法" class="headerlink" title="六、流量的來源 - 和網路典範服務學習網路經營方法"></a>六、流量的來源 - 和網路典範服務學習網路經營方法</h2><p> </p>
<p>課程重點： 1.巴黎司機觀察法，在有等待空檔的時候，去觀察身旁的人事物，並開始問自己看到什麼、這是什麼、為什麼會這樣，從觀察中訓練自己的觀察力並養成問題追根究底的習慣，長久累積下來能成為經營網路的創意發想。   2.盡可能創造網站互動熱絡的景象，通常因地區文化的因素，大家都不想當第一個留言(搶頭香？)，人都有湊熱鬧的習慣，所以當完成內容時，要請朋友來幫忙回應留言，因為留言數是訪客可以很直接的感受到這網站的熱絡度，進而才願意投入參與互動，如此網站才容易被分享與推薦，藉此帶入更多流量。   3.Google 養成我們一種輸入很少的關鍵字卻可以得到無限多的結果，因此在規劃我們自己的服務時，也要盡可能減少使用者進入的門檻，卻能提供足夠多的資訊來滿足使用者的預期心理。   4.承上，Facebook 讓我們不用輸入卻可以得到一堆看不完的內容，好比操縱電視搖控器一樣，是一種不需經大腦思考的瀏覽行為。</p>
<p>  WordPress 相關資源：   1.讓訪客能看到網站互動數的工具 SEO Facebook Comment—&gt;<a href="https://wordpress.org/plugins/seo-facebook-comments/screenshots/">https://wordpress.org/plugins/seo-facebook-comments/screenshots/</a> 加入 Facebook 留言版，並將留言儲存至資料庫以利搜尋引擎收錄 WordPress Popular Posts—&gt;<a href="https://wordpress.org/plugins/wordpress-popular-posts/">https://wordpress.org/plugins/wordpress-popular-posts/</a> 根據文章瀏覽次數顯示熱門文章   2.站內搜尋工具 Search Everything—&gt;<a href="https://wordpress.org/plugins/search-everything">https://wordpress.org/plugins/search-everything</a>   3.整合社群資訊 <img src="https://oberonlai.blog/wp-content/uploads/2015/10/wordpress-plugin-for-marketing-05.jpg" alt="wordpress-plugin-for-marketing-05"> Famax—&gt;<a href="http://codecanyon.net/item/famax-facebook-fanpage-albums-on-your-website/10429010?ref=oberonlai">http://codecanyon.net/item/famax-facebook-fanpage-albums-on-your-website/10429010?ref=oberonlai</a> 將 Facebook 粉絲團資訊整合至 WordPress 網站</p>
<p>WordPress Social Stream—&gt;<a href="http://codecanyon.net/item/wordpress-social-stream/2201708?ref=oberonlai">http://codecanyon.net/item/wordpress-social-stream/2201708?ref=oberonlai</a> 整合 15 種社群網站內容</p>
<p>   </p>
<h2 id="七、計算你的成本與獲得"><a href="#七、計算你的成本與獲得" class="headerlink" title="七、計算你的成本與獲得"></a>七、計算你的成本與獲得</h2><p>1.CPM：廣告每一千次曝光可獲得的收益，以單篇文章的當日收入來舉例：</p>
<ul>
<li>  單一文章當日瀏覽次數 5000 次</li>
<li>  CPM 每 1000 次曝光賺 10 元</li>
<li>  單一文章有 5 個廣告版位</li>
</ul>
<p>當日收入 = 5000 / 1000 x 10 x 5 = 250 元   2.CPC：每次點擊廣告的可獲得的收益，以單篇文章的當日收入來舉例：</p>
<ul>
<li>  單一文章當日瀏覽次數 5000</li>
<li>  網路廣告平均點擊率 0.002</li>
<li>  一次點擊 4 元</li>
<li>  單一文章有 5 個廣告版位</li>
</ul>
<p>當日收入 = 5000 x 0.002 x 4 x 5 = 200 元   3.CPA：以每次完成目的性動作可獲得的收益，譬如點擊廣告後完成商品的銷售。，以單篇文章的當日收入來舉例：</p>
<ul>
<li>  單一文章當日瀏覽次數 5000</li>
<li>  單一文章有5個廣告版位</li>
<li>  網路廣告平均點擊率 0.002</li>
<li>  產品成交率 2%</li>
<li>  一個成交得4%營收</li>
<li>  一個成單為 1000 元</li>
</ul>
<p>當日收入 = 5000 x 5 x 0.002 x 0.02 x 0.04 x 1000 = 40 元</p>
<p>   </p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>在本次課程中有講解到許多網路經營的大方向，掌握好這些基本原則後，就能進行實作的細節，像是如何透過網站數據分辨那些是最常用的功能、那些指標具有象徵性、不同的指標在不同類型或是不同產業下所代表的意義、甚至是 Google Adwords、Facebook Ad 的投放原則等等，都是可以再另外開一門完整課程的大題目，希望接下來能看到更多中文教學出現在 udemy 上面，期盼好知識能被每個人運用與分享！   <img src="https://oberonlai.blog/wp-content/uploads/2015/10/wordpress-plugin-for-marketing-06.jpg" alt="wordpress-plugin-for-marketing-06"></p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>【 書摘 】價值主張年代 Value Proposition Design</title>
    <url>/tw/%E3%80%90-%E6%9B%B8%E6%91%98-%E3%80%91%E5%83%B9%E5%80%BC%E4%B8%BB%E5%BC%B5%E5%B9%B4%E4%BB%A3-value-proposition-design/</url>
    <content><![CDATA[<p>Alex Osterwalder 的前一本大作「獲利世代」，奠定了我多年來發想各種商業模式的根基，而這本「價值主張年代」是他的續作，主要內容是再更深入分析價值主張與目標族群這兩個範疇，但在我看來更像是使用者研究的一種框架，讓企業的價值主張可以更快的去確認市場需求後，再看是要打掉重練還是正式開發產品或是規模化量產。</p>
<p>創造商業模式有一套整合工具，首先是環境圖 ( Environment Map )，用來理解整個商業模式環境的關鍵趨勢、產業力量、總體經濟力量與市場力量，以了解發揮創意的情境。</p>
<span id="more"></span>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/01/IMG_0681-1024x768.jpg"></p>
<p>第二個是商業模式圖 ( Business Model Canvas )，主要目的是要能為企業創造價值，包含價值主張、目標客群、顧客關係、通路、關鍵合作夥伴、關鍵活動、關鍵資源、成本結構與收益流，透過此圖來描述商業模式的各個面向，用來讓利益關係人快速理解以及檢視商業模式的不足。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/01/IMG_0675-1-1024x768.jpg"></p>
<p>第三個是本書的主題，價值主張圖 ( Value Proposition )，主要目的是能為顧客創造價值，在商業模式還沒形成前，透過價值主張圖來了解顧客樣貌，並測試企業所提供的價值主張能否滿足顧客的需求。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/01/IMG_0674-1-1024x768.jpg"></p>
<p>在開創一個新事業或是在既有組織內進行創新時，這些工具的使用順序是價值主張圖 &gt; 商業模式圖 &gt; 環境圖，先釐清你的構想可以幫客戶解決什麼問題，然後帶入商業模式幫企業創造價值。</p>
<p>價值主張圖主要由以下兩個部分組成：</p>
<h2 id="ㄧ、顧客素描"><a href="#ㄧ、顧客素描" class="headerlink" title="ㄧ、顧客素描"></a>ㄧ、顧客素描</h2><p>顧客素描的主要用途是對顧客的理解提出假設，有了這些假設，才能進行驗證，以確保我們提出的價值主張真正能滿足顧客的需求。顧客素描包含以下三個部分：</p>
<h3 id="ㄧ-顧客的任務"><a href="#ㄧ-顧客的任務" class="headerlink" title="(ㄧ) 顧客的任務"></a>(ㄧ) 顧客的任務</h3><p>用顧客自己的話描述想要完成的事情，任務要描述的是顧客想要完成的工作、想要解決的問題，而不是任務完成後的結果，譬如對於部落客來說，發佈文章是結果而不是任務，任務應該是想要發掘值得寫的好內容。</p>
<p>任務類型分為以下四種：</p>
<ol>
<li> 功能性任務：指顧客需要完成的工作或是要解決的問題</li>
<li> 社交性任務：指顧客想要在他人眼中所呈現的形象，譬如想要營造自身的專業感、時尚感</li>
<li> 個人/情緒性任務：指顧客想要的情緒狀態，譬如需要得到舒服、安全的情緒滿足</li>
<li>輔助性任務：指要完成購買與消費所提供價值的過程中需要完成的任務，又可分為以下三種角色：<ul>
<li>  價值採購者：獲得價值主張需要做的任務：比價、評估商品、購買流程</li>
<li>  價值共同創造者： 一起參與價值創造的任務，推廣價值、一起參與價值設計</li>
<li>  價值轉移者：價值主張生命週期末端要做的任務，像是取消訂閱、丟棄銷毀、轉送或轉售</li>
</ul>
</li>
</ol>
<p>找出顧客的任務後，還要區分重要性，依照重要程度與發生頻率主要分為以下三種：</p>
<ol>
<li> 不做會造成嚴重後果</li>
<li> 不做不會造成嚴重後果的無關緊要任務</li>
<li> 不做不會造成嚴重後果，但是發生頻率高的任務</li>
</ol>
<h3 id="二-痛點"><a href="#二-痛點" class="headerlink" title="(二) 痛點"></a>(二) 痛點</h3><p>確認完顧客的任務後，接下來是描述顧客在執行任務的過程中遇到的困難、風險以及負面的結果，也就是顧客的痛點，痛點對照任務有以下幾種：</p>
<ol>
<li> 功能性痛點：造成顧客在執行任務的過程中所發生的障礙、阻撓</li>
<li> 社交性痛點：顧客在執行任務時無法營造出自己所希望的形象</li>
<li> 情緒性痛點：顧客在執行任務時體驗很不好、做起來不開心</li>
<li> 為了處理 A 而必須要再去多做 B 與 C 的衍伸性問題痛點</li>
<li> 阻止完成任務的障礙通常：常見的狀況是時間不夠、沒預算</li>
<li> 風險難以控管：目前的作法會產生高度的風險或是後果</li>
</ol>
<p>與任務一樣，痛點也要區分嚴重性，從非常痛到普通來針對每項痛點進行評估與排序，並起在列出痛點時描述要具體化且量化，譬如客人覺得排隊排太久，要精確描述客人排了幾分鐘會覺得太久。</p>
<h3 id="三-獲益"><a href="#三-獲益" class="headerlink" title="(三) 獲益"></a>(三) 獲益</h3><p>最後是獲益，獲益是描述顧客想要的結果或是顧客尋求的具體利益，主要的類型有以下幾種：</p>
<ol>
<li> 必要獲益：一定要有的，譬如智慧型手機一定要能打電話</li>
<li> 預期獲益：顧客想得到的、希望有的話會更好</li>
<li> 渴望獲益：顧客想得到的、覺得有的話就太完美了</li>
<li> 意料外獲益：超出顧客的預期，讓他們覺得驚喜</li>
</ol>
<p>獲益一樣也需要進行排序，從一定要有到可有可無，在描述獲益得同時也要具體化，用比較級的方式來確認顧客獲益，譬如有 A 會比 B 來得更好。</p>
<p>整題而言，顧客素描的執行順序如下：</p>
<ol>
<li> 選擇要描述的客層</li>
<li> 找出顧客的任務</li>
<li> 找出顧客的痛點</li>
<li> 找出顧客的獲益</li>
<li> 為顧客的任務、痛點、獲益進行排序</li>
</ol>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/01/IMG_0676-1024x768.jpg"></p>
<p>製作顧客素描時最需要注意的重點是不要把不同的客層混在同一個顧客素描中，這會無法聚焦每個客層的需求，其次是不要從自己的角度來排列重要性，要能客觀的由顧客角度來進行，此外如果列出的任務、痛點、獲益太少，代表還不夠了解顧客，而對痛點和獲益要能具體描述避免籠統的回答。</p>
<p>B2B 產業的顧客素描，因企業的分工或是不同的組織與決策流程，會需要設計不同的顧客素描，主要分為以下兩種：</p>
<ol>
<li> 合併的：針對不同部門來進行顧客素描</li>
<li>個別的：針對企業內或外部的的利益相關人，主要有以下六種類型<ul>
<li>  決策者：決定要下單購買的個人或團體</li>
<li>  有力人士：可控制決策者的個人或團體</li>
<li>  推薦人：負責搜尋和評估，對正式採購提供建議的人</li>
<li>  經濟型買家：控制預算且執行採購的個人或團體</li>
<li>  破壞者：能阻撓或妨礙決策者的個人或團體</li>
<li>  終端使用者：最後實際要使用產品的終端使用者</li>
</ul>
</li>
</ol>
<h2 id="二、價值地圖"><a href="#二、價值地圖" class="headerlink" title="二、價值地圖"></a>二、價值地圖</h2><p>完成了顧客素描後，接下來就是要設計價值地圖，價值地圖的主要功能是描述如何為客戶創造價值，與顧客素描一樣，分為以下三種範疇：</p>
<h3 id="一-產品與服務"><a href="#一-產品與服務" class="headerlink" title="(一) 產品與服務"></a>(一) 產品與服務</h3><p>指圍繞著價值主張所設計出的產品與服務，可分為有形的商品、無形的版權或面對面服務、數位的像線上諮詢、以及提供金融相關服務。在列出產品與服務時要能描述對客戶的必要性程度，從不可或缺到可有可無。</p>
<h3 id="二-痛點解方"><a href="#二-痛點解方" class="headerlink" title="(二) 痛點解方"></a>(二) 痛點解方</h3><p>描述你的產品與服務如何減輕顧客的困擾、痛苦，不必為客戶每個痛點都提供解法，專注在一個痛點即可。</p>
<h3 id="三-獲益引擎"><a href="#三-獲益引擎" class="headerlink" title="(三) 獲益引擎"></a>(三) 獲益引擎</h3><p>描述你的產品與服務如何為顧客創造利益，與痛點解方一樣，不必滿足客戶的每一個獲益，專注在自己產品最能有效提升的那一個即可。</p>
<p>製作價值地圖的順序如下：</p>
<ol>
<li> 列舉產品與服務</li>
<li> 說明痛點解方</li>
<li> 說明獲益引擎</li>
<li> 根據對顧客的了解把上述三點內的項目進行重要到不重要的排序</li>
</ol>
<p>在製作價值地圖是要注意的重點是必須針對目標客層來列舉產品與服務，其次痛點解方與獲益引擎要列的是創造的價值，而非產品與服務，並且要與顧客素描中的項目相關，最重要的是針對特定痛點與獲益來提供解方，別想一魚多吃。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/01/IMG_0677-1024x768.jpg"></p>
<h2 id="三、價值適配"><a href="#三、價值適配" class="headerlink" title="三、價值適配"></a>三、價值適配</h2><p>當價值地圖與顧客素描吻合時就達到所謂的價值適配，但要能找到適配的價值來對應客戶的痛點很困難，就算找到了也很難持續維持，所以要必須不斷的努力與更新，否則顧客的反應是很直接且殘酷的。</p>
<p>具體做法是對應價值地圖與顧客素描中每個項目，有符合到的打勾，沒有符合的也沒關係，重點是要能專注解決特定問題。</p>
<p>價值適配有三種不同的階段：</p>
<ol>
<li> 紙上談兵階段：在透過假設所產出的顧客素描後，經過實驗證明你的假設是正確的，並設計出相對應顧客素描中的價值主張</li>
<li> 市場驗證階段：能證明價值主張是能幫目標客戶創造價值的，也就是他們願意嘗試你的解決方案</li>
<li> 獲利潛力階段：證明價值主張是可以發展成一套商業模式，可以收到錢並可以開始進行營業擴展</li>
</ol>
<p>在真實的世界中會出現多重價值適配的狀況，一個價值主張可能還不夠滿足客戶，要多準備幾個來對應，常見的例子是經銷模式：要滿足顧客與經銷商，以及網路平台模式：Airbnb 要媒合房東與旅客。</p>
<p>價值主張圖主要要解決的問題是釐清價值創造的模式，並當相關成員溝通時有相同的語言，進而避免浪費時間在無用的構想上。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/01/IMG_0678-1024x768.jpg"></p>
<h2 id="設計"><a href="#設計" class="headerlink" title="設計"></a>設計</h2><h3 id="一、起點"><a href="#一、起點" class="headerlink" title="一、起點"></a>一、起點</h3><p>完成了價值主張後，接下來要進入設計階段來驗證價值主張能否經過市場的驗證，但在還沒有任何想法之前，可以透過以下幾種方式來發想你的價值主張：</p>
<h4 id="一-從目標產業開始"><a href="#一-從目標產業開始" class="headerlink" title="(一) 從目標產業開始"></a>(一) 從目標產業開始</h4><p>一開始沒有方向時，可以參考其他產業的模式，把既有的模式帶入自己的產業之中，或是帶進新的技術，甚至是別人無法複製的技術，也可以轉個方向來發掘尚未被重視的客戶群體，或是往後退一步，從整體的經濟趨勢來設計價值主張。</p>
<h4 id="二-從既有的商業模式開始"><a href="#二-從既有的商業模式開始" class="headerlink" title="(二) 從既有的商業模式開始"></a>(二) 從既有的商業模式開始</h4><p>如果是有已經在運作的商業模式時，可以從商業模式圖之中的各項元素來創造價值主張。像是引入新夥伴帶入新想法、既有資源的延伸、研究現有成本結構、從既有客戶發掘與重新設計銷售方案等等。</p>
<h4 id="三-從既有的價值主張開始"><a href="#三-從既有的價值主張開始" class="headerlink" title="(三) 從既有的價值主張開始"></a>(三) 從既有的價值主張開始</h4><p>如果已經擁有價值主張，則可以再從既有的顧客素描中發掘新的主張，像是創造新的獲益引擎、想出新產品、找出新痛點、專注在還沒解決的痛點、找出顧客的新任務等等。</p>
<p>此外給自己設下條件來限制發想的情境，往往也會有異想不到的收穫。或是可以從深入了解新技術後來找能解決的問題，稱之為技術推力策略，以及針對問題找解決方案，稱之為市場拉力策略。</p>
<h3 id="二、製作原型"><a href="#二、製作原型" class="headerlink" title="二、製作原型"></a>二、製作原型</h3><p>有了具體的價值主張後，接下來就是要驗證我們的主張是否有吻合真實顧客的需求，透過製作原型來展現概念並得到顧客真實的回饋，這是製作原型最主要的目的，所以儘可能的以快速且免費的方式來進行測試，可以採用以下幾種方法：</p>
<ol>
<li> 餐巾紙草稿：只描述一個概念或構想</li>
<li> 填充題：我們的 XXX 可以幫助 XXX，他們想要 XXX，透過 XXX 跟 XXX</li>
<li> 價值主張圖</li>
<li> 借用實務說明</li>
<li> 製作最精簡的可用產品 (MVP)</li>
</ol>
<p>製作原型的重點是每做一個不能超過 15 分鐘，只要亂槍打鳥弄一堆，不用糾結於產品細節，以視覺化呈現想法，才能激起討論，最重要的是能盡早發表，多找人給意見。</p>
<h3 id="三、了解顧客"><a href="#三、了解顧客" class="headerlink" title="三、了解顧客"></a>三、了解顧客</h3><p>要能確認顧客素描中的項目是否屬實，最快的方法就是想辦法了解你的目標客層，可以透過以下幾種方式：</p>
<ol>
<li> 從數據研究：在網路上蒐集資料，像是 Google Trends、關鍵字研究、相關論文、政府開放資料或是社群媒體</li>
<li>直接與潛在早期採用者顧客訪談：透過訪談來了解顧客，要抱持初學者心態，少說多聽，盡量尋找事實而非個人意見，所以要盡可能多問為什麼去發掘背後原因，然後別太早提及解決方案，結束後持續追蹤，並要求轉介紹以獲得更多訪談對象。訪談的步驟如下：<ul>
<li>  擬好顧客素描</li>
<li>  製作訪談大綱</li>
<li>  與多位顧客訪談，數量是當你訪談到覺得每個人的回答都差不多時的數量</li>
<li>  整理萃取</li>
<li>  檢視訪談</li>
<li>  群找固定模式</li>
<li>  結論整理</li>
</ul>
</li>
<li> 觀察潛在顧客的行為：情況允許的話可以與目標顧客一起工作，設計一日作息表，最重要的是要有創意來想出辦法來觀察顧客</li>
<li> 模仿顧客：透過角色扮演來模擬顧客的需求</li>
<li> 成為共同創造者：邀請顧客一起來開發產品</li>
<li> 透過實驗：設計實驗來確認價值主張，但要確保受測者不會因為實驗目的性而影響受測結果，或是在受測者事後得知實驗後的反應處理。</li>
</ol>
<p>開發顧客流程首要主要是能發掘顧客，然後確認是否有滿足顧客需求，有的話就開始創造顧客擴大業務，最後是建立公司來進行營運。</p>
<h3 id="四、做出選擇"><a href="#四、做出選擇" class="headerlink" title="四、做出選擇"></a>四、做出選擇</h3><p>有了足夠的測試資料後，接下來就是要檢視哪些價值主張可行，判斷的可以透過以下問題來進行檢測：</p>
<ul>
<li>  能嵌入到商業模式裡面嗎？</li>
<li>  有聚焦在最重要的任務以及痛點上嗎？</li>
<li>  有符合顧客評量成敗的標準嗎？</li>
<li>  能與競爭對手明顯區隔嗎？</li>
<li>  很難被複製模仿嗎？</li>
</ul>
<p>或是可從外部因素來決定所採用的主張，像是分析競爭對手的價值主張，來確保自己的主張在市場上是別人尚未提供並擁有競爭力的。</p>
<p>確定標準與投票選擇要採用哪個原型可以透過以下的角度來進行思考：</p>
<ul>
<li>  是否符合公司策略？</li>
<li>  是否符合顧客的需求</li>
<li>  與現行商業模式的整合？</li>
<li>  獲利的潛力如何？</li>
<li>  落實的困難度</li>
</ul>
<h3 id="五、找到正確的商業模式"><a href="#五、找到正確的商業模式" class="headerlink" title="五、找到正確的商業模式"></a>五、找到正確的商業模式</h3><p>商業模式的核心就是如果要為事業創造價值必須要為顧客創造價值，要為顧客創造價值必須要為事業創造價值，這是一個循環的過程。如何正確的評估商業模式可以透過以下幾種面向來探討：</p>
<ul>
<li>  顧客的轉換成本</li>
<li>  是否有經常性營收？</li>
<li>  能在成本發生前就創造營收嗎？</li>
<li>  改變產業規則的成本結構</li>
<li>  能讓顧客或第三方為你創造事業的價值嗎？</li>
<li>  能否規模化？</li>
<li>  是否有護城河免於競爭？</li>
</ul>
<h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>透過原型進行測試的基本原則，首先要能讓團隊成員意識到事實證據超越個人意見，盡可能的擁抱失敗來加快學習的速度才能降低風險，但也要認知到實驗並非現實，優先實驗基礎假設，也就是這條件沒成立的話後面就不用玩的假設優先測試，一切都要量化，最重要的是不可重來的決策一定要最早實驗。</p>
<p>測試項目的順序是先驗證顧客素描的項目屬實，然後驗證價值地圖能達成適配，最後是<br>驗證商業模式可行。</p>
<p>實際的測試方式是把價值主張圖裡面的每個項目一一進行測試，先找出找出哪些假設要成立這事才會成，然後排序假設，從最關鍵的假設往下排，接著用測試卡去進行實驗。</p>
<p>測試卡裡面要定義清楚測試的時間週期、說明假設的內容、測試方式、要觀察的量化指標以及假設成立的標準。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/01/IMG_0679-1024x768.jpg"></p>
<p>使用測試卡完成測試後，再用學習卡來記錄洞見，學習卡裡面要說明假設的內容、紀錄觀察到的現象、學習和洞見以及決策和行動。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/01/IMG_0680-1024x768.jpg"></p>
<p>要注意的是先從顧客素描進行測驗，避免錯誤的正向解讀，如果是要下重大決策，多設計幾個實驗來確認假設，同時也要避免錯誤的負向解讀，有時候只是廣告關鍵字下錯卻以為沒市場。</p>
<p>在實驗時一定要加入行動訴求(CTA)，來證明顧客是真的需要，來藉此驗證顧客對主張的興趣和相關性、順序和偏好甚至是付費意願。</p>
<p>另外還可以透過以下幾種方法來進行低成本的測試：</p>
<ol>
<li> Adwords：選擇關鍵字來進行廣告投放，並設計廣告、測試的著陸頁面來展現價止裝漲，最後透過廣告計算點擊數、CTA 點擊數的轉換率來評估測試效果</li>
<li> 追蹤連結：設計價值主張的到達頁面，然後透過短連結服務或是 Google Aanlytics 的 UTM 參數來設定訪客來源，接著把連結透過線上或線下丟出去，不同推送的渠道使用不同的網址參數，藉此來觀察頁面在不同渠道上的成效</li>
<li> 概念說明影片：透過一段影片介紹來展現價值主張並提供行動訴求</li>
<li> 到達頁面：設計價值主張的著陸頁面可以驗證一個或多個假設，透過模擬銷售、馬上購買按鈕來測試這個主張是否有人願意買單，或是加入價格來測試售價區間，甚至是設計信用卡卡號輸入框來模擬付款，當潛在顧客完成行動時，可以告知目前產品維護中，等準備後時會立即通知他使用</li>
<li> 宣傳 DM：設計實體小冊子來展現價值主張</li>
<li> 網站原型：設計可以互動但卻沒有任何功能的網頁來測試價值主張</li>
<li> 預購：透過群眾募資平台來進行測試</li>
</ol>
<p>在進行測試的過程中，要能同步更新測試結果以及進度總表，包含已經測試哪些項目、正在測試的項目與目前進度。</p>
<h2 id="演進"><a href="#演進" class="headerlink" title="演進"></a>演進</h2><p>價值主張圖最大的好處是可以創造一致性，讓利益相關人有共同的語言，但重點還是要評量和監測，長期追蹤價值主張的表現，不斷改進與創新，才能創造出與時俱進的價值主張。</p>
]]></content>
      <categories>
        <category>商業模式</category>
      </categories>
  </entry>
  <entry>
    <title>【 書摘 】Building Web Apps with WordPress - 使用 WordPress API、物件、與實用函式</title>
    <url>/tw/building-web-apps-with-wordpress-api-objects-and-helper-functions/</url>
    <content><![CDATA[<h2 id="Shortcode-API"><a href="#Shortcode-API" class="headerlink" title="Shortcode API"></a>Shortcode API</h2><p>Shortcode 是在後台編輯器中用來產生動態內容的一段短代碼，它有三種形式：</p>
<ul>
<li>  直接顯示內容，像是 [myshortcode]</li>
<li>  帶有屬性，像是 [myshortcode id=”1” type=”text”]</li>
<li>  像 HTML 一樣有前後標籤包內文包住，像是 [myshortcode id=”1”] 這邊是文字內容…[/myshortcode]</li>
</ul>
<blockquote>
<p>Shortcode 的使用場景我通常是用來提供給不熟悉 HTML 與 CSS 的客戶，在上文章內容的時候可以使用我們幫他設計好的 UI 元件，我將 UI 元件的 HTML 包裝成 shortcode，所以只要打 [title text=”標題文字”]，就會出現 h2 並帶有特定 class 的標題文字。</p>
</blockquote>
<p>建立 Shortcode 的第一個步驟，先使用 add_shortcode() 來定義 callback function，需要使用在 Shortcode 裡面的屬性要以陣列的格式傳入 callback function 的第一個參數，第二個參數為要被 Shortcode 包住的內容，下面範例說明如何新增一個帶有屬性以及內容的 Shortcode：</p>
<span id="more"></span>

<pre class="line-numbers language-php" data-language="php"><code class="language-php">
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/*
  shortcode callback for [msg] shortcode
  Example: [msg type="error"]This is an error message.[/msg]
  Output:
  &lt;div class="message message-error">
      &lt;p>This is an error message.&lt;/p>
  &lt;/div>
*/</span>
<span class="token keyword">function</span> <span class="token function">sp_msg_shortcode</span><span class="token punctuation">(</span><span class="token variable">$atts</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">// 屬性的預設值</span>
  <span class="token function">extract</span><span class="token punctuation">(</span> <span class="token function">shortcode_atts</span><span class="token punctuation">(</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token string single-quoted-string">'type'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'information'</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$atts</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">do_shortcode</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//allow nested shortcodes</span>
  <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;div class="message message-'</span> <span class="token operator">.</span>
    <span class="token variable">$type</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'">&lt;p>'</span> <span class="token operator">.</span> <span class="token variable">$content</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/p>&lt;/div>'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token variable">$r</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_shortcode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_msg_shortcode'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// msg 為 Shortcode 名稱</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 callback 裡面要返回值使用 return 優於 echo，因為 Shortcode filter 會在還沒有任何內容產生前執行，如果是用 echo 的話，輸出的結果會跑到頁面最上方而非在你想要的位置。</p>
<h3 id="Shortcode-屬性"><a href="#Shortcode-屬性" class="headerlink" title="Shortcode 屬性"></a>Shortcode 屬性</h3><p>上面範例中使用 shortcode_atts() 來處理要帶入的屬性，它有三個參數傳入方式：$pairs、$atts 與 $shortcode。$pairs 是屬性預設值的陣列，使用 key / value 的方式來指定屬性名與預設值，範例中只有一個屬性，而預設值為 information。</p>
<p>而 $atts 則是定義屬性的陣列，shortcode_atts() 會把 $pairs 跟 $atts 合併為一個陣列，所以這兩個參數為必填。第三個參數 $shortcode 為選填，如果設定該 shortcode 名稱 ( 範例為 msg )，那麼 filter shortcode_atts_msg 就會被觸發，這樣其他的外掛就可以用這支 filter 去取代該 shortcode 的屬性預設值。</p>
<p>shortcode_atts() 的結果再使用 PHP 的 extract() 來處理，它可以自動把陣列中的 key 直接轉換成變數，之後就能用在 $content 裡面，因此 echo $type 會輸出 information。</p>
<h3 id="巢狀-Shortocde"><a href="#巢狀-Shortocde" class="headerlink" title="巢狀 Shortocde"></a>巢狀 Shortocde</h3><p>範例中的 $content = do_shortcode($content) 讓你可以在 Shortcode 裡面再放入另外一組 Shortcode，譬如有另外一個 Shortcode 叫做 [help_link]，則可以這樣寫：</p>
<p>[msg type=”error”] 這裡放一些文字 [help_link] 這裡是連結 [/msg]</p>
<p>需要注意的是如果是把相同名稱的 Shortcode 放進裡面會爆炸，因為 WordPress 是用正規表示法來解析 Shortcode 的內容，它會把 Shortcode 裡面的資料做解析，如果是自己包自己，會大幅影響解析的速度進而產生問題，因此比較好的作法是不要用巢狀 Shortcode，或是使用別的 Shortcode 名稱來指定同一個 callback function，不然就是要自己寫正規法來判斷。</p>
<p>do_shortcode 還可以拿來顯示自訂欄位、自訂資料表的資料或是其他還沒有被 the_content filter 所執行的內容。通常情況下，會用 apply_filters( “the_content” , $content ) 來做比較適合，它會執行所有在 the_content filter 上的 hook，當然也包含 Shortcode 的 filter。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">global</span> <span class="token variable">$post</span><span class="token punctuation">;</span>
<span class="token variable">$sidebar_content</span> <span class="token operator">=</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">sidebar_content</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">the_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sidebar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token comment">//echo do_shortcode($sidebar_content);</span>
    <span class="token keyword">echo</span> <span class="token function">apply_filters</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'the_content'</span><span class="token punctuation">,</span> <span class="token variable">$sidebar_content</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通常用這個</span>
  <span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>do_shortcode() 最常用到的地方就是當需要把 Shortocde 寫在 php 裡面的時候。依照作者的範例，如果要在 php 顯示 msg 這個 Shortcode 可以這樣寫：<?php echo do_shortcode("[msg type='error']這裡是一些文字[/msg]"); ?></p>
<p>至於何時該用 apply_filters 還是 do_shortcode 來顯示 Shortcode，<a href="https://wordpress.stackexchange.com/questions/173844/apply-filtersthe-content-content-vs-do-shortcodecontent">這一篇</a>有很好的解釋，簡單說看你是要單純顯示 Shortcode 就好，還是要把除了 Shortcode 以及其他掛在 the_content 的 filter 都顯示出來，需要後者的話就使用 apply_filters( ‘the_content’, $content) 吧～</p>
</blockquote>
<h3 id="移除-Shortcode"><a href="#移除-Shortcode" class="headerlink" title="移除 Shortcode"></a>移除 Shortcode</h3><p>使用 remove_shortcode() 移除單一已註冊的 Shortcode，使用 remove_all_shortcodes() 移除所有 Shortcode。在執行 remove_shortcode() 的時候，要確保它是放在已註冊 Shortcode 完成後才執行，不然會抓不到，使用 hook 的 priority 參數來進行設定。</p>
<p>已註冊的 Shortcode 會被放在全域變數 $shortcode_tags 裡面，可以直接操作這個變數來改變 Shortcode 狀態。譬如說，如果你想要讓某些內容不能停用某些 Shortcode，可以先把 $shortcode_tags 裡面的值做備份，然後判斷在特定頁面下存新的值進去，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token comment">// 製作 Shortcode 備份</span>
<span class="token keyword">global</span> <span class="token variable">$shortcode_tags</span><span class="token punctuation">;</span>
<span class="token variable">$original_shortcode_tags</span> <span class="token operator">=</span> <span class="token variable">$shortcode_tags</span><span class="token punctuation">;</span>

<span class="token comment">// 移除 Shortcode msg </span>
<span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$shortcode_tags</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 輸出內容，這時候 msg 是無法使用的</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">do_shortcode</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$content</span><span class="token punctuation">;</span>

<span class="token comment">// 還原所有 Shortcode</span>
<span class="token variable">$shortcode_tags</span> <span class="token operator">=</span> <span class="token variable">$original_shortcode_tags</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="其他實用的-Shortcode-Function"><a href="#其他實用的-Shortcode-Function" class="headerlink" title="其他實用的 Shortcode Function"></a>其他實用的 Shortcode Function</h3><p><strong>shortcode_exists( $tag )</strong><br>判斷特定 Shortcode 有沒有被註冊</p>
<p><strong>has_shortcode( $content, $tag )</strong><br>判斷特定 Shortcode 有沒有在 $content 裡面被使用</p>
<p><strong>shortcode_parse_atts( $text )</strong><br>當要取得 Shortcode 的屬性時，可以把整段 Shortcode 帶入這支 function 的參數，就可以得到 key/value 形式的 Shortcode 屬性陣列，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$atts</span> <span class="token operator">=</span> <span class="token function">shortcode_parse_atts</span><span class="token punctuation">(</span>
  <span class="token string single-quoted-string">'[soundcloud url="http://api.soundcloud.com/tracks/67658191" params="" width=" 100%" height="166" iframe="true" /]'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$atts</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 輸出 http://api.soundcloud.com/tracks/67658191</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>strip_shortcodes( $content )</strong><br>把內文裡面的 Shortcode 全部移除</p>
<h2 id="Widget-API"><a href="#Widget-API" class="headerlink" title="Widget API"></a>Widget API</h2><p>Widget 就是在後台 &gt; 外觀 &gt; 小工具 裡面的元件，但在開發 Widget 前，可以仔細思考一下是否真的需要另外開發它，因為 WordPress 本身已經有許多內建的 Widget，研究一下它們，也許你的需求都能透過它們來解決。</p>
<h3 id="新增-Widget"><a href="#新增-Widget" class="headerlink" title="新增 Widget"></a>新增 Widget</h3><p>要新增 Widget 你必須要繼承一支 class 叫做 WP_Widget，它被定義在 wp-includes/widgets.php 裡面，有四個 methods 需要被覆寫，程式碼如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/*
  Taken from the Widgets API Codex Page at:
  http://codex.wordpress.org/Widgets_API
*/</span>
<span class="token keyword">class</span> <span class="token class-name">My_Widget</span> <span class="token keyword">extends</span> <span class="token class-name">WP_Widget</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// widget actual processes</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">widget</span><span class="token punctuation">(</span> <span class="token variable">$args</span><span class="token punctuation">,</span> <span class="token variable">$instance</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// outputs the content of the widget</span>
<span class="token punctuation">&#125;</span>

 <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">form</span><span class="token punctuation">(</span> <span class="token variable">$instance</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// outputs the options form on admin</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span> <span class="token variable">$new_instance</span><span class="token punctuation">,</span> <span class="token variable">$old_instance</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// processes widget options to be saved</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'widgets_init'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
     <span class="token function">register_widget</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'My_Widget'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>add_action 第二個參數可以帶匿名函式是 PHP 5.3 之後才有支援，而 WordPress 最低安裝需求為 PHP 5.2.4。另一個方法是用 create_function，可以相容較舊的 PHP 版本。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/*
  Taken from the Widgets API Codex Page at:
  http://codex.wordpress.org/Widgets_API
*/</span>
<span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'widgets_init'</span><span class="token punctuation">,</span>
     <span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'return register_widget("My_Widget");'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>作者外掛 SchoolPress 使用 Widget 來顯示所有班級或是指定班級 ( BuddyPress 的 Group )中的筆記，可以讓社團管理者 ( 老師 ) 自行設定：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/*
  Widget to show the current class note.
  Teachers (Group Admins) can change note for each group.
  Shows the global note set in the widget settings if non-empty.
*/</span>
<span class="token keyword">class</span> <span class="token class-name">SchoolPress_Note_Widget</span> <span class="token keyword">extends</span> <span class="token class-name">WP_Widget</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span>
    <span class="token string single-quoted-string">'schoolpress_note'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'SchoolPress Note'</span><span class="token punctuation">,</span>
<span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'description'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Note to Show on Group Pages'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">widget</span><span class="token punctuation">(</span> <span class="token variable">$args</span><span class="token punctuation">,</span> <span class="token variable">$instance</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">global</span> <span class="token variable">$current_user</span><span class="token punctuation">;</span>

<span class="token comment">//saving a note edit?</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'schoolpress_note_text'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>
<span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'class_id'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//make sure this is an admin</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">groups_is_user_admin</span><span class="token punctuation">(</span><span class="token variable">$current_user</span><span class="token operator">-></span><span class="token constant">ID</span><span class="token punctuation">,</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'class_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">//should escape the text and possibly use a nonce</span>
<span class="token function">update_option</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'schoolpress_note_'</span> <span class="token operator">.</span> <span class="token function">intval</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'class_id'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'schoolpress_note_text'</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//look for a global note</span>
<span class="token variable">$note</span> <span class="token operator">=</span> <span class="token variable">$instance</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'note'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//get class id for this group</span>
<span class="token variable">$class_id</span> <span class="token operator">=</span> <span class="token function">bp_get_current_group_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//look for a class note</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$note</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$class_id</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$note</span> <span class="token operator">=</span> <span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"schoolpress_note_"</span> <span class="token operator">.</span> <span class="token variable">$class_id</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//display note</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$note</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>schoolpress_note<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">wpautop</span><span class="token punctuation">(</span> <span class="token variable">$note</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">//show edit for group admins</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">groups_is_user_admin</span><span class="token punctuation">(</span> <span class="token variable">$current_user</span><span class="token operator">-></span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token variable">$class_id</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>schoolpress_note_edit_trigger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Edit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>schoolpress_note_edit<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span>
<span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class_id<span class="token punctuation">"</span></span>
<span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$class_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>schoolpress_note_text<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">esc_textarea</span><span class="token punctuation">(</span><span class="token function">get_option</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'schoolpress_note_'</span><span class="token operator">.</span><span class="token variable">$class_id</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">;</span><span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Save<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>schoolpress_note_edit_cancel<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
Cancel
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">'#schoolpress_note_edit_trigger'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">'#schoolpress_note'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">'#schoolpress_note_edit'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">'#schoolpress_note_edit_cancel'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">'#schoolpress_note'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">'#schoolpress_note_edit'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">form</span><span class="token punctuation">(</span> <span class="token variable">$instance</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$instance</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'note'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token variable">$note</span> <span class="token operator">=</span> <span class="token variable">$instance</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'note'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
<span class="token variable">$note</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_field_id</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'note'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">_e</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Note:'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_field_id</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'note'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span>
<span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_field_name</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'note'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">esc_textarea</span><span class="token punctuation">(</span> <span class="token variable">$note</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span> <span class="token variable">$new_instance</span><span class="token punctuation">,</span> <span class="token variable">$old_instance</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$instance</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'note'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$new_instance</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'note'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token variable">$instance</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'widgets_init'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">register_widget</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'SchoolPress_Note_Widget'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定義-Widget-區塊"><a href="#定義-Widget-區塊" class="headerlink" title="定義 Widget 區塊"></a>定義 Widget 區塊</h3><p>要讓你的 Theme 可以支援顯示 Widget 要做兩件事：第一個先要註冊 Widget 區塊，然後才能讓它顯示在前端頁面。要註冊 Widget 區塊使用 register_sidebar( $args )，只能接收一個陣列參數，參數內容說明如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * Add a sidebar.
 */</span>
<span class="token keyword">function</span> <span class="token function">wpdocs_theme_slug_widgets_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">register_sidebar</span><span class="token punctuation">(</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string single-quoted-string">'name'</span>          <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Main Sidebar'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'textdomain'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// 區塊名稱，重複名字會+1</span>
    <span class="token string single-quoted-string">'id'</span>               <span class="token operator">=></span> <span class="token string single-quoted-string">'sidebar-1'</span><span class="token punctuation">,</span>                           <span class="token comment">// 區塊 ID</span>
    <span class="token string single-quoted-string">'description'</span>   <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Description'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'textdomain'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment">// 區塊說明</span>
    <span class="token string single-quoted-string">'before_widget'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'&lt;li id="%1$s" class="widget %2$s">'</span><span class="token punctuation">,</span>  <span class="token comment">// 包住區塊的開頭 HTML</span>
    <span class="token string single-quoted-string">'after_widget'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'&lt;/li>'</span><span class="token punctuation">,</span>                               <span class="token comment">// 包住區塊的結尾 HTML</span>
    <span class="token string single-quoted-string">'before_title'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'&lt;h2 class="widgettitle">'</span><span class="token punctuation">,</span>            <span class="token comment">// 包住區塊標題的開頭 HTML</span>
    <span class="token string single-quoted-string">'after_title'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'&lt;/h2>'</span><span class="token punctuation">,</span>                               <span class="token comment">// 包住區塊標題的結尾 HTML</span>
  <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'widgets_init'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'wpdocs_theme_slug_widgets_init'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>可能會有些朋友把新增 Widget 跟新增 Widget 區塊搞混，Widget 區塊是定義要顯示 Widget 的地方，一個區塊可以有很多個 Widget 放在裡面，而 Widget 則是單一小工具，是要被放在 Widget 區塊裡面的東西。</p>
</blockquote>
<p><a href="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-18-at-09.40.44.jpg"><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-18-at-09.40.44-1024x372.jpg"></a></p>
<p>Widget 區塊註冊完成之後，接下來就是要來顯示它，使用的是 dynamic_sidebar( $arg ) 這個 function，$arg 參數帶的是 Widget 區塊 name 或 ID，在呼叫前一樣可以用它來判斷 Widget 區塊是否有放入 Widget，沒有的話就可以顯示預設的內容：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dynamic_sidebar</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'schoolpress_student_status'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">//fallback code in case my_widget_area sidebar was not found</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要判斷 Widget 區塊是否有被註冊，可以使用 is_active_sidebar( $arg )，$arg 參數帶的是 Widget 區塊 name 或 ID：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//from twenty-thirteen/sidebar.php</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">is_active_sidebar</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'sidebar-2'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tertiary<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sidebar-container<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>complementary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sidebar-inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>widget-area<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">dynamic_sidebar</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'sidebar-2'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- .widget-area --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- .sidebar-inner --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- #tertiary --></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">endif</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="不在-Widget-區塊顯示-Widget"><a href="#不在-Widget-區塊顯示-Widget" class="headerlink" title="不在 Widget 區塊顯示 Widget"></a>不在 Widget 區塊顯示 Widget</h3><p>如果你已經明確知道你想要把某個 Widget 放在特定的位置，那麼就不需要使用 Widget 區塊來顯示 Widget，可以用 the_widget( $widget, $instance, $args ) 這支 function 來直接顯示它，並且可以透過參數來指定 Widget 的設定值，參數說明如下：</p>
<p><strong>$widget</strong> - 要顯示的 Widget 類別名稱</p>
<p><strong>$instance</strong> - 要顯示的 Widget 設定的資料，以陣列表示</p>
<p><strong>$args</strong> - 要顯示的 Widget 的 HTML 標籤設定，有 before_widget、after_widget、before_title、after_title</p>
<p>以下為作者外掛 SchoolPress 顯示筆記 Widget 的範例：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//show note widget, overriding global note</span>
<span class="token function">the_widget</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'SchoolPress_Note_Widget'</span><span class="token punctuation">,</span>  <span class="token comment">//classname</span>
    <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'note'</span><span class="token operator">=></span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment">//instance vars</span>
    <span class="token keyword">array</span><span class="token punctuation">(</span>                       <span class="token comment">//widget vars</span>
    <span class="token string single-quoted-string">'before_widget'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'after_widget'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'before_title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'after_title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">''</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Dashboard-Widget-API"><a href="#Dashboard-Widget-API" class="headerlink" title="Dashboard Widget API"></a>Dashboard Widget API</h2><p>控制台 Widget 是當管理者登入 WordPress 後台後第一眼所看到的各種小工具，預設狀態下會有網站概況、網站活動、快速草稿等等的 Widget，想要管理這些 Widget 就必須使用 Dashboard Widget API。</p>
<h3 id="移除控制台小工具"><a href="#移除控制台小工具" class="headerlink" title="移除控制台小工具"></a>移除控制台小工具</h3><p>控制台小工具主要是用 meta box 來進行設定，下面是每個內建小工具名稱：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// Main column (left): </span>
<span class="token comment">// 更新瀏覽器通知</span>
<span class="token variable">$wp_meta_boxes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'normal'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'high'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dashboard_browser_nag'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token comment">// 更新 PHP 版本通知</span>
<span class="token variable">$wp_meta_boxes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'normal'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'high'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dashboard_php_nag'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
 
<span class="token comment">// 網站概況</span>
<span class="token variable">$wp_meta_boxes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'normal'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'core'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dashboard_right_now'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 多站網站概況</span>
<span class="token variable">$wp_meta_boxes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'normal'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'core'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'network_dashboard_right_now'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 網站活動</span>
<span class="token variable">$wp_meta_boxes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'normal'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'core'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dashboard_activity'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 網站狀態</span>
<span class="token variable">$wp_meta_boxes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'normal'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'core'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'health_check_status'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
<span class="token comment">// Side Column (right): </span>
<span class="token comment">// WordPress 活動及新聞</span>
<span class="token variable">$wp_meta_boxes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'side'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'core'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dashboard_primary'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 快速草稿</span>
<span class="token variable">$wp_meta_boxes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'side'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'core'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dashboard_quick_press'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要移除它們的話，使用 remove_meta_box( $id, $screen, $context ) 這支 function，參數 $id 為小工具的名稱，像是 dashboard_activity、health_check_status，$screen 為要移除的 meta box 的所在頁面，所以是 dashboard，$context 為小工具的位置，可能為 normal、side、advanced。</p>
<p>如果要移除所有預設的控制台小工具，可以使用 wp_dashboard_setup 這支 action，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">wporg_remove_all_dashboard_metaboxes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Remove Welcome panel</span>
    <span class="token function">remove_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'welcome_panel'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'wp_welcome_panel'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Remove the rest of the dashboard widgets</span>
    <span class="token function">remove_meta_box</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'dashboard_primary'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'side'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">remove_meta_box</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'dashboard_quick_press'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'side'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">remove_meta_box</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'health_check_status'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'normal'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">remove_meta_box</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'dashboard_right_now'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'normal'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">remove_meta_box</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'dashboard_activity'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'normal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'wp_dashboard_setup'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'wporg_remove_all_dashboard_metaboxes'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>因為書中範例比較舊，有些 Widget 已經不存在了，所以這邊的範例是使用官方 Handbook 的說明，新版的可以參考這邊—&gt;<a href="https://developer.wordpress.org/apis/handbook/dashboard-widgets/">https://developer.wordpress.org/apis/handbook/dashboard-widgets/</a></p>
</blockquote>
<p>如果有啟用多站網路功能的話，會有一些不同的控制台小工具，要全部移除的話參考下面範例：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//Remove network dashboard widgets</span>
<span class="token keyword">function</span> <span class="token function">sp_remove_network_dashboard_widgets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">remove_meta_box</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'network_dashboard_right_now'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'dashboard-network'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'normal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">remove_meta_box</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'dashboard_plugins'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'dashboard-network'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'normal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">remove_meta_box</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'dashboard_primary'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'dashboard-network'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'side'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">remove_meta_box</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'dashboard_secondary'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'dashboard-network'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'side'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wp_network_dashboard_setup'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_remove_network_dashboard_widgets'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 remove_meta_box( $id, $screen, $context ) 也可以移除其他後台頁面的顯示，只要在 $screen 參數這邊指定不同的位置即可，$screen 可以是字串或是用陣列來指定多個頁面，$screen 可選參數如下：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-27-at-09.08.42.jpg"></p>
<p>Contributed by <a href="https://profiles.wordpress.org/ramiy/">Rami Yushuvaev</a></p>
<h3 id="新增控制台小工具"><a href="#新增控制台小工具" class="headerlink" title="新增控制台小工具"></a>新增控制台小工具</h3><p>可以使用 wp_add_dashboard_widget() 來新增控制台小工具，它利用了 add_meta_box() 來建立，wp_add_dashboard_widget() 帶有五個參數：</p>
<p><strong>$widget_id</strong> - 必填，小工具 ID，可以提供給 CSS 作為樣式選擇的類別名稱</p>
<p><strong>$widget_name</strong> - 必填，小工具名稱，會顯在在小工具的視窗的標頭</p>
<p><strong>$callback</strong> - 必填，輸出小工具的顯示內容</p>
<p><strong>$control_callback</strong> - 選填，設定小工具的控制功能</p>
<p><strong>$callback_args</strong> - 選填，要提供給 callback function 的參數</p>
<p>下面範例作者使用 wp_add_dashboard_widget() 來顯示學生作業的提交狀態：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/*
    Add dashboard widgets
*/</span>
<span class="token keyword">function</span> <span class="token function">sp_add_dashboard_widgets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">wp_add_dashboard_widget</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'schoolpress_assignments'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'Assignments'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'sp_assignments_dashboard_widget'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'sp_assignments_dashboard_widget_configuration'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'wp_dashboard_setup'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_add_dashboard_widgets'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
Assignments dashboard widget
*/</span>
<span class="token comment">//widget</span>
<span class="token keyword">function</span> <span class="token function">sp_assignments_dashboard_widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$options</span> <span class="token operator">=</span> <span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"assignments_dashboard_widget_options"</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'course_id'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$group</span> <span class="token operator">=</span> <span class="token function">groups_get_group</span><span class="token punctuation">(</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'group_id'</span><span class="token operator">=></span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'course_id'</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$group</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"Showing assignments for class "</span> <span class="token operator">.</span>
<span class="token variable">$group</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">".&lt;br />..."</span><span class="token punctuation">;</span>
<span class="token comment">/*
get assignments for this group and list their status
*/</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"Showing all assignments.&lt;br />..."</span><span class="token punctuation">;</span>
<span class="token comment">/*
get all assignments and list their status
*/</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//configuration</span>
<span class="token keyword">function</span> <span class="token function">sp_assignments_dashboard_widget_configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//get old settings or default to empty array</span>
<span class="token variable">$options</span> <span class="token operator">=</span> <span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"assignments_dashboard_widget_options"</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//saving options?</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'assignments_dashboard_options_save'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//get course_id</span>
<span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'course_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span>
<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'assignments_dashboard_course_id'</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//save it</span>
<span class="token function">update_option</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"assignments_dashboard_widget_options"</span><span class="token punctuation">,</span> <span class="token variable">$options</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//show options form</span>
<span class="token variable">$groups</span> <span class="token operator">=</span> <span class="token function">groups_get_groups</span><span class="token punctuation">(</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'orderby'</span><span class="token operator">=></span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'order'</span><span class="token operator">=></span><span class="token string single-quoted-string">'ASC'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Choose a class/group to show assignments from.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>feature_post_class_wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>assignments_dashboard_course_id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">selected</span><span class="token punctuation">(</span> <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'course_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></span><span class="token punctuation">></span></span>
All Classes
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$groups</span> <span class="token operator">=</span> <span class="token function">groups_get_groups</span><span class="token punctuation">(</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'orderby'</span><span class="token operator">=></span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'order'</span><span class="token operator">=></span><span class="token string single-quoted-string">'ASC'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$groups</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$groups</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'groups'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span> <span class="token variable">$groups</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'groups'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$group</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span> <span class="token variable">$group</span><span class="token operator">-></span><span class="token property">id</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span>
<span class="token attr-name"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">selected</span><span class="token punctuation">(</span> <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'course_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$group</span><span class="token operator">-></span><span class="token property">id</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$group</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>assignments_dashboard_options_save<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>呈現效果如下：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-27-at-09.29.38.jpg"></p>
<blockquote>
<p>這個範例個人覺得不太好，一次做太多事了，可以參考這篇 <a href="https://www.sitepoint.com/wordpress-dashboard-widgets-api/">https://www.sitepoint.com/wordpress-dashboard-widgets-api/</a> 裡面的 Displaying an RSS Feed in a Dashboard Widget 會比較單純的多。</p>
</blockquote>
<h3 id="設定頁面-API"><a href="#設定頁面-API" class="headerlink" title="設定頁面 API"></a>設定頁面 API</h3><p>如果你是在開發外掛的話，有時候會需要提供一些設定項目來讓使用者改變外掛的功能，這個時候就可以用設定頁面 API ( Settings API ) 來設計外掛的設定選單與表單。</p>
<p>但在使用它之前，可以先思考是否有必要另外新增頁面來處理這些設定，如果是沒有要讓使用者自行修改的話，直接使用全域變數 global 來存放設定值是比較好的方法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">global</span> <span class="token variable">$schoolpress_settings</span><span class="token punctuation">;</span>
<span class="token variable">$schoolpress_settings</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
  <span class="token string single-quoted-string">'info_email'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'info@schoolpress.me'</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">'info_email_name'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'SchoolPress'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以下四種情境可能不需要用到設定頁面：</p>
<ol>
<li> 外掛只會在團隊內部使用</li>
<li> 外掛設定的修改者是開發者</li>
<li> 外掛設定的內容不會因為主機環境不同而有所不同</li>
<li> 外掛設定的內容只是為了前一版本的修改</li>
</ol>
<p>除了把設定項存在 global 外，也可以考慮新增 Hook 或 filter 來改變設定內容。舉例：有一支可以產出 Word 檔的外掛需要限制特定的管理權限才可以使用，如果是用設定頁面來做的話，可能會有所有權限 ( Capability ) 的 Checkbox 來提供給管理者勾選，被勾選到的才能使用產出 Word 檔。</p>
<p>在這種情況下自訂一個 apply_filter 來讓開發者可以把允許的權限 Hook 到這個 filter 上會更方便，自訂 filter 的範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//don't require any caps by default, but allow developers to add checks</span>
<span class="token variable">$caps</span> <span class="token operator">=</span> <span class="token function">apply_filters</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wpdoc_caps'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$caps</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">//guilty until proven innocent</span>
  <span class="token variable">$hascap</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>

  <span class="token comment">//must be logged in to have any caps at all</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_user_logged_in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token comment">//make sure the current user has one of the caps</span>
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$caps</span> <span class="token keyword">as</span> <span class="token variable">$cap</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">current_user_can</span><span class="token punctuation">(</span><span class="token variable">$cap</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#123;</span>
        <span class="token variable">$hascap</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">//stop checking</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$hascap</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token comment">//don't show them the file</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'HTTP/1.1 503 Service Unavailable'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token number">503</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"HTTP/1.1 503 Service Unavailable"</span><span class="token punctuation">;</span>
    <span class="token keyword">exit</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下來使用者 ( 開發者 ) 就可以使用 wpdoc_caps 這個 filter 來寫入允許的 capability：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
 <span class="token comment">//require any user account</span>
<span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wpdoc_caps'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$caps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'read'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//require admin account</span>
<span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wpdoc_caps'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$caps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'manage_options'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//authors only or users with a custom capability (doc)</span>
<span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wpdoc_caps'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$caps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'edit_post'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'doc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="新增原生設定頁面"><a href="#新增原生設定頁面" class="headerlink" title="新增原生設定頁面"></a>新增原生設定頁面</h3><p>在經過審慎評估後，我們就可以來新增設定頁面，通常有兩種作法，一種是使用 WordPress 提供的 Settings API，這樣做好處是可以讓其他開發者比較好理解，甚至針對你的外掛寫附加套件。</p>
<p>使用 Settings API 同時也確保在介面的呈現上與 WordPress 後台有一致的風格，你不會希望當使用者要使用你的外掛時還必須要學習新的操作介面。</p>
<h3 id="新增客製化設定頁面"><a href="#新增客製化設定頁面" class="headerlink" title="新增客製化設定頁面"></a>新增客製化設定頁面</h3><p>如果設定頁面單純，用 WordPress 原生設定介面就可以處理的話當然最好，但有時候外掛功能很多，設定項目包含許多不同的面向，需要把他們進行分類，這時候就必須考慮客製化設定頁面。</p>
<p>雖然 Settings API 很靈活，可以針對個別區塊、欄位來顯示設定內容，在只需要一兩個設定區塊的狀況下是非常好用的，但如果是要開發一套應用程式的設定頁面，你可能需要不同的邏輯來顯示它們，客製化設定頁面是唯一辦法。</p>
<p>客製化設定頁面不會太困難，只要新增選單並且使用自訂設定頁面的 PHP 檔後，再透過 callback function 來呼叫它們，以及照著下方的原則來處理即可：</p>
<ul>
<li>  即使你的設定頁面是自己手刻 Layout，也還是可以使用原生的設定區塊與項目</li>
<li>  絕對要記得處理表單資料的 sanitize 與同源驗證的 nonces 來確保設定頁的安全性</li>
<li>  適時的加入 Hook 來提供給其他開發者使用</li>
<li>  使用與 WordPress 相同的 HTML 標籤與 Class 名稱，以確保在介面上風格可以一致</li>
</ul>
<p>客製化設定頁面的設計可以參考購物車外掛的介面，因為它們是功能很多的外掛，設定項目也相對複雜許多，可以餐考 WooCoomerce 與 Paid Memberships Pro 等同類型的外掛。</p>
<blockquote>
<p>Settings API 的具體用法可以參考 Plugin Handbook 裡面的 Settings 章節 —&gt; <a href="https://developer.wordpress.org/plugins/settings/settings-api/">https://developer.wordpress.org/plugins/settings/settings-api/</a></p>
</blockquote>
<h2 id="Rewrite-API"><a href="#Rewrite-API" class="headerlink" title="Rewrite API"></a>Rewrite API</h2><p>通常伺服器會有覆寫網址的功能來改變網址的結構，如果是 Apache 的話是使用 mod_rewrite 模組，設定覆寫規則的檔案是 .htaccess，WordPress 標準的 Rewrite 規則如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">\<span class="token comment"># BEGIN WordPress</span>
<span class="token operator">&lt;</span>IfModule mod_rewrite<span class="token operator">.</span>c<span class="token operator">></span>
RewriteEngine On
RewriteBase <span class="token operator">/</span>
RewriteRule <span class="token operator">^</span>index\\<span class="token operator">.</span><span class="token class-name type-declaration">php</span>$ <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">]</span>
RewriteCond <span class="token operator">%</span><span class="token punctuation">&#123;</span><span class="token constant">REQUEST_FILENAME</span><span class="token punctuation">&#125;</span> <span class="token operator">!</span><span class="token operator">-</span>f
RewriteCond <span class="token operator">%</span><span class="token punctuation">&#123;</span><span class="token constant">REQUEST_FILENAME</span><span class="token punctuation">&#125;</span> <span class="token operator">!</span><span class="token operator">-</span>d
RewriteRule <span class="token operator">.</span> <span class="token operator">/</span>index<span class="token operator">.</span>php <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">]</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>IfModule<span class="token operator">></span>
<span class="token comment"># END WordPress</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果想要理解每一行在表示什麼可以參考 David Walsh 的這一篇文章：<a href="https://davidwalsh.name/wordpress-htaccess">https://davidwalsh.name/wordpress-htaccess</a></p>
<p>一般來說，這些規則主要是在負責把所有使用者瀏覽我們網站所造訪的網址，統一轉到 index.php 這個檔案，然後 WordPress 會透過內建的路由機制，去解析造訪網址然後找到對應的模板後顯示出來。</p>
<p>譬如說當使用者輸入網址 <a href="https://abc.com/about">https://abc.com/about</a> 的時候，會先去到 <a href="https://abc.com/index.php%EF%BC%8C%E7%84%B6%E5%BE%8C">https://abc.com/index.php，然後</a> WordPress 會去尋找頁面名稱帶有 about 的頁面或文章，找到後再返回給使用者進行瀏覽。</p>
<p>在預設情況下 WordPress 就會完成這樣的路由機制，所以當你想要指定一些特定網址去做某些事，就是 Rewrite API 派上用場的時候了。</p>
<h3 id="新增-Rewrite-Rule"><a href="#新增-Rewrite-Rule" class="headerlink" title="新增 Rewrite Rule"></a>新增 Rewrite Rule</h3><p>可以透過 add_rewrite_rule( $rule, $rewrite, $position ) 來直接新增，參數說明如下：</p>
<p><strong>$rule</strong> - 使用正規表達式來找尋網址中符合條件的目標</p>
<p><strong>$rewrite</strong> - 找到目標後覆寫的網址內容，可以使用 $matches 陣列帶入 $rule 找到的字串</p>
<p><strong>$position</strong> - 設定該 Rewrite Rule 的權重是要在 WordPress 內建的之上 ( top ) 或之下 ( bottom )</p>
<blockquote>
<p>要注意 Rewrite 跟 Redirect 是不一樣的：Rewrite 是把同個頁面的網址做結構上的改變，處理完之後不會去其他頁面，還是會停留在同一頁，而 Redirect 是改變網址後跳轉到其他頁面。</p>
</blockquote>
<p>如果你想讓你的聯絡表單網址，可以使用目錄的方式直接帶入表單主旨，像是 <a href="https://abc.com/contact/special-offer%EF%BC%8C%E7%95%B6%E4%BD%BF%E7%94%A8%E8%80%85%E9%80%A0%E8%A8%AA%E9%80%99%E5%80%8B%E7%B6%B2%E5%9D%80%E7%9A%84%E6%99%82%E5%80%99%EF%BC%8C%E9%80%B2%E5%85%A5%E8%A1%A8%E5%96%AE%E9%A0%81%E9%9D%A2%E6%99%82%E4%B8%BB%E6%97%A8%E6%AC%84%E4%BD%8D%E5%B0%B1%E6%9C%83%E8%87%AA%E5%8B%95%E8%BC%B8%E5%85%A5">https://abc.com/contact/special-offer，當使用者造訪這個網址的時候，進入表單頁面時主旨欄位就會自動輸入</a> special-offer 這幾個字，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">add_rewrite_rule</span><span class="token punctuation">(</span>
  <span class="token string single-quoted-string">'/contact/([^/]+)/?'</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">'index.php?name=contact&amp;subject='</span> <span class="token operator">.</span> <span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">'top'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">add_rewrite_rule</span><span class="token punctuation">(</span>
<span class="token function">flush_rewrite_rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>正規表達式是使用 Rewrite API 的必備技能，如果你跟我一樣對它很苦手的話，我都用這個軟體作弊XD —&gt; <a href="https://www.apptorium.com/expressions">https://www.apptorium.com/expressions</a>，它超級好用，只要輸入條件就會立即顯示是否有符合的字串，我常常就是亂湊一通就慢慢能湊到我要的寫法，大推！</p>
</blockquote>
<h3 id="刷新-Rewrite-Rule"><a href="#刷新-Rewrite-Rule" class="headerlink" title="刷新 Rewrite Rule"></a>刷新 Rewrite Rule</h3><p>WordPress 預設會把 Rewrite rule 加到快取機制裡面，所以當新增的時候記得要刷新 Rewrite rule 才會產生作用，如果是開發外掛的話，要保存自己寫的 rule 通常會以下面三種方式來新增：</p>
<ol>
<li> 啟用外掛時新增 rule，同時間使用 flush_rewrite_rules() 來刷新它</li>
<li> 使用 Hook init 來新增 rule，以防被後台的永久連結設定或是其他的外掛所刷新</li>
<li> 在停用外掛時使用 flush_rewrite_rules() 來移除 rule</li>
</ol>
<p>具體範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//Add rule and flush on activation.</span>
<span class="token keyword">function</span> <span class="token function">sp_activation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token function">add_rewrite_rule</span><span class="token punctuation">(</span>
  <span class="token string single-quoted-string">'/contact/([^/]+)/?'</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">'index.php?name=contact&amp;subject='</span> <span class="token operator">.</span> <span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">'top'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">flush_rewrite_rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">register_activation_hook</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_activation'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
  Add rule on init in case another plugin flushes,
  but don't flush cause it's expensive
*/</span>
<span class="token keyword">function</span> <span class="token function">sp_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token function">add_rewrite_rule</span><span class="token punctuation">(</span>
  <span class="token string single-quoted-string">'/contact/([^/]+)/?'</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">'index.php?name=contact&amp;subject='</span> <span class="token operator">.</span> <span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">'top'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'init'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_init'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Flush rewrite rules on deactivation to remove our rule.</span>
<span class="token keyword">function</span> <span class="token function">sp_deactivation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token function">flush_rewrite_rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">register_deactivation_hook</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_deactivation'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="其他-Rewrite-相關-function"><a href="#其他-Rewrite-相關-function" class="headerlink" title="其他 Rewrite 相關 function"></a>其他 Rewrite 相關 function</h3><p>除了上面介紹的 add_rewrite_rule() 以外，WordPress 還提供了其他 function 來改寫 URL：</p>
<p><strong>add_rewrite_tag()</strong> - 在網址結構中加入特定資料</p>
<p><strong>add_custom_endpoint()</strong> - 在網址最後加入資料</p>
<p><strong>add_feed()</strong> - 自訂 RSS 網址的結構</p>
<blockquote>
<p>推薦 Envato Tuts+ 的這篇文章 <a href="https://code.tutsplus.com/articles/the-rewrite-api-the-basics--wp-25474">https://code.tutsplus.com/articles/the-rewrite-api-the-basics–wp-25474</a>，每個用法都有具體的範例跟說明，而且解釋的比書中以及 Codex 來得清楚許多。</p>
</blockquote>
<h2 id="WP-Cron"><a href="#WP-Cron" class="headerlink" title="WP-Cron"></a>WP-Cron</h2><p>Cron 是作業系統內建的定時器，只要設定好時間就能自動執行指定的任務，通常會用在像是每天自動發送業績報表給管理員、同步從第三方 API 獲取的資料、CPU 的系統監控回報等等的情境上。</p>
<p>而 WP-Cron 是 WordPress 內建的定時器，要使用 WP-Cron 有三個步驟，第一個是建立定時器並設定執行時間，第二是把要執行的 function 掛到這個定時器裡面，最後是把實際要執行的任務寫入這個 function 之中，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// 當外掛啟用時建立定時器</span>
<span class="token keyword">function</span> <span class="token function">sp_activation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">//do_action('sp_daily_cron'); 定時器名稱叫做 sp_daily_cron</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">wp_next_scheduled</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'sp_daily_cron'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">wp_schedule_event</span><span class="token punctuation">(</span> <span class="token function">strtotime</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'12:00:00'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'daily'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_daily_cron'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">register_activation_hook</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_activation'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 停用外掛時移除定時器</span>
<span class="token keyword">function</span> <span class="token function">sp_deactivation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token function">wp_clear_scheduled_hook</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'sp_daily_cron'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">register_deactivation_hook</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_deactivation'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 要執行的任務</span>
<span class="token keyword">function</span> <span class="token function">sp_daily_cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">//do this daily</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sp_daily_cron"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"sp_daily_cron"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 把任務放到定時器裡面</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>建立定時器使用 wp_schedule_event( $timestamp, $recurrence, $hook, $args ) 這支 function，參數 $timestamp 為第一次執行的時間，通常使用 time() 即可，$recurrence 為多久後再執行一次的間隔，可以是每小時 hourly、每天 daily、每兩天 twicedaily，如果要自訂間隔可以使用來指定週期。</p>
<p>參數 $hook 是定時器的 hook 名稱，讓執行任務的 function 可以掛在這個定時器裡面，$args 為當 hook 發生時可以傳給任務 function 的參數。</p>
<p>為了易於辨識，通常定時器的名稱會以執行週期來命名。以 sp_daily_cron，可以很直覺的知道這是每天會執行一次的定時器，便於讓其他任務也能使用它。</p>
<blockquote>
<p>要查詢已經註冊過的定時器可以使用 WP Control <a href="https://wordpress.org/plugins/wp-crontrol/">https://wordpress.org/plugins/wp-crontrol/</a>，它會幫你列出所有的定時器，另外還可以用 Cron Logger <a href="https://wordpress.org/plugins/cron-logger/">https://wordpress.org/plugins/cron-logger/</a> 來查看定時器的工作紀錄。</p>
</blockquote>
<h3 id="自訂排程間隔時間"><a href="#自訂排程間隔時間" class="headerlink" title="自訂排程間隔時間"></a>自訂排程間隔時間</h3><p>預設情況下，wp_schedule_event() 只有提供每小時、每天與每兩天這三種，如果要自訂新的間隔時間，可以使用 cron_schedules，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//add a monthly interval to use in cron jobs</span>
<span class="token keyword">function</span> <span class="token function">sp_cron_schedules</span><span class="token punctuation">(</span><span class="token variable">$schedules</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token variable">$schedules</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'monthly'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'interval'</span> <span class="token operator">=></span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token comment">//really 30 days</span>
<span class="token string single-quoted-string">'display'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Once a Month'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'cron_schedules'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_cron_schedules'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要取得是一週當中第幾天來執行排程，可以使用 date() 日期函式來判斷，以下範例為每週的第一天執行：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//run on Mondays</span>
<span class="token keyword">function</span> <span class="token function">sp_monday_cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">//get day of the week, 0-6, starting with Sunday</span>
<span class="token variable">$weekday</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//is it Monday?</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$weekday</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">//execute this code on Mondays</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sp_daily_cron"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"sp_monday_cron"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述範例為每隔一段時間執行任務，另外也可以使用 wp_schedule_single_event() 來預約在未來的某個時間點來完成任務的執行，譬如說可以設定當作者發布文章過後的一個小時自動發信給審核者，讓作者有時間可以進行潤稿的作業。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
 <span class="token keyword">function</span> <span class="token function">do_this_in_an_hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 
    <span class="token comment">// do something</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'my_new_event'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'do_this_in_an_hour'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// put this line inside a function, </span>
<span class="token comment">// presumably in response to something the user does</span>
<span class="token comment">// otherwise it will schedule a new event on every page visit</span>
 
<span class="token function">wp_schedule_single_event</span><span class="token punctuation">(</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3600</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'my_new_event'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// time() + 3600 = one hour from now.</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用主機排程來執行-wp-cron"><a href="#使用主機排程來執行-wp-cron" class="headerlink" title="使用主機排程來執行 wp-cron"></a>使用主機排程來執行 wp-cron</h3><p>wp-cron 是當頁面有載入時才會開始檢查是否有排程任務需要執行，所以當半夜網站沒人或是頁面被快取不需重新載入的情況下，wp-cron 就很有可能不會被觸發，因此需要確實執行的排程任務最好還是要透過主機的 crontab 來處理。</p>
<p>要使用主機的 crontab 首先要再 wp-config.php 加入停用 wp-cron 的設定：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">disable</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"DISABLE_WP_CRON"</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>接下來在主機設定 crontab 並使用 wget 來造訪 wp-cron.php 頁面：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> <span class="token number">0</span> * * * <span class="token function">wget</span> -O - -q -t <span class="token number">1</span> https://yoursite.com/wp-cron.php?doing_wp_cron<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>0 0 * * * 五個參數代表分、時、日、月、星期幾，所以這個範例表示的是 0 時 0 分，也就是午夜十二點，後面的星號則代表不指定，wget 則是讓主機前往特定網址進行下載動作，-O 是設定下載後的檔案名稱，-q 是啟用 quite 模式，這會關閉每次排程執行完成後的通知。</p>
<p>-t 代表如果 wget 執行失敗的的話重新執行的次數，範例中設定 -t 1，則代表只會執行一次，萬一失敗的話就不會再重複執行。如果 wp-cron.php 無法順利造訪，就代表你的網站已經停止運作了，就不用再重複執行了。</p>
<p>網址最後接的參數 ?doing_wp_cron 是 wp-cron.php 執行前會先去檢查的參數，要注意的地方是記得把 wp-cron.php 排除在被快取的檔案之中，才能有效的被觸發。</p>
<blockquote>
<p>關於 crontab 與 get 可以參考 Wang 大的兩篇好文：</p>
<p><a href="https://blog.gtwang.org/linux/linux-crontab-cron-job-tutorial-and-examples/">https://blog.gtwang.org/linux/linux-crontab-cron-job-tutorial-and-examples/</a><br><a href="https://blog.gtwang.org/linux/linux-wget-command-download-web-pages-and-files-tutorial-examples/">https://blog.gtwang.org/linux/linux-wget-command-download-web-pages-and-files-tutorial-examples/</a></p>
</blockquote>
<h3 id="不使用-wp-cron-只用-crontab"><a href="#不使用-wp-cron-只用-crontab" class="headerlink" title="不使用 wp-cron 只用 crontab"></a>不使用 wp-cron 只用 crontab</h3><p>如果你的外掛沒有要發佈或是使用對象是熟悉 Linux 指令的工程師，那麼就不需要用到 wp-cron 而直接使用 crontab 去執行排程任務即可，只要透過帶有參數的 URL 去觸發 callback function，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//run on Mondays</span>
<span class="token keyword">function</span> <span class="token function">sp_monday_cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">//check that cron param was passed in</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sp_cron_monday'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">//execute this code on Mondays</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"init"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"sp_monday_cron"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>先把要執行的任務 hook 到 init 上面，當 URL 帶有 sp_cron_monday 這個參數的時候就會觸發，然後 crontab 設定如下：</p>
<p>0 0 * * 1 wget -O  - q -t 1 <a href="https://yoursite.com/?sp_cron_monday=1">https://yoursite.com?sp_cron_monday=1</a></p>
<p>這邊執行設定 0 0 * * 1 最後面的 1 代表是星期幾，0 的話是星期日，1 的話是星期一，其他以此類推。</p>
<h2 id="WP-MAIL-發信"><a href="#WP-MAIL-發信" class="headerlink" title="WP_MAIL 發信"></a>WP_MAIL 發信</h2><p>WordPress 使用 wp_mail 來取代 php 原生的 mail() 函式，用法為 wp_mail( $to, $subject, $message, $headers, $attachments )。</p>
<p>參數 $to 為收件人的 email，可以同時寄送給多筆信箱，中間以「,」區隔，或是使用陣列來存放多筆 email address，$subject 為信件主旨，$message 為信件內容，預設格式為純文字，如果需要在信件中寫 HTML 則需要另行設定。</p>
<p>$headers 為信件標頭，可以寫入 email 的相關資訊，像是郵件副本、密件副本等等，$attachments 為附加檔案，可以是單一檔案或是用陣列夾帶多筆。</p>
<p>相較於 PHP 的 mail()，wp_mail() 多了幾個方便的功能：</p>
<ul>
<li>  帶有 hook，wp_mail filter 可以傳送值給 wp_mail()，或是統一修改全站發送郵件的寄件人 email 與寄件人名稱</li>
<li>  可附加一個或多個檔案，使用 mail() 會很複雜，wp_mail() 使用 PHPMailer 來簡化附加檔案的作業</li>
</ul>
<h3 id="優化電子郵件"><a href="#優化電子郵件" class="headerlink" title="優化電子郵件"></a>優化電子郵件</h3><p>在預設情況下，WordPress 發送的電子郵件寄件人是用管理員的信箱，以及使用 WordPress 當作寄件人名稱，我們可以透過 wp_mail_from 與 wp_mail_from_name 這兩個 filter 來進行修改。</p>
<p>另外也可以使用 wp_main_content_type filter 來修改郵件格式，讓內文可以支援 HTML，還可以使用 wp_mail filter 來加入郵件內容的頁首與頁尾，讓 email 整體看起來更加專業：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// 修改寄件人電子郵件與名稱</span>
<span class="token keyword">function</span> <span class="token function">sp_wp_mail_from</span><span class="token punctuation">(</span><span class="token variable">$from_email</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string single-quoted-string">'info@schoolpress.me'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">sp_wp_mail_from_name</span><span class="token punctuation">(</span><span class="token variable">$from_name</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string single-quoted-string">'SchoolPress'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wp_mail_from'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_wp_mail_from'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wp_mail_from_name'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_wp_mail_from_name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 修改電子郵件格式</span>
<span class="token keyword">function</span> <span class="token function">sp_wp_mail_content_type</span><span class="token punctuation">(</span> <span class="token variable">$content_type</span> <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$content_type</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'text/plain'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token variable">$content_type</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'text/html'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token variable">$content_type</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wp_mail_content_type'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_wp_mail_content_type'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 自訂頁首與頁尾</span>
<span class="token keyword">function</span> <span class="token function">sp_wp_mail_header_footer</span><span class="token punctuation">(</span><span class="token variable">$email</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">//get header</span>
  <span class="token variable">$headerfile</span> <span class="token operator">=</span> <span class="token function">get_stylesheet_directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"email_header.html"</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$headerfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$headerfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>

  <span class="token comment">//get footer</span>
  <span class="token variable">$footerfile</span> <span class="token operator">=</span> <span class="token function">get_stylesheet_directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"email_footer.html"</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$footerfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token variable">$footer</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$footerfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token variable">$footer</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>

  <span class="token comment">//update message</span>
  <span class="token variable">$email</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$header</span> <span class="token operator">.</span> <span class="token variable">$email</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token variable">$footer</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token variable">$email</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wp_mail'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_wp_mail_header_footer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="檔案-Header-API"><a href="#檔案-Header-API" class="headerlink" title="檔案 Header API"></a>檔案 Header API</h2><p>在 WordPress 的佈景主題或是外掛之中，都會有一段註解來說明這支程式的資訊，而用 get_plugin_data()、wp_get_theme()、get_file_data() 這三個 API 就可以取得這些資訊。</p>
<p>像是外掛的檔案 Header 資訊如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/**
 * Plugin Name: Paid Memberships Pro
 * Plugin URI: https://www.paidmembershipspro.com
 * Description: The most complete member management and membership subscriptions plugin for WordPress.
 * Version: 2.3.4
 * Author: Stranger Studios
 * Author URI: https://www.strangerstudios.com
 * Text Domain: paid-memberships-pro
 * Domain Path: /languages
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要取得裡面的資訊使用 get_plugin_data( $plugin_file, $markup=true, $translate=true )，參數 $plugin_file 是要取得外掛的路徑，$markup 為 true 時，會把有連結的資料轉為 HTML 的連結，$translate 為 true 時，會依據 WordPress 語系的設定把 Header 資訊進行翻譯。</p>
<p>下面的範例會檢查 wp-content/plugins 裡面所有的外掛，然後把每支外掛的資訊放到一個陣列裡面：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//must include this file</span>
<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token constant">ABSPATH</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"wp-admin/includes/plugin.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//remember current directory</span>
<span class="token variable">$cwd</span> <span class="token operator">=</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//switch to plugin directory</span>
<span class="token variable">$plugins_dir</span> <span class="token operator">=</span> <span class="token constant">ABSPATH</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"wp-content/plugins"</span><span class="token punctuation">;</span>
<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$plugins_dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>"</span><span class="token punctuation">;</span>

<span class="token comment">//loop through plugin directories and print plugin info</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"*"</span><span class="token punctuation">,</span> <span class="token constant">GLOB_ONLYDIR</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$dir</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token variable">$plugin</span> <span class="token operator">=</span> <span class="token function">get_plugin_data</span><span class="token punctuation">(</span><span class="token variable">$plugins_dir</span> <span class="token operator">.</span>
        <span class="token string double-quoted-string">"/"</span> <span class="token operator">.</span> <span class="token variable">$dir</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"/"</span> <span class="token operator">.</span> <span class="token variable">$dir</span> <span class="token operator">.</span> <span class="token string double-quoted-string">".php"</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$plugin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/pre>"</span><span class="token punctuation">;</span>

<span class="token comment">//switch back to current directory just in case</span>
<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$cwd</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同樣的，如果要取得佈景主題的檔案資訊，可以使用 wp_get_theme( $stylesheet, $theme_root )，參數 $stylesheet 為佈景主題名稱，留空的話預設值為目前使用的佈景主題，$theme_root 為佈景主題的資料夾路徑。</p>
<p>下面範例會取得佈景主題的資訊後存進一個陣列：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//remember current directory</span>
<span class="token variable">$cwd</span> <span class="token operator">=</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//switch to themes directory</span>
<span class="token variable">$themes_dir</span> <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token function">get_template_directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$themes_dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>"</span><span class="token punctuation">;</span>

<span class="token comment">//loop through theme directories and print theme info</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"*"</span><span class="token punctuation">,</span> <span class="token constant">GLOB_ONLYDIR</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$dir</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token variable">$theme</span> <span class="token operator">=</span> <span class="token function">wp_get_theme</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$theme</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/pre>"</span><span class="token punctuation">;</span>

<span class="token comment">//switch back to current directory just in case</span>
<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$cwd</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用-get-file-data-取得檔案-Header"><a href="#使用-get-file-data-取得檔案-Header" class="headerlink" title="使用 get_file_data() 取得檔案 Header"></a>使用 get_file_data() 取得檔案 Header</h3><p>get_plugin_info() 與 wp_get_themes() 都是使用 get_file_data() 函式所寫成的，如果要取得檔案 Header 也可以直接使用它，當要開發擴充外掛需要取得主外掛的資訊時，get_file_data() 就非常好用。</p>
<p>get_file_data( $file, $default_headers, $context=’’ ) 參數 $file 為要取得的檔案資訊的路徑或檔名，$default_headers 使用陣列來指定要取得的資訊，$context 為當有不同 Header 時的辨識標籤，標籤名稱取決於 hook extra_{context}_headers 中間的 context：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//set headers for our files</span>
<span class="token variable">$default_headers</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
<span class="token string double-quoted-string">"Title"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Title"</span><span class="token punctuation">,</span>
<span class="token string double-quoted-string">"Slug"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Slug"</span><span class="token punctuation">,</span>
<span class="token string double-quoted-string">"Version"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Version"</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//remember current directory</span>
<span class="token variable">$cwd</span> <span class="token operator">=</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//change to reports directory</span>
<span class="token variable">$reports_dir</span> <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"/reports"</span><span class="token punctuation">;</span>
<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$reports_dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>"</span><span class="token punctuation">;</span>

<span class="token comment">//loop through .php files in reports directory</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"*.php"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$filename</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">get_file_data</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$default_headers</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"report"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/pre>"</span><span class="token punctuation">;</span>

<span class="token comment">//change back to the current directory in case someone expects the default</span>
<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$cwd</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="幫佈景主題與外掛加入新的檔案-Header"><a href="#幫佈景主題與外掛加入新的檔案-Header" class="headerlink" title="幫佈景主題與外掛加入新的檔案 Header"></a>幫佈景主題與外掛加入新的檔案 Header</h3><p>要新增外掛或佈景主題的 Header，可以使用 extra_plugin_headers 與 extra_theme_headers 這兩個 filter，或是也能使用 extra_{context}_headers 來讓 get_file_data() 取得自訂的 Header。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/*
Plugin Name: Stop Plugin Updates
Plugin URI: http://bwawwp.com/plugins/stop-plugin-updates/
Description: "Allow Updates: No" i a plugin's header keeps it from updating.
Version: .1
Author: Stranger Studios
Author URI: http://www.strangerstudios.com
*/</span>

<span class="token comment">//add AllowUpdates header to plugin</span>
<span class="token keyword">function</span> <span class="token function">spu_extra_plugin_headers</span><span class="token punctuation">(</span> <span class="token variable">$headers</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$headers</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'AllowUpdates'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Allow Updates"</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token variable">$headers</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"extra_plugin_headers"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"spu_extra_plugin_headers"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Heartbeat-API"><a href="#Heartbeat-API" class="headerlink" title="Heartbeat API"></a>Heartbeat API</h2><p>Heartbeat API 使用 Ajax 的方式實現即時的資料庫讀寫動作，當網站頁面載入時，會以每 15~30 秒的頻率觸發一次，也可以手動設定觸發頻率為 60 秒。可以使用外掛 <a href="https://wordpress.org/plugins/heartbeat-control/">Heartbeat Control</a> 來設定觸發頻率以及開啟或關閉 Heartbeat API。</p>
<p>Heartbeat API 通常是後台會用到的功能，雖然在前台也可以用，但要謹慎的使用，因為以這麼高的頻率去存取資料庫，對於伺服器而言勢必會造成一定程度的負擔。</p>
<p>它被應用的場景最常見的就是當同時有兩位管理者要編輯同一篇文章時，後編輯者會跳出詢問是否要接管的小視窗，這個判斷機制就是使用 Heartbeat API 來進行觸發，它會定時去偵測目前文章的編輯者，所以都有另外編輯者進入時，可以很快的知道這篇文章正被其他人在編輯。</p>
<p>另外還有像是自動儲存草稿、或是有需要即時更新資料的外掛如 Google Analytics，都是它大顯身手的地方。</p>
<p>Heartbeat API 會依照以下的順序執行：</p>
<ol>
<li> 客戶端透過 jQuery 傳送資料給伺服器，事件名稱是 heartbeat-send</li>
<li> 伺服器接收到資料後透過 PHP 來處理回應，使用 heartbeat_rceived filter</li>
<li> 客戶端收到伺服器回應後使用 jQuery 來處理，事件名稱為 heartbeat-tick</li>
</ol>
<p>下面作者示範如何使用 Heartbeat API，來協助老師處理家長接送小孩時車流量的控管，透過 Heartbeat API 可以即時更新資訊以掌握家長的位置，讓小孩不用在車道上等太久以減少意外事故發生的機率。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
* Plugin Name: The Teacher Life Saver
* Plugin URI:  https://schoolpress.me/
* Description: Alert teachers of parent arrivals
* Version:     0.0.1
*/</span>

<span class="token comment">// 在後台首頁加入家長位置訊息</span>
<span class="token keyword">function</span> <span class="token function">ttls_dashboard_widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">global</span> <span class="token variable">$wp_meta_boxes</span><span class="token punctuation">;</span>

<span class="token comment">// widget ID, widget name, callback function</span>
<span class="token function">wp_add_dashboard_widget</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ttls_widget'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Student Pick Ups'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ttls_dashboard'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wp_dashboard_setup'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ttls_dashboard_widget'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Markup for the dashboard widget</span>
<span class="token keyword">function</span> <span class="token function">ttls_dashboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;div id='ttls_message'>&lt;/div>"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 修改觸發頻率</span>
<span class="token keyword">function</span> <span class="token function">ttls_heartbeat_settings</span><span class="token punctuation">(</span> <span class="token variable">$settings</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$settings</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'interval'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token comment">// Anything between 15-60 seconds</span>
    <span class="token keyword">return</span> <span class="token variable">$settings</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'heartbeat_settings'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ttls_heartbeat_settings'</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Enqueue heartbeat.js and our JavaScript functions</span>
<span class="token keyword">function</span> <span class="token function">ttls_heartbeat_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">// Only run this on the dashboard page (index.php)</span>
  <span class="token keyword">global</span> <span class="token variable">$pagenow</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$pagenow</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'index.php'</span> <span class="token punctuation">)</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>

  <span class="token comment">// Enqueue the Heartbeat API</span>
  <span class="token function">wp_enqueue_script</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'heartbeat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Load our JavaScript functions in the footer</span>
  <span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"admin_footer"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"ttls_js_wp_footer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"admin_init"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"ttls_heartbeat_init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript functions ran in the footer</span>
<span class="token keyword">function</span> <span class="token function">ttls_js_wp_footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token comment">// 送資料給 server</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'heartbeat-send'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
data<span class="token punctuation">[</span><span class="token string">'client'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'check-for-parents'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 接收從 server 回傳的資料</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'heartbeat-tick'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'server'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ttls_message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'server'</span><span class="token punctuation">]</span> 
<span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ttls_message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 處理從 hearbeat-send 接收到的資料然後傳給 hearbeat-tick</span>
<span class="token keyword">function</span> <span class="token function">ttls_heartbeat_received</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">// Look for whatever data was passed from JS heartbeat-send function</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'client'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'check-for-parents'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">// Build whatever response you want</span>
  <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;p>'</span><span class="token punctuation">;</span>
  <span class="token variable">$r</span> <span class="token operator">.=</span> <span class="token function">date</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'m/j/y g:i a'</span><span class="token punctuation">,</span> <span class="token function">current_time</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'timestamp'</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$r</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">" - Nina Messenlehner's father Brian Messenlehner "</span><span class="token punctuation">;</span>
  <span class="token variable">$r</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"has arrived in a 2007 White Hummer H2."</span><span class="token punctuation">;</span>
  <span class="token variable">$r</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;/p>'</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token variable">$r</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'heartbeat_received'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ttls_heartbeat_received'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>WordPress</category>
        <category>WordPress Plugins</category>
      </categories>
      <tags>
        <tag>crontab</tag>
        <tag>dashborard</tag>
        <tag>file header api</tag>
        <tag>heartbeat api</tag>
        <tag>rewrite rule</tag>
        <tag>shortcode</tag>
        <tag>wget</tag>
        <tag>widget</tag>
        <tag>wp_mail</tag>
        <tag>wp-cron</tag>
      </tags>
  </entry>
  <entry>
    <title>【 書摘 】Building Web Apps with WordPress - 使用 WordPress 外掛</title>
    <url>/tw/building-web-apps-with-wordpress-plugin/</url>
    <content><![CDATA[<h2 id="三、Using-WordPress-Plugin-使用-WordPress-外掛"><a href="#三、Using-WordPress-Plugin-使用-WordPress-外掛" class="headerlink" title="三、Using WordPress Plugin / 使用 WordPress 外掛"></a>三、Using WordPress Plugin / 使用 WordPress 外掛</h2><p>WordPress 外掛超強大！它可以讓你在不用懂任何程式碼的狀況下就可以使用許多功能，不管你使用的是免費、付費或是自行開發的外掛，透過外掛可以大幅度的延伸 WordPress 的既有功能。</p>
<p>再加上 WordPress 是開源軟體，許多開發者設計各式各樣的外掛來解決他們自己或是別人的問題，根據 WordPress Codex 的定義：「外掛是一套程式，或是使用 PHP 寫成的多組 Function，用來幫 WordPress 增加特定的功能或服務，它透過 WordPress 的 API，無縫整合到所有的 WordPress 網站中。」</p>
<span id="more"></span>
<p>外掛可以把 WordPress 轉變成任何你想得到的網站，像是購物車、社群平台甚至是手機 App 。當 WordPress 完成安裝後會有兩個內建的外掛：Hello Dolly 與 Akismet。</p>
<p>Hello Dolly 會在後台的頂端工具列加入隨機的歌詞，它沒啥實際作用，但很好展現了如何組織一個外掛的架構。而 Akismet 主要是整合 Akismet.com 這個服務，它可以自動防止垃圾留言。</p>
<p>目前在 WordPress plugin repository 上面有超過五萬五千個外掛，但實際數字絕對不只這些，因為還有很多開發者寫好了外掛但沒有上架到這邊，他們多半會放在自己的個人或是商業網站上，其中也不少需要付費的。</p>
<blockquote>
<p>上 Github 去搜尋 WordPress Plugin 可以找到超過九萬筆的結果，裡面包含了許多沒有上架到官方的外掛。</p>
</blockquote>
<p>大部分的付費外掛都有提供開發者授權，只要付一次費用就可以裝在多個網站上面。需要注意的是，當在 Google 上面搜尋時，要確保是連結到外掛開發者的作者頁面或是官方網站，因為現在有非常多所謂的 GPL Club 提供付費外掛的破解版，而且價格通常比原價低很多甚至是免費。</p>
<p>大部分這類網站所提供的東西都有毒，裡面可能會埋後門程式或是對你網站有害的程式碼，絕對不要貪小便宜而去使用，因為未來造成的損失絕對遠遠超過因為買盜版而省下的那一點錢。</p>
<p>事實上正版外掛的售價已經是非常實惠的，再加上使用時有任何問題或是功能建議，大部分的開發團隊都非常樂於為用戶服務，更不用說程式碼漏洞的修補以及後續版本的即時更新，如果是有心要經營網站的朋友，千千萬萬不要去使用 GPL Club，即使他們說自己提供的軟體絕對乾淨沒問題…</p>
<blockquote>
<p>曾經遇過一位朋友說他只是要做自己的個人部落格，流量小小的，不會有什麼人看，也沒有要商業用途或是拿來賺錢，所以他就用了從 GPL Club 載來的佈景主題來架站。</p>
<p>如果去搶銀行只搶了 100 塊也算犯法嗎？廢話，重點不是你的站大站小，而是只要使用盜版軟體就必須要準備好承受未來會付出的代價，而且免費版型已經這麼多了，既然會在意自己的網站要用更進階的功能，代表他對這個站還是有一定的期待，</p>
<p>說什麼只是做個小網站所以用 GPL Club 應該沒關係，這都是為了說服自己使用盜版軟體的正當性而已，別自欺欺人了，不想花錢請用免費的，或是自己花時間去學習怎麼寫程式，沒有任何的理由可以去使用 GPL Club，</p>
<p>更不用說有在接案的朋友，對，就是在說你！如果一個案子的總價連一支幾千塊的付費外掛都買不起來，那還是別出來接案了，提供客戶安全無虞的網站是接案者最基本的責任，連使用正版軟體這點都做不到的話請不要跟人家說你在接案，如果正在看這篇文章的你是剛入行的新朋友，請你務必要牢牢記住這一點：</p>
<p>WordPress 社群之所以可以這麼龐大是因為太多開發者願意無償熱心投入，也因為有了這些社群使用者，開發者可以提供功能更多、更強的進階付費外掛，如果這些開發者無法從他們投入的產品中賺取應有的收入，結果就是開發者減少，開發者一減少我們就用不到這麼多好用的工具，那麼 WordPress 這個軟體就真的只能拿來寫部落格了…</p>
<p>所以如果你覺得 WordPress 很好用、外掛很多、社群很熱心而且又完全免費，那麼就請你抱持著感恩的心來回報它，你可能沒辦法開發外掛，或是寫教學文來回饋社群，至少，用實際的購買行為來支持開發者，這樣就非常足夠了。</p>
</blockquote>
<h2 id="GPL-V2-開源授權規範"><a href="#GPL-V2-開源授權規範" class="headerlink" title="GPL V2 開源授權規範"></a><strong>GPL V2 開源授權規範</strong></h2><p>無論取得外掛的方式是什麼，所有的 WordPress 外掛都是採用 General Public License 版本 2 的授權協議，這表示當原始碼在需要被散佈的情況下（像是上架官方目錄、提供免費或付費下載），散播出去的原始碼也是必須遵循這樣的授權讓任何人都可以自由的修改、散佈。</p>
<p>有些開發者會把前端的靜態資源檔案像是 HTML、CSS、JavaScript 採取不同的授權方式，以便與 PHP 的 GPL 來進行區分，而有些外掛會極力否認甚至不採用 GPL 授權。</p>
<p>但 WordPress 的精神領袖 Matt Mullenweg 表示所有的佈景主題與外掛都一定、必須要採用 GPL 授權，所以如果你今天要開發的外掛是會在社群進行發佈，建議還是採取 GPL。</p>
<blockquote>
<p>這段作者講的很保守，因為這是很有爭議的地方，就我從開發者的角度來看，WordPress 主要的服務對象是使用者而非軟體開發業者，儘可能的讓使用者自由使用 WordPress 的所有工具是主要任務。</p>
<p>WordPress 的商業模式是靠服務客戶而非販售程式碼，所以同樣的概念運用在社群上，協助客戶架設 WordPress 網站、提供長期的售後服務才是維繫客戶關係的關鍵，與傳統販售一次性軟體商品的模式相比，這樣的合作方式讓雙方都能持續互惠，也是讓社群能茁壯的原因之一。</p>
<p>有了這樣的背景知識後，回到 GPL Club，對！你想得沒錯，它是完全符合 GPL 的授權規範的，這些業者他們聲稱收取的費用是維護費，就是當軟體版本有更新時他們會重新上架商品，但他們不會維護程式碼，使用上遇到問題他們也不會理你，所以才可以賣得這麼便宜。</p>
<p>但畢竟不是原始的開發商，在他們取得這些外掛的過程中會不會加料也很難說，免費的最貴這句話不是沒有道理的，羊毛出在羊身上，他們不要你的錢那要的會是什麼呢？未來當看到免費或低於一般市價的商品時先想想這個問題，就不會被免費二字給沖昏頭了。</p>
<p>最後還是還給 GPL Club 一個清白，它們的軟體不能算是「盜版」，因為並沒有違反 WordPress 的授權條款，比較有問題的是 Themeforest 的商品，因為他們有他們自己的授權方式，這部分就是各說各話了…</p>
<p>總之，身為使用者，去作者網站進行購買下載就 100% 沒問題了，除了最有保障之外，這也是對他們最大的鼓勵！</p>
</blockquote>
<h2 id="開發自己的外掛"><a href="#開發自己的外掛" class="headerlink" title="開發自己的外掛"></a><strong>開發自己的外掛</strong></h2><p>雖然已經有成千上萬個寫好的外掛了，但常常還是覺得那邊功能差一點、這邊要是再有什麼就好了，如果你有這樣的感覺，就來寫自己的外掛吧！</p>
<p>寫一支基本的外掛十分容易，只要在 wp-content/plugins 的目錄下，新增一個 .php 檔，檔名可以是任何名字，這邊示範新增一隻 my-plugin.php，打開編輯器，在 my-plugin.php 裡面加入以下註解：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * Plugin Name: My Plugin
 * Plugin URI: https://bwawwp.com/my-plugin/
 * Description: This is my plugin description.
 * Author: messenlehner, strangerstudios
 * Version: 1.0.0
 * Author URI: https://bwawwp.com
 * License: GPL-2.0+
 * License URI: http://www.gnu.org/licenses/gpl-2.0.txt
 */</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>輸入完後存檔，第一支外掛就完成了！你可以在後台的 外掛 &gt; 已安裝的外掛看到並啟用它，雖然現在它還沒有任何的功能，以下範例使用之前介紹過的 Hook，在前台的頁尾加入一些文字：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function">my_plugin_wp_footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'I read Building Web Apps with WordPress and now I am a WordPress Genius!'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'wp_footer'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'my_plugin_wp_footer'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>加入完成後存檔，應該就可以看到在網頁的最下方出現這段字。如果你很熟悉 PHP，就可以開始寫東西了，不熟也沒關係，找些功能單純的外掛像是 Hello Dolly，看它是怎麼運作的。</p>
<h2 id="外掛的資料夾結構"><a href="#外掛的資料夾結構" class="headerlink" title="外掛的資料夾結構"></a><strong>外掛的資料夾結構</strong></h2><p>無論是什麼程式，有好的檔案結構才有辦法維護，如果外掛很單純，一支主要的 php 檔就可以解決是最好的，但通常為了要完成某些功能，程式碼會越來越多，像是控制前/後臺的 CSS、JS、圖片等等，這邊使用本書範例外掛 School Press 來說明資料夾結構：</p>
<p><strong>plugins/schoolpress/adminpages</strong>/</p>
<p>如果外掛有提供後台設定頁面的話，把頁面的 php 檔放在這個資料夾中，以下範例為新增後台設定頁面：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// add a SchoolPress menu with reports page</span>
<span class="token keyword">function</span> <span class="token function">sp_admin_menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">add_menu_page</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'SchoolPress'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'SchoolPress'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'manage_options'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'sp_reports'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'sp_reports_page'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'admin_menu'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_admin_menu'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// function to load admin page</span>
<span class="token keyword">function</span> <span class="token function">sp_reports_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">require_once</span> <span class="token function">dirname</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"/adminpages/reports.php"</span><span class="token punctuation">;</span>  <span class="token comment">// 設定頁模板</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>plugins/schoolpress/classes/</strong></p>
<p>該資料夾放 php 的類別檔，習慣用法是一個類別一個獨立的檔案，檔案名稱命名方式為 class.className.php，className 替換為你的類別名稱。</p>
<p><strong>plugins/schoolpress/css/</strong></p>
<p>該資料夾放 CSS 檔案，可以把它拆分為控制前台 style 的 frontend.css 與後台 admin.css，也可以放第三方的樣式檔，以下範例說明如何掛載 CSS 檔到前台與後台：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">sp_load_admin_styles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">wp_enqueue_style</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'schoolpress-plugin-admin'</span><span class="token punctuation">,</span>
<span class="token function">plugins_url</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'css/admin.css'</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token constant">SCHOOLPRESS_VERSION</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'screen'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'admin_enqueue_scripts'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_load_admin_styles'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">sp_load_frontend_styles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">wp_enqueue_style</span><span class="token punctuation">(</span>
        <span class="token string single-quoted-string">'schoolpress-plugin-frontend'</span><span class="token punctuation">,</span>
        <span class="token function">plugins_url</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'css/frontend.css'</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token constant">SCHOOLPRESS_VERSION</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'screen'</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'wp_enqueue_scripts'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_load_frontend_styles'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要掛在前台使用 wp_enqueue_scripts 這個 Hook，而後台是 admin_enqueue_scripts。在寫前台的 CSS 時，必須要考慮到這些樣式是否該放在佈景主題的 style.css 而非外掛之中，因為前台的樣式通常是由佈景主題所控制的。</p>
<p>放在外掛的 CSS 代表就算切換佈景主題也不會變動，想像當你的佈景主題沒有任何樣式的時候畫面至少該呈現什麼樣子，這些樣式的 CSS 就適合放在外掛之中，並預期佈景主題有了樣式之後會覆蓋過去。</p>
<p>舉個例子：外掛的 frontend.css 不應該帶有控制顏色的屬性，而是控制大頭照的寬度與浮動比較適合放在這邊。</p>
<p><strong>plugins/schoolpress/js/</strong></p>
<p>該資料夾放所有的 JavaScript 檔案，與 CSS 一樣可以切分為前台用的 frontend.js 與後台 admin.js。也可以把第三方的 JS 檔用子資料夾放在這邊。以下範例說明如何掛載 JS 檔：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">sp_load_admin_scripts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">wp_enqueue_script</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'schoolpress-plugin-admin'</span><span class="token punctuation">,</span>
<span class="token function">plugins_url</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'js/admin.js'</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'jquery'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token constant">SCHOOLPRESS_VERSION</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'admin_enqueue_scripts'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_load_admin_scripts'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">sp_load_frontend_scripts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">wp_enqueue_script</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'schoolpress-plugin-frontend'</span><span class="token punctuation">,</span>
<span class="token function">plugins_url</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'js/frontend.js'</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'jquery'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token constant">SCHOOLPRESS_VERSION</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'wp_enqueue_scripts'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_load_frontend_scripts'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>與 CSS 一樣使用 wp_enqueue_scripts 與 admin_enqueue_scripts 這兩支 Hook，同時也要考慮哪些前台的 JS 應該要放在佈景主題而非外掛。像是控制 slideshow 的 JS 要放在佈景主題，而呼叫 Ajax 的 JS 就可以放在外掛。</p>
<p>因為掛載 CSS 與 JS 都是用同一個 Hook，所以可以把它們寫在同一支 function 裡面，要注意沒有 wp_enqueue_styles 與 admin_enqueue_styles 這樣的 Hook。</p>
<p><strong>plugins/schoolpress/images/</strong></p>
<p>該資料夾放外掛需要使用到的圖片。</p>
<p><strong>plugins/schoolpress/includes/</strong></p>
<p>該資料夾放支援外掛的 php 檔，通常是放非程式核心邏輯相關的輔主 function。因為在外掛資料夾的根目錄只能放一支主要的 php 檔，所以其他的檔案就用這個資料夾來進行組織管理，通常會有 functions.php、common.php 或是 helpers.php。</p>
<p>儘可能把每一個檔案維持在小規模並用引入的方式來載入，像是產生隨機文字、整理字串或是其他 WordPress 沒有內建的第三方框架都可以放在這邊。</p>
<p><strong>plugins/schoolpress/includes/lib</strong></p>
<p>該資料夾放第三方的函式庫。</p>
<p><strong>plugins/schoolpress/pages/</strong></p>
<p>該資料夾放顯示在前端頁面的 php 檔，通常會使用 Shortcode 來顯示外掛所產生的內容，以下範例說明如何建立一組 Shortcode：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">// preheader
function sp_stub_preheader() &#123;
if ( !is_admin() ) &#123;
global $post, $current_user;
if ( !empty( $post->post_content ) &amp;&amp; strpos
   ( $post->post_content, '[sp_stub]' ) !== false ) &#123;
/*
Put your preheader code here.
*/
&#125;
&#125;
&#125;
add_action( 'wp', 'sp_stub_preheader', 1 );

// shortcode [sp_stub]
function sp_stub_shortcode() &#123;
ob_start();
?>
Place your HTML/etc code here.
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$temp_content</span> <span class="token operator">=</span> <span class="token function">ob_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token variable">$temp_content</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_shortcode</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'sp_stub'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_stub_shortcode'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>這邊的 preheader 指的是放入比 wp_head() 還要更早執行的程式碼，!is_admin 判斷是在前台，if ( !empty( $post-&gt;post_content ) &amp;&amp; strpos( $post-&gt;post_content, ‘[sp_stub]’ ) !== false ) 是判斷該頁面是否帶有 [sp_stub] 這個 Shortcode，有的話條件就成立。</p>
<p>Hook wp 指的是會在 WordPress 建立完 $post 全域變數後、並在尚未渲染任何標頭與 HTML 內容之前觸發。preheader 這隻 function 可以用來檢查權限、表單提交的狀態或是任何在頁面還沒有被載入之前需要執行的功能。</p>
<p>在 MVC 的架構下，preheader 放的是 model 或是 controller 的程式碼，因為頁面內容還沒有產生，你可以安全地把使用者導引至其他頁面，像是可以使用 wp_redirect() 來跳轉到註冊或是登入頁，避免讓他們造訪到會員限定的頁面。</p>
<p>Shortcode 的部分使用 PHP 的 function：ob_start()、ob_get_contents()、ob_end_clean() 來把程式碼輸入到緩衝區而非瀏覽器之中。在 ?&gt; 與 &lt;?php 之間的字串 Place your HTML/etc code here. 會被放在 $temp_content 這個變數裡面，這樣做的用意是讓程式碼比較好閱讀，還可以混搭 HTML 與 PHP。</p>
<blockquote>
<p>這個範例有點難懂，簡單說就是當頁面帶有 [sp_stub] 的時候，可以做些判斷上的應用，像是使用者是否登入的判斷 is_user_logged_in 可以寫在 preheader 裡面，然後 sp_stub_shortcode 可以把「您尚未登入」 的提示存到緩衝區之中，這樣既可以顯示提示給使用者，又不會讓頁面開始渲染 HTML，因為 PHP 的頁面跳轉 <a href="https://www.php.net/manual/en/function.header.php">header(‘Location:url’)</a> 必須在頁面還沒有任何內容的時候觸發。</p>
</blockquote>
<p><strong>plugins/schoolpress/services/</strong></p>
<p>該資料夾放 Ajax 相關的 php 檔。</p>
<p><strong>plugins/schoolpress/scheduled/</strong></p>
<p>該資料夾放與排程相關的 php 檔。</p>
<p><strong>plugins/schoolpress/schoolpress.php</strong></p>
<p>外掛最主要的 php 檔，在比較大型的外掛中這支檔案主要負責引入其他的 php、常數的宣告、以及外掛的檔案說明註解。</p>
<h2 id="開發現有外掛的附加套件"><a href="#開發現有外掛的附加套件" class="headerlink" title="開發現有外掛的附加套件"></a><strong>開發現有外掛的附加套件</strong></h2><p>除了可以開發自己的外掛，還可以幫其他人寫的外掛再開發附加套件 ( Add-Ons )。如果你發現了一支外掛可以滿足你 95% 的需求，剩下的 5% 不用把整個外掛載下來改寫，只要設計專屬於這支外掛的附加套件即可。</p>
<p>大部分組織良好的外掛都有完善的 Hook 可供使用，所以只要利用這些 Hook 就可以再把程式碼掛到外掛裡面去，就像是寫外掛的時候把程式掛進 WordPress 內建的 Hook 一樣。</p>
<p>如果遇到需要的 Hook 但該外掛並未提供，整包載回來自己動手修改也行，但比較好的做法是開 issue 給作者，請他們把你需要的 Hook 加入，讓其他開發者也可以受惠。</p>
<h2 id="SchoolPress-使用場景"><a href="#SchoolPress-使用場景" class="headerlink" title="SchoolPress 使用場景"></a><strong>SchoolPress 使用場景</strong></h2><p>所以應該開發免費的還是進階付費的外掛？以下透過 SchoolPress 這個有社群功能的外掛來舉例：每位老師是社團的管理員，並且可以把學生帳號加入社團。學生可以瀏覽社團動態或是班級的動態牆。</p>
<p>使用 <a href="https://buddypress.org/">BuddyPress</a> 學生可以與其他學生建立朋友關係，追蹤他們的朋友或是老師，並且還可以發私訊與老師聯繫。</p>
<p>使用 <a href="https://badgeos.org/">BadgeOS</a> 與 <a href="https://wordpress.org/plugins/badgeos-community-add-on/">BadgeOS Community</a> 套件，老師可以創造有趣的獎勵徽章給他的學生，學生只要完成作業或報告就可以獲得徽章，並且分享在他們的動態牆上。</p>
<p>然後使用 <a href="https://www.gravityforms.com/">Gravity Forms</a> 來設計表單讓學生提交他們的作業。</p>
<h2 id="WordPress-Loop"><a href="#WordPress-Loop" class="headerlink" title="WordPress Loop"></a><strong>WordPress Loop</strong></h2><p>Loop 是除了 Hook 以外另一個在 WordPress 裡面非常重要的機制，它的主要功能是根據模板檔案來顯示文章的內容，大部分的 Theme 會在以下檔案包含 Loop 的運用：index.php、archive.php、category.php、tag.php、single.php、page.php。</p>
<p>打開這些檔案會看到如下的程式碼：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">have_posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">have_posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">the_post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">the_title</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'&lt;h2>'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&lt;/h2>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">the_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// show a message like sorry no posts!</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>have_posts() 檢查是否有文章可以被顯示，如果有的話就使用 while 迴圈把文章撈出來，先呼叫 <a href="https://developer.wordpress.org/reference/functions/the_post/">the_post()</a> 來設置文章相關的全域變數，讓文章相關的資料可以被正確的取得。</p>
<p>為了方便寫 HTML 以及閱讀性，可以使用一行的方式來寫 loop：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">have_posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token delimiter important">?></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">have_posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">the_post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>在 content 之前的 HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">the_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>在 content 之後的 HTML <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">endwhile</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>沒有可以顯示的文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">endif</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>實務上我自己是比較習慣用一行的寫法，當要處理比較多的 HTML 的時候會比較好寫，閱讀上也比較直覺，注意 if 跟 while 結尾是用冒號、else 也是用冒號，endwhile 跟 endif 是用分號結尾。</p>
</blockquote>
<h2 id="WordPress-全域變數"><a href="#WordPress-全域變數" class="headerlink" title="WordPress 全域變數"></a><strong>WordPress 全域變數</strong></h2><p>全域變數是可以自訂定義並用在所有地方的變數，WordPress 有內建了一些全域變數，讓你可以立即使用不用再自己花時間額外寫。內建的所有全域變數可以用 print_r 把它們印出來，或是參考 <a href="https://codex.wordpress.org/Global_Variables">https://codex.wordpress.org/Global_Variables</a></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;pre>'</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span> <span class="token variable">$GLOBALS</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;/pre>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果要在程式內使用全域變數的話，可以這樣寫：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">global</span> <span class="token variable">$global_variable_name</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>有些全域變數只能在特定的場景下才有值可以取得，下面幾個是很常用到的全域變數：</p>
<p><strong>$post</strong> - 在 loop 中取得資料表 wp_posts 內所有關於 post 的欄位。</p>
<p><strong>$authordata</strong> - 在 loop 中取得文章作者的相關欄位。</p>
<h2 id="wpdb"><a href="#wpdb" class="headerlink" title="$wpdb"></a><strong>$wpdb</strong></h2><p>$wpdb 是在 WordPress 中直接用來操作資料庫的類別，可以用它來進行資料庫的 select、update、insert 以及 delete。如果你不熟悉 WordPress 的 function，那麼 $wpdb 是你的好朋友。</p>
<p>如果需要一些很複雜的資料庫查詢條件，而且是內建 function 找不到的，$wpdb 就可以派上用場了。但請別認為 WordPress 內建 function 的查詢速度很慢，除非你很熟悉資料庫，不然使用內建 function 來取得文章、使用者及其他資料是比較好的作法。</p>
<p>因為 WordPress 核心維護團隊都已經把這些 function 優化過了，並且增加了快取機制來加速資料查詢，也可以在所有的外掛之中保持良好的運作，所以除非是在某些特殊狀況下，再來用 $wpdb 來做資料操作。</p>
<h2 id="自訂資料表"><a href="#自訂資料表" class="headerlink" title="自訂資料表"></a><strong>自訂資料表</strong></h2><p>在 SchoolPress 這支外掛中，作者新開了一個資料表來紀錄學生作業與學生對應的關係，這可以讓資料庫比較清楚些，並且可以直接查詢每個學生的所有作業。</p>
<p>通常新增資料表要使用 CREATE TABLE 語句，然後使用 WordPress 內建的 dbDelta() 來執行新增資料表，在新增資料表前有些地方要注意：</p>
<p>在 option 中新增一個變數 $db_version，這是為了讓外掛知道目前使用的自訂資料表是第幾版，如果資料表欄位有變更，就可以使用 db_version 來做紀錄，也可以用來判斷當外掛第一次啟用時，不存在這個版本號才新增資料表。</p>
<p>另一個常見作法是把自訂資料表的名稱作為 $wpdb 的一個屬性，可以讓之後查詢時比較省事，以下範例為 SchoolPress 的資料庫設定：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// set up the database for the SchoolPress app</span>
<span class="token keyword">function</span> <span class="token function">sp_setupDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">global</span> <span class="token variable">$wpdb</span><span class="token punctuation">;</span>

<span class="token comment">// shortcuts for SchoolPress DB tables</span>
<span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token property">schoolpress_assignment_submissions</span> <span class="token operator">=</span> <span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token property">prefix</span> <span class="token operator">.</span>
<span class="token string single-quoted-string">'schoolpress_assignment_submissions'</span><span class="token punctuation">;</span>

<span class="token variable">$db_version</span> <span class="token operator">=</span> <span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'sp_db_version'</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// create tables on new installs</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$db_version</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">global</span> <span class="token variable">$wpdb</span><span class="token punctuation">;</span>

<span class="token variable">$sqlQuery</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"
CREATE TABLE '"</span> <span class="token operator">.</span> <span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token property">schoolpress_assignment_submissions</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"' (
  \`assignment_id\` bigint(11) unsigned NOT NULL,
  \`submission_id\` bigint(11) unsigned NOT NULL,
UNIQUE KEY \`assignment_submission\` (\`assignment_id\`,\`submission_id\`),
UNIQUE KEY \`submission_assignment\` (\`submission_id\`,\`assignment_id\`)
)
"</span><span class="token punctuation">;</span>

<span class="token keyword">require_once</span> <span class="token constant">ABSPATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'wp-admin/includes/upgrade.php'</span><span class="token punctuation">;</span>
<span class="token function">dbDelta</span><span class="token punctuation">(</span> <span class="token variable">$sqlQuery</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$db_version</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'1.0'</span><span class="token punctuation">;</span>
<span class="token function">update_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'sp_db_version'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'1.0'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'init'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_dbSetup'</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>sp_dbSetup() 要在最早的時候執行，所以 hook add_acton 的第三個參數設為 0 ( 數字越小越先執行 )。然後因為資料表都會帶有前綴，預設雖然是 wp_，但因為外掛是要給其他人使用的，前綴通常都不會是預設值，所以使用 $wpdb-&gt;prefix 來取得資料表前綴。</p>
<p>然後把資料表前綴加上資料表名稱存進 $wpdb 裡面，這樣在下面要 CREATE TABLE 帶入資料表名稱時就比較方便且容易理解。</p>
<p>$db_version 會在為空值時才會給值並且存在 option 裡面，這樣在外掛第一次啟用時才會新增資料表。然後CREATE TABLE 語句指定要開的欄位，在寫 SQL 語句時，記得要先在 MySQL 裡面測過沒問題後才丟到外掛裡面去執行。</p>
<p>最後使用 dbDelta 來執行資料表新增的動作，dbDelta 會判斷沒有該表才會新增，或是當有同名稱的表存在時，會幫你 ALTER TABLE 來確保已存在的表與新表有相同的 Schema。</p>
<p>另外要注意的是，要使用 dbDelta 時必須先引入 wp-admin/includes/upgrade.php，然後才把 SQL 語句作為參數傳給 dbDelta。</p>
<p>你的 SQL 語句與一般的有點不太相同，需要注意下面幾個地方</p>
<ol>
<li> 每一個新增的欄位要寫在獨立的一行</li>
<li> 在 PRIMARY KEY 與定義主鍵的欄位之間要有空格</li>
<li> 使用關鍵字 KEY 而不用 INDEX，並且至少包含一個 KEY</li>
<li> 欄位名稱不要使用「’」與「`」這兩個符號</li>
</ol>
<p>參考 <a href="https://codex.wordpress.org/Creating_Tables_with_Plugins">https://codex.wordpress.org/Creating_Tables_with_Plugins</a></p>
<p>使用 dbDelta() 來新建資料表是比較好的選擇，因為它會幫你自動更新較舊的資料庫版本，其他的用法還可以使用 $wpdb-&gt;query($sqlQuery) 來直接新增。</p>
<p>$wpdb-&gt;query() 可以直接執行任何經過驗證的 SQL 語法，其中的 query() 帶有很多實用的屬性協助開發者除錯以及追蹤查詢結果：</p>
<ul>
<li>  $wpdb-&gt;result - 顯示查詢結果</li>
<li>  $wpdb-&gt;num_queries - 每次查詢會自動增加</li>
<li>  $wpdb-&gt;last_query - 顯示最後一筆的查詢</li>
<li>  $wpdb-&gt;last_error - 顯示最後一筆的錯誤訊息</li>
<li>  $wpdb-&gt;insert_id - 顯示最後一筆成功 INSERT 的資料 ID</li>
<li>  $wpdb-&gt;rows_affected - 顯示影響的資料筆數</li>
<li>  $wpdb-&gt;num_rows - 顯示查詢結果比數</li>
<li>  $wpdb-&gt;last_result - 顯示透過 mysql_fetch_object() 函式產出的物件</li>
</ul>
<p>$wpdb-&gt;query() 返回的值是根據查詢條件是否成功，返回 false 代表查詢失敗，你可以使用下面的程式碼來驗證查詢狀態：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">wp_die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"it failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

返回的結果是從 <span class="token constant">CREATE</span>、<span class="token constant">ALTER</span>、<span class="token constant">TRUNCATE</span> 以及 <span class="token constant">DROP</span> 這些查詢所產出。影響的資料筆數是包含 <span class="token constant">SELECT</span>、<span class="token constant">INSERT</span>、<span class="token constant">UPDATE</span>、<span class="token constant">DELETE</span> 以及 <span class="token constant">REPLACE</span> 這些查詢。

<span class="token comment">## **資料庫查詢的跳脫字元**</span>

要注意的地方是 <span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 並不會自動處理跳脫字元的問題，在 WordPress 中有兩個方法來處理，分別是 <span class="token function">esc_sql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 與 <span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，下面是 <span class="token function">esc_sql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 的使用範例：

<span class="token operator">&lt;</span><span class="token operator">?</span>php
<span class="token keyword">global</span> <span class="token variable">$wpdb</span><span class="token punctuation">;</span>
<span class="token variable">$user_query</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uq'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token variable">$sqlQuery</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT user_login FROM <span class="token interpolation"><span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token property">users</span></span> WHERE
user_login LIKE '%"</span> <span class="token operator">.</span> <span class="token function">esc_sql</span><span class="token punctuation">(</span><span class="token variable">$user_query</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"%' OR
user_email LIKE '%"</span> <span class="token operator">.</span> <span class="token function">esc_sql</span><span class="token punctuation">(</span><span class="token variable">$user_query</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"%' OR
display_name LIKE '%"</span> <span class="token operator">.</span> <span class="token function">esc_sql</span><span class="token punctuation">(</span><span class="token variable">$user_query</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"%'
"</span><span class="token punctuation">;</span>
<span class="token variable">$user_logins</span> <span class="token operator">=</span> <span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token function">get_col</span><span class="token punctuation">(</span><span class="token variable">$sqlQuery</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$user_logins</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;ul>"</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$user_logins</span> <span class="token keyword">as</span> <span class="token variable">$user_login</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;li><span class="token interpolation"><span class="token variable">$user_login</span></span>&lt;/li>"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/ul>"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>至於 $wpdb-&gt;prepare() 用法類似是 sprint() 與 printf()，相較於 esc_sql()，它除了會處理跳脫字元外，還可以避免語句中單引號的問題。prepare 方法定義在 wp-includes/wp-db.php 中，可以接受兩個以上的參數。</p>
<p><strong>$query</strong> - SQL 陳述語句的字串</p>
<p><strong>$args</strong> - 一個或多個的變數來替代 SQL 語句中的 placeholder 所代表的值</p>
<p>下面列出的 Placeholder 可以用在 SQL 的陳述語句中：</p>
<ul>
<li>  %d - integer 整數</li>
<li>  %f - float 浮點數</li>
<li>  %s - 字串</li>
<li>  %% - 顯示百分比符號用</li>
</ul>
<p>$d、$f、$s 在語句中不加引號，然後要使用 %% 把 placeholder 包住，這樣才能找到精準比對的資料，每個 placeholder 都會對應到一個變數，使用範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$sqlQuery</span> <span class="token operator">=</span> <span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT user_login FROM <span class="token interpolation"><span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token property">users</span></span> WHERE
user_login LIKE '%%%s%%' OR
user_email LIKE '%%%s%%' OR
display_name LIKE '%%%s%%'"</span><span class="token punctuation">,</span> <span class="token variable">$user_query</span><span class="token punctuation">,</span> <span class="token variable">$user_query</span><span class="token punctuation">,</span> <span class="token variable">$user_query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$user_logins</span> <span class="token operator">=</span> <span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token function">get_col</span><span class="token punctuation">(</span><span class="token variable">$sqlQuery</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要注意的地方是如果使用 $wpdb-&gt;prepare() 時沒有附上第二個參數會噴錯，因此如果不需要用動態資料來做 SQL 操作的話就不用使用 $wpdb-&gt;prepare()。</p>
<h2 id="使用-wpdb-做-SELECT-查詢"><a href="#使用-wpdb-做-SELECT-查詢" class="headerlink" title="使用 $wpdb 做 SELECT 查詢"></a><strong>使用 $wpdb 做 SELECT 查詢</strong></h2><p>$wpdb 類別有很多方法可以來做資料庫查詢，針對 row 的資料查詢可以使用 $wpdb-&gt;get_results( $query, $output_type ) ，它會回傳查詢結果的陣列，在預設的情況下，回傳的是索引式陣列，下面列出回傳的資料型別：</p>
<p><strong>OBJECT</strong> - 回傳索引式陣列的物件</p>
<p><strong>OBJECT_K</strong> - 回傳關聯式陣列的物件，並會使用第一欄的值作為陣列的 Key，重複的值會被捨棄</p>
<p><strong>ARRAY_A</strong> - 回傳帶有索引的關聯式陣列，使用欄位名稱作為 Key</p>
<p><strong>ARRAY_N</strong> - 回傳帶有索引的索引式陣列</p>
<p>使用範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">global</span> <span class="token variable">$wpdb</span><span class="token punctuation">;</span>
<span class="token variable">$sqlQuery</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM <span class="token interpolation"><span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token property">posts</span></span>
WHERE post_type = 'assignment'
AND post_status = 'publish' LIMIT 10"</span><span class="token punctuation">;</span>
<span class="token variable">$assignments</span> <span class="token operator">=</span> <span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token function">get_results</span><span class="token punctuation">(</span> <span class="token variable">$sqlQuery</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// rows are stored in an array, use foreach to loop through them</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span> <span class="token variable">$assignments</span> <span class="token keyword">as</span> <span class="token variable">$assignment</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// each item is an object with property names equal to the SQL column names</span><span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$assignment</span><span class="token operator">-></span><span class="token property">post_title</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">apply_filters</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"the_content"</span><span class="token punctuation">,</span> <span class="token variable">$assignment</span><span class="token operator">-></span><span class="token property">post_content</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>針對 col 的查詢使用 $wpdb-&gt;get_col( $query, $column_offset = 0 )，它會返回第一欄的查詢結果。$column_offset 可以抓取其他欄位的資料來做顯示，第一欄是 0，第二欄是 1，其他以此類推。$wpdb-&gt;get_col() 方法常常被用來抓取文章的 ID，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">global</span> <span class="token variable">$wpdb</span><span class="token punctuation">;</span>
<span class="token variable">$sqlQuery</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT ID FROM <span class="token interpolation"><span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token property">posts</span></span>
WHERE post_type = 'assignment'
AND post_status = 'publish'
LIMIT 10"</span><span class="token punctuation">;</span>
<span class="token comment">// getting IDs</span>
<span class="token variable">$assignment_ids</span> <span class="token operator">=</span> <span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token function">get_col</span><span class="token punctuation">(</span> <span class="token variable">$sqlQuery</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// result is an array, loop through them</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span> <span class="token variable">$assignment_ids</span> <span class="token keyword">as</span> <span class="token variable">$assignment_id</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// we have the id, we can use get_post to get more data</span>
<span class="token variable">$assignment</span> <span class="token operator">=</span> <span class="token function">get_post</span><span class="token punctuation">(</span> <span class="token variable">$assignment_id</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$assignment</span><span class="token operator">-></span><span class="token property">post_title</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">apply_filters</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"the_content"</span><span class="token punctuation">,</span> <span class="token variable">$assignment</span><span class="token operator">-></span><span class="token property">post_content</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要針對其中一列作查詢可以使用 $wpdb-&gt;get_row( $query, $output_type, $row_offset )，$row_offset 可以指定抓取搜尋結果的其他資料，0 是第一筆，1 是第二筆，其他以此類推。</p>
<h2 id="Insert、Replace-與-Update"><a href="#Insert、Replace-與-Update" class="headerlink" title="Insert、Replace 與 Update"></a><strong>Insert、Replace 與 Update</strong></h2><p>資料寫入的部分可以使用 $wpdb-&gt;insert( $table, $data, $format )，相較於自己寫 INSERT 語句，只要參數傳資料表名稱與要寫入的 row data，剩下的 $wpdb 就會自動幫你搞定。</p>
<p>需要注意的地方是 $data 這個參數，必須與資料表的欄位名稱符合，$data 陣列中的值則代表要寫入的資料，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// 讓學生提交的資料與作業做關連</span>
<span class="token keyword">global</span> <span class="token variable">$wpdb</span><span class="token punctuation">,</span> <span class="token variable">$current_user</span><span class="token punctuation">;</span>

<span class="token comment">// create submission</span>
<span class="token variable">$assignment_id</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'assignment_id'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$submission_id</span> <span class="token operator">=</span> <span class="token function">wp_insert_post</span><span class="token punctuation">(</span>
<span class="token keyword">array</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'post_type'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'submission'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'post_author'</span>  <span class="token operator">=></span> <span class="token variable">$current_user</span><span class="token operator">-></span><span class="token constant">ID</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'post_title'</span>   <span class="token operator">=></span> <span class="token function">sanitize_title</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'post_content'</span> <span class="token operator">=></span> <span class="token function">sanitize_text_field</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submission'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// connect the submission to the assignment</span>
<span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token function">insert</span><span class="token punctuation">(</span>
  <span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token property">schoolpress_assignment_submissions</span><span class="token punctuation">,</span>
  <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"assignment_id"</span><span class="token operator">=></span><span class="token variable">$assignment_id</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"submission_id"</span><span class="token operator">=></span><span class="token variable">$submission_id</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'%d'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'%d'</span> <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
This insert call will generate a SQL query like:
INSERT INTO
'wp_schoolpress_assignment_submissions'
('assignment_id','submission_id' VALUES (101,10)
*/</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在範例中，先使用 wp_insert_post() 讓學生提交的資料先寫入文章類型為 submission 的 post，然後使用 $wpdb-&gt;insert 在 schoolpress_assignment_submissions 資料表新增一筆關聯的資料。</p>
<p>需要注意的是第三個參數 array( ‘%d’, ‘%d’ )，這邊指定寫入資料的資料類型，$d 是整數，$s 還是字串，$f 是浮點數。如果沒有指定資料類型的話，一律會被當作是字串寫入。</p>
<p>在大部分的情況下，要做文章類型的關聯可以直接使用 wp_posts 資料表裡面的 post_parent 欄位，但如果是要做多對多的關聯，像是一個 submission 可以對應到多個 assignment，這時候另外開一張表來紀錄會是比較清楚的作法。</p>
<blockquote>
<p>之前做過一個站有五種 Post Type，而這五種彼此都要互相關聯，而且是多對多的關係，我是用 ACF Pro 的 Relationship 欄位來處理，所以要從 A 文章類型去撈到關聯 B 文章類型、再從 B 去撈關聯 C 文章的欄位時，使用 ACF 的 get_field() 要繞好大一圈，而且會產生一堆為了拿 Post ID 的多重迴圈，這讓程式的維護變得異常複雜。</p>
<p>如果依照作者的作法只要把互為關聯的 Post ID 獨立出來一張表來做存放，然後用 $wpdb 去拿關聯的文章 ID，也許事情會單純的多，但就是一開始資料表的欄位就要先規劃好。</p>
</blockquote>
<p>$wpdb-&gt;replace( $table, $data, $format ) 用法與 insert() 很類似，如果需要取代既有資料只要在 $data 陣列中指定相同的 key 既可進行取代。</p>
<p>$wpdb-&gt;update( $table, $data, $where, $format, $where_format ) 則是用來修改整列的資料，跟自己寫 UPDATE 語句相比，用它比較容易且安全，使用範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">global</span> <span class="token variable">$wpdb</span><span class="token punctuation">;</span>
<span class="token comment">// just update the status</span>
<span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token function">update</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'ecommerce_orders'</span><span class="token punctuation">,</span>   <span class="token comment">//table name</span>
<span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'status'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'paid'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//data fields</span>
<span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'id'</span> <span class="token operator">=></span> <span class="token variable">$order_id</span> <span class="token punctuation">)</span>  <span class="token comment">//where fields</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// update more data about the order</span>
<span class="token variable">$wpdb</span><span class="token operator">-></span><span class="token function">update</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'ecommerce_orders'</span><span class="token punctuation">,</span>   <span class="token comment">//table name</span>
<span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'status'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'pending'</span><span class="token punctuation">,</span>  <span class="token comment">//data fields</span>
<span class="token string single-quoted-string">'subtotal'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'100.00'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'tax'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'6.00'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'total'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'106.00'</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'id'</span> <span class="token operator">=></span> <span class="token variable">$order_id</span> <span class="token punctuation">)</span>  <span class="token comment">//where fields</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 $where 來指定要修改的對象，然後用 $data 來傳入新的資料來修改。</p>
<h2 id="wp-query"><a href="#wp-query" class="headerlink" title="$wp_query"></a><strong>$wp_query</strong></h2><p>$wp_query 是專門用來顯示文章內容的 class，下一章會有完整的介紹。</p>
<h2 id="current-user"><a href="#current-user" class="headerlink" title="$current_user"></a><strong>$current_user</strong></h2><p>$current_user 是專們用來顯示目前已登入使用者資訊的物件，它不僅會回傳 wp_users 裡面的欄位，還可以得到已登入使用的角色與權限，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//welcome the logged-in user</span>
<span class="token keyword">global</span> <span class="token variable">$current_user</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$current_user</span><span class="token operator">-></span><span class="token constant">ID</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'Howdy, '</span> <span class="token operator">.</span> <span class="token variable">$current_user</span><span class="token operator">-></span><span class="token property">display_name</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上是 WordPress 常用到的 Global 變數，你也可以把自己常用到的全域變數存在 Global 裡面，這樣之後要重複取用就很方便。</p>
<h2 id="實用免費外掛介紹"><a href="#實用免費外掛介紹" class="headerlink" title="實用免費外掛介紹"></a>實用免費外掛介紹</h2><p>很多免費的外掛功能都很強大，如果想開發某些功能，可以先找找有沒有類似的外掛，萬一有的話當然最好，或是有但可能沒有 100% 符合你的需求也沒關係，直接改寫它們在某些情況下可以省下很多時間。</p>
<p><strong>Admin Columns</strong><br><a href="https://wordpress.org/plugins/codepress-admin-columns/">https://wordpress.org/plugins/codepress-admin-columns/</a></p>
<p>專門做後台文章列表欄位管理的外掛，可以很方便的把各個文章欄位放到列表中，並且進行排序與位置編排，付費版還能直接整合第三方外掛的欄位，並支援進階搜尋、報表匯出，如果客戶對於後台的資料顯示有特殊需求，Admin Columns 可以幫上你很多忙！</p>
<blockquote>
<p>以前我很習慣用它，尤其是它的進階搜尋功能可以滿足客戶對於資料檢視的需求，但缺點就是報表 csv 匯出中文會亂碼，有回報給原廠但還未獲得解決，所以匯出功能還是要自己另外寫。</p>
<p>但如果只是要單純欄位，特別是下面會介紹到的 ACF 欄位，必須要升級為付費版才能使用，再加上它的方案有限制網站數量，所以在客戶不需要進階搜尋功能的情況下，自己手刻會比較划算XD</p>
<p>新增欄位不難寫，主要會用到兩支 Hook：manage_{post type}<em>columns 與 manage_</em>{post type}_posts_custom_column。第一個是設定欄位名稱，第二個是抓取欄位值，具體範例參考：<a href="https://ods.oberonlai.blog/category/wordpress-admin/edit-php/">https://ods.oberonlai.blog/category/wordpress-admin/edit-php/</a></p>
</blockquote>
<p><strong>Advanced Custom Fields</strong><br><a href="https://wordpress.org/plugins/advanced-custom-fields/">https://wordpress.org/plugins/advanced-custom-fields/</a></p>
<p>開發 WordPress 不能沒有的一支外掛，它可以用視覺化的介面幫各種文章類型增加多種不同的欄位。新增的介面也可以讓後台使用者直接在編輯畫面進行資料的修改，省去超多額外開發後台操作介面的時間。付費版提供更多欄位選擇，甚至還可以作為簡易的頁面編輯器來使用！</p>
<p><strong>BadgeOS</strong><br><a href="https://wordpress.org/plugins/badgeos/">https://wordpress.org/plugins/badgeos/</a></p>
<p>BadgeOS 讓你的網站可以提供不同的成就徽章給站內會員，它的主要功能是可以設計徽章，並且設定觸發獲得條件，另一支遊戲化成就機制的外掛叫做 GamiPress，就是從 BadgeOS 衍伸來的，作者認為 <a href="https://wordpress.org/plugins/gamipress/">GamiPress</a> 維護的比較好並且擁有更多功能。</p>
<p><strong>Posts 2 Posts</strong><br><a href="https://wordpress.org/plugins/posts-to-posts/">https://wordpress.org/plugins/posts-to-posts/</a></p>
<p>Posts 2 Posts 可以讓站內所有文章擁有多對多的關聯，除了有方便的設定介面外，最重要的是它另外開了一張資料表來紀錄所有的對應關係，這在大型的網站中是非常有幫助的。</p>
<blockquote>
<p>可惜這支外掛已經四年沒更新，實驗過裝在 WordPress 5.4 上面會爆炸，也沒找到什麼其他替代方案，看來還是只能用 ACF 的 Relationship，或是找時間來修理它了…</p>
</blockquote>
<p>其他免費外掛介紹如下：</p>
<p><a href="https://tw.wordpress.org/plugins/members/">Members</a> - 管理使用者角色與權限，這部分會在第六章介紹如何使用程式碼來進行設定<br><a href="https://tw.wordpress.org/plugins/w3-total-cache/">W3 Total Cache</a> - 老牌快取外掛，會在第十四章介紹關於 WordPress 的快取機制<br><a href="https://tw.wordpress.org/plugins/wordpress-seo/">Yoast SEO</a> - 功能強大的 SEO 外掛  </p>
<p>付費外掛介紹：</p>
<p><a href="https://www.gravityforms.com/">Gravity Forms</a> - 設計表單的外掛，還可以整合為數眾多的第三方服務<br><a href="https://ithemes.com/backupbuddy/">BackupBuddy</a> - 備份還原外掛<br><a href="https://www.wpallimport.com/">WP All Import</a> - 使用 XML 或 CSV 匯入網站資料</p>
<h2 id="BuddyPress"><a href="#BuddyPress" class="headerlink" title="BuddyPress"></a><strong>BuddyPress</strong></h2><p><a href="https://tw.wordpress.org/plugins/buddypress/">BuddyPress</a> 一套專門建置社群平台的外掛，只要安裝啟用後，立刻可以完成類似 Facebook 的社群網站。<br>第一版在 2009 年四月推出，已經跟 WordPress 走過數十個年頭。</p>
<p>BuddyPress 必須運作在 Multisite 多站網絡的環境下，而它可以跟大部分的佈景主題相容，如果使用有針對 BuddyPress 所開發的佈景主題相容性會更好。</p>
<p>有別於 WordPress 內建的資料表，BuddyPress 新增了許多表來紀錄資料，因為社群網站的內容格式與傳統的文章不大相同，如果要用自定義文章來客製的話會花不少功夫。所以使用 BuddyPress 的機制來開發會方便許多。</p>
<p>以下為 BuddyPress database schema 說明：</p>
<p><strong>wp_bp_activity</strong> - 記錄貼文資料</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-07-at-09.36.01.jpg"></p>
<p><strong>wp_bp_activity_meta</strong> - 記錄貼文自訂資料</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-07-at-09.37.34.jpg"></p>
<p><strong>wp_bp_invitations</strong> - 記錄使用者邀請資訊</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-07-at-09.38.26.jpg"></p>
<p><strong>wp_bp_notifications</strong> - 記錄使用者通知訊息</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-07-at-09.39.20.jpg"></p>
<p><strong>wp_bp_notifications_meta</strong> - 記錄使用者通知訊息的自訂資料</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-07-at-09.40.28.jpg"></p>
<p><strong>wp_bp_xprofile_data</strong> - 記錄使用者資料</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-07-at-09.42.44-1024x148.jpg"></p>
<p><strong>wp_bp_xprofile_fields</strong> - 記錄使用者欄位</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-07-at-09.43.56-1024x295.jpg"></p>
<p><strong>wp_bp_xprofile_groups</strong> - 記錄使用者群組資訊</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-07-at-09.44.51-1024x140.jpg"></p>
<p><strong>wp_bp_xprofile_meta</strong> - 記錄使用者自訂資料</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-07-at-09.45.37.jpg"></p>
<p>BuddyPress 有許多功能可以讓使用者決定是否要啟用：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-07-at-09.46.55-1024x648.jpg"></p>
<p>在頁面設定的部分可以選擇 BuddyPress 相關頁面的指定，也可以使用頁面名稱來重新命名預設的顯示標題，另外要開放註冊的話還需要新增註冊與登入頁面，但前提是要先啟用讓任何人都可以註冊的選項。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-07-at-09.50.55.jpg"></p>
<p>啟用 BuddyPress 後，可以在後台左側的使用者選單中，看到多出一個「簡介欄位」的選項，它可以讓你自行定義給使用者的資料欄位，像是地理位置、生日、喜愛演員、喜愛的顏色等等。這功能可以很方便的透過 UI 介面來管理使用者欄位，而不用寫程式碼。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/05/CleanShot-2020-05-07-at-09.57.13-1024x625.jpg"></p>
<blockquote>
<p>上一次我玩 BuddyPress 大概是三年前的事了，當時還沒有這麼多功能，大部分都要自行客製化，更不用說自訂使用者欄位這功能，如果可以把它內建在 WordPress 裡面就好了～</p>
<p>自訂使用者欄位以前用過這支 —&gt; <a href="https://wordpress.org/plugins/user-meta/">https://wordpress.org/plugins/user-meta/</a>，現在多半統一用 ACF 來處理。</p>
</blockquote>
<h2 id="BuddyPress-外掛介紹"><a href="#BuddyPress-外掛介紹" class="headerlink" title="BuddyPress 外掛介紹"></a><strong>BuddyPress 外掛介紹</strong></h2><p><a href="https://wordpress.org/plugins/buddypress-media/">BuddyPress Media</a><br>讓使用者可以在貼文中上傳圖片、聲音與影片，並且可以自行管理已上傳的內容</p>
<p><a href="https://wordpress.org/plugins/bp-registration-options/">BuddyPress Registration Options</a><br>控管瀏覽權限，新會員必須要管理員審核才可以瀏覽內容</p>
<p><a href="https://apppresser.com/introducing-appcommunity/">AppPresser Add-on</a><br>把 BuddyPress 變成手機應用程式</p>
<p><a href="https://wordpress.org/plugins/badgeos-community-add-on/">BadgeOS Community Add-on</a><br>增加徽章成就功能</p>
<p><a href="https://wordpress.org/plugins/bbpress/">bbPress</a><br>加入論壇功能</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>$global</tag>
        <tag>$wpdb</tag>
        <tag>buddypress</tag>
        <tag>custom plugin</tag>
        <tag>gpl</tag>
        <tag>loop</tag>
      </tags>
  </entry>
  <entry>
    <title>【專案】Flash Stories 的 Story</title>
    <url>/tw/flash-stories-technical/</url>
    <content><![CDATA[<p><a href="https://flashstories.co/"><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-16.23.52.jpg"></a></p>
<blockquote>
<p>這篇文章要獻給台灣棒球幕後的重要推手、也是在國際賽中最關鍵的情蒐小組負責人、更是名球評、名教練 - 那就是～～～楊清瓏教練～～～的侄子 Gary Yang，他是我認識過幹話最多、髒話最多、最愛打電話給我、長得最像洪都拉斯、跟他吃飯從來不用付錢的朋友，也是我看過扛最多責任、最勇往直前、不知害怕為何物的一枚_猛男_！！！</p>
</blockquote>
<p>時間回到半年前，上面開頭提到那位幹話最多的猛男每天都在跟我靠杯：「 <a href="https://amp.dev/about/stories/">AMP Stories</a> 有多屌就有多屌」、「這一定是未來的趨勢」、「做 SEO 的都會搶這個」，腦波弱的我就這樣輕易被他說服，不知不覺下海跳進這個超級大坑，大概就跟馬里亞納海溝一樣深。</p>
<span id="more"></span>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/IMG_0735.jpg"></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/IMG_0736.jpg"></p>
<p>對，跟後來長得完全不一樣XD</p>
<p>專案一開始我們自己用手繪的方式畫了一堆草稿，彼此在討論怎麼來呈現編輯 Amp Stories 的介面，大概有個雛形後，猛男的<a href="https://knife.today/">設計師女友</a> (幸福貌～) 以 Flash 般的速度就生出了第一版的操作介面，讓我一整個熱血噴發，大概花了幾天的時間就把 Layout 用程式把它寫出來，這讓猛男&amp;女友也噴發了 x 2，殊不知背後的險途還在等著我們…</p>
<p><img src="https://i0.wp.com/oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-16.26.49.jpg?fit=1024,284&ssl=1"></p>
<p><img src="https://i0.wp.com/oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-16.27.07.jpg?fit=1024,283&ssl=1"></p>
<p><img src="https://i0.wp.com/oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-16.27.25.jpg?fit=1024,283&ssl=1"></p>
<h2 id="404-小時的汗與淚"><a href="#404-小時的汗與淚" class="headerlink" title="404 小時的汗與淚"></a>404 小時的汗與淚</h2><p>淚是螢幕看太多揉眼睛跟沙子跑進去的…</p>
<p>這 404 個小時的時間，我們從商業模式、定價策略、介面設計到程式開發都一直不停地在討論，意見不合時我習慣寫萬言書來靠杯，字多到連 Notion 的免費方案都用完了</p>
<p>而猛男則是會直接打電話來，每次當他在電話說服我之後，我又會開啟新的萬言書來重新討論在電話中的話題，沒辦法，猛男口才太好，只要一聽到他的聲音就會被他帶有磁性的聲音給收服了。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-12.50.38-1024x528.jpg"></p>
<p>404 小時的心血</p>
<p>這是我有紀錄時間以來，執行最多個小時的專案了，這段期間有苦、有酸、有甜、有屎(眼屎)，最要感謝的當然還是猛男&amp;猛男女友，然後最最最重要的老婆支持，其他要感謝的感謝不完，但期待本篇是言情小說的朋友可以轉台了，因為接下來是技術文時間XD</p>
<hr>
<p>做這個編輯器讓我的前端技術突飛猛進，尤其是 ES6，第一次可以不用靠 jQuery 來做網站，走過一遍原生 JS 的寫法、再搭配 404 個小時的服用就差不多可以熟悉了。</p>
<p>先介紹 Flash Stores 這個產品是在幹嘛的：它是一套線上的排版工具，可以自行插入文字、圖片、影片，新增封面、內頁與頁尾，最後呈現的結果會直接變成 Google AMP Stores 的瀏覽方式，AMP Stories 把它想成是 Instagram 的限時動態，只是它不用開啟 IG App 才能製作。</p>
<p>它還可以 Embed 在網頁之中，參考下方範例：</p>
<p>Google 設計了一堆網頁元件，用這些元件來製作網頁，就會變成 AMP Stories，只是要使用這些元件必須懂得網頁語法，所以我們開發了 Flash Stories 讓不會寫程式的朋友也可以設計自己的 AMP Stories。</p>
<p>技術部分前端使用 ES6，開發整合環境為 Gulp、HTML 語法採用 Pug、CSS 則使用 SCSS 撰寫、CSS 框架使用 UIKit ( I hate Bootstrap )、使用 LocalStorage 儲存使用者編輯的資料、組織檔案用 Module、每個元件用 Class 拆解、用 Fetch API 來跑 Ajax、用 Promise 來計算事件處理順序，</p>
<p>為了做這站買了三本 JS 書：<a href="https://www.books.com.tw/products/0010799123">新一代 JavaScript 程式設計精解</a>、<a href="https://www.books.com.tw/products/0010811645">深入學習 JavaScript</a> <a href="https://www.books.com.tw/products/0010811645">模組化</a><a href="https://www.books.com.tw/products/0010811645">設計</a>、<a href="https://www.books.com.tw/products/0010786463">現代 JavaScript 實務應用</a>，這三本都是超級大推的 JS 好書！</p>
<p>而第三方套件使用 Moveables 來做 Drag and Drop、串接 Unsplash API、圖床使用線上服務 Uploadcare、另外還有編輯器一定會用到的 Font Picker、Color Picker、Gradient Color Picker 等一堆有的沒的 Picker…</p>
<p>後端當然還是用我最愛的 WordPress，手刻會員登入註冊、新增編輯刪除文章、撈首頁文章、分類、第三方套件使用 ACF Pro 紀錄所有 AMP Stories 的欄位、用 WooCommerce 做會員頁，未來可以接入金流做訂閱服務。</p>
<h2 id="前端技術介紹"><a href="#前端技術介紹" class="headerlink" title="前端技術介紹"></a>前端技術介紹</h2><h3 id="一、UIKit"><a href="#一、UIKit" class="headerlink" title="一、UIKit"></a>一、<strong>UIKit</strong></h3><p><a href="https://getuikit.com/">https://getuikit.com</a></p>
<p><a href="https://getuikit.com/"><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-12.59.32.jpg"></a></p>
<p>凡遇到朋友有在寫程式的朋友我必推這套，特別是是有在用 Bootstrap 的，UIKit 是 WordPress Theme 開發商 YooTheme 所開發的框架，裡面整合了超級多爆炸實用的套件，</p>
<p>基本盤的 Slidershow、Slider 不用說，還有 Modal、Off-canvas、Sticky 更是每個專案都會用到的 UI 元件，Flash Stories 的編輯畫面就是用 UIKit 所兜出來的，所以可以很快速的來搭建整個介面的原型，而且互動功能就跟最後的完成品一模一樣，Code 也不用重寫。</p>
<p>UIKit 另一個我非常喜歡的地方就是它的組織方式，每個元件的分類非常清楚，而且 API 文件的說明與範例也十分完整，我已經用它用了兩年多了，還沒有碰過它無法處理的介面，唯一遇到的狀況就是要修改現有元件的狀況，覆寫 Style 跟利用 UIKit API 處理也很方便。</p>
<p>它還有一支 API 沒有出現在文件內但卻非常實用的就是 getComponent()，它會回傳這個元件當下所有的屬性，我就是用這個屬性來判斷 Slider 目前停在第幾則，當初卡了好一陣子才從原始碼查到這一隻 function。</p>
<p>// 第一個參數丟要取得資訊的元件DOM，第二個丟元件名稱<br>UIkit.getComponent(document.querySelector(‘[uk-slider]‘), ‘slider’))</p>
<h3 id="二、Pug-Sass"><a href="#二、Pug-Sass" class="headerlink" title="二、Pug / Sass"></a><strong>二、Pug / Sass</strong></h3><p><a href="https://pugjs.org/api/getting-started.html">https://pugjs.org/api/getting-started.html</a></p>
<p><a href="https://sass-lang.com/">https://sass-lang.com</a></p>
<p>現在叫我寫 HTML 跟 CSS 會要我的命，因為有了 Pug 跟 Sass 可以簡化許多寫法，像是 Pug 讓我寫 HTML 的時候不會再忘記結尾符號、當 Div 太長時要修改縮排會錯亂、不用再打 class=xxx 或是 id=xxx，只要 div.class#id 就好，它還可以寫變數、迴圈、判斷式，可以讓我寫 HTML 像在寫 PHP 一樣可以用很多流程控制來輸出內容。</p>
<p>Pug 最強大的地方我覺得在於可以吃 JSON 格式，先把頁面的文字內容、圖片路徑、連結位址都寫在 JSON 裡面，然後直接用 Pug 的迴圈去輸出，就像 PHP 的 foreach 一樣，就不用重複的內容一直複製貼上，這樣做法的好處是在前端時就有 MVC 的邏輯在裡面，JSON 負責 Model，Pug 負責 V 跟 C。</p>
<p>下面是使用範例：先把資料的部分用 JSON 來定義，再透過 Pug 的 each 來呼叫</p>
<p>{<br>  “section_cover”:[<br>    {<br>      “title”: “未命名的故事”,<br>      “desc”: “故事描述”,<br>      “src”: “assets/img/image.jpg”,<br>      “author_src”: “assets/img/avatar.jpg”,<br>      “author”: “作者名稱”,<br>    }<br>  ],<br>}</p>
<p>div<br>  each i in section_cover<br>    h1=i.title<br>    h2=i.desc<br>    img(src=i.src)<br>    img(src=i.author_src)<br>    p=i.author</p>
<p>Sass 的部分我是習慣用 Scss，UIKit 的原始檔有提供 Scss 版本，所以 Import 要用的元件就好，因此覆寫的方法我也是比照 UIKit 的分類方式，這樣要改特定元件就非常好找。</p>
<p><img src="https://i0.wp.com/oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-13.13.30.jpg?fit=1024,768&ssl=1"></p>
<p>Sass 資料夾結構</p>
<p>至於 Scss 的好處是可以巢狀結構、變數、Mixin、Function 跟一堆進階用法，這部分我預計會再開另外一篇講 Starter Theme 的文章來仔細說明。</p>
<h3 id="三、Gulp"><a href="#三、Gulp" class="headerlink" title="三、Gulp"></a><strong>三、Gulp</strong></h3><p><a href="https://gulpjs.com/">https://gulpjs.com</a></p>
<p><img src="https://i1.wp.com/oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-16.30.10.jpg?fit=1024,726&ssl=1"></p>
<p>Gulp 是一套任務自動化管理工具，它利用 Node.js 來處理 Pug 轉 HTML、Sass 轉 CSS、以及檔案壓縮跟其他一堆爆炸多的功能，它的設定檔清楚易懂、結構分明，現在雖然有很多更新更強大的套件，但我還是依舊選擇它作為前端開發的必備工具。</p>
<p>而這個專案是我第一次使用 JavaScript 的模組功能，雖然新的瀏覽器有支援 Module，但為了相容尚未支援的瀏覽器，我使用了 Browserify Gulp 版套件來處理 Module 的打包。</p>
<p>gulp.task(‘pug’, function () {<br>  return gulp.src(‘./src/**/*.pug’)<br>    .pipe(data(function (file) {<br>      return require(paths.data + ‘data.json’);<br>    }))<br>    .pipe(pug({<br>      pretty: true<br>    }))<br>    .pipe(remember(‘pug’))<br>    .on(‘error’, function (err) {<br>      process.stderr.write(err.message + ‘\n’);<br>      this.emit(‘end’);<br>    })<br>    .pipe(gulp.dest(paths.public));<br>});</p>
<p>gulp.task(‘sass’, function () {<br>  return gulp.src(paths.sass + ‘*.scss’)<br>    .pipe(sass({<br>      includePaths: [paths.sass],<br>      outputStyle: ‘compressed’<br>    }))<br>    .on(‘error’, sass.logError)<br>    .pipe(prefix([‘last 15 versions’, ‘&gt; 1%’, ‘ie 8’, ‘ie 7’], {<br>      cascade: true<br>    }))</p>
<pre><code>.pipe(gulp.dest(paths.css))
.pipe(browserSync.reload(&#123;
  stream: true
&#125;));
</code></pre>
<p>});</p>
<p>gulp.task(‘js’, function () {<br>  return browserify(‘src/js/script.js’)<br>    .transform(babelify.configure({<br>      presets: [“@babel/preset-env”]<br>    }))<br>    .bundle()<br>    .pipe(source(‘script.js’))<br>    .pipe(buffer())<br>    .pipe(streamify(uglify()))<br>    .on(‘error’, function (err) { console.log(err) })<br>    .pipe(gulp.dest(paths.js))<br>    .pipe(browserSync.reload({<br>      stream: true<br>    }));<br>});</p>
<p>上面是我 Gulp 處理關於 Pug、SCSS、 JS 的內容，雖然 Gulp 已經出到 4 了，但因為環境設定實在很麻煩，還能用我就懶得更新了。</p>
<p>有一個新的打包工具我關注一陣子了，名字叫做 <a href="https://parceljs.org/">Parcel</a>，它的編譯速度比 Webpack、Broswerify、Gulp 都還要快上個好幾倍，而且號稱是免設定，什麼 code 都不用寫直接開箱即用，它會根據你寫的語言自動安裝相對應的套件，十分方便。</p>
<p>之前一些自己在玩的小專案我就有用它，真的是飛快，而且不用搞一堆設定檔，但唯一最大的壞處是它的 dist 資料夾無法進行分類，永遠只有一層，所以不管是圖片、CSS、JS 全部都會擠在一堆，實在不 OK。</p>
<p>目前 Parcel 已經出到 2 了，但又有一陣子沒有 release，當初開發者說會把 dist 分資料夾功能寫進去，但目前看起來不知道要等到何年何月了…</p>
<blockquote>
<p>不能分 dist 的問題解決了，有強者大大寫了第三方套件 <a href="https://github.com/VladimirMikulic/parcel-plugin-custom-dist-structure/blob/master/README.md">parcel-plugin-custom-dist-structure</a>，可以完美的照檔案類型來區分資料夾，設定方式也超簡單，最感動的是開發者超級熱心，回報 issue 都秒改好，而且還會提供 Branch 先讓我測，我現在已經把 Parcel 應用在我的正式專案中了，編譯速度一整個大心！！！</p>
</blockquote>
<h3 id="四、Modules"><a href="#四、Modules" class="headerlink" title="四、Modules"></a><strong>四、Modules</strong></h3><p>不管是 Pug、Sass 或是其他任何一種的程式語言，基本上都會有 import 的功能，但在 JavaScript 則是到了 2015 年才有比較方便的 API 可以使用引入功能，使用 Modules 的好處是可以讓每一隻 .js 檔案只專注在特定的功能，才會比一隻超肥的大檔案的來得容易管理。</p>
<p>有了 Modules 就可以引入很多別人已經寫好的小功能，或是把自己常常用到的 Function 模組化，不管是之後要用到還是未來的其他專案，都可以再加以重複利用。</p>
<p><img src="https://i2.wp.com/oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-16.39.44.jpg?fit=1024,651&ssl=1"></p>
<p>我把 JS 分成三大類：component、helper、lib 與 partial。component 是編輯器左邊的各種小工具，helper 放一些會重複使用的類別，lib 是第三方套件，而 partial 則是 Layout 相關的 JS。</p>
<p>所以假設今天我要修改文字小工具的功能，我就進去 component 找到裡面的 Text.js 修改即可，使用 Module 可以很方便的進行管理。</p>
<h3 id="五、Class"><a href="#五、Class" class="headerlink" title="五、Class"></a><strong>五、Class</strong></h3><p>JS 是一門原型 ( Prototype-based ) 導向的程式語言，與其他物件導向的程式語言相比有本質上的不同，原型導向相對彈性、對於宣告資料型別沒有硬性規定，在 ES6 之前的宣告類別的方法就跟宣告函式一樣，所以為了讓廣大的物件導向使用者可以比較好手上 JS 的 OOP，新設計了 Class 這樣的語法糖。</p>
<p>JS Class 用法跟 PHP 的很像，都有 constructor、destructor、屬性、方法、私有成員、靜態方法這些寫法，也可以繼承以及複寫父類別，而用 JS Class 寫出來的東西，只要去看 Gulp 編譯出來的結果就知道，它還是一堆 Function 的組成，只是用 Class 語法來寫清楚多了，在記憶度上面也比傳統的寫法好記得多。</p>
<p>我設計了一個父類別叫做 Component.js，它掌管了所有編輯器元件的共同功能，像是新增、刪除元件、移動、旋轉、放大縮小，然後再根據不同的元件來建立子類別，而這子類別都繼承父類別的所有屬性與方法。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-16.59.06-1024x464.jpg"></p>
<p>像是 Text.js 就是繼承了 Component.js，constructor() 裡面的 super() 則是繼承父類別的 constructor()，這個函式可以讓子類別直接存取到父類別建構式裡面的屬性與方法。</p>
<p>類別還可以應用在一些實用的功能，像是我為了要能把 RGB 轉換成 16 進位的色碼，寫了一隻轉換程式：</p>
<p>export default class {<br>  static transfer(rgb) {<br>    rgb = rgb.match(<br>      /^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i<br>    );<br>    return rgb &amp;&amp; rgb.length === 4<br>      ? “#” +<br>          (“0” + parseInt(rgb[1], 10).toString(16)).slice(-2) +<br>          (“0” + parseInt(rgb[2], 10).toString(16)).slice(-2) +<br>          (“0” + parseInt(rgb[3], 10).toString(16)).slice(-2)<br>      : “”;<br>  }<br>}</p>
<p>export default class 是當整個類別只有一個方法的時候，可以直接匯出使用，而 static 關鍵字則是宣告靜態方法，也就是不用 new 出一個實例就可以直接使用，應用如下：</p>
<p>import rgb2hex from “../helper/Rgb2hex”; // 引入色碼轉換程式<br>someInput.value = rgb2hex(255,255,255) // 值為 #ffffff</p>
<p>其他 Class 的應用還有我把所有的變數也拉出一個類別，方便管理</p>
<p>/**<br> * 定義所有的變數<br> */</p>
<p>export class Variable {<br>  constructor(){<br>    /**<br>     * 全站相關變數<br>     */<br>    this.btnSave = document.getElementById(‘btnSave’)<br>    this.btnShare = document.getElementById(‘btnShare’)<br>    this.btnEmbed = document.getElementById(‘btnEmbed’)<br>    this.shareUrl = document.getElementById(‘shareUrl’)<br>    this.embedCode = document.getElementById(‘embedCode’)<br>    this.btnCopyShareUrl = document.getElementById(‘btnCopyShareUrl’)<br>    this.btnCopyEmbedCode = document.getElementById(‘btnCopyEmbedCode’)<br>    this.postStatus = document.getElementById(‘postStatus’)<br>    this.templateUrl = insert_params.templateurl;<br>  }<br>}</p>
<p>// 匯入<br>import { Variable } from “./lib/Variable”;<br>const vars = new Variable()<br>vars.btnSave.addEventListener(‘click’,()=&gt;{…}) // 使用 vars.變數名稱即可使用</p>
<h3 id="六、Storage"><a href="#六、Storage" class="headerlink" title="六、Storage"></a><strong>六、Storage</strong></h3><p>ES6 提供了豐富的本地儲存 API，也就是把資料暫時儲存在使用者的瀏覽器內，這樣的本地儲存技術又分為 LocalStorage、SessionStorage、IndexDB，這個專案我使用的 LocalStorage，原因是因為我需要可以長久保存使用者編輯的內容，又可以直接將 JSON 序列化傳到 WordPress 的 ACF 欄位來進行儲存。</p>
<p>我另外寫了一隻 Class 來設計 Storage 的新增與取得，當使用者進入之前編輯過的文章時，會先從伺服器讀取之前上傳的 JSON，讀取到後寫入 Storage，再從 Storage 去拆解出來在每個頁面上所有元件的位置、尺寸、內容。</p>
<p>如果伺服器上沒有資料也沒關係，因為存檔都會存在本機端，即使關掉瀏覽器再重新打開，都還是可以看到前次的編輯紀錄。</p>
<p>這對我來說真的是一個超級大工程，如果沒有用 OOP 的方式把每個元件拆開，要一次處理所有元件的資料，真的是頭會爆炸，更不用說這專案還是只有我一人開發，如果還有其他工程師情況一定更複雜。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-17.12.47-1024x459.jpg"></p>
<p>有興趣的朋友可以打開開發者工具的 Storage 找到 Local Storage 頁籤看看我把什麼東西塞進去XD</p>
<p>export class Storage {<br>  constructor(app,load){<br>    this.app = app;<br>    this.load = load;<br>    this.storage = localStorage; // optional sessionStorage<br>    this.data = JSON.parse(this.storage[this.app]  ‘{}’);<br>  }<br>  // Get all data form storage<br>  getItem(){<br>    return this.data;<br>  }<br>  clearItem(){<br>    this.storage.clear();<br>  }<br>  // Add new data<br>  setItem(key, value){<br>    this.data[key] = value;<br>  }<br>  // Save new data to Storage<br>  save(){<br>    this.storage[this.app] = JSON.stringify(this.data);<br>  }<br>  loading() {<br>    this.storage[this.app] = this.load;<br>  }<br>}</p>
<p>這隻是我專門處理 Storage 的類別，當宣告 Storage 物件時，第一個參數拿來當 Local Storage 的主 key，當使用 setItem() 把資料存進 value 後，執行 save() 才會寫進 Local Storage，這樣做的好處是可以避免我的 key 跟其他網站的 key 打架而造成資料被覆寫。</p>
<p>實際運作方法如下：</p>
<p>import { Storage } from “./lib/Storage”;  // 匯入 Storage 類別</p>
<p>// insert_params.storage 是 wp-admin ajax 所定義的參數，它會讀取已經存在 DB 的資料<br>var fs_storage = new Storage(“flashstories”, insert_params.storage);</p>
<p>// 當 DB 有資料的話先清空 local storage 再重新寫入<br>if (insert_params.storage) { fs_storage.clearItem(); fs_storage.loading() }</p>
<p>// 寫入各單元的設定內容，第二個參數的 getData() 定義在相對應的類別之中<br>fs_storage.setItem(‘section_cover’, cover.getData());<br>fs_storage.setItem(‘section_page’, Pages.getData());<br>fs_storage.setItem(‘section_page_transition’, Pages.getDataTransition());<br>fs_storage.setItem(‘section_bookend_share’, bookend.getShareData());<br>fs_storage.setItem(‘section_bookend_desc’, bookend.getBrandDesc());<br>fs_storage.setItem(‘section_bookend_link’, bookend.getLinkData());</p>
<p>// 按下儲存後把 value 序列化存入 storage<br>fs_storage.save();</p>
<h3 id="七、Promise"><a href="#七、Promise" class="headerlink" title="七、Promise"></a><strong>七、Promise</strong></h3><p>JS 的 Promise 很好的解決了先跑 A、A 完成後再跑 B 的非同步行為 ( Asynchronous )，正常情況下程式就是一行一行跑，不會管你第一行要做的事情有沒有完成，都是同步的 ( Synchronou )，有了 Promise 可以讓我確保 A 任務真的有確實執行完成後才做其他事。</p>
<p>這專案我有用 Promise 的部分還不少，大部分都是為了介面操作上的體驗，像是確保新增頁面完成後才加入相對應的內容，不然頁面的 HTML 還沒跑完就插入文字進去就會噴錯，或是確定檔案上傳完成後才出現設定項目，其他的應用還有在刪除頁面時回傳目前所在頁面 Index，有了這 Index 才可以讓 Slider 停留在正確的頁面上。</p>
<p>以下範例為當頁面新增完成之後，讓 addNewPage method 回傳正確的總頁數，再交給其他程式去做相對應的計算與判斷。</p>
<p>let addNewPage = ()=&gt;{<br>  this.num++;<br>  return new Promise((resolve,reject)=&gt;{<br>    // 頁面本體<br>    var li = document.createElement(‘li’);<br>    var temp = `略`;<br>    li.innerHTML = temp;<br>    if(load){<br>      li.setAttribute(‘data-page’, `page${id}`)<br>    } else {<br>      li.setAttribute(‘data-page’, `page${this.pageId}`)<br>    }<br>    this.vars.slideshowPage.querySelector(‘.uk-slider-items’).appendChild(li);<br>    var index = this.vars.slideshowPage.querySelectorAll(‘.uk-slider-items li’).length;<br>    resolve(index);   // 在 Promise 成功時把 slide item 的個數丟出來<br>  })<br>}</p>
<h3 id="八、Fetch-API"><a href="#八、Fetch-API" class="headerlink" title="八、Fetch API"></a><strong>八、Fetch API</strong></h3><p>如果不靠 jQuery 要寫 Ajax 很麻煩，因為我很討厭用 XMLHttpRequest，自從有了 Fetch API 後人生就變彩色的了～不得不說這一支的 API 介面設計得真的很好，非常易用。</p>
<p>按下右上角儲存按鈕後，會先把資料存到 Storage，然後把整堆序列化後丟到 WordPress 再去 decode，因為 Fetch API 是用 Promise，所以可以很好掌握當資料完成時要做哪些事，透過 .then 的形式很直覺的就知道接下來要做什麼，有了這一支是讓我可以捨棄 jQuery 的最大原因～</p>
<p>以下是儲存按鈕的簡化版範例：</p>
<p>vars.btnSave.addEventListener(‘click’,e=&gt;{</p>
<p>  let params = new URLSearchParams();<br>  params.append(“action”, “insert”);<br>  params.append(“nonce”,insert_params.nonce)<br>  params.append(“is_new_post”, getIsNewPost());<br>  params.append(“storage”, JSON.stringify(fs_storage.getItem(‘flashstories’)));<br>  params.append(“post_title”, vars.inputStoryTitle1.value);<br>  params.append(“post_status”, postStatus.querySelector(‘button[data-option]‘).dataset.option);<br>  params.append(“post_category”, document.querySelector(‘input[name=”postCategory”]:checked’).value );</p>
<p>  fetch(insert_params.ajaxurl, {<br>    method: ‘POST’,<br>    credentials: “same-origin”,<br>    headers: {<br>      ‘Content-Type’: ‘application/x-www-form-urlencoded; charset=utf-8’<br>    },<br>    body: params<br>  }).then((response) =&gt; {<br>    return response.json();<br>  }).then((jsonData) =&gt; {<br>    that.classList.remove(‘loading’);<br>    that.classList.add(‘success’);<br>    that.querySelector(‘.text’).textContent = “儲存成功！”<br>    console.log(jsonData.output);<br>  }).catch((err) =&gt; {<br>    alert(“因網路問題儲存失敗，請稍候再試！”)<br>    // console.log(err)<br>    that.classList.remove(‘loading’);<br>    that.querySelector(‘.text’).textContent = “儲存”<br>  })<br>})</p>
<p>需要注意的地方是要傳給後端的 params 變數，之前寫的時候一直傳不過去，後來爬到了一位日本工程師的文章，才曉得原來要用 URLSearchParams 類別來處理，宣告物件後，再使用 append 的方式來塞入要傳的參數名與值，再把 params 指定給 body。</p>
<p>第一個 then 代表成功回傳，第二個 then 則是確認接收到回傳的 JSON 資料後來做一些處理，catch 則是發生錯誤時的處理，Fetch API 簡單清爽一目瞭然！</p>
<h3 id="九、Uploadcare"><a href="#九、Uploadcare" class="headerlink" title="九、Uploadcare"></a><strong>九、Uploadcare</strong></h3><p><a href="https://uploadcare.com/">https://uploadcare.com</a></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-17.45.06-1024x634.jpg"></p>
<p>這是一間專門做圖床主機的服務，但它比一般圖床主機做得更多，差別在於它提供了 JavaScript API 來設計檔案上傳介面，還整合了其他第三方儲存空間，讓使用者不只可以透過本機上傳圖片，還可以從 Facebook、Dropbox、Google Drive 等一堆第三方服務來上傳照片。</p>
<p>此外它還整合了 CDN、圖片裁切的功能，只要網址的參數修改一下，就可以取得不同尺寸、甚至是帶有濾鏡效果的圖片，非常的強大，每個月的月費也還算在可接受範圍。</p>
<p>當初在評估圖床的時候也找到很多類似 Uploadcare 的服務，其中更找到有 Open Source 的上傳介面也是可以整合第三方服務的，但考量到自己去扛圖床機的成本，算一算初期使用 Uploadcare 還是比較划算的。</p>
<!-- 在 head 加入這些 -->
<script>
  UPLOADCARE\_PUBLIC\_KEY = 'Your Key';
  UPLOADCARE\_LOCALE = 'zhTW';
  UPLOADCARE\_EFFECTS = 'crop,rotate,mirror,flip,enhance,sharp,blur,grayscale,invert';
  UPLOADCARE\_PREVIEW\_STEP = true;
  UPLOADCARE\_CLEARABLE = true;
</script>

<!-- 上傳按鈕 -->
<input type="hidden" role="uploader" data-maxsize="4194304">

<!-- 套用 uploadcare -->
<script>
uploadcare.Widget('\[role=uploader\]')
</script>

<p>點擊上傳按鈕就會出現上傳視窗：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-17.49.57-1024x670.jpg"></p>
<h3 id="十、Unsplash-API"><a href="#十、Unsplash-API" class="headerlink" title="十、Unsplash API"></a><strong>十、Unsplash API</strong></h3><p><a href="https://unsplash.com/developers">https://unsplash.com/developers</a></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-17.55.42-1024x509.jpg"></p>
<p>全世界最大的免費圖庫，為了要讓第一次使用 Flash Stories 的朋友能更方便上手，我們就決定要整合免費圖庫來給大家用，對於只是想用文字創作的朋友來說，就不用再費心自己去準備圖片，直接使用圖庫即可。</p>
<p>Unsplash API 還滿好接的，比較龜毛的地方是如果沒有通過線上申請，Demo 版只能每小時請求 50 個 Request，但現在還沒到這個量，就超過再說了。</p>
<p>// 先建立 Unsplash 物件<br>const unsplash = new Unsplash({<br>  applicationId: “Your APP ID”,<br>  secret: “Your APP secret”<br>});</p>
<p>// 使用關鍵字搜尋圖片<br>vars.inputUnsplashSearch.addEventListener(‘keyup’, e =&gt; {<br>  setTimeout(() =&gt; {<br>    unsplash.search.photos(keyword, page)<br>      .then(toJson)<br>      .then(json =&gt; {   // 把搜尋到的圖片加入到清單中<br>        vars.loadingUnsplash.classList.remove(“active”);<br>        vars.wrapUnsplashList.innerHTML = “”;<br>        var result = json[‘results’];<br>        loadUnsplashImage(result);<br>      });<br>  }, 2000);  // 暫停輸入兩秒後才會開始搜尋<br>})</p>
<h3 id="十一、Moveables"><a href="#十一、Moveables" class="headerlink" title="十一、Moveables"></a><strong>十一、Moveables</strong></h3><p><a href="https://daybrush.com/moveable/">https://daybrush.com/moveable/</a></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-18.01.17.jpg"></p>
<p>沒有這個套件憑我一人之力是沒有辦法開發出 Drag and Drop 系統的，這套超級強大，支援超多功能，API 超豐富，而且更新更得很勤，頁面上新增的小工具我都是用它來進行控制。</p>
<p>每個動作都會產生相對應的 css style，所以我就把這些 css 寫入到 Storage 中，但雖然有了這工具還是卡關卡超久，主要在於當新增多個頁面、小工具的情況下，沒辦法把 Moveable 套用到新增的元件上。</p>
<p>這一關碰壁碰了超級無敵久，因為有新增、刪除等這些變數在，每當頁面或是元件數量有變動時，之前用累加的方式來判斷就會 GG，最後換條路走，不要用元件現有的 id 名稱來累加，而是先去判斷頁面上有多少元件，再以元件的總數來回指定元件 ID。</p>
<h3 id="十二、Pickers"><a href="#十二、Pickers" class="headerlink" title="十二、Pickers"></a><strong>十二、Pickers</strong></h3><p><a href="https://font-picker.samuelmeuli.com/">https://font-picker.samuelmeuli.com</a></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-18.11.10.jpg"></p>
<p>文字小工具的字型選擇我用 Font-picker，它主要是撈 Google Font 的字型，但不知道為何，照它的說明加入 Noto Serif TC 都失敗，所以只能用一些 Hack 的方式去把它加入。</p>
<p>// 取得選中的字型<br>Array.from(widgetText.widgetTextFamily.querySelectorAll(‘.font-list-item button’)).forEach(element =&gt; {<br>  element.addEventListener(‘mouseover’, e =&gt; {<br>    let family = window.getComputedStyle(e.currentTarget, null).getPropertyValue(‘font-family’);<br>    if (family === ‘\“Noto Serif\“‘) {    // 手動塞中文 serif 字型<br>      widgetText.syncFamily(config, ‘Noto Serif TC’)<br>      document.querySelector(‘.dropdown-font-family’).style.fontFamily = ‘Noto Serif TC’;<br>    } else {<br>      widgetText.syncFamily(config, family)<br>      document.querySelector(‘.dropdown-font-family’).style.fontFamily = family;<br>    }<br>  })<br>});</p>
<p><a href="https://simonwep.github.io/pickr/">https://simonwep.github.io/pickr/</a></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-18.13.49.jpg"></p>
<p>顏色選擇器我用了 Pickr，這是一套介面非常漂亮又實用的顏色選擇套件，API 也很豐富，但可惜沒有包含漸層顏色的設定，但同作者改寫了一套叫做 GPickr，完美搞定漸層顏色選擇。</p>
<p><a href="https://simonwep.github.io/gpickr/">https://simonwep.github.io/gpickr/</a></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-18.17.21.jpg"></p>
<p>這專案前端的部分花了我大半的時間，好不容易搞定後以為後端會容易得多，想不到還是老話一句：細節藏在魔鬼裡…</p>
<h2 id="後端-WordPress-技術"><a href="#後端-WordPress-技術" class="headerlink" title="後端 WordPress 技術"></a>後端 WordPress 技術</h2><h3 id="一、會員註冊登入"><a href="#一、會員註冊登入" class="headerlink" title="一、會員註冊登入"></a><strong>一、會員註冊登入</strong></h3><p>WordPress 本身的會員系統就超強大，角色權限內建的就超夠用，API 拉一拉很容易就可以完成會員登入系統。會員註冊登入在以前的很多專案都有用過，這次為了讓使用者體驗好一些，就還是找了範例改寫了 Ajax 的版本，只是還是繼續用 jQuery 就是了XD</p>
<p>註冊登入 JS 部分</p>
<p>jQuery(document).ready(function ($) {</p>
<p>  var redirectURL = window.location.href;</p>
<p>  $(“.phone-format”).keypress(function (e) {<br>    if (e.which != 8 &amp;&amp; e.which != 0 &amp;&amp; (e.which &lt; 48  e.which &gt; 57)) {<br>      return false;<br>    }<br>    var curchr = this.value.length;<br>    var curval = $(this).val();<br>    if (curchr == 4) {<br>      $(this).val(curval + “-“);<br>    } else if (curchr == 8) {<br>      $(this).val(curval + “-“);<br>    } else if (curchr == 12) {<br>      $(this).attr(‘maxlength’, ‘12’);<br>    }<br>  });</p>
<p>$(‘form#login, form#register’).on(‘submit’, function (e) {<br>    e.preventDefault();<br>ctrl = $(this);<br>$(‘.uk-alert’).fadeOut();<br>$(‘#btnLogin’).text(‘登入中…’);<br>$(‘#btnRegister’).text(‘註冊中…’);</p>
<pre><code>if ($(this).attr(&#39;id&#39;) == &#39;register&#39;) &#123;
  document.getElementById(&#39;messageSignupError&#39;).style.display = &quot;none&quot;;
  action = &#39;ajaxregister&#39;;
  username = $(&#39;#signonname&#39;).val();
  password = $(&#39;#signonpassword&#39;).val();
  phone = $(&#39;#phone&#39;).val();
  email = $(&#39;#email&#39;).val();
  security = $(&#39;#signonsecurity&#39;).val();
  $.ajax(&#123;
    type: &#39;POST&#39;,
    dataType: &#39;json&#39;,
    url: ajax\_auth\_object.ajaxurl,
    data: &#123;
      &#39;action&#39;: action,
      &#39;username&#39;: username,
      &#39;password&#39;: password,
      &#39;email&#39;: email,
      &#39;phone&#39;: phone,
      &#39;security&#39;: security
    &#125;,
    success: function (data) &#123;
      if (data.loggedin == true) &#123;
        document.location.href = redirectURL;
        $(&quot;#btnLogin&quot;).text(&quot;轉頁中...&quot;);
      &#125; else &#123;
        ctrl.prev().fadeIn(&quot;fast&quot;);
        document.getElementById(&#39;messageSignupError&#39;).textContent = data.message;
        document.getElementById(&#39;messageSignupError&#39;).style.display = &quot;block&quot;;
        $(&quot;#btnRegister&quot;).text(&quot;立即註冊&quot;);
      &#125;
    &#125;
  &#125;);
&#125; else &#123;
  action = &#39;ajaxlogin&#39;;
  username = $(&#39;form#login #username&#39;).val();
  password = $(&#39;form#login #password&#39;).val();
  security = $(&#39;form#login #security&#39;).val();
  $.ajax(&#123;
    type: &#39;POST&#39;,
    dataType: &#39;json&#39;,
    url: ajax\_auth\_object.ajaxurl,
    data: &#123;
      &#39;action&#39;: action,
      &#39;username&#39;: username,
      &#39;password&#39;: password,
      &#39;security&#39;: security
    &#125;,
    success: function (data) &#123;
      if (data.loggedin == true) &#123;
        document.location.href = redirectURL;
        $(&quot;#btnLogin&quot;).text(&quot;轉頁中...&quot;);
      &#125; else &#123;
        ctrl.prev().fadeIn(&quot;fast&quot;);
        document.getElementById(&#39;messageLoginError&#39;).textContent = data.message;
        document.getElementById(&#39;messageLoginError&#39;).style.display = &quot;block&quot;;
        $(&quot;#btnLogin&quot;).text(&quot;登入&quot;);
      &#125;
    &#125;
  &#125;);
&#125;
</code></pre>
<p>});<br>});</p>
<p>PHP 部分</p>
<?php

function ajax\_auth\_init(){ 
  // 註冊 js
  wp\_register\_script('ajax-auth-script', get\_template\_directory\_uri() . '/assets/js/ajax-login.js', array('jquery'), null,true ); 
  wp\_enqueue\_script('ajax-auth-script');

  // 一些要傳給 js 的 php 變數
  wp\_localize\_script( 'ajax-auth-script', 'ajax\_auth\_object', array( 
      'ajaxurl' => admin\_url( 'admin-ajax.php' ),
      'redirecturl' => wp\_get\_referer(),
      'loadingmessage' => \_\_('登入中...')
  ));
  add\_action( 'wp\_ajax\_nopriv\_ajaxlogin', 'ajax\_login' );
  add\_action( 'wp\_ajax\_nopriv\_ajaxregister', 'ajax\_register' );
}

// 只有在未登入狀態才引入登入註冊 js
if (!is\_user\_logged\_in()) {
  add\_action('init', 'ajax\_auth\_init');
}
  
function ajax\_login(){
  // nonce 驗證
  check\_ajax\_referer( 'ajax-login-nonce', 'security' );
  auth\_user\_login($\_POST\['username'\], $\_POST\['password'\], '登入成功！'); 
  die();
}

function ajax\_register(){
  // nonce 驗證
  check\_ajax\_referer( 'ajax-register-nonce', 'security' );
  $info = array();
  $info\['user\_nicename'\] = $info\['first\_name'\] = $info\['user\_login'\] = sanitize\_user($\_POST\['username'\]) ;
  $info\['nickname'\] = $info\['display\_name'\] = sanitize\_text\_field($\_POST\['nickname'\]) ;
  $info\['user\_pass'\] = sanitize\_text\_field($\_POST\['password'\]);
  $info\['user\_email'\] = sanitize\_email( $\_POST\['email'\]);
  
  // Register the user
  $user\_register = wp\_insert\_user( $info );
  if ( is\_wp\_error($user\_register) ){ 
      $error  = $user\_register->get\_error\_codes() ;
      if(in\_array('empty\_user\_login', $error))
        echo json\_encode(array('loggedin'=>false, 'message'=>\_\_($user\_register->get\_error\_message('empty\_user\_login'))));
      elseif(in\_array('existing\_user\_login',$error))
        echo json\_encode(array('loggedin'=>false, 'message'=>\_\_('該帳號已被註冊')));
      elseif(in\_array('existing\_user\_email',$error))
        echo json\_encode(array('loggedin'=>false, 'message'=>\_\_('該郵件已被註冊')));
  } else {
    // 發送註冊成功信
    $headers = 'From:  FlashStories<service@flashstories.co>' . "rn";
    $message = '<div>通知信內容</div>';
    wp\_mail( $info\['user\_email'\],'恭喜你完成申請 Flash Stories 會員資格！', $message,$headers );
    auth\_user\_login($info\['user\_login'\], $info\['user\_pass'\], '註冊完成！');
    update\_field('user\_phone',$\_POST\['phone'\],'user\_'.$user\_register);    
    update\_field('user\_status','paid','user\_'.$user\_register);    
  }
  die();
}

function auth\_user\_login($user\_login, $password, $login){
  $info = array();
  $info\['user\_login'\] = $user\_login;
  $info\['user\_password'\] = $password;
  $info\['remember'\] = true;
  $user\_signon = wp\_signon( $info, false );
  if ( is\_wp\_error($user\_signon) ){
    echo json\_encode(array('loggedin'=>false, 'message'=>\_\_('帳密有誤！請重新輸入')));
  } else {
    wp\_set\_current\_user($user\_signon->ID); 
    echo json\_encode(array('loggedin'=>true, 'message'=>\_\_($login.' 轉址中...')));
  }
  die();
}

### **二、前台管理文章**

因為每一篇 Story 我是用 Post 來做的，新增文章時直接用 wp\_insert\_post() 搭配 Ajax 來解決，而這邊我是搭配 Fetch API 來做新增，前端的部分在上文已有提及，後端的邏輯與登入註冊的寫法大同小異。

刪除文章的部分使用 jQuery Ajax 搭配 wp\_delete\_post()，因為這段 JS 是直接寫在 PHP 裡面，既然都有 include jQuery 就不用假掰的再用 Fetch API 來處理，不然環境問題好難搞。

<?php

function delete\_scripts() {
 
global $wp\_query; 

wp\_register\_script( 'delete\_post', '', '',null );
  wp\_localize\_script( 'delete\_post', 'delete\_params', array(
    'ajaxurl' => site\_url(). '/wp-admin/admin-ajax.php'
));
  wp\_enqueue\_script( 'delete\_post' );
 
}
 
add\_action( 'wp\_enqueue\_scripts', 'delete\_scripts' );


function delete\_ajax\_handler(){
$nonce = $\_POST\['security'\];
if (!wp\_verify\_nonce($nonce, 'ajax-delete-nonce')) {
wp\_send\_json\_error(array('code' => 500, 'data' => '', 'msg' => '錯誤的請求'));
}

  $post\_id = $\_POST\['postId'\];

  wp\_delete\_post($post\_id, true);
  
echo json\_encode(
    array(
'msg'=>"刪除成功！",
    )
  );
die;
}
 
add\_action('wp\_ajax\_deletepost', 'delete\_ajax\_handler');

$(function () {
  $('.btnDelete').on('click', function () {
    var r = confirm('確定要刪除？');
    if (r) {
      action = 'deletepost';
      postid = $(this).attr('data-id');
      security = $('#security').val();
      $.ajax({
        url: delete\_params.ajaxurl,
        type: 'POST',
        dataType: 'json',
        data: {
          'action': action,
          'postId': postid,
          'security': security
        },
        success: function (data) {
          alert(data.msg);
          window.location.reload();
        }
      });
    }
  })
})

### **三、WooCommerce 新增帳號頁面內容**

因為預設的 WooCommerce 沒有頁面可以拿來做文章列表、以及作者資訊頁的設定，所以使用 WC API 來新增這兩個節點，這樣就可以在 my-account 的網址下加入新的頁面。

![](https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-18.44.42-1024x589.jpg)

![](https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-19-at-20.10.20-1024x757.jpg)

此外還移除的不需要的頁面以及修改頁面名稱，主要是用 woocommerce\_account\_menu\_items 這個 filter 來修改。

// 加入新的會員帳號頁面
function add\_endpoint() {
  add\_rewrite\_endpoint('my-brand', EP\_ROOT  EP\_PAGES);
  add\_rewrite\_endpoint('my-stories', EP\_ROOT  EP\_PAGES);
  add\_rewrite\_endpoint('price', EP\_ROOT  EP\_PAGES);
}
add\_action( 'init', 'add\_endpoint' );

function add\_query\_vars($vars) {
  $vars\[\] = 'my-brand';
  $vars\[\] = 'my-stories';
  $vars\[\] = 'price';
  return $vars;
}
add\_filter('query\_vars', 'add\_query\_vars', 0);

function add\_link\_my\_account($items) {
  $items\['my-brand'\] = '品牌資訊設定';
  $items\['my-stories'\] = '我的影像故事';
  $items\['price'\] = '更改方案';
  return $items;
}
add\_filter('woocommerce\_account\_menu\_items', 'add\_link\_my\_account');

// 移除不需要的選單
function remove\_address\_my\_account($items) {
  unset($items\['edit-address'\]);
  unset($items\['downloads'\]);
  return $items;
}
add\_filter('woocommerce\_account\_menu\_items', 'remove\_address\_my\_account', 999);

// 修改選單名稱
function rename\_address\_my\_account($items) {
  $items\['orders'\] = '付款紀錄';
  $items\['edit-account'\] = '帳戶設定';
  return $items;
}
add\_filter('woocommerce\_account\_menu\_items', 'rename\_address\_my\_account', 999);

### **四、拆解 JSON 並寫入 ACF 欄位中**

這是後端我覺得最難處理的部分，因為欄位多再加上迴圈有兩層，ACF 我是用 Repeat 欄位當作頁面，然後每個小工具也是 Repeat，因為一個頁面可以有多個小工具，然後小工具裡面又有一堆屬性，像是尺寸、顏色、圖片路徑、座標等等。

按下儲存後我是先把 Slider 裡面所有的 HTML 用字串塞進 LocalStorage 裡面，然後在 ACF 開一個欄位存這些字串，接下來用正規表示法把字串中特定的 HTML div 先抓出來，每個 div 都是一個小工具，帶有屬性 data-config。

在這之前本來很不熟正規法，這樣玩過一次後就應該再也不會忘了，Mac 有一個很棒的工具叫做 [Expressions](https://www.apptorium.com/expressions)，隨便亂湊一通就能找到正確的寫法，大推！！！

用 preg\_match\_all 找出小工具的 div 後，再使用 PHP DOMDocument 去找小工具裡面帶有 style 屬性的 HTML 標籤，像文字小工具的標籤是 <p>，而 style 都是在 <p> 上面，所以必須要先找到它。

// 正規法篩選出文字小工具的 html
$reg\_text = '/<div(\\s)class="uk-.\*"(\\s)style=".\*"(\\s)href=".\*"(\\s)uk-toggle=""(\\s)data-config="pageText(\\d){0,}"(\\s)data-frame="frame(\\d){0,}"><p(\\s)style=".\*"(\\s)data-html=".\*">.\*<\\/p>/';
preg\_match\_all($reg\_text, $page\_content\[$i\], $page\_text);

// 找出 div 跟 p
$dom\_text = new DOMDocument();
$dom\_text->loadHTML(mb\_convert\_encoding($page\_text\[0\]\[$j\], 'HTML-ENTITIES', 'UTF-8'));
$div = $dom\_text->getElementsByTagName('div');
$p = $dom\_text->getElementsByTagName('p');

// 把 p 裡面的 style 轉成陣列
$page\_text\_p\_decode = style\_json($node->getAttribute('style'));

再來是要把 <p> 之中 style="" 裡面所有的 css 屬性抓出來，然後以分號去做陣列化，然後再用正規法去整理比較麻煩的 CSS 屬性，像是 font-family 字型名稱中間會有空格、transform rotate 屬性會有 deg 的字眼要移掉，都整理完後重新 json\_encode，最後再 return json\_decode 的結果。

// style\_json
function style\_json($css){
  $aa = explode("; ", $css);
  for($i=0; $i < count($aa ); $i++){
    $key\_value = explode(': ', $aa \[$i\]);
    $key\_value\[1\] = str\_replace("/font-family:\\s\\"\\"/","",$key\_value\[1\]);
    $key\_value\[1\] = preg\_replace('/rotate\\(g\\);/','',$key\_value\[1\]);
    $key\_value\[1\] = str\_replace("'",'',$key\_value\[1\]);
    $res\_array\[preg\_replace('/\\s-/','',$key\_value\[0\])\] = $key\_value\[1\];
  }
  $css\_encode = json\_encode($res\_array);
  return json\_decode($css\_encode);
}

然後每個小工具都經過上面的處理之後，再用 ACF 的 update\_field()&update\_sub\_field() 去做資料寫入的工作，除了儲存小工具的屬性外，其他還有頁尾設定、側欄選單、社群分享等其他設定也一併寫入，這才順利的把所有資料寫進資料庫。

### **五、AMP Stories**

資料寫入都搞定後，剩下的就是顯示 AMP Stories 的內容了，它的語法不難，因為 Google 用 Web Component 技術把所有元件都封裝完成了，只要根據官方文件引入相對應的 JS，就可以使用內建的標籤來呈現 AMP Stories 的頁面形式。

因為我是用文章當作 AMP Stories 的內頁，所以模板直接使用 Single.php，把該拿的資料拿到後再去根據資料類型去判斷要輸出的 amp tag，比較麻煩部分是在 Bookend 這一塊。

Bookend 包含了社群分享連結、自訂文字、自訂連結等內容，而它只能透過 JSON 格式來寫入，所以只要少一個逗號就會噴錯導致整個 Bookend 無法顯示。

但使用者不一定每個欄位都會填寫，然後有些欄位有因果關係，必須要有 A 才會有 B，這讓我在使用 PHP 來組成 JSON 的過程中非常棘手，後來睡了一覺後驚覺自己怎麼這麼傻，PHP 明明有 json\_encode 可以用，

先把 PHP Array 組好、判斷寫好後，再去輸出 encode 的結果，這樣處理省事多了，但我覺得根本解還是希望 Google 一樣可以把 Bookend 封裝成獨立的元件而不要用 JSON，就不用處理一堆逗號的問題了。

<?php
  $bookend\_link\_arr = \[\];
  if(get\_field('bookend\_link')){
    foreach (get\_field('bookend\_link') as $item) {
      $bookend\_link\_obj = \[\];
      $bookend\_link\_obj\['type'\] = $item\['bookend\_link\_type'\];
      $bookend\_link\_obj\['title'\] = $item\['bookend\_link\_h'\];
      $bookend\_link\_obj\['url'\] = $item\['bookend\_link\_url'\];
      $bookend\_link\_obj\['image'\] = $item\['bookend\_link\_src'\];
      $bookend\_link\_arr\[\] = $bookend\_link\_obj;
    }
    $bookend\_link\_arr = str\_replace('\[','',json\_encode($bookend\_link\_arr,JSON\_UNESCAPED\_UNICODE));
    $bookend\_link\_arr = str\_replace('\]','',$bookend\_link\_arr);
  }

  $bookend = array(
    'bookendVersion' => 'v1.0',
    'shareProviders' => get\_field('bookend\_share'),
    'components' => array(
      $bookend\_link\_arr,
      array(
        "type" => "cta-link",
        "links" => array(
          array(
            "text" => (get\_field('bookend\_button\_text'))?get\_field('bookend\_button\_text'):"了解 Flash Stories",
            "url" => (get\_field('bookend\_button\_href'))?get\_field('bookend\_button\_href'):"https://flashstories.co"
          )
        )
      )
    )
  );
?>
<p>// HTML<br><amp-story-bookend layout="nodisplay"><br>  <script type="application/json"><br>    <?php echo str\_replace(',",',',',str\_replace('}",','},',str\_replace('},"','},',str\_replace('\\"','"',json\_encode( $bookend,JSON\_UNESCAPED\_UNICODE ))))); ?><br>  </script><br></amp-story-bookend></p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>努力了這麼久，當然還是希望 AMP Stories 哪天突然大爆發，然後網站爆量要瘋狂加機器(幻想中)，但這一路走來的過程真的受到太多人幫忙，也因此學到了超多，很多都是第一次實作所以也踩了一堆雷，但只要還沒有被炸得粉身碎骨就一定會變得更強！</p>
<p>本來沒打算寫下紀錄的，但如果不好好看重自己已經完成的成就，很容易就會染上「<a href="https://www.justgirl.me/2020/03/blog-post.html">冒牌者症候群</a>」。在寫這篇的同時看著之前寫的程式碼，覺得好陌生，邊梳理的過程中才慢慢回想起自己的思考方式以及解決問題的邏輯，甚至還可以看到自己的盲點。</p>
<p>現在覺得可以這樣退後一步重新省視自己寫的程式是非常重要的，不僅能加強自己的自信，還能分享自身的經驗來得到更多的交流，所以之後只要是客戶狀況允許，我都會把每個專案的心得&amp;程式紀錄下來，就當作是一種結案的慶祝儀式吧XD</p>
<p>ps. 關於用 WordPress 製作 Web App 有太多東西可以研究了，現在每天以龜速在整理<a href="https://oberonlai.blog/%E3%80%90-%E6%9B%B8%E6%91%98-%E3%80%91building-web-apps-with-wordpress/">這本書</a>的讀書筆記，有興趣的朋友必讀！對於 Flash Stories 有任何想法的話都可以在下面留言喔！</p>
]]></content>
      <categories>
        <category>WordPress</category>
        <category>專案</category>
        <category>商業模式</category>
      </categories>
  </entry>
  <entry>
    <title>【 心得 】企劃人員如何撰寫有效的軟體需求規格文件</title>
    <url>/tw/how-to-write-the-effective-specification/</url>
    <content><![CDATA[<p>事實上在成為全職的 WordPress 工程師之前，我花了很多時間在做網站企劃，不管是自己接案還是在公司任職，企劃都是我的核心工作，也因此踩了超多雷，像是溝通錯誤、資料不齊、時程爆炸等等的慘痛經驗，學習過程中請教了許多前輩以及上過不少課程，希望可以把企劃的技能點補滿。</p>
<p>在這些教訓中，印象最深刻的就是有一個專案我花了兩個月的時間做需求訪談、競業分析、規劃網站架構、流程，還把所有頁面的線框圖、欄位說明、版面配置的資料都整理齊全，想說交給工程師之後應該就萬無一失了吧，結果當工程師拿到文件的時候只冷冷的說了一句：「這東西我看不懂。」</p>
<p>當下心裡只能飆三字經然後覺得工程師很懶很廢，東西都幫你準備好了你連看都不看就說看不懂，但全天下最不能得罪的就是幫你做吃的廚師跟幫你寫扣的工程師了，所以還是只好虛心請教哪裡看不懂、哪裡需要再補充說明，現在自己換成工程師腦了，終於明白當年為何會得到一句「看不懂」了…</p>
<span id="more"></span>

<p>再重新回頭看當年自己規劃的東西，看似很完整，但對於工程師來說這就只是視覺上的呈現，重點是缺少了最關鍵的要素：「資料流」，資料是怎麼輸入輸出、輸入的資料會被紀錄在什麼地方、輸出的部分是從哪個輸入來的，這些事情真的只有自己在寫程式的時候才會知道，原來工程師需要的是這些東西。</p>
<p>所以希望以自己跨領域工作經驗的教訓，寫了這篇文章給自己留下一些紀錄，如果能同時幫助到剛入行網站企劃的朋友就再好也不過了！</p>
<h2 id="為什麼要整理需求文件？"><a href="#為什麼要整理需求文件？" class="headerlink" title="為什麼要整理需求文件？"></a>為什麼要整理需求文件？</h2><p>通常在上班每天都有忙不完的工作，會接到要做網站專案八成以上都是吃力不討好的苦差事，企業內部除非是接案公司，不然是很少有專門的企劃團隊在做規劃、需求整理這些事情，更不用說要整理文件了。</p>
<p>另一方面，對於接案者而言，每天為了要開發新客戶、維繫舊客戶忙都不過來了，哪裡還有美國時間去整理什麼文件，就算整理了，是要給誰看？現在許多方便的網頁設計工具點一點拉ㄧ拉套個模板就好了，邊做邊改給客戶不就行了？</p>
<p>我很幸運的是剛開始做網站就是在一間保險公司，因為公司的組織特性以及金融法規的限制，要處理一堆文件是必然的，在我自己出來接案後，這些整理文件的學習幫助我很大的忙，當業主看到我是個人工作室時卻能整理成這麼多資料來，就能感受到我做事的方式而產生信賴感，進而有後續的合作機會。</p>
<p>對我來說，需求文件可以幫助企劃人員做到以下四件事：</p>
<h3 id="一、「真正」搞懂這個專案在做什麼"><a href="#一、「真正」搞懂這個專案在做什麼" class="headerlink" title="一、「真正」搞懂這個專案在做什麼"></a>一、「真正」搞懂這個專案在做什麼</h3><p>需求文件最大的功用就是幫助專案發起者把想法具體化。不管老闆是想要做一個 Facebook，還是開發他自己的個人部落格，當把架構草圖整理出來，就能知道要做的事情有多少，工程師最害怕的就是我丟一個網站範本給他，然後問他做不做得到、要多久，做網站不是工程師一個人的事，而是團隊之間彼此互相溝通合作的過程。</p>
<p>而且當老闆把需求表達完畢後，企劃人員或業務就把老闆的需求原封不動的交接給工程師，然後讓工程師來反問實際執行上的細節，通常企劃就會被問倒，然後再去問老闆，老闆就會覺得我需求都已經跟你講完了剩下是你們的工作了，企劃就會很為難的被夾在中間 (對，我也幹過這種當傳聲筒的蠢事 Orz..)</p>
<p>把自己還沒搞懂的事情就交給團隊成員是一件很不負責任的事，讓需求文件先幫自己搞懂老闆要什麼，這樣才能獲得老闆與團隊成員的信賴。</p>
<h3 id="二、提升團隊溝通效率"><a href="#二、提升團隊溝通效率" class="headerlink" title="二、提升團隊溝通效率"></a>二、提升團隊溝通效率</h3><p>專案開發的需求有大有小，小從一個區塊的背景顏色，大到購物車的完整購買流程，我犯過的錯是以為只有像是大的流程才需要有說明文件來與工程師溝通，小的需求就 Email 或是走到工程師旁邊講一下就搞定。</p>
<p>但事實上最花時間溝通的就是這種我自以為三分鐘就可以溝通完的需求，因為這個「三分鐘」是我自己認定的時間，所以當我花三分鐘告知「小修改」卻無法在十分鐘內看到成果，我就覺得工程師在擺爛，這麼簡單的事情竟然也要花這麼多的時間。</p>
<p>工程師在處理每一項工作的時候，都是要歷經一連串的邏輯問題，當他今天在專注開發 A 功能的時候，我跟他說 B C D 這些是小修改請他處理，他就必須先把自己從 A 功能的思緒中抽離出來，等到處理完 B C D 後再重新專注，這是一件非常耗費腦力的事情，因為大腦的轉換需要花費更多時間才能回到原本的狀態。</p>
<p>有經驗的工程師不會讓自己的專注狀態被打斷，所以即使我提出的修改可能真的只要三分鐘就可以搞定，但對工程師來說先花這三分鐘會讓他自己手邊的工作更難處理。</p>
<p>這時候需求文件就扮演了很重要的角色，工程師按照文件來施工，他可以依照自己的步調來進行開發，這也是為什麼不管大或小的需求，都要盡可能的在文件中進行說明。</p>
<p>如果他發現文件裡面有沒說明到的地方不知道該如何開發時，可能是寫 Email 或是私訊問我一下，也許當下我在忙別的事沒空理他，等我回過頭來搞清楚他的問題時再跟他說如何處理，他也許在忙別的功能，等他忙完後再來處理我回他的答案，結果又發現我的答案不完整需要再溝通，這一來一往所耗費的時間超級恐怖，不誇張，常常就這樣一天就過去了…</p>
<p>雖然文件可能沒有辦法一次溝通到位，但至少能建立起對話的基礎，讓團隊溝通效率不會是從 0 開始，至於如何讓文件朝著可以一次到位的目標去整理，就是需要為團隊成員多想一步，能夠多想一步前提是知道他們需要的是什麼，而這就是這篇文章的目的。</p>
<h3 id="三、累積自己的企劃資料庫"><a href="#三、累積自己的企劃資料庫" class="headerlink" title="三、累積自己的企劃資料庫"></a>三、累積自己的企劃資料庫</h3><p>每個專案或多或少都會有類似的需求，像是要會員登入、註冊、購物這些流程，很多網站都會遇到，如果以前的規劃有確實留下文件，不用客氣，直接拿過來修改一下交差，雖然不太不可能一次滿足新專案的所有需求，但同樣的功能經過不同專案的歷練，也會透過迭代逐漸完善自己規劃過的功能，這些是企劃人員最重要的資產，也是自己努力的證明。</p>
<h3 id="四、減少會議時間"><a href="#四、減少會議時間" class="headerlink" title="四、減少會議時間"></a>四、減少會議時間</h3><p>有時候看似直接當面討論會比較有效率的會議，卻也是造成時間浪費的一大兇手，因為很多會議的主題，都只是為了要消除會議發起者的不安與焦慮，當面溝通確認可以讓疑慮消除，同時也能讓團隊成員直接聽到客戶的需求，減少需求傳達的時間，真的是這樣嗎？</p>
<p>我經歷過最大型的網站專案，一共要與八個部門進行需求溝通，每個部門的行政作業流程我完全不了解，而當時的 IT 都非常資深，所以每次開會時我一定都會請工程師參與會議，並希望他們協助評估每項功能需求的執行可能性，每次聽到不懂的問題就會把目光投向工程師，希望他幫我接手回答問題，然後開完會之後留下會議記錄，就覺得自己能放心了。</p>
<p>久而久之就養成依賴工程師的習慣，部門同仁的需求就直接轉達給工程師，當他們在討論我完全聽不懂的東西時我就在放空，所以工程師執行時遇到問題問我時我當然是一問三不知，等到問題累積久了，又要開個會議來確認需求，然後又進入放空的會議循環。</p>
<p>雖然無法保證有文件一定可以減少會議時間，但至少能減少團隊成員的會議時間，因為整理出的文件是我自己消化吸收並與需求者確認過的內容，用文件來與團隊溝通才是最有效率的作法，自己會因為沒開會就沒安全感，大部分都是由於沒有全盤了解需求所導致的。</p>
<p>我認為真正需要讓團隊成員參與的會議就只有結案的慶功宴(如果有的話)，萬一真的不得已，需要請團隊成員參加的會議，至少可以提前告知會議時間與會議內容，讓他們理解到底是有什麼重要大事需要招開會議，然後在會議上的主要目標是要全力協助團隊成員可以儘快理解需求，消除他們的疑慮。</p>
<p>所以當客戶看到執行團隊在場時就開始亂許願，我們要做的事不是把目光拋向成員，好像在請示他們這個功能要不要做給客戶，而是直接攔截下來說這新功能需要確認的地方還有很多，我們可以會後再討論。</p>
<p>總之會議的方向就是解決團隊成員的問題，任何跟這些問題沒關係的東西，像是自己的不安、客戶的新願望都不是重點，而真正的重點就是不要開這種會議，讓自己真的搞懂需求，再來與團隊成員進行溝通。</p>
<h2 id="真的需要文件嗎？"><a href="#真的需要文件嗎？" class="headerlink" title="真的需要文件嗎？"></a>真的需要文件嗎？</h2><p>如果你是那種理解力超強，只要聽到老闆說想做一個 Facebook 就可以立刻告訴團隊成員所有功能的執行細節，然後你的團隊成員也是記憶力過人，聽你講完一遍後就能記住所有的內容，並且在執行上遇到問題時可以進入老闆的腦袋，完全理解老闆背後的想法而自行下決策，然後最後的成品還能讓老闆 100% 滿意。</p>
<p>如果能達成這樣的境界，文件顯然就是多餘的，而這樣的情境只有一種可能：你自己就是老闆、企劃、設計、開發人員。事實上就連我自己在玩的 Side Project 也很難達到這樣的境界，每天睡一覺醒來就會有新 Idea，看到別人的好作品也會受到刺激，推翻自己的想法是每日的例行公事，在這樣的情況下，文件可以幫忙檢視自己的思考脈絡，從而提煉出更好的作法，或是看自己有沒有偏離原本的目標。</p>
<h2 id="需求文件要寫什麼？"><a href="#需求文件要寫什麼？" class="headerlink" title="需求文件要寫什麼？"></a>需求文件要寫什麼？</h2><p>雖然這篇文章是在說明文件的重要性，但我想表達的「文件」並不是做出那種厚厚一疊為了申請什麼資格或是交報告用的，而是求質不求量、以溝通為前提的說明文件。既然是以溝通為前提的文件，就必須要知道溝通的對象是誰，以下四種角色是網站專案常見的成員：</p>
<h3 id="一、客戶-專案發起者"><a href="#一、客戶-專案發起者" class="headerlink" title="一、客戶 / 專案發起者"></a>一、客戶 / 專案發起者</h3><p>負責告訴我們要開始執行這個專案的人，這人可能會有很大的願景、很多想法希望可以實現，文件溝通的方向，就是要讓他的想法可以落地，具體要描述的事項可能會有：</p>
<ul>
<li>  在有限的時間下應該先做什麼？</li>
<li>  為什麼要先做這個？</li>
<li>  做這個的目的是什麼？</li>
<li>  為了要達成這個目的有哪些具體的目標？</li>
<li>  為了要達成階段性目標需要做哪些事？</li>
</ul>
<p>如果沒有先把這專案的目的地訂出來，整個團隊就會非常辛苦，隨時都要配合專案發起者一覺醒來的新想法而忙得團團轉，如果在專案發起後先整理出這樣的資訊，對於發起者來說可以先讓他知道現實世界的限制條件是什麼，以及幫他釐清哪件事才是他真正最想要做的。</p>
<p>更重要的是，方向明確才能讓團隊成員有所依據，每週根據核心目標展開各項計畫，如果大家剛被告知這個禮拜要去象山，然後出發後好不容易才爬到半山腰，卻被告知要下山去爬另外一座山，這樣會讓成員們士氣大傷，久而久之就會覺得就假裝爬一下就好，反正過不久又不用爬了。</p>
<p>但現實是就算訂了專案目的與目標，也常常還是拉不回專案發起者的遠大夢想，而文件至少能提醒他一個月前我們是因為這些理由而決定這樣走的，現在要改變的方向有符合我們當初討論的目的嗎？透過文件來檢視思考的脈絡，讓後續的想法還是能維持在原先的目的上。</p>
<p>針對專案發起者的文件，我習慣是先用心智圖軟體來進行發想，透過初步的需求訪談，把專案發起者的願景、目的以及其他相關資訊全部都丟到心智圖裡面，不用任何歸類，想到什麼就寫下什麼，這個階段把所有想法盡可能一字不漏的紀錄下來：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/07/CleanShot-2020-07-15-at-10.00.59.jpg"></p>
<p>通常資料搜集&amp;發想階段會長得如上圖一樣，許多散落的區塊，可能是發起者的一句話，或是在網路上找到的相關資料，只要覺得可能有相關的資訊全部貼進去。</p>
<p>下一個步驟是導入觀點，也就是問自己要從這一堆資料中找出什麼東西，我們要透過這份文件幫助專案發起者把願景落實，所以要找出三種大分類：目的、目標、執行方法。</p>
<p>目的是這個專案完成後希望達成的事情，可能是幫助某些人解決什麼問題，或是實現某些人心中的願望，最常見的目的就是建立品牌形象創造差異化，或是透過網站增加銷售管道提升公司營收等等。</p>
<p>目標是為了達到這個目的之前需要完成的階段性任務，像是為了透過網站增加銷售，可能要先訂出每月營收提升 5%、或是把實體店面客戶轉換為線上會員等等的目標，而為了要達成目標又會有很多的子目標產生。這邊要注意的是不要把目的與目標搞混，如果把目標當成目的，視野就會變得狹隘，看不到更多的可能性。</p>
<p>執行方法是為了達到目標需要做的事情，像是提供點數累積回饋、生日會員禮、特定節日買一送一等等，很多時候 idea 都是執行方法，但這個方法背後要達成什麼目標、去到哪個目的，都是需要透過整理出文件後，再拿文件去跟專案發起者確認背後的動機，以確保專案的方向是符合他的期待。</p>
<p>把一堆資料歸納分類後，可以得到這樣的結果：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/07/CleanShot-2020-07-15-at-10.43.46-1024x302.jpg"></p>
<p>一張圖表達完目的、目標以及執行方法，當然如果要專業些，弄成 Word 檔或是簡報是免不了的，但我常常直接用心智圖進行溝通，好處是可以讓對方直接看到完整的架構，一目瞭然，重點是可以溝通就好。</p>
<p>如果是面對比較有規模的企業，整個專案有不同的部門參與，用這個方法也能有效整理出各別部門的需求，並檢視這些需求是否有符合公司的經營目標與目的。</p>
<h3 id="二、視覺設計師"><a href="#二、視覺設計師" class="headerlink" title="二、視覺設計師"></a>二、視覺設計師</h3><p>視覺設計師主要職責為設計網站的視覺元素，大從 Banner、小到圖標，以及色彩計畫、文字排版，甚至是插畫設計、或是與商品攝影師的風格溝通等等，所有看得到的東西該長什麼樣都是視覺設計師的負責範圍。</p>
<p>因此文件的溝通方向，盡可能以視覺為主、文字為輔的方式來進行傳達，具體可能會需要描述的事項有：</p>
<ul>
<li>  客戶喜歡的風格比較偏向於市場上哪些品牌？</li>
<li>  客戶喜歡這些品牌風格的哪些視覺元素？</li>
<li>  另外提供三到五個經過客戶認同的首頁設計參考網站</li>
<li>  網站地圖</li>
<li>  頁面線框圖</li>
<li>  文案</li>
<li>  素材</li>
</ul>
<p>與視覺設計師溝通最忌諱的就是用形容詞來表達，像是：客戶想要一個大氣簡約不失巴洛克典雅華麗樸實風格的網站，結果客戶給出來的參考對象是 Apple。另外也不能把客戶提供的參考網站直接請視覺設計師照做，主要原因並非抄襲，而是客戶的產品是賣農藥的，以 Apple 的風格來說真的適合嗎？</p>
<p>身為溝通端必須先深入探究對象背後的動機，了解為何會喜歡 Apple 的風格，喜歡的點是什麼，然後擷取客戶在意的部分，去找出其他有這個點、又符合客戶產品屬性的網站範例，把這些範例彙整起來再與客戶進行討論，最後討論出來的結果才是我們可以交付給視覺設計師的資料。</p>
<p>其次是透過網站地圖告訴視覺設計師這個專案一共有多少個版型需要設計，讓他了解工作範疇，要注意是「版型」而非頁面，因為為了維持網站瀏覽的一致性，相同屬性的內容應共用同一版型，像是文章分類列表頁只要一種版型就好，如果不同文章分類使用不同版型會造成使用者的混亂，除非是有特殊的需求。</p>
<p>頁面線框圖 ( wireframe ) 是一種描述頁面內容結構的方法，主要說明該頁面需要包含哪些區塊、區塊的排序、區塊內的視覺元素要強調什麼、頁面的核心任務等等，讓視覺設計師可以根據這些說明去設計出瀏覽動線，進而引導使用者完成網站任務。</p>
<p>文案跟素材是視覺設計師最頭痛的部分，身為溝通端一定要儘可能的在頁面線框圖中一併把這些資料蒐集齊全，文案的內容與字數的多寡，都會影響視覺呈現的氛圍以及版面的配置，更不用說客戶提供的商品素材萬一只有 100 x 100px 卻要放在大 Banner 裡面來展示，這些都是我們必須要幫視覺設計師清除的障礙，讓他們可以專注在視覺設計的產出。</p>
<p>頁面線框圖我習慣是用介面設計軟體來製作，用方塊跟文字註解就能很直覺的表達這個頁面要做什麼內容，當確定頁面的大區塊後，再逐一發展每個區塊內的細節，請客戶提供文案與素材，完成頁面內容的編排，要記得這個階段不要加入任何的視覺元素，與客戶的討論只要專注在內容即可。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/07/CleanShot-2020-07-16-at-10.32.24-1024x839.jpg"></p>
<p><a href="http://www.wireframeshowcase.com/">Wireframe Showcase</a> 這個網站很有趣，它專門收集頁面線框圖與最後完成視覺設計的範例，從裡面的範例可以大概理解頁面線框圖的作用與畫法，仿間也有不少關於繪製頁面線框圖的課程，有興趣的朋友可以自行 Google。</p>
<h3 id="三、前端工程師"><a href="#三、前端工程師" class="headerlink" title="三、前端工程師"></a>三、前端工程師</h3><p>前端工程師負責把視覺設計師的圖像轉換為瀏覽器看得懂的語言，主要是透過 HTML、CSS 與 JavaScript，因此溝通的主要方向，是關於視覺元素的尺寸、版面位置，以及使用者與網站進行互動時所有的操作行為都是與前端工程師的工作範疇，具體會有的描述事項有：</p>
<ul>
<li>  網站地圖</li>
<li>  各頁面英文名稱</li>
<li>  網站原型</li>
<li>  RWD 區塊說明</li>
<li>  版面設計尺寸標記</li>
<li>  打包好並以英文命名的素材</li>
<li>  需要連結外站的網址</li>
</ul>
<p>同樣的，網站地圖讓前端工程師對於整個專案有個概觀，但與視覺設計師不同之處在於前端設計師需要頁面的英文名稱，因為瀏覽器的網址通常都是英文的，在這個階段先幫前端工程師把頁面英文名稱命名好，可以減少他不少負擔。</p>
<p>重點是交給前端工程師命名頁面名稱會有大問題，拼錯字事小，網址結構無法符合客戶網站的內容才是關鍵。我們都知道網址結構會影響搜尋引擎的搜尋結果，這在規劃頁面名稱時就必須一併思考，頁面命名的邏輯以「版型 - 單元名稱」的方式來處理，下面的說明以 WordPress 的範本為例子，如果你負責的網站不是用 WordPress 開發也沒關係，掌握住「版型 - 單元名稱」的大原則即可：</p>
<ul>
<li>  網站首頁 / front-page</li>
<li>  產品列表頁 / archive-product</li>
<li>  產品分類列表頁 / category-product</li>
<li>  產品說明頁 / single-product</li>
<li>  最新消息列表頁 / archive-news</li>
<li>  最新消息分類頁 / category-news</li>
<li>  最新消息內頁 / single-news</li>
<li>  關於我們頁 / page-about</li>
<li>  聯絡我們頁 / page-contact</li>
<li>  部落格文章列表頁 / archive</li>
<li>  部落格分類列表頁 / category</li>
<li>  部落格文章頁 / single</li>
</ul>
<p>以上的頁面名稱我們可以拆解成五個大單元來看：分別是首頁、產品、最新消息、企業資訊與部落格。首頁在 WordPress 裡面的範本名稱叫做 front-page.php，所以這邊直接使用 front-page，接下來先跳到部落格這個單元，因為 WordPress 是以部落格起家的，而所有的頁面內容都統一被視為 post，而 post 一定都會有三個範本：所有文章列表頁、分類文章列表頁以及文章內頁，對應到的三種版型就是 archive、category 與 single。</p>
<p>而產品、最新消息這三個單元，就是衍伸部落格的結構而來的，因此頁面的命名方式就是參照部落格的版型 + 單元名稱，像是產品列表頁就叫做 archive-product，最新消息內頁就叫做 single-news，這就是「版型 - 單元名稱」的命名原則。</p>
<blockquote>
<p>WordPress 為了要區分內容的類型，資料庫裡面定義了一個欄位叫做 post type，部落格文章的 post type 就叫做 post，而產品的 post type 就是 product，最新消息的 post type 就是 news，而後兩者是由開發人員自行新增且有別於預設的文章類型，統稱為 Custom Post Type 自定義文章類型。</p>
<p>在實務上我們通常都會把部落格文章這個 post type 作為最新消息使用，就可以少新增一個 post type。</p>
</blockquote>
<p>至於企業資訊的兩個頁面：關於我們以及聯絡我們，可以發現到它的版型是以 page 開頭，頁面跟文章最大的不同點在於頁面只需要一個版型，不像文章會需要列表頁、分類列表頁、內頁三種，所以我們在規劃的時候發現這個單元不需要列表只需要內頁時，就可以用 page 的版型來命名。</p>
<p>其次網站原型 ( Web Prototyping ) 與頁面線框圖很類似，但差別在於網站原型可以使用滑鼠進行瀏覽，包含點擊連結換頁、彈跳視窗、輪播廣告等等的互動效果，而這也是前端工程師最需要的文件，他們必須了解每個導覽的操作流程，像是點下去會發生什麼事，以及效果的呈現方式。</p>
<p>網站原型也可以用在 RWD 的溝通需求上，像是在手機版哪些區塊要隱藏、哪些區塊的欄數要縮減，或是在平板電腦的尺寸下，哪些區塊的顯示順序要往前，這些需求的溝通都能透過網站原型進行視覺化的表達。</p>
<p>另外，為了讓前端工程師可以精準施工，就像室內設計師要提供給工班師傅的工程圖一樣，標題距離上方多少像素、Banner 的尺寸規格等等，都需要精確的告知前端工程師，不然蓋出歪樓也是理所當然的。</p>
<p>以上這些文件看似要花很多時間整理，但現在的介面設計軟體都已經越來越工程師化，透過這些軟體可以直接產出元件的 CSS 原始碼，並且也能直接把完成的設計稿做成網站原型，所以頁面線框圖、設計稿、網站原型、尺寸標記、素材打包、註解說明這些作業，都可以在同一個軟體下完成，因此我會建議企劃人員對介面設計軟體要有基礎的操作能力，學會它不是為了做設計，而是為了產出讓團隊成員可以更好理解的說明文件。</p>
<h3 id="四、後端工程師"><a href="#四、後端工程師" class="headerlink" title="四、後端工程師"></a>四、後端工程師</h3><p>後端工程師負責網站的資料邏輯，舉凡像是首頁的輪播要顯示幾篇、輪播內容是要抓取哪個單元的文章、熱門文章是依照什麼排序、表單提交後會發生什麼事，這些都是後端工程師的守備範圍，因此有別於視覺設計師與前端工程師的視覺化溝通方式，後端工程師溝通的主要方向是資料結構與流程，具體的描述事項如下：</p>
<ul>
<li>  網站地圖</li>
<li>  資料欄位</li>
<li>  資料處理流程</li>
<li>  各頁面內區塊的資料顯示規則</li>
</ul>
<p>沒錯，第一要件還是網站地圖，理由也是要讓後端工程師對於工作內容有初步的概觀，而採用「版型 - 單元名稱」的命名方式，可以讓他們快速理解網站架構，進而決定是否要新增自定義文章與自定義類別。</p>
<p>資料欄位的說明可以採用 Excel 的方式進行整理，標註每個單元會需要顯示哪些資料與功能，以最新消息這個單元為例，一篇文章要顯示的資料可能有標題、日期、作者、內文、瀏覽數、回應數、按讚數，而功能可能有留言、按讚與分享文章，範例如下：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/07/CleanShot-2020-07-20-at-10.04.17.jpg"></p>
<p>當後端工程師看到這份資料後，他就會知道最新消息需要新增一個 news 的 post type，然後要加入留言功能以及指定顯示的側邊欄，再來新增 news 的相關欄位，並瞭解某些欄位可以能是要對應到某些功能。</p>
<p>接下來資料的處理流程，以使用者的操作情境去描述這些功能的流程，並搭配四種操作動作 CRUD。C 是 Create，也就是這功能建立了什麼資料，R 是 Read，使用者在哪裡可以瀏覽已經建立的資料，U 是 Update，使用者如何更新已建立的資料，D 是 Delete，使用者如何刪除已建立的資料。</p>
<p>譬如文章的按讚功能可以這樣描述：當使用者按下後，文章的按讚總數會加一 ( Create )，並且在使用者我的文章列表中加入這篇文章 ( Read )，使用者可以再次按讚取消 ( Update )，或是進到我的文章列表去刪除它 ( Delete )。</p>
<p>有經驗的工程師會幫我們把一個功能可能會有的資料處理流程拆解出來，並且反問我們萬一在某些特殊情況下該如何處理，這時候就是我們的學習機會，我們不一定每次都會遇到有經驗的工程師，可能很多時候都是做到哪想到哪，所以每當被工程師反問到我們沒想過的問題，都是一種檢驗自己思考是否夠全面的機會。</p>
<p>最危險的就是把這些流程拆解的事情當作是工程師的工作，把功能開出來後剩下就不關企劃的事，這樣工程師只能自己腦補，結果做出來的東西不是自己希望的，反而去埋怨工程師難溝通，這些都是我自己曾經犯過的錯 Orz..</p>
<p>當然有規模一點的團隊還會有系統分析師、系統架構師等等的專業職位，如果只領 22K 卻必須要做到這麼多事情，換作是我我一定擺爛。但我覺得做網站這行的最大好處就是不受限於產業，現階段多做的事在未來能得到更多的機會。</p>
<p>像是因為你這麼幫工程師設想，哪天他換工作時發現其他公司的企劃根本就沒有像你一樣會幫他準備這麼齊全的文件，萬一他們公司一有企劃空缺他一定第一個找你過去，或是在多做的過程之中，無意間跨越了不少的領域，雖然這年頭跨領域感覺是基本條件了，但多跨一個領域就多一個求生技能，未來選擇的路才會寬廣，才不容易走到死胡同。</p>
<p>扯遠了，最後一個後端工程師需要的文件就是我們在頁面線框圖裡面各區塊的顯示邏輯，舉例像是熱門文章區塊「熱門」的定義是什麼？最多人瀏覽的？管理員手動決定的？還是是隨機顯示？如果是最多人瀏覽要如何讓該區塊保持新鮮度，而不是只會永遠顯示最多人看過的那篇？</p>
<p>像這一類的顯示邏輯都會關係到網站能否達成當初設定的目標，如果沒把這些條件溝通好，好心的工程師都會用自身的經驗幫我們處理，但這樣我們就不會知道為什麼今天流量會高，或是為什麼大家從來都不點某個區塊的內容，我們也就因此少了很多可以學習進步的機會。</p>
<h2 id="如何有效的回報問題"><a href="#如何有效的回報問題" class="headerlink" title="如何有效的回報問題"></a>如何有效的回報問題</h2><p>當我們不管是跟設計師或是工程師在表達自己希望修改的項目時，永遠都要先問自己一個問題：團隊成員能理解我傳達的內容嗎？如果每次我提出修改時，工程師都要再三反覆確認我的問題而無法直接進行，這時候自己就要警覺是不是我的表達方式讓溝通沒有效率。</p>
<p>我以前回報給工程師的方式是這樣的：</p>
<ul>
<li>  網站壞了，幫我檢查下～</li>
<li>  這個按鈕點下去畫面不見了，是怎麼回事？</li>
<li>  在手機上面看整個網站怪怪的，幫我調整一下！</li>
<li>  網站載入好慢，能優化網站速度嗎？</li>
<li>  …</li>
</ul>
<p>這些我以為看似很明確的問題，對於工程師來說根本就是完全沒有幫助的垃圾資訊，對，完全是垃圾無誤！舉「網站壞了」這個問題為例，工程師一看到就會先試著自己連看看，萬一是正常的，接下來就會有一連串的機器人問答：</p>
<p>工程師：你其他網站可以連嗎？<br>我：可以  </p>
<p>工程師：你是連哪個網站？<br>我：<a href="http://abc.com/">http://abc.com</a>  </p>
<p>工程師：http 加 s 看看<br>我：加了，出現說該網站有危險？  </p>
<p>工程師：(推測是憑證過期，檢查後重新安裝憑證) 你再試試看！<br>我：沒有警告畫面了，但頁面還是沒內容  </p>
<p>工程師：(自己連 <a href="https://abc.com/">https://abc.com</a> 沒問題，開始在想還有什麼可能性) 等我一下<br>我：好的  </p>
<p>(工程師花了十分鐘檢查伺服器的加密憑證設定，確認 301 轉址是否正確…)  </p>
<p>工程師：我這邊檢查應該都沒問題，你連的頁面是哪一頁？<br>我：<a href="https://abc.com/efg">https://abc.com/efg</a>  </p>
<p>工程師：你網址的 efg 少打一個 h，你看到的是 404 頁面…<br>我：喔喔喔，有了，感謝協助！  </p>
<p>一個問題花十分鐘在做確認，如果是十個問題就是 100 分鐘，這 100 分鐘工程師還沒做任何的修改工作，只是在找問題。如果一開始就可以做精準的溝通，可以省下一個小時又四十分鐘的時間，而我以前卻覺得網站連不上就是工程師要處理的問題，難道我還要幫他 Debug？</p>
<p>這些年下來，我才理解到需要別人的協助前，要先把自己的問題表達清楚，甚至是自己做過一些研究，這不僅是對於幫助者的尊重，更是讓自己有學習的機會。網站連不上，我的瀏覽器一定會顯示某些錯誤訊息，把這些錯誤訊息丟到 Google 裡面查看看，原來是 SSL 的問題，然後再去查查什麼是 SSL，雖然看不懂一堆技術細節，但至少知道 SSL 可以用加密讓網站安全一點，就這樣，因為這個錯誤讓我學到了東西。</p>
<p>然後了解可能發生的問題後，把你覺得可能的原因一併告知工程師，營造一種我不是只是把問題丟給他，而是跟他一起找出問題所在的感覺。有些熱心的工程師會跟你聊很多技術話題，聽不懂也沒關係，至少他覺得你是有 sense 才會跟你聊，但要切記，不要拿 Google 查到的答案來告訴工程師該怎麼做，這就越線了。</p>
<p>精準的問題回報可以包含以下幾個重點：</p>
<h3 id="預期的結果"><a href="#預期的結果" class="headerlink" title="預期的結果"></a>預期的結果</h3><p>輸入網址 <a href="https://abc.com/efg">https://abc.com/efg</a> 要能連到該網站的該頁面並呈現內容</p>
<h3 id="實際發生的結果"><a href="#實際發生的結果" class="headerlink" title="實際發生的結果"></a>實際發生的結果</h3><p>輸入網址後只看到如下的錯誤訊息「這個網站無法提供安全連線 ERR_SSL_PROTOCOL_ERROR」，並提供截圖</p>
<h3 id="重現自己的操作過程"><a href="#重現自己的操作過程" class="headerlink" title="重現自己的操作過程"></a>重現自己的操作過程</h3><ol>
<li> 開啟 Chrome 瀏覽器新分頁</li>
<li> 在網址列輸入 <a href="https://abc.com/efg">https://abc.com/efg</a></li>
<li> 按下 Enter</li>
</ol>
<h3 id="自己電腦的規格"><a href="#自己電腦的規格" class="headerlink" title="自己電腦的規格"></a>自己電腦的規格</h3><p>MacOS 10.14.6、Chrome Version 84.0.4147.89</p>
<p>-</p>
<p>掌握一個重點：回報問題時要想辦法重現自己遭遇到問題的步驟，提供越具體的操作流程越好，這樣工程師才有辦法進入你的情境來進行除錯，如果是客戶遇到問題，我們也要先想辦法重現客戶的問題，確定怎麼操作會出問題後，再請工程師來處理。</p>
<p>我以前最常做的回報方式就是把客戶 Line 給我的問題截圖下來，然後順手轉傳給工程師，回報完畢。而工程師只看到客戶說有問題，但完全不知道我跟客戶之間討論的上下文，所以只能透過反覆詢問來確認，於是又進入跟上面一樣的機器人對話…</p>
<p>釐清需求、把問題表達清楚都是我們的工作，也是我們對團隊成員應該負起的責任，不管是設計師還是工程師，都是需要花費大量腦力跟高度專注的工作，我們要做的就是幫他們把方向定好、剷除路障，讓他們可以專心的進行產出。</p>
<h2 id="工具介紹"><a href="#工具介紹" class="headerlink" title="工具介紹"></a>工具介紹</h2><p>在還沒有進行<a href="https://oberonlai.blog/tw/%E6%95%B8%E4%BD%8D%E6%96%B7%E6%8D%A8%E9%9B%A2/">數位斷捨離</a>前我是軟體工具控，最愛嚐鮮使用最新最酷炫的工具，然後逼著身邊的朋友跟我一起用，現在比較乖了，用大家都在用的工具就好，能完成溝通並且是以大家都習慣的方式才是最重要的。</p>
<p>所以我現在除非原本在用的工具效能爛到不行，或是整間倒了，不然不會輕易的換工具，以下就各種需求文件介紹我常用的溝通工具：</p>
<p><strong><a href="https://mindnode.com/">MindNode 心智圖軟體</a></strong> - 整理、歸納資料超好用，尤其是在釐清網站目的與執行方法時可以非常清楚的展現每件待辦任務背後的原因，當專案做到一半覺得有點迷惘時，回過頭來看看當初設定的方向來提醒自己是否還在正確的道路上。</p>
<p><strong><a href="https://tw.eagle.cool/">Eagle 圖片收藏及管理必備工具</a></strong> - 整理網站視覺風格設計參考的圖像管理工具，可以把客戶提供的參考對象以及自己蒐集到的整理在裡面，然後直接在上面註記說明需要參考的地方後把資料夾分享給設計師，</p>
<p><strong><a href="https://www.figma.com/">Figma 線上介面設計軟體</a></strong> - 我在上面可以畫網站地圖、頁面線框稿、網站原型、下註解，設計師可以在上面進行 UI 設計，工程師可以在上面看尺寸標記、匯出 CSS 程式碼，並且所有人都可以在同一個檔案上即時進行編輯與留言，用一套可以少開三套軟體。</p>
<p><strong><a href="https://www.google.com.tw/intl/zh-TW/sheets/about/">Google 試算表</a></strong> - 整理資料欄位、功能、客戶修改清單、彙整客戶提供資料等文件作業的工具，不是因為它最方便最好用，而是大家都有 Google 帳號XD</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>有效的需求文件指的是針對溝通對象整理出能幫助他們理解專案內容的文件，不是為了要整理能交報告或是申請補助的制式文件，而是以溝通為前提，能完成資訊傳達任務的文件。因此協助團隊成員釐清問題、制定開發方向，讓專案盡可能不會因為外力因素而延宕。</p>
<p>回顧自己過去的工作經驗，很感謝曾經跟我一起合作做的設計師、工程師，當年我的不成熟讓你們受苦了，現在我可以體會你們當年的心情了XD，我現在反而會覺得，要做一個網站的專案負責人，能夠不懂什麼是 SSL、API、RWD 嗎？</p>
<p>先從做一個自己的網站開始吧，從企劃、設計、前端到後端，全部都自己試著走過一遍，這能幫助我們理解團隊成員每天在做的事情，也能跟他們請益做網站的知識，這都是能增加團隊溝通的方式，也許還會從中找到一條屬於自己的全新道路！</p>
<blockquote>
<p>想更有系統與組織來管理好每一個專案嗎？歡迎跟我一起工作，我們一起學習如何把專案做得更好！請參考我的這篇文章「<a href="https://oberonlai.blog/tw/how-can-oberon-help-you/">接案路上少的那一位工程師</a>」</p>
</blockquote>
]]></content>
      <categories>
        <category>WordPress</category>
        <category>網站企劃</category>
        <category>使用者介面</category>
        <category>老人碎念</category>
        <category>專案即生活</category>
        <category>資訊架構</category>
      </categories>
      <tags>
        <tag>figma</tag>
        <tag>mindnode</tag>
        <tag>prototype</tag>
        <tag>wireframe</tag>
      </tags>
  </entry>
  <entry>
    <title>【 筆記 】WooCommerce 客製化報表自動匯出&amp;上傳功能開發</title>
    <url>/tw/woocommerce-order-export/</url>
    <content><![CDATA[<p>WooCoomerce 有許多方便又實用的外掛，可以解決企業在經營電子商務時所遇到的各種問題，但如果要與企業內部現有的系統進行整合，就勢必要針對既有系統的規格來進行 WooCommerce 的客製化開發。</p>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>客戶希望把 WooCommerce 訂單能於每日特定的時段自動匯出後整合至內部的管理系統，並當發生訂單取消或退貨時，也能把該筆訂單的資料傳送至該系統中。</p>
<p>既有的操作流程為人工使用外掛匯出 csv 後，手動調整其報表內容傳送至內部系統，問題點在於無法自動化與取得某些類型商品的價格，以及折扣金額的計算皆需要人為介入處理，因此需要設計一套自動化流程來解決這些繁瑣的任務，並減少人工整理報表時可能產生的問題。</p>
<p>完整流程如下：</p>
<span id="more"></span>

<p>一、訂單新增系統傳送狀態欄位，用來紀錄該訂單是否已被傳送至企業內部系統</p>
<p>二、後台可以篩選尚未傳送的訂單，勾選後使用批次動作來進行報表的匯出</p>
<p>三、訂單狀態變更為退費時自動匯出報表</p>
<p>四、用任何方式匯出的報表皆透過 FTP 傳到客戶的伺服器中</p>
<p>五、每天於特定時段把尚未傳送的訂單自動進行傳送</p>
<h2 id="任務拆解"><a href="#任務拆解" class="headerlink" title="任務拆解"></a>任務拆解</h2><p>理解了業務邏輯之後，接下來就是把每個流程轉變為具體的開發步驟：</p>
<p>ㄧ、WooCommerce 後台訂單介面新增欄位、欄位篩選下拉選單、批次編輯選項</p>
<p>二、WooCommerce 訂單資料取得</p>
<p>三、將取得的 WooCommerce 訂單資料組成 csv 檔，並寫入到 wp-content/uploads 資料夾</p>
<p>四、FTP 上傳功能開發</p>
<p>五、排程設定</p>
<p>確認任務清單後，開始設計程式結構：</p>
<p><strong>ods-wc-order-export/ods-wc-order-export.php</strong> - 外掛主要程式，用來設定常數與類別檔案引入</p>
<p><strong>ods-wc-order-export/js</strong> - 放後台可能會需要用到 Ajax 的 JS 檔</p>
<p><strong>ods-wc-order-export/class/class-ods-hook.php</strong> - 負責所有功能所需 Hook 掛載的類別</p>
<p><strong><strong>ods-wc-order-export/class/class-ods-wc-admin.php</strong></strong> - 負責新增 WooCommerce 後台訂單介面的類別</p>
<p><strong><strong>ods-wc-order-export/class/class-ods-wc-order.php</strong></strong> - 負責取得 WooCommerce 訂單資料的類別</p>
<p><strong><strong>ods-wc-order-export/class/class-ods-csv.php</strong></strong> - 負責組成與匯出 csv 的類別</p>
<p><strong><strong>ods-wc-order-export/class/class-ods-ftp.php</strong></strong> - 負責 FTP 上傳的類別</p>
<p><strong><strong>ods-wc-order-export/class/class-ods-helper.php</strong></strong> - 負責工具類 class</p>
<h2 id="Let’s-Party-Start"><a href="#Let’s-Party-Start" class="headerlink" title="Let’s Party Start!"></a>Let’s Party Start!</h2><p>首先把可能未來會需要修改的資料定義為常數，讓接手的工程師方便些，如果更新頻率高且操作人員非工程師的話，建議還是把它做成後台的設定頁面會更友善些，定義的資料如下：</p>
<p><strong><strong>ods-wc-order-export/ods-wc-order-export.php</strong></strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * Plugin Name:       ODS WooCommerce Order Export
 * Plugin URI:        https://oberonlai.blog
 * Description:       WooCommerce 客製化報表自動匯出&amp;上傳功能
 * Version:           1.0.1
 * Author:            Oberon Lai
 * Author URI:        https://oberonlai.blog
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// WC 訂單傳送狀態欄位名稱</span>
<span class="token keyword">const</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_KEY</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'export_status'</span><span class="token punctuation">;</span>             

<span class="token comment">// WC 訂單傳送狀態欄位值</span>
<span class="token keyword">const</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'未傳送'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'已傳送'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'取消傳送'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// FTP 上傳資訊</span>
<span class="token keyword">const</span> <span class="token constant">ODS_WC_ORDER_EXPORT_TO_FTP</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
  <span class="token string single-quoted-string">'enable'</span>  <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 啟用/停用</span>
  <span class="token string single-quoted-string">'host'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">'user'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">'pass'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">'path'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'wp-content/uploads/'</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 引入主要類別檔</span>
<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class/class-ods-hook.php'</span><span class="token punctuation">;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>ODS_WC_ORDER_EXPORT_META_KEY 為 Post Meta 的名稱，可以接受的值為 ODS_WC_ORDER_EXPORT_META_VALUE，我們會需要用到這裡面的值來判斷該訂單應該要做什麼樣的任務。</p>
<p>FTP 上傳資訊也是定義在這邊，可以設定是否要進行上傳以及上傳路徑，最後則是引入負責 Hook 的 class-ods-hook.php。如果未來有新的常數要定義都可以來這邊做新增。</p>
<p>接下來我們把鏡頭轉到 class-ods-hook.php，這個檔案負責三個任務，首先是引入需要用到的 class 檔，其次是把 WC 訂單傳送狀態欄位寫入，但也許網站已經經營一陣子了，所以會有既存的訂單資料，我們需要把傳送狀態欄位也寫入這些訂單。</p>
<p>最後是所有的 Hook，因為 Hook 會邊寫邊加，所以先把我們要做的任務先以註解的方式來標記，就能把整支外掛需要完成的功能做總覽，以便追蹤還有什麼功能沒有完成。</p>
<p><strong>ods-wc-order-export/class/class-ods-hook.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * 1.引入 class
 * 2.訂單新增系統傳送狀態欄位，用來紀錄該訂單是否已被傳送至企業內部系統
 * 3.處理 Hooks
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class-ods-wc-admin.php'</span><span class="token punctuation">;</span>
<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class-ods-wc-order.php'</span><span class="token punctuation">;</span>
<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class-ods-csv.php'</span><span class="token punctuation">;</span>
<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class-ods-ftp.php'</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ODS_Hook'</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  
  <span class="token keyword">class</span> <span class="token class-name">ODS_Hook</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">private</span> <span class="token variable">$plugin_version</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span> <span class="token variable">$wc_admin</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

      <span class="token comment">// 第一次啟用外掛時加入所有 WC 訂單的傳送狀態欄位</span>
      <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">plugin_version</span> <span class="token operator">=</span> <span class="token function">get_option</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ods_wc_order_export'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">plugin_version</span> <span class="token operator">==</span> <span class="token string single-quoted-string">''</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">update_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ods_wc_order_export'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'enable'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'init'</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$wc_admin</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'set_order_field'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'9999,1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      
      <span class="token comment">// 新訂單加入系統傳送狀態的 Post Meta</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">get_option</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ods_wc_order_export'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'enable'</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'woocommerce_new_order'</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$wc_admin</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'set_order_field'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'1,1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token variable">$erp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ODS_Hook</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">ODS_WC_Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先建立一個私有變數叫做 $plugin_version，用來紀錄該外掛是否是第一次啟用，如果是第一次的話，會在 wp_options 資料表裡面建立一個叫做 ods_wc_order_export 的欄位，其值為 enable，如果沒有欄位就代表是第一次啟用，然後在初始化的時候執行 set_order_field 這個方法。</p>
<p>set_order_field 可以帶一個參數，設定需要寫入的訂單筆數，在 add_action 最後一個參數 ‘9999,1’，這代表的是 set_order_field(9999)，然後因為只需帶一個參數所以第二個數字為 1。在第一次啟用外掛的狀況下可以帶入需要寫入系統傳送狀態的訂單筆數，之後新訂單只要抓最新的一筆就好，所以第 35 行最後的參數為 ‘1,1’。</p>
<p>set_order_field 實作細節在 class-ods-wc-admin.php：</p>
<p><strong><strong>ods-wc-order-export/class/class-ods-wc-admin.php</strong></strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * 處理後台系統傳送欄位註冊、介面顯示
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_WC_Admin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  
  <span class="token keyword">class</span> <span class="token class-name">ODS_WC_Admin</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 新增訂單的系統傳送狀態欄位
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_order_field</span><span class="token punctuation">(</span> <span class="token variable">$num</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token variable">$args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token string single-quoted-string">'numberposts'</span> <span class="token operator">=></span> <span class="token variable">$num</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$wc_orders</span> <span class="token operator">=</span> <span class="token function">wc_get_orders</span><span class="token punctuation">(</span> <span class="token variable">$args</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$wc_orders</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$wc_orders</span> <span class="token keyword">as</span> <span class="token variable">$order</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">metadata_exists</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'post'</span><span class="token punctuation">,</span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_KEY</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">update_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_KEY</span><span class="token punctuation">,</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span>\<span class="token punctuation">[</span><span class="token number">0</span>\<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>set_order_field 主要是使用 wc_get_orders 來取得 WooCommerce 訂單，取得後先確認該訂單是否已經帶有系統傳送狀態的 Post Meta，沒有的話再利用 update_post_meta 進行狀態寫入的動作，如果需要篩選特定類型的訂單可以參考 WooCommerce 的 Github 頁面 –&gt; <a href="https://github.com/woocommerce/woocommerce/wiki/wc_get_orders-and-WC_Order_Query#description">https://github.com/woocommerce/woocommerce/wiki/wc_get_orders-and-WC_Order_Query#description</a></p>
<h2 id="WooCommerce-後台訂單介面"><a href="#WooCommerce-後台訂單介面" class="headerlink" title="WooCommerce 後台訂單介面"></a>WooCommerce 後台訂單介面</h2><p>把基底搭建好了之後，我們先從後台介面來進行開發，根據需求我們新增以下三種功能：</p>
<p>一、訂單列表頁的表格增加系統傳送狀態的欄位</p>
<p>二、加入篩選功能，可以使用系統傳送狀態來篩選訂單</p>
<p>三、勾選訂單後的批次操作處理</p>
<p>我們會先把 Hook 定義好後再來發展細節，首先是增加訂單列表的表格欄位，一樣是編輯 class-ods-hook.php，在 function __construct 建構式裡面加入以下 Hook：</p>
<h3 id="一、訂單列表頁的表格增加系統傳送狀態的欄位"><a href="#一、訂單列表頁的表格增加系統傳送狀態的欄位" class="headerlink" title="一、訂單列表頁的表格增加系統傳送狀態的欄位"></a>一、訂單列表頁的表格增加系統傳送狀態的欄位</h3><p><strong>ods-wc-order-export/class/class-ods-hook.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token operator">...</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_Hook'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  
  <span class="token keyword">class</span> <span class="token class-name">ODS_Hook</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">private</span> <span class="token variable">$plugin_version</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span> <span class="token variable">$wc_admin</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

      <span class="token operator">...</span>

      <span class="token comment">// WC 訂單列表頁表格加入標頭</span>
      <span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'manage_shop_order_posts_columns'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$wc_admin</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'set_admin_th'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// WC 訂單列表頁表格加入欄位</span>
      <span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'manage_shop_order_posts_custom_column'</span> <span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$wc_admin</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'set_admin_columns'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token variable">$erp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ODS_Hook</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">ODS_WC_Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>manage_shop_order_posts_columns 與 manage_shop_order_posts_custom_column 是可以動態帶入 post type 的 Hook，寫法為 manage_{$post_type}_posts_columns，範例中 WooCommerce 訂單的 post type 為 shop_order，因此帶入 {$post_type} 即可，而該欄位只有在對應的 post type 下才會顯示。</p>
<p>set_admin_th 與 set_admin_columns 實作在 class-ods-wc-admin.php：</p>
<p><strong><strong>ods-wc-order-export/class/class-ods-wc-admin.php</strong></strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * 處理後台系統傳送欄位註冊、介面顯示
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_WC_Admin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  
  <span class="token keyword">class</span> <span class="token class-name">ODS_WC_Admin</span> <span class="token punctuation">&#123;</span>
   
    <span class="token operator">...</span>
   
   <span class="token comment">/**
     * 註冊訂單列表系統傳送狀態顯示的標頭
     * 
     * @param array $columns 現有欄位
     * 
     * @return array $columns 新增欄位
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_admin_th</span><span class="token punctuation">(</span> <span class="token variable">$columns</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token variable">$columns</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_status'</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'系統傳送狀態'</span><span class="token punctuation">;</span>    
      <span class="token keyword">return</span> <span class="token variable">$columns</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">/**
     * 註冊訂單列表的系統傳送狀態顯示
     * 
     * @param string $column_name 欄位名稱
     * @param int $post_id 訂單 ID
     * 
     * @return string $send_status 訂單系統傳送狀態顯示文字
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_admin_columns</span><span class="token punctuation">(</span> <span class="token variable">$column_name</span><span class="token punctuation">,</span> <span class="token variable">$post_id</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token variable">$column_name</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token string single-quoted-string">'send_status'</span><span class="token punctuation">:</span>
          <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WC_Order</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">echo</span> <span class="token variable">$send_status</span> <span class="token operator">=</span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_meta</span><span class="token punctuation">(</span><span class="token constant">ODS_WC_ORDER_EXPORT_META_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>  
    
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>set_admin_th 新增欄位叫做 send_status，賦予的值也就是在後台看到的標頭名稱叫做「系統傳送狀態」，set_admin_columns 則用 switch 判斷當欄位名稱叫做 send_status 的時候，去取得該 post 的 post meta，就能把資料顯示出來，完成後如下圖：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/07/CleanShot-2020-07-08-at-11.14.48.jpg"></p>
<p>其次是加入篩選功能，並將系統傳送狀態的值加入到搜尋結果，這樣就能提供後台操作人員快速篩選出需要的訂單，以便後續的訂單處理，先回到 class-ods-hook.php 來加入繼續 Hook：</p>
<h3 id="二、加入篩選功能，可以使用系統傳送狀態來篩選訂單"><a href="#二、加入篩選功能，可以使用系統傳送狀態來篩選訂單" class="headerlink" title="二、加入篩選功能，可以使用系統傳送狀態來篩選訂單"></a>二、加入篩選功能，可以使用系統傳送狀態來篩選訂單</h3><p><strong>ods-wc-order-export/class/class-ods-hook.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token operator">...</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_Hook'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  
  <span class="token keyword">class</span> <span class="token class-name">ODS_Hook</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">private</span> <span class="token variable">$plugin_version</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span> <span class="token variable">$wc_admin</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

      <span class="token operator">...</span>

      <span class="token comment">// 訂單搜尋功能加入系統傳送狀態關鍵字索引</span>
      <span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_shop_order_search_fields'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$wc_admin</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'set_status_seach'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token variable">$erp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ODS_Hook</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">ODS_WC_Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>負責搜尋功能索引的 filter 是 woocommerce_shop_order_search_fields，set_status_seach 實作細節在 class-ods-wc-admin.php</p>
<p><strong><strong>ods-wc-order-export/class/class-ods-wc-admin.php</strong></strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * 處理後台系統傳送欄位註冊、介面顯示
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_WC_Admin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  
  <span class="token keyword">class</span> <span class="token class-name">ODS_WC_Admin</span> <span class="token punctuation">&#123;</span>
   
    <span class="token operator">...</span>
   
   <span class="token comment">/**
     * 訂單列表加入可搜尋系統傳送狀態關鍵字功能
     * 
     * @param array $serach_fields 搜尋欄位
     * 
     * @return array $search_fields 加入系統傳送搜尋狀態的欄位
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_status_seach</span><span class="token punctuation">(</span><span class="token variable">$search_fields</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token variable">$search_fields</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_KEY</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token variable">$search_fields</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>把 post meta 的 Key 存進 $search_fields 陣列，就能如下圖透過搜尋功能進行搜尋：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/07/CleanShot-2020-07-08-at-11.27.22.jpg"></p>
<p>接下來回到 class-ods-hook.php 來處理篩選下拉選單：</p>
<p><strong>ods-wc-order-export/class/class-ods-hook.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token operator">...</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_Hook'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  
  <span class="token keyword">class</span> <span class="token class-name">ODS_Hook</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">private</span> <span class="token variable">$plugin_version</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span> <span class="token variable">$wc_admin</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

      <span class="token operator">...</span>

     <span class="token comment">// 訂單篩選下拉選單</span>
      <span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'restrict_manage_posts'</span><span class="token punctuation">,</span>  <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$wc_admin</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'set_status_filter'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'parse_query'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$wc_admin</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'get_status_filter_result'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token variable">$erp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ODS_Hook</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">ODS_WC_Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第一個 action restrict_manager_posts 為篩選訂單列表的顯示狀態，第二個 filter parse_query 為處理網址帶入的篩選參數，當 parese_query 傳送參數後，WordPress 會透過 restrict_manager_posts 來取得符合條件的資料，set_status_filter 與 get_status_filter_result 實作細節一樣在 class-ods-wc-admin.php</p>
<p><strong><strong>ods-wc-order-export/class/class-ods-wc-admin.php</strong></strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * 處理後台系統傳送欄位註冊、介面顯示
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_WC_Admin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  
  <span class="token keyword">class</span> <span class="token class-name">ODS_WC_Admin</span> <span class="token punctuation">&#123;</span>
   
    <span class="token operator">...</span>
   
   <span class="token comment">/**
     * 訂單列表加入系統傳送狀態查詢下拉選單
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_status_filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">global</span> <span class="token variable">$typenow</span><span class="token punctuation">;</span>
      <span class="token keyword">global</span> <span class="token variable">$wp_query</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$typenow</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'shop_order'</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
          <span class="token variable">$plugins</span> <span class="token operator">=</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span><span class="token punctuation">;</span>
          <span class="token variable">$current_plugin</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_status'</span>\<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$current_plugin</span> <span class="token operator">=</span> <span class="token variable">$_GET</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_status'</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span> <span class="token delimiter important">?></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>send_status<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>send_status<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">selected</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'all'</span><span class="token punctuation">,</span> <span class="token variable">$current_plugin</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span></span><span class="token punctuation">></span></span>系統傳送狀態（所有）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
            <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span> <span class="token variable">$plugins</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token delimiter important">?></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">esc_attr</span><span class="token punctuation">(</span> <span class="token variable">$key</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">selected</span><span class="token punctuation">(</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$current_plugin</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span></span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">esc_attr</span><span class="token punctuation">(</span> <span class="token variable">$key</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
            <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">&#125;</span> <span class="token delimiter important">?></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
      <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">/**
     * 訂單列表取得系統傳送狀態查詢結果
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_status_filter_result</span><span class="token punctuation">(</span> <span class="token variable">$query</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">global</span> <span class="token variable">$pagenow</span><span class="token punctuation">;</span>
      <span class="token variable">$post_type</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'post_type'</span>\<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_GET</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'post_type'</span>\<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">is_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$pagenow</span><span class="token operator">==</span><span class="token string single-quoted-string">'edit.php'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$post_type</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'shop_order'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_status'</span>\<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_status'</span>\<span class="token punctuation">]</span> <span class="token operator">!=</span><span class="token string single-quoted-string">'all'</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$query</span><span class="token operator">-></span><span class="token property">query_vars</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'post_status'</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'all'</span><span class="token punctuation">;</span>
        <span class="token variable">$query</span><span class="token operator">-></span><span class="token property">query_vars</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'meta_key'</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_KEY</span><span class="token punctuation">;</span>
        <span class="token variable">$query</span><span class="token operator">-></span><span class="token property">query_vars</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'meta_value'</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_GET</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_status'</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$query</span><span class="token operator">-></span><span class="token property">query_vars</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'meta_compare'</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'='</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>set_status_filter 增加一組下拉選單，選項內容為系統傳送狀態的文字，並將選取到的值透過 $_GET 方式進行傳送，get_status_filter_result 則處理資料顯示，根據從 set_status_filter 傳出來的 $_GET[‘send_status’] 來進行比對，比對方式為完全符合，參考第 48 行 $query-&gt;query_vars[‘meta_compare’] = ‘=’ 。</p>
<p>完成後的介面如下：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/07/CleanShot-2020-07-08-at-11.40.58.jpg"></p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/07/CleanShot-2020-07-08-at-11.41.16.jpg"></p>
<h3 id="三、勾選訂單後的批次操作處理"><a href="#三、勾選訂單後的批次操作處理" class="headerlink" title="三、勾選訂單後的批次操作處理"></a>三、勾選訂單後的批次操作處理</h3><p>後台介面最後要處理的動作，就是當使用批次操作時可以改變系統傳送狀態，我們需要先新增操作的動作，然後根據選到的動作來進行相對應的處理方式，一樣把需要的 Hook 先掛好：</p>
<p><strong>ods-wc-order-export/class/class-ods-hook.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token operator">...</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_Hook'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  
  <span class="token keyword">class</span> <span class="token class-name">ODS_Hook</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">private</span> <span class="token variable">$plugin_version</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span> <span class="token variable">$wc_admin</span><span class="token punctuation">,</span> <span class="token variable">$csv</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

      <span class="token operator">...</span>

      <span class="token comment">// 訂單批次操作加入新動作</span>
      <span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'bulk_actions-edit-shop_order'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$csv</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'set_send_custom_bulk_actions'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'handle_bulk_actions-edit-shop_order'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$csv</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'set_send_custom_bulk_actions_handler'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'admin_notices'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$csv</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'set_send_custom_bulk_actions_notice'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token variable">$erp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ODS_Hook</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">ODS_WC_Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">ODS_CSV</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因為批次操作會關係到 csv 的產出作業，所以我們用了新類別 ODS_CSV，並宣告物件 $csv，bulk_actions-edit-shop_order 是加入新的批次操作動作，handle_bulk_actions-edit-shop_order 是處理對應的動作，這兩個 filter 最後帶的都是 post type，所以可以根據需要動態置換 Hook 名稱。</p>
<p>admin_notices 是批次操作結束後所顯示的提示訊息，用來告知管理員處理狀態，稍後我們也會做訂傳送狀態的驗證判斷，像是要把訂單變成已傳送必須是未傳送的訂單，透過 admin_notices 就可以提醒管理員為何變更失敗或成功。</p>
<p>接下來的實作細節在 class-ods-csv.php</p>
<p><strong>ods-wc-order-export/class/class-ods-csv.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * 1.設定批次操作要執行的動作
 * 2.組合 CSV 欄位
 * 3.執行 FTP 上傳
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_CSV'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">class</span> <span class="token class-name">ODS_CSV</span> <span class="token punctuation">&#123;</span>

     <span class="token comment">/**
     * 訂單列表加入系統傳送狀態批次操作項目
     * 
     * @param array $bulk_actions 現有操作項目
     * 
     * @return array $bulk_actions 新增操作項目
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_send_custom_bulk_actions</span><span class="token punctuation">(</span> <span class="token variable">$bulk_actions</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token variable">$bulk_actions</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_to_cancel'</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'將系統傳送狀態變更為'</span><span class="token operator">.</span><span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span>\<span class="token punctuation">[</span><span class="token number">1</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token variable">$bulk_actions</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_to_delivered'</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'將系統傳送狀態變更為'</span><span class="token operator">.</span><span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span>\<span class="token punctuation">[</span><span class="token number">2</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token variable">$bulk_actions</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 訂單列表系統傳送批次操作項目點選後要做的事
     * 
     * @param string $redirect_to 跳轉頁面
     * @param string $doaction 操作項目代稱
     * @param array $post_ids 被勾選的訂單 ID
     * 
     * @return string $redirect_to 操作完成後跳轉的頁面
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_send_custom_bulk_actions_handler</span><span class="token punctuation">(</span> <span class="token variable">$redirect_to</span><span class="token punctuation">,</span> <span class="token variable">$doaction</span><span class="token punctuation">,</span> <span class="token variable">$post_ids</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$doaction</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token string single-quoted-string">'send_to_cancel'</span><span class="token punctuation">:</span>
          <span class="token comment">// 變為已傳送要做的事</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string single-quoted-string">'send_to_delivered'</span><span class="token punctuation">:</span>
          <span class="token comment">// 變為取消傳送要做的事</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
          <span class="token comment"># code...</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> <span class="token variable">$redirect_to</span><span class="token punctuation">;</span>
     
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 訂單列表顯示系統傳送狀態變更完成後的訊息
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_send_custom_bulk_actions_notice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token delimiter important">?></span></span>
      <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_status_text'</span>\<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_status_changed'</span>\<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token delimiter important">?></span></span>
        <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'error'</span> <span class="token operator">===</span> <span class="token variable">$_GET</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_status_changed'</span>\<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token delimiter important">?></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>notice notice-error is-dismissible<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_GET</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_status_text'</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token delimiter important">?></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>notice notice-success is-dismissible<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_GET</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_status_text'</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">endif</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>
      <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">endif</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>
    <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">&#125;</span>    

  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用 set_send_custom_bulk_actions 加入兩個新的批次操作動作，然後 set_send_custom_bulk_actions_handler 就可以根據選擇的動作進行事件的處理。set_send_custom_bulk_actions_notice 提示文字稍後會再補上，主要是用兩個參數 send_status_text 與 send_status_changed 來決定是否顯示以及提示文字內容。</p>
<p>加入批次操作後介面如下圖：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/07/CleanShot-2020-07-08-at-12.36.54.jpg"></p>
<p>後台的介面設計差不多這樣就算完成了，接下來是處理 WooCommerce 訂單資料。</p>
<h2 id="WooCommerce-訂單資料取得"><a href="#WooCommerce-訂單資料取得" class="headerlink" title="WooCommerce 訂單資料取得"></a>WooCommerce 訂單資料取得</h2><p>為了方便取得 WooCommerce 訂單資料，我們另外寫一支 class-ods-wc-order.php 來處理，除了訂單本身的資料外，還可以把需要計算或是組合資料的先在這邊處理，讓 class-ods-csv.php 專注在組合 csv。</p>
<p>這支類別包含了訂單的五個部分：基本資料、商品明細、運費資料、稅務資料費用資料與折價券資料，完整原始碼為參考 Web Hat 的 <a href="https://www.webhat.in/article/woocommerce-tutorial/how-to-get-order-details-by-order-id/">How to Get Order Details by Order ID</a> 這篇教學，改寫為 class 後節錄如下：</p>
<p><strong><strong>ods-wc-order-export/class/class-ods-wc-order.php</strong></strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>


<span class="token comment">/**
 * 取得訂單資訊
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_WC_Order'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">class</span> <span class="token class-name">ODS_WC_Order</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/**
 * 取得訂單內容
 *
 * @param int $id 訂單 post id
 * @param string $field 訂單主要欄位名稱
 * @param string $subfield 訂單次要欄位名稱
 * 
 * @return array $order_data 訂單資料
 */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token variable">$field</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token variable">$subfield</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_wp_error</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>

<span class="token variable">$dp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$filter</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'dp'</span>\<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$filter</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'dp'</span>\<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token variable">$order</span> <span class="token operator">=</span> <span class="token function">wc_get_order</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$order</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// 基本資料</span>
<span class="token variable">$order_data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'id'</span> <span class="token operator">=></span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'order_number'</span> <span class="token operator">=></span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_order_number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'created_at'</span> <span class="token operator">=></span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_date_created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token operator">...</span>
        <span class="token comment">// 略</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_items</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$item_id</span> <span class="token operator">=></span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$product</span> <span class="token operator">=</span> <span class="token variable">$item</span><span class="token operator">-></span><span class="token function">get_product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$product_id</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
<span class="token variable">$product_sku</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$product</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$product_id</span> <span class="token operator">=</span> <span class="token variable">$product</span><span class="token operator">-></span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$product_sku</span> <span class="token operator">=</span> <span class="token variable">$product</span><span class="token operator">-></span><span class="token function">get_sku</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">// 商品資料</span>
<span class="token variable">$order_data</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'line_items'</span>\<span class="token punctuation">]</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'id'</span> <span class="token operator">=></span> <span class="token variable">$item_id</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'subtotal'</span> <span class="token operator">=></span> <span class="token function">wc_format_decimal</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_line_subtotal</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$dp</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'subtotal_tax'</span> <span class="token operator">=></span> <span class="token function">wc_format_decimal</span><span class="token punctuation">(</span><span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'line_subtotal_tax'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$dp</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'total'</span> <span class="token operator">=></span> <span class="token function">wc_format_decimal</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_line_total</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$dp</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'total_tax'</span> <span class="token operator">=></span> <span class="token function">wc_format_decimal</span><span class="token punctuation">(</span><span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'line_tax'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$dp</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'price'</span> <span class="token operator">=></span> <span class="token function">wc_format_decimal</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_item_total</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$dp</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token operator">...</span>
        <span class="token comment">// 略</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">// 運費資料</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_shipping_methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$shipping_item_id</span> <span class="token operator">=></span> <span class="token variable">$shipping_item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$order_data</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'shipping_lines'</span>\<span class="token punctuation">]</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'id'</span>  <span class="token operator">=></span> <span class="token variable">$shipping_item_id</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'method_id'</span> <span class="token operator">=></span> <span class="token variable">$shipping_item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'method_id'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'method_title'</span> <span class="token operator">=></span> <span class="token variable">$shipping_item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'total'</span> <span class="token operator">=></span> <span class="token function">wc_format_decimal</span><span class="token punctuation">(</span><span class="token variable">$shipping_item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'cost'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$dp</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 税相關資料</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_tax_totals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$tax_code</span> <span class="token operator">=></span> <span class="token variable">$tax</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$order_data</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'tax_lines'</span>\<span class="token punctuation">]</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'id'</span> <span class="token operator">=></span> <span class="token variable">$tax</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'rate_id'</span> <span class="token operator">=></span> <span class="token variable">$tax</span><span class="token operator">-></span><span class="token property">rate_id</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'code'</span> <span class="token operator">=></span> <span class="token variable">$tax_code</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token variable">$tax</span><span class="token operator">-></span><span class="token property">label</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'total'</span><span class="token operator">=></span> <span class="token function">wc_format_decimal</span><span class="token punctuation">(</span><span class="token variable">$tax</span><span class="token operator">-></span><span class="token property">amount</span><span class="token punctuation">,</span> <span class="token variable">$dp</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'compound'</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword type-casting">bool</span><span class="token punctuation">)</span> <span class="token variable">$tax</span><span class="token operator">-></span><span class="token property">is_compound</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 費用資料</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_fees</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$fee_item_id</span> <span class="token operator">=></span> <span class="token variable">$fee_item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$order_data</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'fee_lines'</span>\<span class="token punctuation">]</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'id'</span> <span class="token operator">=></span> <span class="token variable">$fee_item_id</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token variable">$fee_item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'tax_class'</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$fee_item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'tax_class'</span>\<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$fee_item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'tax_class'</span>\<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token constant">null</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'total'</span> <span class="token operator">=></span> <span class="token function">wc_format_decimal</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_line_total</span><span class="token punctuation">(</span><span class="token variable">$fee_item</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$dp</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'total_tax'</span> <span class="token operator">=></span> <span class="token function">wc_format_decimal</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_line_tax</span><span class="token punctuation">(</span><span class="token variable">$fee_item</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$dp</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 折價券資料</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_items</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'coupon'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$coupon_item_id</span> <span class="token operator">=></span> <span class="token variable">$coupon_item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$order_data</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'coupon_lines'</span>\<span class="token punctuation">]</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'id'</span> <span class="token operator">=></span> <span class="token variable">$coupon_item_id</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'code'</span> <span class="token operator">=></span> <span class="token variable">$coupon_item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'amount'</span> <span class="token operator">=></span> <span class="token function">wc_format_decimal</span><span class="token punctuation">(</span><span class="token variable">$coupon_item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'discount_amount'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$dp</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$field</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'line_items'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token variable">$line_items</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_items</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$item_id</span> <span class="token operator">=></span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$line_items</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$order_data</span>\<span class="token punctuation">[</span><span class="token variable">$field</span>\<span class="token punctuation">]</span>\<span class="token punctuation">[</span><span class="token variable">$i</span>\<span class="token punctuation">]</span>\<span class="token punctuation">[</span><span class="token variable">$subfield</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token variable">$line_items</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token variable">$subfield</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$order_data</span>\<span class="token punctuation">[</span><span class="token variable">$field</span>\<span class="token punctuation">]</span>\<span class="token punctuation">[</span><span class="token variable">$subfield</span>\<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token variable">$order_data</span>\<span class="token punctuation">[</span><span class="token variable">$field</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>等下在 class-ods-csv.php 裡面就可以使用 ODS_WC_Order::get_order_detail 來取得訂單資料。</p>
<h2 id="匯出-csv-檔與-FTP-上傳"><a href="#匯出-csv-檔與-FTP-上傳" class="headerlink" title="匯出 csv 檔與 FTP 上傳"></a>匯出 csv 檔與 FTP 上傳</h2><p>準備好訂單資料，接下來就是開始整理要輸出的 csv 檔，當訂單的系統傳送狀態變更為已傳送與取消傳送時，都需要執行匯出的動作，我們先處理匯出 csv 的細節，也就是組合訂單資料，我們先定義好資料的標頭，然後使用商品名稱來依序輸出：</p>
<h3 id="整理-csv-欄位"><a href="#整理-csv-欄位" class="headerlink" title="整理 csv 欄位"></a>整理 csv 欄位</h3><p><strong>ods-wc-order-export/class/class-ods-csv.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * 1.設定批次操作要執行的動作
 * 2.組合 CSV 欄位
 * 3.執行 FTP 上傳
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_CSV'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">class</span> <span class="token class-name">ODS_CSV</span> <span class="token punctuation">&#123;</span>

    <span class="token operator">...</span>
    
    <span class="token comment">/**
     * 傳送訂單到 send
     * 
     * @param array $post_ids 要傳送的訂單 post ID
     * @param string $send_stauts 此次傳送處理的動作
     * @param string $send_status 傳送後的狀態
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_send_transfer</span><span class="token punctuation">(</span><span class="token variable">$post_ids</span><span class="token punctuation">,</span> <span class="token variable">$send_status</span><span class="token punctuation">,</span> <span class="token variable">$send_status_update</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

      <span class="token comment">//設定系統環境，確保輸出執行環境無礙</span>
      <span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">//開始準備一組匯出陣列</span>
      <span class="token variable">$csv_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">//先放置 CSV 檔案的標頭資料</span>
      <span class="token variable">$csv_arr</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'訂購人'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'訂購人電話'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'訂單編號'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'收貨人'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'下單時間'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'商品編號'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'商品名稱'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'商品數量'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'訂單金額'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'運費'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'送貨郵遞區號'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'送貨地址'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'原售價'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'商品售價'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'付款方式'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">//設定檔案輸出名稱</span>
      <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"order-export_"</span> <span class="token operator">.</span> <span class="token function">current_time</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"YmdHis"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">".csv"</span><span class="token punctuation">;</span>
      <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Pragma: no-cache'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Expires: 0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token variable">$order_data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$amount</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
      <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$post_ids</span> <span class="token keyword">as</span> <span class="token variable">$post_id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token variable">$order_data</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
          <span class="token string single-quoted-string">'billing_last_name'</span>   <span class="token operator">=></span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'billing_address'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'last_name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'billing_phone'</span>       <span class="token operator">=></span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'billing_address'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'phone'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'order_id'</span>            <span class="token operator">=></span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'order_number'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'shipping_last_name'</span>  <span class="token operator">=></span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'shipping_address'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'last_name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'order_date'</span>          <span class="token operator">=></span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'created_at'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'sku'</span>                 <span class="token operator">=></span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'line_items'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'sku'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'product_name'</span>        <span class="token operator">=></span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'line_items'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'quantity'</span>            <span class="token operator">=></span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'line_items'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'quantity'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'order_total'</span>         <span class="token operator">=></span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'total'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'shipping_cost'</span>       <span class="token operator">=></span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'total_shipping'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'biiling_postcode'</span>    <span class="token operator">=></span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'billing_address'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'postcode'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'shipping_address'</span>    <span class="token operator">=></span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'taiwan_address'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'regular_price'</span>       <span class="token operator">=></span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'line_items'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'regular_price'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'payment_method'</span>      <span class="token operator">=></span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'payment_details'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'method_title'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token keyword">foreach</span><span class="token punctuation">(</span> <span class="token variable">$order_data</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment">/**
         * 組 csv row
         */</span>
        <span class="token keyword">foreach</span><span class="token punctuation">(</span> <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'product_name'</span>\<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$name</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
          <span class="token variable">$csv_arr</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
            <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'billing_last_name'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'billing_phone'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'order_id'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'shipping_last_name'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'order_date'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'sku'</span>\<span class="token punctuation">]</span>\<span class="token punctuation">[</span><span class="token variable">$j</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token variable">$name</span><span class="token punctuation">,</span>
            <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'quantity'</span>\<span class="token punctuation">]</span>\<span class="token punctuation">[</span><span class="token variable">$j</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'order_total'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'shipping_cost'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'biiling_postcode'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'shipping_address'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'regular_price'</span>\<span class="token punctuation">]</span>\<span class="token punctuation">[</span><span class="token variable">$j</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'regular_price'</span>\<span class="token punctuation">]</span>\<span class="token punctuation">[</span><span class="token variable">$j</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token variable">$item</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'payment_method'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token comment">// 正式循環輸出陣列內容</span>
      <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$csv_arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$content</span> <span class="token operator">.=</span> <span class="token class-name static-context">ODS_Helper</span><span class="token operator">::</span><span class="token function">csvstr</span><span class="token punctuation">(</span><span class="token variable">$csv_arr</span>\<span class="token punctuation">[</span><span class="token variable">$j</span>\<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"\\n"</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token comment">// 把 csv 寫入 wp-content/uploads</span>
      <span class="token variable">$upload_dir</span> <span class="token operator">=</span> <span class="token function">wp_upload_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">file_put_contents</span><span class="token punctuation">(</span> <span class="token variable">$upload_dir</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'basedir'</span>\<span class="token punctuation">]</span><span class="token operator">.</span><span class="token string single-quoted-string">'/send/'</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span>  <span class="token constant">LOCK_EX</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>set_send_transfer 主要負責 csv 的欄位整理，接受三個參數，分別是被勾選的訂單 ID，訂單未處理前跟處理後要變更的系統傳送狀態，這在稍後會用來驗證訂單是否為正確的傳送狀態，驗證過才能進行變更。</p>
<h3 id="指定給批次操作對應動作"><a href="#指定給批次操作對應動作" class="headerlink" title="指定給批次操作對應動作"></a>指定給批次操作對應動作</h3><p>到這邊匯出 csv 的動作就完成了，接下來我們要把它指派給批次操作的動作，另外還要做訂單驗證以免重複傳送已傳送的訂單。</p>
<p><strong>ods-wc-order-export/class/class-ods-csv.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * 1.設定批次操作要執行的動作
 * 2.組合 CSV 欄位
 * 3.執行 FTP 上傳
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_CSV'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">class</span> <span class="token class-name">ODS_CSV</span> <span class="token punctuation">&#123;</span>

     <span class="token operator">...</span>
       
     <span class="token comment">/**
     * 訂單列表改變系統傳送顯示狀態
     * 
     * @param array $post_ids 有被勾選到的訂單 ID
     * 
     * @return string $status 送出完成後的新狀態
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update_send_status</span><span class="token punctuation">(</span> <span class="token variable">$post_ids</span><span class="token punctuation">,</span> <span class="token variable">$status</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$post_ids</span> <span class="token keyword">as</span> <span class="token variable">$post_id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">update_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_KEY</span><span class="token punctuation">,</span> <span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">/**
     * 取得選取訂單的系統傳送狀態
     * 
     * @param array $post_ids 有被勾選到的訂單 ID
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">get_send_status</span><span class="token punctuation">(</span><span class="token variable">$post_ids</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token variable">$send_stauts_array</span> <span class="token operator">=</span> \<span class="token punctuation">[</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$post_ids</span> <span class="token keyword">as</span> <span class="token variable">$post_id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$send_stauts_array</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name static-context">ODS_WC_Order</span><span class="token operator">::</span><span class="token function">get_order_detail</span><span class="token punctuation">(</span><span class="token variable">$post_id</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'send_status'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$send_stauts_array</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
       
     <span class="token comment">/**
     * 判斷狀態送出後的頁面跳轉要做的事
     * 
     * @param array $post_ids 有被勾選到的訂單 ID
     * @param string $send_status_before 訂單更新前的系統傳送狀態
     * @param string $send_status_updated 訂單更新後的系統傳送狀態
     * @param string $redirect 跳轉網址
     * 
     * @return string $redirect 返回更新狀態判斷與顯示文字
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">set_send_custom_bulk_actions_redirect</span><span class="token punctuation">(</span> <span class="token variable">$post_ids</span><span class="token punctuation">,</span> <span class="token variable">$send_status_before</span><span class="token punctuation">,</span> <span class="token variable">$send_stauts_updated</span><span class="token punctuation">,</span> <span class="token variable">$redirect</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_send_status</span><span class="token punctuation">(</span><span class="token variable">$post_ids</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_send_status</span><span class="token punctuation">(</span><span class="token variable">$post_ids</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token variable">$send_status_before</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">set_send_transfer</span><span class="token punctuation">(</span> <span class="token variable">$post_ids</span><span class="token punctuation">,</span> <span class="token variable">$send_status_before</span><span class="token punctuation">,</span> <span class="token variable">$csv_filename</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">update_send_status</span><span class="token punctuation">(</span> <span class="token variable">$post_ids</span><span class="token punctuation">,</span><span class="token variable">$send_stauts_updated</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$redirect</span> <span class="token operator">=</span> <span class="token function">add_query_arg</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'send_status_text'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'所有選取訂單之系統傳送狀態變更完成！'</span><span class="token punctuation">,</span> <span class="token variable">$redirect</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$redirect</span> <span class="token operator">=</span> <span class="token function">add_query_arg</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'send_status_changed'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'success'</span><span class="token punctuation">,</span> <span class="token variable">$redirect</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$redirect</span> <span class="token operator">=</span> <span class="token function">add_query_arg</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'send_status_text'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'系統傳送狀態變更失敗，所有選取訂單之系統傳送狀態應皆為「'</span><span class="token operator">.</span><span class="token variable">$send_status_before</span><span class="token operator">.</span><span class="token string single-quoted-string">'」！'</span><span class="token punctuation">,</span> <span class="token variable">$redirect</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$redirect</span> <span class="token operator">=</span> <span class="token function">add_query_arg</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'send_status_changed'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'error'</span><span class="token punctuation">,</span> <span class="token variable">$redirect</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> <span class="token variable">$redirect</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
       
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>set_send_custom_bulk_actions_redirect 帶四個參數，分別是被勾選的訂單 ID、變更前與變更後的傳送壯台，以及變更後的跳轉網址。</p>
<p>首先先判斷被勾選訂單的系統傳送狀態是否都一樣，然後這個狀態要符合變更前的系統傳送狀態，條件都成立後才進行 set_send_transfer 的動作，執行完成後使用 update_send_status 來改變訂單的傳送狀態，最後兩個 add_qeury_arg 是提供給 admin_notice 用的顯示判斷，用來告知後台操作人員系統傳送狀態的變更結果。</p>
<p>最後我們回到前面的 set_send_custom_bulk_actions_handler，把 set_send_custom_bulk_actions_redirect 帶入對應的參數指派給選擇到的操作：</p>
<p><strong>ods-wc-order-export/class/class-ods-csv.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * 1.設定批次操作要執行的動作
 * 2.組合 CSV 欄位
 * 3.執行 FTP 上傳
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_CSV'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">class</span> <span class="token class-name">ODS_CSV</span> <span class="token punctuation">&#123;</span>

     <span class="token comment">/**
     * 訂單列表加入系統傳送狀態批次操作項目
     * 
     * @param array $bulk_actions 現有操作項目
     * 
     * @return array $bulk_actions 新增操作項目
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_send_custom_bulk_actions</span><span class="token punctuation">(</span> <span class="token variable">$bulk_actions</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token variable">$bulk_actions</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_to_cancel'</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'將系統傳送狀態變更為'</span><span class="token operator">.</span><span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span>\<span class="token punctuation">[</span><span class="token number">1</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token variable">$bulk_actions</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'send_to_delivered'</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'將系統傳送狀態變更為'</span><span class="token operator">.</span><span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span>\<span class="token punctuation">[</span><span class="token number">2</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token variable">$bulk_actions</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 訂單列表系統傳送批次操作項目點選後要做的事
     * 
     * @param string $redirect_to 跳轉頁面
     * @param string $doaction 操作項目代稱
     * @param array $post_ids 被勾選的訂單 ID
     * 
     * @return string $redirect_to 操作完成後跳轉的頁面
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_send_custom_bulk_actions_handler</span><span class="token punctuation">(</span> <span class="token variable">$redirect_to</span><span class="token punctuation">,</span> <span class="token variable">$doaction</span><span class="token punctuation">,</span> <span class="token variable">$post_ids</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$doaction</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token string single-quoted-string">'send_to_cancel'</span><span class="token punctuation">:</span>
          <span class="token comment">// 變為已傳送要做的事</span>
          <span class="token variable">$redirect_to</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">set_send_custom_bulk_actions_redirect</span><span class="token punctuation">(</span> <span class="token variable">$post_ids</span><span class="token punctuation">,</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span>\<span class="token punctuation">[</span><span class="token number">0</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span>\<span class="token punctuation">[</span><span class="token number">1</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$redirect_to</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string single-quoted-string">'send_to_delivered'</span><span class="token punctuation">:</span>
          <span class="token comment">// 變為取消傳送要做的事</span>
          <span class="token variable">$redirect_to</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">set_send_custom_bulk_actions_redirect</span><span class="token punctuation">(</span> <span class="token variable">$post_ids</span><span class="token punctuation">,</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span>\<span class="token punctuation">[</span><span class="token number">1</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span>\<span class="token punctuation">[</span><span class="token number">2</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$redirect_to</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
          <span class="token comment"># code...</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> <span class="token variable">$redirect_to</span><span class="token punctuation">;</span>
     
    <span class="token punctuation">&#125;</span>
    
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>補上 case 為 send_to_cancel 與 send_to_delivered 的實作細節，也就是呼叫 set_send_custom_bulk_actions_redirect，這樣就完成了執行批次操作後，csv 檔匯出到 wp-content/uploads/send 資料夾的功能了！</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/07/CleanShot-2020-07-09-at-11.03.29-1024x319.jpg"></p>
<h3 id="FTP-上傳"><a href="#FTP-上傳" class="headerlink" title="FTP 上傳"></a>FTP 上傳</h3><p>因為是要整合客戶的內部系統，所以必須把我們整理好的 csv 檔上傳到第三方主機上，這次使用的是 FTP 上傳方式，為了方便日後重複使用，另外寫一支 class-ods-ftp.php 來處理 FTP 的上傳功能，加入後只要在 class-ods-csv.php 直接使用即可。</p>
<p><strong>ods-wc-order-export/class/class-ods-ftp.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * FTP 作業
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_FTP'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">class</span> <span class="token class-name">ODS_FTP</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">private</span> <span class="token variable">$host</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token comment">//遠端伺服器地址</span>
    <span class="token keyword">private</span> <span class="token variable">$user</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token comment">//ftp使用者名稱</span>
    <span class="token keyword">private</span> <span class="token variable">$pass</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token comment">//ftp密碼</span>
    <span class="token keyword">private</span> <span class="token variable">$port</span><span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">;</span><span class="token comment">//ftp登入埠</span>
    <span class="token keyword">private</span> <span class="token variable">$error</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token comment">//最後失敗時的錯誤資訊</span>
    <span class="token keyword">protected</span> <span class="token variable">$conn</span><span class="token punctuation">;</span><span class="token comment">//ftp登入資源</span>

    <span class="token comment">/**
     * 可以在例項化類的時候配置資料，也可以在下面的connect方法中配置資料
     * Ftp constructor.
     * @param array $config
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$config</span><span class="token operator">=</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span> <span class="token keyword">OR</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 初始化資料
     * @param array $config 配置檔案陣列
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$config</span><span class="token operator">=</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">host</span> <span class="token operator">=</span> <span class="token variable">$config</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">user</span> <span class="token operator">=</span> <span class="token variable">$config</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">pass</span> <span class="token operator">=</span> <span class="token variable">$config</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'pass'</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">port</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$config</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'port'</span>\<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">// 以下略</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>FTP 的帳密設定在外掛的主要檔案 ods-wc-order-export.php 裡面，接下來回到 class-ods-csv.php 裡面的 set_send_transfer 方法，在最下面把 FTP 上傳加進去：</p>
<p><strong>ods-wc-order-export/class/class-ods-csv.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * 1.設定批次操作要執行的動作
 * 2.組合 CSV 欄位
 * 3.執行 FTP 上傳
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_CSV'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">class</span> <span class="token class-name">ODS_CSV</span> <span class="token punctuation">&#123;</span>

    <span class="token operator">...</span>
    
    <span class="token comment">/**
     * 傳送訂單到 send
     * 
     * @param array $post_ids 要傳送的訂單 post ID
     * @param string $send_stauts 此次傳送處理的動作
     * @param string $send_status 傳送後的狀態
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_send_transfer</span><span class="token punctuation">(</span><span class="token variable">$post_ids</span><span class="token punctuation">,</span> <span class="token variable">$send_status</span><span class="token punctuation">,</span> <span class="token variable">$send_status_update</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

      <span class="token operator">...</span>
        
      <span class="token comment">// FTP 上傳作業</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token constant">ODS_FTP_DATA</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'enable'</span>\<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$config</span> <span class="token operator">=</span> \<span class="token punctuation">[</span>
          <span class="token string single-quoted-string">'host'</span><span class="token operator">=></span><span class="token constant">ODS_FTP_DATA</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'user'</span><span class="token operator">=></span><span class="token constant">ODS_FTP_DATA</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'pass'</span><span class="token operator">=></span><span class="token constant">ODS_FTP_DATA</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'pass'</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span>
        \<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$ftp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ODS_FTP</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$ftp</span><span class="token operator">-></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$local_file</span> <span class="token operator">=</span> <span class="token variable">$upload_dir</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'basedir'</span>\<span class="token punctuation">]</span><span class="token operator">.</span><span class="token string single-quoted-string">'/send/'</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span>
        <span class="token variable">$remote_file</span> <span class="token operator">=</span> <span class="token constant">ODS_FTP_DATA</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'path'</span>\<span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span>
        <span class="token variable">$ftp</span><span class="token operator">-></span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token variable">$local_file</span><span class="token punctuation">,</span><span class="token variable">$remote_file</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>指定 wp-content/uploads/send/.csv 來進行上傳，這樣一來當匯出完成後就能自動上傳到遠端主機。</p>
<h2 id="排程設定"><a href="#排程設定" class="headerlink" title="排程設定"></a>排程設定</h2><p>完成手動的操作之後，使用 wp-cron 排程就能讓上述全部動作自動化，只要在固定時間呼叫 class-ods-csv.php 的 set_send_custom_bulk_actions_redirect 方法就能完成了，wp-cron 設定包含三個步驟：外掛啟用時註冊排程 Hook 名稱、把要做的任務掛到這個 Hook 上、外掛停用時取消排程 Hook。</p>
<h3 id="註冊排程-Hook-名稱"><a href="#註冊排程-Hook-名稱" class="headerlink" title="註冊排程 Hook 名稱"></a>註冊排程 Hook 名稱</h3><p>有別於其他功能的 Hook，我們要把排程 Hook 寫在外掛的主程式裡面：</p>
<p><strong>ods-wc-order-export.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * Plugin Name:       ODS WooCommerce Order Export
 * Plugin URI:        https://oberonlai.blog
 * Description:       WooCommerce 客製化報表自動匯出&amp;上傳功能
 * Version:           1.0.1
 * Author:            Oberon Lai
 * Author URI:        https://oberonlai.blog
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">...</span>

<span class="token comment">// 加入排程 Hook</span>
<span class="token keyword">function</span> <span class="token function">sp_activation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">wp_next_scheduled</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ods_wc_order_export_cron'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">wp_schedule_event</span><span class="token punctuation">(</span> <span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'daily'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ods_wc_order_export_cron'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">register_activation_hook</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_activation'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">sp_deactivation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token function">wp_clear_scheduled_hook</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ods_wc_order_export_cron'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">register_deactivation_hook</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sp_deactivation'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ods_wc_order_export_cron 為 Hook 名稱，稍後需要執行的任務會掛在這個 Hook 上，wp_schedule_event 為註冊排程 Hook 的 <span class="token keyword">function</span>，第一個參數 timestamp，使用 strtotime 為 <span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">0</span>，所以如果想在台灣時間下午一點執行的話，就要寫 <span class="token number">13</span><span class="token operator">-</span><span class="token number">8</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span>。

第二個參數 daily 設定執行頻率為每天，最後則是 Hook 名稱。使用 register_activation_hook 讓外掛啟用時註冊這個排程 Hook，而用 register_deactivation_hook 在外掛停用時取消這個排程，這樣可以減少主機的壓力，沒用到的東西就把它移除掉。

接下來與前面的步驟一樣，我們先把 Hook 處理好再來寫實作細節，開啟 <span class="token keyword">class</span><span class="token operator">-</span>ods<span class="token operator">-</span>hook<span class="token operator">.</span>php 來加入排程：</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>ods-wc-order-export/class/class-ods-hook.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * 1.引入 class
 * 2.訂單新增系統傳送狀態欄位，用來紀錄該訂單是否已被傳送至企業內部系統
 * 3.處理 Hooks
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class-ods-helper.php'</span><span class="token punctuation">;</span>
<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class-ods-wc-admin.php'</span><span class="token punctuation">;</span>
<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class-ods-wc-order.php'</span><span class="token punctuation">;</span>
<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class-ods-csv.php'</span><span class="token punctuation">;</span>
<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class-ods-ftp.php'</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_Hook'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  
  <span class="token keyword">class</span> <span class="token class-name">ODS_Hook</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">private</span> <span class="token variable">$plugin_version</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span> <span class="token variable">$wc_admin</span><span class="token punctuation">,</span> <span class="token variable">$csv</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

      <span class="token operator">...</span>

      <span class="token comment">// 訂單自動匯出 csv</span>
      <span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ods_wc_order_export_cron'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token variable">$csv</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'set_transfer_delivered'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token variable">$erp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ODS_Hook</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">ODS_WC_Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">ODS_CSV</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>這邊還有一個 Hook 要補上：因為自動處理的訂單需要篩選出系統傳送狀態為未傳送的訂單，而使用 WC_Order_Query 要篩選自訂欄位必須要另外增加 Hook 來處理，所以再加上下面這段 Hook：</p>
<p><strong>ods-wc-order-export/class/class-ods-hook.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * 1.引入 class
 * 2.訂單新增系統傳送狀態欄位，用來紀錄該訂單是否已被傳送至企業內部系統
 * 3.處理 Hooks
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class-ods-helper.php'</span><span class="token punctuation">;</span>
<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class-ods-wc-admin.php'</span><span class="token punctuation">;</span>
<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class-ods-wc-order.php'</span><span class="token punctuation">;</span>
<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class-ods-csv.php'</span><span class="token punctuation">;</span>
<span class="token keyword">require</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'class-ods-ftp.php'</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_Hook'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  
  <span class="token keyword">class</span> <span class="token class-name">ODS_Hook</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">private</span> <span class="token variable">$plugin_version</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span> <span class="token variable">$wc_admin</span><span class="token punctuation">,</span> <span class="token variable">$csv</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

      <span class="token operator">...</span>

      <span class="token comment">// 把系統傳送狀態加入 wc order query 的搜尋條件</span>
      <span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_order_data_store_cpt_get_orders_query'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ODS_WC_Order::set_order_query_custom_key'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token variable">$erp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ODS_Hook</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">ODS_WC_Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">ODS_CSV</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>set_order_query_custom_key 因為是跟 WooCommerce 訂單相關的事件，所以定義在 class-ods-wc-order.php 裡面</p>
<p><strong>ods-wc-order-export</strong>/<strong>class/class-ods-wc-order.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * 取得訂單資訊
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_WC_Order'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">class</span> <span class="token class-name">ODS_WC_Order</span> <span class="token punctuation">&#123;</span>

<span class="token operator">...</span>

<span class="token comment">/**
     * 加入 order query 搜尋條件系統傳送狀態
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">set_order_query_custom_key</span><span class="token punctuation">(</span> <span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token variable">$query_vars</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$query_vars</span>\<span class="token punctuation">[</span><span class="token constant">ODS_WC_ORDER_EXPORT_META_KEY</span>\<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$query</span>\<span class="token punctuation">[</span><span class="token string single-quoted-string">'meta_query'</span>\<span class="token punctuation">]</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
          <span class="token string single-quoted-string">'key'</span> <span class="token operator">=></span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_KEY</span><span class="token punctuation">,</span>
          <span class="token string single-quoted-string">'value'</span> <span class="token operator">=></span> <span class="token function">esc_attr</span><span class="token punctuation">(</span> <span class="token variable">$query_vars</span>\<span class="token punctuation">[</span><span class="token constant">ODS_WC_ORDER_EXPORT_META_KEY</span>\<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> <span class="token variable">$query</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下來去 class-ods-csv.php 實作 set_send_transfer_delivered 的細節：</p>
<p><strong><strong>ods-wc-order-export</strong></strong>/<strong>class/class-ods-csv.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * 1.設定批次操作要執行的動作
 * 2.組合CSV欄位
 * 3.執行FTP上傳
 */</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ODS_CSV'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">class</span> <span class="token class-name">ODS_CSV</span> <span class="token punctuation">&#123;</span>

    <span class="token operator">...</span>

    <span class="token comment">/**
     * 每日自動處理配系統傳送狀態改為已傳送
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_send_transfer_delivered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WC_Order_Query</span><span class="token punctuation">(</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token string single-quoted-string">'limit'</span> <span class="token operator">=></span> <span class="token number">9999</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'return'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'ids'</span><span class="token punctuation">,</span>
        <span class="token constant">ODS_WC_ORDER_EXPORT_META_KEY</span> <span class="token operator">=></span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span>\<span class="token punctuation">[</span><span class="token number">0</span>\<span class="token punctuation">]</span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$orders</span> <span class="token operator">=</span> <span class="token variable">$query</span><span class="token operator">-></span><span class="token function">get_orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$orders</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$orders</span> <span class="token keyword">as</span> <span class="token variable">$order_id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">set_send_transfer</span><span class="token punctuation">(</span> <span class="token variable">$order_id</span><span class="token punctuation">,</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span>\<span class="token punctuation">[</span><span class="token number">0</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span>\<span class="token punctuation">[</span><span class="token number">1</span>\<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">update_send_status</span><span class="token punctuation">(</span> <span class="token variable">$order_id</span><span class="token punctuation">,</span> <span class="token constant">ODS_WC_ORDER_EXPORT_META_VALUE</span>\<span class="token punctuation">[</span><span class="token number">1</span>\<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在第 25 行的地方就是我們剛剛使用 set_order_query_custom_key 加入的功能，篩選出系統傳送狀態為未傳送的訂單，然後直接呼叫 set_send_transfer 來匯出 csv 檔即可。</p>
<p>做 WP Cron 需要注意的地方是只有當網站有訪客瀏覽時才會進行觸發，如果是三更半夜或是頁面有快取的話，很可能就不會被觸發到，最保險的方法還是用系統的 crontab 來執行 wp-cron.php，或是 wget 來進行呼叫。</p>
<p>註冊好排程之後，可以用 <a href="https://wordpress.org/plugins/wp-crontrol/">WP Crontrol</a> 這隻外掛來檢視目前站內已經有排定的 Cron，然後用 <a href="https://wordpress.org/plugins/cron-logger/">Cron Log</a> 來追蹤已經執行過的排程，用這兩隻外掛就能很方便管理 WP Cron。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>以上完整的程式碼可以參考我的 Github —&gt; <a href="https://github.com/oberonlai/ods-wc-order-export">https://github.com/oberonlai/ods-wc-order-export</a>，如果在實務上需要加入更多報表的運算或處理，像是計算折扣商品、變化商品甚至是組合商品等等，都可以用這隻外掛下去做衍伸修改，希望能幫助到有需要的朋友！</p>
<h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p>感謝下面各位大大的指導與分享：</p>
<p><a href="https://www.itread01.com/content/1544468049.html">PHP使用FTP上傳檔案到伺服器(實戰篇)</a><br><a href="https://www.mxp.tw/6852/">[PHP] 寫出一個匯出 CSV 檔案的起手式</a><br><a href="https://code.yidas.com/php-csv-excel-output/">[PHP] 匯出處理 – CSV、EXCEL匯出實例教學</a><br><a href="https://www.webhat.in/article/woocommerce-tutorial/how-to-get-order-details-by-order-id/">How to Get Order Details by Order ID</a><br><a href="https://make.wordpress.org/core/2016/10/04/custom-bulk-actions/">Using Custom Bulk Actions</a><br><a href="https://stackoverflow.com/questions/24723182/how-to-sort-orders-based-on-orders-meta-value-in-woocommerce-wordpress">How to sort orders based on orders meta value in Woocommerce / Wordpress</a><br><a href="https://stackoverflow.com/questions/53346544/add-custom-order-status-to-filter-menu-in-woocommerce-admin-orders-list">Add custom order status to filter menu in WooCommerce Admin Orders list</a><br><a href="https://github.com/woocommerce/woocommerce/wiki/wc_get_orders-and-WC_Order_Query#description">wc_get_orders and WC_Order_Query</a><br><a href="https://stackoverflow.com/questions/56132215/filter-orders-by-product-post-type-in-woocommerce-admin-orders-list-page">Filter orders by product post type in WooCommerce admin orders list page</a></p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>wp-cron</tag>
        <tag>csv</tag>
        <tag>ftp</tag>
        <tag>WooCoomerce訂單</tag>
        <tag>報表匯出</tag>
      </tags>
  </entry>
  <entry>
    <title>【 心得 】WordPress 外掛開發日記 (二) - 套件</title>
    <url>/tw/wordpress-and-composer/</url>
    <content><![CDATA[<h3 id="WordPress-外掛開發系列文目錄"><a href="#WordPress-外掛開發系列文目錄" class="headerlink" title="WordPress 外掛開發系列文目錄"></a>WordPress 外掛開發系列文目錄</h3><p><a href="https://oberonlai.blog/tw/wordpress-plugin-boilerplate">一、WordPress 外掛架構 - 紀錄曾經使用過的架構以及目前作法</a><br><a href="https://oberonlai.blog/tw/wordpress-and-composer">二、WordPress 開發實用 Composer 套件 - 介紹在寫外掛的時候可以加速開發的套件</a><br>三、載入佈景主題範本 - 如何在外掛裡面使用範本檔修改前端介面並整合前端開發流程<br>四、整合 PHPUnit 單元測試 - 避免改東牆壞西牆的問題再次發生<br>五、自動化部署 - 讓 WordPress 搭上 DevOps 的列車🚄<br>六、WordPress 外掛更新 - 自行管理未上架 wordpress.org 的外掛版本維護</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>WP 最強大的部分就是有用不完的外掛，PHP 當然也有！上 Packagist 或 Github 打 WordPress 關鍵字就能找到非常多適用於 WP 開發的套件，以下就幾套我已經拿來實戰的套件做介紹：</p>
<h2 id="posttypes"><a href="#posttypes" class="headerlink" title="posttypes"></a>posttypes</h2><p>做外掛最常見的需求就是要新增 custom post type、custom taxonomy，或是修改既有 post type 的顯示名稱以及功能修改，WP 原生的方法事實上不難使用，只要呼叫 register_post_type() 掛在 init 就能處理，</p>
<p>但隨著專案的複雜度提高，類似的程式碼就需要被重複很多遍，再加上還需要處理後台 column 的顯示欄位，新增一個 post type 就會讓程式碼落落長，萬一有兩個或更多個，管理起來就會麻煩許多。</p>
<span id="more"></span>

<p>爬了一下 Github 後，發現由 Joe Grainger 寫的 <a href="https://github.com/jjgrainger/PostTypes">PostTypes</a> 這個套件，完完全全可以解決我的問題，因為他都幫我們把功能封裝好了，只要 new PostType(‘CPT’) 就可以新增，完全不用再寫 Hook，並透過該物件來實作 Post Type 的各項參數設定：</p>
<p>先來秒安裝一下：</p>
<pre class="line-numbers language-none"><code class="language-none">$ composer require jjgrainger&#x2F;posttypes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>我的習慣是會在 src 資料夾底下開一個與 CPT slug 同名的 php 檔，然後因為我們已經有自動載入了，所以要用的話只需要寫 use 關鍵字即可，假設我們的需求如下：</p>
<ol>
<li>新增一個 Post Type 叫做 book</li>
<li>新增兩個 book 的 Taxonomy 叫做 travel 跟 business</li>
</ol>
<h3 id="新增-Custom-Post-Type"><a href="#新增-Custom-Post-Type" class="headerlink" title="新增 Custom Post Type"></a>新增 Custom Post Type</h3><p>根據資料結構，我們會處理到 wp_posts 與 wp_terms，所以資料夾先新增 posts 與 terms，然後建立相對應的檔案，檔案結構如下：</p>
<pre class="line-numbers language-none"><code class="language-none">src
├── posts
│   └── book
│       └── Book.php
└── terms
    ├── business
    │   └── Business.php
    └── travel
        └── Travel.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我自己常常會被英文的單複數搞混，所以後來就決定第一層比照資料表名稱一律使用複數 ( posts、terms )，新增的內容或是功能一律都使用單數，然後檔名首字均大寫。接下來先開啟 Book.php 來進行 Custom Post Type 的註冊，我們使用 posttypes 套件來處理：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">PostTypes<span class="token punctuation">\</span>PostType</span><span class="token punctuation">;</span>
<span class="token variable">$books</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PostType</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'book'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>兩行就搞定！ 😍</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-and-composer/wordpress-and-composer-01.jpg"></p>
<p>預設名稱或是用 CPT 的名字加上 s 複數，如果要修改的話可以在建立 PostType 實例時帶入 name 參數來進行修改：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">PostTypes<span class="token punctuation">\</span>PostType</span><span class="token punctuation">;</span>

<span class="token variable">$name</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'name'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'book'</span><span class="token punctuation">,</span>  <span class="token comment">// 註冊 CPT 的名稱</span>
	<span class="token string single-quoted-string">'plural'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'MyBook'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 顯示名稱</span>
	<span class="token string single-quoted-string">'slug'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'mybook'</span><span class="token punctuation">,</span> <span class="token comment">// 網址代稱</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$books</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PostType</span><span class="token punctuation">(</span> <span class="token variable">$name</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-and-composer/wordpress-and-composer-02.jpg"></p>
<p>如果想要使用 register_post_type 裡面的參數，只要再傳入第二個 option 參數即可：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">
<span class="token keyword">use</span> <span class="token package">PostTypes<span class="token punctuation">\</span>PostType</span><span class="token punctuation">;</span>

<span class="token variable">$options</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'has_archive'</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'menu_icon'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'dashicons-book'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'supports'</span>    <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'title'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'revisions'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'editor'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'author'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'comments'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'custom-fields'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$books</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PostType</span><span class="token punctuation">(</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$options</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>另外如果想要修改標籤像是 Add New、Edit 等等的字串，只要在 register 完成後指定即可：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$labels</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string single-quoted-string">'all_items'</span>          <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'所有好書'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'add_new'</span>            <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'新增好書'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'add_new_item'</span>       <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'新增好書'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'edit_item'</span>          <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'編輯'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'new_item'</span>           <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'新項目'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'view_item'</span>          <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'檢視'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'view_items'</span>         <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'檢視'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'search_items'</span>       <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'搜尋'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'not_found'</span>          <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'無結果'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'not_found_in_trash'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'無結果'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$books</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PostType</span><span class="token punctuation">(</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$options</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">labels</span><span class="token punctuation">(</span> <span class="token variable">$labels</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-and-composer/wordpress-and-composer-03.jpg"></p>
<p>Book.php 完整程式碼如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">PostTypes<span class="token punctuation">\</span>PostType</span><span class="token punctuation">;</span>

<span class="token variable">$name</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'name'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'book'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'plural'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'MyBook'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'slug'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'mybook'</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$options</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'has_archive'</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'menu_icon'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'dashicons-book'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'supports'</span>    <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'title'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'revisions'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'editor'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'author'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'comments'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'custom-fields'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$books</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PostType</span><span class="token punctuation">(</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$options</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$labels</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'all_items'</span>          <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'所有好書'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'add_new'</span>            <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'新增好書'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'add_new_item'</span>       <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'新增'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'edit_item'</span>          <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'編輯'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'new_item'</span>           <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'新項目'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'view_item'</span>          <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'檢視'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'view_items'</span>         <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'檢視'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'search_items'</span>       <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'搜尋'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'not_found'</span>          <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'無結果'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'not_found_in_trash'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'無結果'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">labels</span><span class="token punctuation">(</span> <span class="token variable">$labels</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面這段就是我平常在用的程式碼片段。</p>
<p>可能會有朋友問這跟直接寫 register_post_type() 有什麼差別？就設計典範來說這是程序式程式設計 ( Procedural Programming ) 跟物件導向程式設計 ( Object Oriented Programming ) 的差別，WordPress 主要使用的邏輯是前者，而一些 PHP 框架像是 Laravel 就是物件導向的方式來設計的。</p>
<p>程序式程式設計顧名思義就是按照程式碼的順序來執行，然後透過判斷式來決定下一條路該怎麼走，有點像小時候玩的爬梯子的遊戲，遇到橫線就要轉彎，沒有的話就直直前進，在 WordPress 中最常見的例子就是要取得文章列表時使用的迴圈寫法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">have_posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token function">have_posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">the_post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">the_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>先檢查 have_posts() 是否有回傳東西，有的話用 while 迴圈去把裡面的文章顯示出來，直到沒有為止，註冊 CPT 也是按照程式碼順序的邏輯，先把參數傳到 register_post_type 這個函式裡面，再把這個函式傳到 init 的勾點 ( Hook ) 上：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">wpdocs_codex_custom_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token string single-quoted-string">'public'</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'label'</span>  <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Books'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'textdomain'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">register_post_type</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'book'</span><span class="token punctuation">,</span> <span class="token variable">$args</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'init'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'wpdocs_codex_custom_init'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>而物件導向比較像是在玩樂高，所有的積木都有自己的特性，透過組合這些積木來做成成品，同時拆掉後又能再用一樣的積木組成不同的東西，這就是物件的核心概念，也就是像上面的例子一樣，我使用了 PostTypes\PostType 這塊積木來完成註冊 CPT 的這個成品：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">PostTypes<span class="token punctuation">\</span>PostType</span><span class="token punctuation">;</span>
<span class="token variable">$books</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PostType</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'42115'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>而 Packagist 就是全世界最大的積木池，我可以在裡面撿到各式各樣我需要的磚，然後拼成我想要的作品，有別於程序式程式設計，透過物件的介面更方便重複利用，也能減少找相對應勾點的時間。</p>
<p>所以我現在刻意使用這些套件來取代 WP 內建的函式，覺得這樣比較好理解並且相對簡潔，但如果外掛功能相對單純或是主機環境因素無法使用 Composer，register_post_type() 還是無敵好用的XD</p>
<h3 id="新增-Taxonomy"><a href="#新增-Taxonomy" class="headerlink" title="新增 Taxonomy"></a>新增 Taxonomy</h3><p>接下來處理書的分類也就是旅遊與商業這兩個類別，開啟 Business.php 輸入以下程式碼：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">PostTypes<span class="token punctuation">\</span>Taxonomy</span><span class="token punctuation">;</span>

<span class="token variable">$business</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Taxonomy</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'business'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$business</span><span class="token operator">-></span><span class="token function">posttype</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'book'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$business</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一樣，又是俐落的三行就解決，只要宣吿 Taxonomy 實例後再用 posttype 方法去指定 Custom Post Type 就能完成。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-and-composer/wordpress-and-composer-04.jpg"></p>
<p>然後最美好之處在於設定 Taxonomy 的方式跟 Custom Post Type 一模一樣，這支類別的介面設計得真的很好，非常方便使用，看下面新增 Taxonomy 的程式碼即可明白：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">PostTypes<span class="token punctuation">\</span>Taxonomy</span><span class="token punctuation">;</span>

<span class="token variable">$name</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'name'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'business'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'plural'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'MyBusinessBook'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$options</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'hierarchical'</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$business</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Taxonomy</span><span class="token punctuation">(</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$options</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$business</span><span class="token operator">-></span><span class="token function">posttype</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'book'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$business</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$labels</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'all_items'</span>          <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'所有'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'add_new'</span>            <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'新增'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'add_new_item'</span>       <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'新增'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'edit_item'</span>          <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'編輯'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'new_item'</span>           <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'新項目'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'view_item'</span>          <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'檢視'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'view_items'</span>         <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'檢視'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'search_items'</span>       <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'搜尋'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'not_found'</span>          <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'無結果'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'not_found_in_trash'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'無結果'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'btp'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$business</span><span class="token operator">-></span><span class="token function">labels</span><span class="token punctuation">(</span> <span class="token variable">$labels</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>寫法同 PostType，就只是換成 Taxonomy 以及修改成對應的變數名稱即可，所以另外一個分類 Travel 比照辦理即可。</p>
<p>這個套件還有另外一個強大之處，它可以控制後台文章列表欄位的新增與隱藏，這部分會跟另外一個專門做欄位的套件一起說明。</p>
<h2 id="wp-metabox"><a href="#wp-metabox" class="headerlink" title="wp-metabox"></a>wp-metabox</h2><p>實務上常遇到要新增文章的自訂欄位來增加文章資訊，我最愛用的外掛絕對是 ACF Pro，其他還有像是 Cmb2、Metabox.io、Pods、Toolset 等等，用外掛來處理自訂欄位對我來說是再平常也不過的事，直到需要把外掛發佈給別人用時，才驚覺壓縮之後竟然有好幾 MB，追查之下光 ACF Pro 就有 7.7MB 之多。</p>
<p>於是重新檢視自己對於 ACF 的使用習慣，觀察常用的功能與欄位有哪些，事實上不外乎就是最基本的文字、圖片上傳、下拉選單以及重複器最常使用，其他會用到的機會很少。</p>
<p>為了找尋替代方案照慣例先去 Packagist 爬了一下，找到不少套件在做，但基本上都跟 ACF 差不多，功能包山包海體積也是非常可觀，最後回到 Github 找到由 Matthew Kosloski 所寫的 <a href="https://github.com/MatthewKosloski/wp-metabox-constructor-class">wp-metabox-constructor-class</a>，剛好裡面提供的欄位可以滿足我的基本需求。</p>
<p>但該類別上次更新是四年前了，也沒有上架 Packagist，所以我就把它整理了一下後上傳，整理的過程中發現到要新增欄位類型進去也不難，所以我現在都拿這套當我的 Metabox 主力開發套件。</p>
<p>內建六種欄位：Text、Textarea、Checkbox、Image Upload、Editor、Repeater，安裝方式如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">composer</span> require oberonlai/wp-metabox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>假設我們現在要幫書增加一個 ISBN 與書介欄位，分別會用文字與視覺化編輯器來做，打開 Field.php 輸入以下程式碼：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">ODS<span class="token punctuation">\</span>Metabox</span><span class="token punctuation">;</span>

<span class="token variable">$metabox</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Metabox</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'id'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'book_info'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'title'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'書籍資料'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'screen'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'book'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'context'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'normal'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'priority'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'default'</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$metabox</span><span class="token operator">-></span><span class="token function">addText</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'book_isbn'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'label'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'ISBN'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'書籍的 ISBN'</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$metabox</span><span class="token operator">-></span><span class="token function">addEditor</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'book_intro'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'label'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'書籍介紹'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'書籍的簡短介紹'</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>先使用 use 來載入 ODS 的命名空間 Metabox 類別，然後建立一個 Metabox 的物件，這是指 metabox 的容器，有這容器之後才能把欄位放進去，接下來使用 addText 跟 addEditor 這兩個方法，完成後如下圖：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-and-composer/wordpress-and-composer-05.jpg"></p>
<p>更多的使用方法可以參考 README.md，這邊推薦一個 VSCode 套件：<a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced">Markdown Preview Enhanced</a>，它可以直接在 VSCode 裡面預覽 Markdown 文件，就不用再返回 Github 頁面或是套件的線上文件去查看使用方法。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-and-composer/wordpress-and-composer-11.jpg"></p>
<p>接下來我們接到客戶需求，客戶希望可以在文章列表頁面就能看到 ISBN 以便查詢，這時候上面用過的 posttype 套件又能派上用場了。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-and-composer/wordpress-and-composer-06.jpg"></p>
<p>我們先在 posts/book 底下新增一個檔案叫做 Column.php，輸入以下程式碼：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">PostTypes<span class="token punctuation">\</span>Columns</span><span class="token punctuation">;</span>

<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">add</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'isbn'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ISBN'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用 columns 的 add 方法來新增欄位，裡面傳入的是一個陣列，用 key value 的方式來建立欄位 ID 與顯示名稱，最重要的是最後一行的 $books-&gt;register() 不能漏掉，接下來我們就可以針對這個 ID 來讀取資料：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">PostTypes<span class="token punctuation">\</span>Columns</span><span class="token punctuation">;</span>

<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">add</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'isbn'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ISBN'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">populate</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'isbn'</span><span class="token punctuation">,</span>
	<span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token variable">$column</span><span class="token punctuation">,</span> <span class="token variable">$post_id</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">echo</span> <span class="token function">esc_html</span><span class="token punctuation">(</span> <span class="token function">get_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'book_isbn'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用的方法是 populate，第一個參數傳欄位 ID，第二個參數是回呼函式，我們用 get_post_meta 來取得 metabox 中的值，完成就能看到新增了一個 ISBN 欄位：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-and-composer/wordpress-and-composer-07.jpg"></p>
<p>但客戶希望是放在分類 MyBussiness 欄位的後面，posttype 套件也非常貼心了提供修改欄位順序的功能，從左數過來分類欄位是第三個，所以我們只要將 ISBN 設成 4 即可：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">PostTypes<span class="token punctuation">\</span>Columns</span><span class="token punctuation">;</span>

<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">add</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'isbn'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ISBN'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">populate</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'isbn'</span><span class="token punctuation">,</span>
	<span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token variable">$column</span><span class="token punctuation">,</span> <span class="token variable">$post_id</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">echo</span> <span class="token function">esc_html</span><span class="token punctuation">(</span> <span class="token function">get_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'book_isbn'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">order</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'isbn'</span> <span class="token operator">=></span> <span class="token number">4</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用 order 方法就能指定順序，如果要用 WordPress 原本的方法寫很麻煩，首先要建立一個空陣列，然後把既有的欄位放進去，透過迴圈判斷欄位名稱是否為 isbn，再判斷迴圈已經跑到第幾個，最重要的是我永遠記不起來勾點 ( Hook ) 要用哪一個…Orz</p>
<p>最後客戶希望可以按照 ISBN 進行排序，這用勾點來做的話一樣是有很多步驟需要處理，但 posttype 幫我們都搞定了，只要使用 sortable 方法即可：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">PostTypes<span class="token punctuation">\</span>Columns</span><span class="token punctuation">;</span>

<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">add</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'isbn'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ISBN'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">populate</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'isbn'</span><span class="token punctuation">,</span>
	<span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token variable">$column</span><span class="token punctuation">,</span> <span class="token variable">$post_id</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">echo</span> <span class="token function">esc_html</span><span class="token punctuation">(</span> <span class="token function">get_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'book_isbn'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">order</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'isbn'</span> <span class="token operator">=></span> <span class="token number">4</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">sortable</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'isbn'</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'isbn'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$books</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用 sortable 方法指定要進行排序的欄位 ID，然後給它一個 true，同樣的道理，如果客戶今天想要讓某個欄位停止排序，傳入 false 即可。</p>
<p>以上程式示範了新增欄位、產生欄位資料、自訂順序以及排序功能：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-and-composer/wordpress-and-composer-08.jpg"></p>
<p>posttype 加上 wp-metabox 真的可以省下很多時間啊～</p>
<h2 id="wp-option"><a href="#wp-option" class="headerlink" title="wp-option"></a>wp-option</h2><p>如果需要開發給社群使用的外掛，最不可或缺的功能就是設定頁面了，有了設定頁面就能把外掛的設定值交給使用者決定，進而依照實際需求彈性調整。</p>
<p>wp-option 這套是根據 boospot 開發的 <a href="https://github.com/boospot/boo-settings-helper">boo-settings-helper</a> 加以改良，我增加了一層封裝介面，目的是想要可以跟 wp-metabox 一樣可以透過 addText()、addSelect() 這樣的語句來使用它，花了兩天的時間設計與整理文件，用起來實在是太愉悅了，再也不用記勾點了。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-and-composer/wordpress-and-composer-10.jpg"></p>
<p>要使用的話第一步先進行安裝：</p>
<pre class="line-numbers language-none"><code class="language-none">composer require oberonlai&#x2F;wp-option<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接下來在建立實例的時候，先命名自己的前綴以作為欄位名稱的辨識，就不會跟既有的衝突：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">require</span> <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/vendor/autoload.php'</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">ODS<span class="token punctuation">\</span>Option</span><span class="token punctuation">;</span>

<span class="token variable">$prefix</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'plugin-prefix'</span><span class="token punctuation">;</span>

<span class="token variable">$books</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Option</span><span class="token punctuation">(</span> <span class="token variable">$prefix</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>整個套件的使用邏輯很單純，要新增一個設定頁面都是一樣的步驟：</p>
<ol>
<li>新增選單</li>
<li>新增分頁</li>
<li>加入欄位</li>
<li>註冊欄位</li>
</ol>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// Require the Composer autoloader.</span>
<span class="token keyword">require</span> <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/vendor/autoload.php'</span><span class="token punctuation">;</span>

<span class="token comment">// Import PostTypes.</span>
<span class="token keyword">use</span> <span class="token package">ODS<span class="token punctuation">\</span>Option</span><span class="token punctuation">;</span>

<span class="token variable">$config</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'plugin-prefix-'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$config</span><span class="token operator">-></span><span class="token function">addMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$config</span><span class="token operator">-></span><span class="token function">addTab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$config</span><span class="token operator">-></span><span class="token function">addText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$config</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Don't forget this.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-新增選單"><a href="#1-新增選單" class="headerlink" title="1.新增選單"></a>1.新增選單</h3><p>首先我們先看增加選單的部分，要傳入的參數是設定頁標題、選單文字、代稱，比較要注意的是子選單的設定，如果你想把設定選單放在某個選單底下，只要把 submenu 參數設定為 true，再把 wp-admin 後面的網址路徑帶入 parent 參數即可：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$config</span><span class="token operator">-></span><span class="token function">addMenu</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'page_title'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Plugin Name Settings'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'plugin-name'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'menu_title'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Plugin Name'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'plugin-name'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'capability'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'manage_options'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'slug'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'plugin-name'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'icon'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'dashicons-performance'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'position'</span>   <span class="token operator">=></span> <span class="token number">10</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'submenu'</span>    <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'parent'</span>     <span class="token operator">=></span> <span class="token string single-quoted-string">'edit.php?post_type=event'</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="2-新增分頁"><a href="#2-新增分頁" class="headerlink" title="2.新增分頁"></a>2.新增分頁</h3><p>接下來新增分頁的部分，每個設定頁一定都要有一個分頁，它就是像是欄位的容器，所有的欄位都要放在分頁裡面才會正確顯示，id 參數就是分頁容器的名稱，要新增的欄位需要帶入這個名稱，就能把該欄位指定在該分頁下面：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$config</span><span class="token operator">-></span><span class="token function">addTab</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'general_section'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'General Settings'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'plugin-name'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'These are general settings for Plugin Name'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'plugin-name'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果要新增兩個以上的分頁，就傳入兩筆陣列資料即可：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$config</span><span class="token operator">-></span><span class="token function">addTab</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'general_section'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'General Settings'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'plugin-name'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'These are general settings for Plugin Name'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'plugin-name'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'advance_section'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Advanced Settings'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'plugin-name'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'These are advance settings for Plugin Name'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'plugin-name'</span> <span class="token punctuation">)</span>
		<span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-新增欄位"><a href="#3-新增欄位" class="headerlink" title="3.新增欄位"></a>3.新增欄位</h3><p>目前該套件可以使用的欄位有十四種：</p>
<ul>
<li>  Text</li>
<li>  URL</li>
<li>  Number</li>
<li>  Color</li>
<li>  Textarea</li>
<li>  Radio Button</li>
<li>  Select</li>
<li>  HTML</li>
<li>  Checkbox</li>
<li>  Multi Select</li>
<li>  Related</li>
<li>  Password</li>
<li>  File</li>
<li>  Media Upload</li>
</ul>
<p>每種的用法都一樣，譬如要增加 Text 欄位，使用 addText() 方法，然後有兩個參數要傳入，第一個是分頁 id，第二個是設定內容，第三個參數是選填的回呼函式，主要功能在自訂 input 的 DOM 結構：</p>
<pre class="line-numbers language-none"><code class="language-none">$config-&gt;addText(
	&#39;general_section&#39;,
	array(
		&#39;id&#39;                &#x3D;&gt; &#39;text_field_id&#39;,
		&#39;label&#39;             &#x3D;&gt; __( &#39;Hello World&#39;, &#39;plugin-name&#39; ),
		&#39;desc&#39;              &#x3D;&gt; __( &#39;Some description of my field&#39;, &#39;plugin-name&#39; ),
		&#39;placeholder&#39;       &#x3D;&gt; &#39;This is Placeholder&#39;,
		&#39;show_in_rest&#39;      &#x3D;&gt; true,
		&#39;class&#39;             &#x3D;&gt; &#39;my_custom_css_class&#39;,
		&#39;size&#39;              &#x3D;&gt; &#39;regular&#39;,
	),
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>帶入第三個回呼函式的用法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$config</span><span class="token operator">-></span><span class="token function">addText</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'general_section'</span><span class="token punctuation">,</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'text_field_id'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'label'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Hello World'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'plugin-name'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token variable">$args</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$html</span>  <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'&lt;input 
 class="regular-text"
 type="%1$s"
 name="%2$s"
 value="%3$s"
 placeholder="%4$s"
 style="border: 3px solid red;"
 />'</span><span class="token punctuation">,</span>
			<span class="token variable">$args</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token variable">$args</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token variable">$args</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'Placeholder from callback'</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$html</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;br/>&lt;small>This field is generated with callback parameter&lt;/small>'</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token variable">$html</span><span class="token punctuation">;</span>
		<span class="token keyword">unset</span><span class="token punctuation">(</span> <span class="token variable">$html</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果是要做 Radio 或是下拉選單用法也一樣，差別在於要多設定 option 參數來決定選項：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$config</span><span class="token operator">-></span><span class="token function">addRadio</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'general_section'</span><span class="token punctuation">,</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'id'</span>      <span class="token operator">=></span> <span class="token string single-quoted-string">'radio_field_id'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'label'</span>   <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Radio Button'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'plugin-name'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'desc'</span>    <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'A radio button'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'plugin-name'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'options'</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'radio_1'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Radio 1'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'radio_2'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Radio 2'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'radio_3'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Radio 3'</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'default'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'radio_2'</span><span class="token punctuation">,</span> <span class="token comment">// 預設值</span>
	<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所有欄位的使用方法可以參考套件裡面的 README.md 說明。</p>
<h3 id="4-註冊欄位"><a href="#4-註冊欄位" class="headerlink" title="4.註冊欄位"></a>4.註冊欄位</h3><p>最後一個方法不需要傳入任何參數但卻是是必須的，因為它包含了所有以上行為的勾點註冊，所以萬一你發現選單、分頁、欄位都寫好了卻沒反應，檢查看看是否有正確註冊欄位：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$config</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>以上是設定外掛設定選項的用法，你可以增加多個設定選單，都是一樣的步驟與流程，如果要取得設定值，使用 WordPress 內建的 get_option() 即可，記得不要忘記前綴喔！</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$my_text_field_value</span> <span class="token operator">=</span> <span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'plugin-prefix-my_text_field'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="wp-asset"><a href="#wp-asset" class="headerlink" title="wp-asset"></a>wp-asset</h2><p>載入 JS、CSS 靜態資源檔幾乎是每個外掛都會用到的功能，原始的寫法要帶入五個參數，參數的帶入順序我每次都會搞錯，再加上 wp_register_script()、wp_localize_script()、wp_enqueue_script() 這三個函式都有各自的參數要帶入，常常被折騰一番後就火大乾脆直接引入，然後就會看到 PHPCS 噴錯XD</p>
<p>幸好後來有發現 Josantonius 寫的 <a href="https://github.com/Josantonius/WP_Register">WP_Register</a> 套件幫助我解決了這個問題，然後我又根據實務上會遇到的情境再改寫成 wp-asset 套件，並加入了 Ajax 判斷功能，安裝方式如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$composer</span> require oberonlai/wp-asset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接下來載入一個 JS 檔：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">
<span class="token keyword">use</span> <span class="token package">ODS<span class="token punctuation">\</span>Asset</span>

<span class="token class-name static-context">Asset</span><span class="token operator">::</span><span class="token function">addScript</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'name'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'my_script'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'url'</span>   <span class="token operator">=></span> <span class="token constant">ODS_PLUGIN_URL</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'assets/js/script.js'</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>或是載入 CSS：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Asset</span><span class="token operator">::</span><span class="token function">addStyle</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'name'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'my_style'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'url'</span>     <span class="token operator">=></span> <span class="token constant">ODS_PLUGIN_URL</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'assets/css/style.css'</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>分別使用 addScript 與 addStyle 兩個方法，然後透過 name 命名檔案名稱與 url 指定檔案路徑就能完成載入，比原始的 wp_enqueue_script 好記多了，其他可選參數如下：</p>
<table>
<thead>
<tr>
<th align="left">key</th>
<th align="left">說明</th>
<th align="center">類型</th>
<th align="center">必填</th>
<th>預設</th>
</tr>
</thead>
<tbody><tr>
<td align="left">name</td>
<td align="left">檔案唯一名稱</td>
<td align="center">字串</td>
<td align="center">是</td>
<td></td>
</tr>
<tr>
<td align="left">url</td>
<td align="left">檔案路徑</td>
<td align="center">字串</td>
<td align="center">是</td>
<td></td>
</tr>
<tr>
<td align="left">admin</td>
<td align="left">在後台載入</td>
<td align="center">布林值</td>
<td align="center">否</td>
<td>false</td>
</tr>
<tr>
<td align="left">deps</td>
<td align="left">依賴套件</td>
<td align="center">陣列</td>
<td align="center">否</td>
<td></td>
</tr>
<tr>
<td align="left">version</td>
<td align="left">版本號</td>
<td align="center">字串</td>
<td align="center">否</td>
<td></td>
</tr>
<tr>
<td align="left">footer</td>
<td align="left">在頁尾載入 ( JS 限定 )</td>
<td align="center">布林值</td>
<td align="center">否</td>
<td>true</td>
</tr>
<tr>
<td align="left">ajax</td>
<td align="left">啟用 Ajax 功能 ( JS 限定 )</td>
<td align="center">布林值</td>
<td align="center">否</td>
<td>false</td>
</tr>
<tr>
<td align="left">params</td>
<td align="left">需要輸出給前端的參數  ( JS 限定 )</td>
<td align="center">陣列</td>
<td align="center">否</td>
<td></td>
</tr>
<tr>
<td align="left">media</td>
<td align="left">媒體類型 ( CSS 限定 )</td>
<td align="center">字串</td>
<td align="center">否</td>
<td></td>
</tr>
</tbody></table>
<p>需要特別說明的是 Ajax 檔案的載入，當 ajax 設定為 true 時，會自動帶入兩個參數，分別為 ajax_url 與 ajax_nonce，這樣就能直接在 JS 取得，如果要加入其他參數使用 params 即可，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Asset</span><span class="token operator">::</span><span class="token function">addScript</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'name'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'my_ajax'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'url'</span>     <span class="token operator">=></span> <span class="token constant">YOUR_PLUGIN_URL</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'assets/js/ajax.js'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'deps'</span>    <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'jquery'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'ajax'</span>    <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'params'</span>  <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'data1'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'my_data_1'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'data2'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'my_data_2'</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在前台就可以看到以下的輸出：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my_ajax-js-extra<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">var</span> my_ajax <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"data1"</span><span class="token operator">:</span><span class="token string">"my_data_1"</span><span class="token punctuation">,</span><span class="token string">"data2"</span><span class="token operator">:</span><span class="token string">"my_data_2"</span><span class="token punctuation">,</span><span class="token string">"ajax_url"</span><span class="token operator">:</span><span class="token string">"https:\/\/local.test\/wp-admin\/admin-ajax.php?action=my_ajax"</span><span class="token punctuation">,</span><span class="token string">"ajax_nonce"</span><span class="token operator">:</span><span class="token string">"fead4137e4"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>最後在 JS 裡面就可以直接取得：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
				action<span class="token operator">:</span> <span class="token string">"my_ajax"</span><span class="token punctuation">,</span>
				nonce<span class="token operator">:</span> my_ajax<span class="token punctuation">.</span>ajax_nonce<span class="token punctuation">,</span>
				data1<span class="token operator">:</span> my_ajax<span class="token punctuation">.</span>data1<span class="token punctuation">,</span>
				data2<span class="token operator">:</span> my_ajax<span class="token punctuation">.</span>data2
			<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
			$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
				url<span class="token operator">:</span> my_ajax<span class="token punctuation">.</span>ajax_url<span class="token punctuation">,</span>
				data<span class="token operator">:</span> data<span class="token punctuation">,</span>
				type<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
				dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>
				<span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
					console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
				<span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
					console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就可以省去寫 wp_register_script()、wp_localize_script()、wp_enqueue_script() 的麻煩了，透過統一的介面來完成 Ajax 的檔案引入。</p>
<h2 id="wp-ajax"><a href="#wp-ajax" class="headerlink" title="wp-ajax"></a>wp-ajax</h2><p>Ajax 在外掛開發裡面遇到的機率不定，也就是因為不一定每次都會用到，當要用的時候就會忘記該有的流程跟步驟：</p>
<ol>
<li>註冊 JS 檔並設定要傳給前端的後端變數</li>
<li>註冊 Ajax 的回呼函數，做 Nonce 驗證跟取得前端傳來的參數後做事情</li>
<li>把處理結果回傳給前端</li>
</ol>
<p>我常用的是由 Anthony Budd 的 <a href="https://github.com/anthonybudd/WP_AJAX">WP_AJAX</a>，他寫了一個 WP_AJAX 抽象類別來讓我們繼承，裡面有內建一些實用的方法，像是用 get() 取得從前端傳來的參數、檢查使用者是否登入、取得 HTTP 請求方式等等。</p>
<p>安裝方式：</p>
<pre class="line-numbers language-none"><code class="language-none">$ composer require oberonlai&#x2F;wp-ajax<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>基本用法如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">ODS<span class="token punctuation">\</span>Ajax</span><span class="token punctuation">;</span>

<span class="token keyword">Class</span> <span class="token class-name">MyAjax</span> <span class="token keyword">extends</span> <span class="token class-name">Ajax</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">protected</span> <span class="token variable">$action</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'my_ajax'</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

    	<span class="token comment">// 要做的事情放這邊</span>
    	
    	<span class="token function">update_option</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name static-context">MyAjax</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>先繼承 Ajax 這個類別，然後設定 $action 這個給 JS 用的識別名稱以及實作 run 方法也就是實際要處理的動作，最後再用靜態方法 listen 完成 Ajax 註冊即可。</p>
<p>listen 方法帶有一個布林值參數，如果設定為 MyAjax::listen( false ) 的話則代表只有已登入的使用者才能執行這個 Ajax。</p>
<p>我們搭配上面的 wp-asset 套件來實作使用 Ajax 更新文章標題：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">ODS<span class="token punctuation">\</span>Asset</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">ODS<span class="token punctuation">\</span>Ajax</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Asset</span><span class="token operator">::</span><span class="token function">addScript</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'name'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'my_ajax'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'url'</span>     <span class="token operator">=></span> <span class="token constant">ODS_PLUGIN_URL</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'assets/js/ajax.js'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'deps'</span>    <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'jquery'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'version'</span> <span class="token operator">=></span> <span class="token constant">ODS_VERSION</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'ajax'</span>    <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'params'</span>  <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'data1'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'my_data_1'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'data2'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'my_data_2'</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyAjax</span> <span class="token keyword">extends</span> <span class="token class-name">Ajax</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">protected</span> <span class="token variable">$action</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'my_ajax'</span><span class="token punctuation">;</span>
	<span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$nonce</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'nonce'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">wp_verify_nonce</span><span class="token punctuation">(</span> <span class="token variable">$nonce</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'my_ajax'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">JSONResponse</span><span class="token punctuation">(</span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'發生錯誤，不合法的請求來源！'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'my-plugin'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">exit</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token variable">$url</span>     <span class="token operator">=</span> <span class="token function">wp_get_referer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$post_id</span> <span class="token operator">=</span> <span class="token function">url_to_postid</span><span class="token punctuation">(</span> <span class="token variable">$url</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$my_post</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'ID'</span>         <span class="token operator">=></span> <span class="token variable">$post_id</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'post_title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'This is the 123'</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">wp_update_post</span><span class="token punctuation">(</span> <span class="token variable">$my_post</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">JSONResponse</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name static-context">MyAjax</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先，我們可以使用 $this-&gt;get() 來取得從 JS 傳來的參數，在做任何 Ajax 的工作之前，使用 nonce 來做請求來源驗證是必要的，所以我們先取得前端傳來的 nonce，然後用 wp_verify_nonce 來判斷。</p>
<p>接下來把要執行的工作放在 run() 裡面，這邊使用 wp_update_post 做資料更新，最後用內建的 JSONResponse 方法把處理結果回傳給前端，注意到這邊使用 listen( false ) 也就是代表只有登入的使用者才能執行這個修改。</p>
<p>透過以上寫法可以省略要組合勾點 wp_ajax_my_ajax 與 wp_ajax_nopriv_my_ajax 這兩個動作，再搭配 wp-asset 更能方便載入 JS 檔。</p>
<h2 id="wp-router"><a href="#wp-router" class="headerlink" title="wp-router"></a>wp-router</h2><p>在開發外掛的時候常遇到需要背景呼叫的狀況，像是串接 API 時要接收第三方回傳的資料，或是一些不需要前端介面的資料處理頁，以前我會在後台新增頁面，然後用 page-slug.php 的範本來寫這些功能，或是註冊 REST API 的 Endpoint 來處理，但不管是哪個方法，都會有多個步驟需要建立，用起來不是那麼直覺。</p>
<p>後來找到 Tim Field 寫的 <a href="https://github.com/tim-field/wordpress-dispatcher">wordpress-dispatcher</a> 套件，可以非常直覺的來根據網址執行函式，安裝方式如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">composer</span> require oberonlai/wp-router<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然後使用靜態方法 routes，傳入指定的陣列參數：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">ODS<span class="token punctuation">\</span>Router</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Router</span><span class="token operator">::</span><span class="token function">routes</span><span class="token punctuation">(</span> 
	<span class="token keyword">array</span> <span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'testing-a-url'</span> <span class="token operator">=></span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Hello World'</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣當輸入網址 <a href="https://example.com/testing-a-url">https://example.com/testing-a-url</a> 就能看到輸出的內容，網址要傳入動態的參數，也能用正規表達式來限定可帶入的參數：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">ODS<span class="token punctuation">\</span>Router</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Router</span><span class="token operator">::</span><span class="token function">routes</span><span class="token punctuation">(</span> 
	<span class="token keyword">array</span> <span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'hello-([a-z]+)'</span> <span class="token operator">=></span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hello <span class="token interpolation"><span class="token variable">$name</span></span>"</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>當輸入網址 <a href="https://example.com/hello-a">https://example.com/hello-a</a> 或是 <a href="https://example.com/hello-b">https://example.com/hello-b</a> 一樣可以輸出函式的內容，這個匿名函式帶有兩個參數，$request 是請求路徑，$name 是括弧內的參數，所以上面這個例子會輸出 Hello a 以及 Hello b，這樣就能很直覺的根據請求路徑來執行對應的程式。</p>
<h3 id="同場加映：如何上傳自己的套件？"><a href="#同場加映：如何上傳自己的套件？" class="headerlink" title="同場加映：如何上傳自己的套件？"></a>同場加映：如何上傳自己的套件？</h3><p>如果找不到適合自己的套件該怎麼辦？很簡單，寫一套自己的或是改寫既有的套件來達成吧！像這篇文章裡面提到的所有套件，全都是踩在大大的肩膀上整理出來的，而我習慣用自己的命名空間來方便安裝，因此複製到自己的存放庫之後再上傳到 Packagist 即可。</p>
<p>要上傳 Packagist 套件的 Composer 設定檔基本內容如下：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"oberonlai/wp-router"</span><span class="token punctuation">,</span>
    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Adding router for WordPress."</span><span class="token punctuation">,</span>
    <span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://github.com/oberonlai/wp-router"</span><span class="token punctuation">,</span>
    <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>
    <span class="token property">"authors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Oberon Lai"</span><span class="token punctuation">,</span>
            <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"m615926@gmail.com"</span><span class="token punctuation">,</span>
            <span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://oberonlai.blog"</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"minimum-stability"</span><span class="token operator">:</span> <span class="token string">"stable"</span><span class="token punctuation">,</span>
    <span class="token property">"require"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"php"</span><span class="token operator">:</span> <span class="token string">">=7.2"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"autoload"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"psr-4"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"ODS\\"</span><span class="token operator">:</span> <span class="token string">"src/"</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有兩個地方需要注意：第一個是不要放入 version 版本號的參數，因為 Packagist 是用 Github 的 tag 來判斷版本，如果 composer.json 裡面包含 version 會發生錯亂。</p>
<p>第二個關鍵是 autoload，我的命名空間統一使用 ODS ( Oberon Design System )，然後自動載入 src 資料夾裡面的檔案，所以之後要用的時候只要寫 use ODS\類別名稱 即可。</p>
<p>我慣用的版本控管是 Github，所以準備好套件跟命名空間後就可以推上去了，接下來前往 Packagist 註冊一個帳號，註冊完成後就能提交自己的套件：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-and-composer/wordpress-and-composer-12.jpg"></p>
<p>直接在 Repository URL 貼入你的 Github 存放庫網址即可，按下 Check 後他會提醒你有其他類似名稱的套件，直接 Submit 後就完成了。</p>
<p>如果之後發現套件有地方需要修改，修改完後一樣直接先推上 Github，因為 Packagist 是用 tag 來抓版本資訊，所以我們先把修改後的 commit 建立一個新的 tag：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> tag -a <span class="token string">'v1.0.1'</span> -m <span class="token string">'這次改的東西'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再把這個 tag 推上去：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">git push origin v1<span class="token operator">.</span><span class="token number">0.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>這樣在 Packagist 就能接收到更新版本的資訊了，版本號的命名慣例是 v1.0.x 是除錯、安全性修改、v1.x.0 是新增功能、vX.0.0 是包含相容性問題的大版本更新，這樣就能讓使用者知道這次更新的規模大小，以便讓他們自行決定是否要更新。</p>
<br>

<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>透過既有的套件來開發外掛可以大幅提升工作效率，但如果是已經熟悉 WordPress API 的朋友，可能會需要花一點時間來適應這樣的開發模式，因為我一開始也不太習慣，直到後來決定把外掛以物件導向的模式來開發，才驚覺到這樣的作法才能讓程式碼易於維護與重複利用，以及組合不同的物件來完成任務。</p>
<p>而這樣的好處是可以讓程式更易於被測試，避免改東牆壞西牆的情況一再發生。接下來，我們把這樣的設計模式衍伸到前端開發，下一篇文章將介紹如何在外掛裡面使用範本檔修改前端介面並整合前端開發流程，另外跟風一下最近很紅的 TailwindCSS，讓後端可以無痛手刻 UI ~</p>
]]></content>
      <categories>
        <category>外掛開發</category>
      </categories>
      <tags>
        <tag>composer</tag>
        <tag>customPostType</tag>
        <tag>metabox</tag>
        <tag>option</tag>
        <tag>asset</tag>
        <tag>ajax</tag>
        <tag>router</tag>
        <tag>packagist</tag>
      </tags>
  </entry>
  <entry>
    <title>數位斷捨離三十天全記錄</title>
    <url>/tw/%E6%95%B8%E4%BD%8D%E6%96%B7%E6%8D%A8%E9%9B%A2/</url>
    <content><![CDATA[<h2 id="Day0"><a href="#Day0" class="headerlink" title="Day0"></a>Day0</h2><p>上週意識到自己已經被排山倒海的工作以及隨找隨到的壓力壓得喘不過氣來，因而造成暴起暴落的情緒還影響到他人，決定重新審視自己的每日工作，試圖改善這樣的狀況。</p>
<p>拜日讀了「<a href="https://www.books.com.tw/products/0010843512">深度數位大掃除</a>」這本書才知道，原來已經有非常多的專家早就意識到社群媒體所帶來的危害，包括無時無刻的線上 stand by、每三分鐘刷一次社群網站、每五分鐘打開一次通訊軟體查看有沒有新訊息，早就造成了現代人無法獨處必須持續線上淺社交的焦慮。</p>
<p>每當看到朋友在社群媒體上精心展現的照片、心得文，都會覺得自己過得太混太廢，因而產生焦慮，更嚴重的是因為工作的關係必須隨時處理通訊軟體傳來的訊息，看到卻不處理更造成自己的罪惡感，因此明白自己病情有點嚴重了。</p>
<span id="more"></span>
<p>於是今早決定開始進行數位斷捨離的步驟，持續三十天，戒斷一有空檔就滑手機與傳訊息的習慣，所以一早我就先打電話給最重要的朋友以及客戶，跟他們說明這幾天來自己的遇到的問題，然後說明之後聯繫主要透過 Email，有急件的話可以撥電話給我，然後每天早上跟下午會各處理一次 Email，晚上六點到七點才會開 Line。</p>
<p>斷捨離的第一步是先捨棄所有可無可有的科技產品或是 App，所謂可有可無就是不用他不會造成沒頭路或是妻離子散的程度，然後持續三十天，等三十天過後再重新檢視自己所有的科技產品是否有其必要性，以及是否符合自己所重視的價值，最後選擇自己要用的科技，並重新優化使用他的流程，讓自己獲得最大的效益。</p>
<p>今天早上買早餐就沒帶手機出門，在排隊買口罩的時候還跟婆婆媽媽交換口罩領取的資訊，我想這是一個好的開始，重新找回與人之間的真實互動，而不是只躲在螢幕後面敲打鍵盤來與人交流。</p>
<h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><p>好久沒有跑步的時候沒帶上耳機了，想不到邊跑還在腦海中邊解了幾個 Bug。晚上去找朋友吃飯，久久見一次而不是只是在 Line 上面打字，對於人際關係的壓力感覺舒緩多了，第一天下來三不五時還是會想到什麼然後想要 Google 一下，所以出門不帶手機，在家也把手機翻過來並放的遠遠的，最緊張的時刻是晚上六點開 Line 的時候，深怕滿滿的未讀訊息，結果還好，沒啥緊急狀況，希望可以撐過接下來的日子。</p>
<h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><p>忘了把手機的通知提示關掉，今天在拿起手機的時候不小心看到鎖定畫面的提示訊息，放著不理它結果在意了一整天，開始在東想西想是不是有什麼緊急狀況，或是有什麼重要的事情在找，好不容易忍到晚上可以開通訊軟體之後，打開來看就只是一些朋友的分享連結@@，好討厭被這種提示困擾一整天的心情，所以學乖了，把所有通知都關了，就不會不小心再喵到了。</p>
<p>早上去排口罩看到大排長龍，就跑去比較遠的另外一家領，結果沒幾隻小貓在排，走回來的路上還順便跟昨天告訴我要先拿號碼牌才能領口罩的大媽說另外一家比較快，不用排這麼久，然後還跟他們報另外一家還有乾洗手噴霧可以買，她們超開心，想不到在排隊的時候不用手機還可以拓展自己的大媽交友圈(?)，</p>
<h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><p>不知道有多久，可以不被受打擾的只專心解決一個問題。長年習慣多工作業，而多工也不是真的在同一時間內做多件以上的事，只是 A 做到一半去做 B，B 做到一半又跑去做 C，然後訊息來了又跑去研究 D，最後導致每件事無法深度思考並做到徹底，就算完成也只是表面功夫而已。</p>
<p>今早面對了一個遲遲不想面對的 Bug，是哪種光在腦海中想就完全沒有方向的那一種 Bug，所以早在上週五就決定在今天好好的跟它相處一番，一開始嘗試了很多方法亂改一通，始終沒有頭緒，直到靜靜的看著那一堆程式碼，搞懂它每一行在寫什麼，看不懂的就查 Google，慢慢理解之後，就發現 Log 的輸出訊息被關掉了，所以從現有的 Log 中怎麼樣也找不到正確的錯誤訊息。</p>
<p>有了正確的 Log 訊息之後，問題大概就解決一半了，去 Google 爬下一堆人碰到一樣的狀況，造成原因的矛頭也指向同一個，於是我做了實驗，讓同樣的程式碼在不同條件的環境下執行，確定是這個問題造成程式執行錯誤，因此就寫下紀錄來提醒未來的自己。</p>
<p>前前後後花了一小時又三十八分鐘，因為終於解決了一直困擾自己滿久的問題，一整天心情都很愉悅，也很開心自己有辦法能解決這個問題，常發現自己在還沒有去面對問題的時候都覺得好難不可能做得到，等到可以真正坐下來面對面逐一理解它的時候，好像就沒有什麼問題可以難倒自己了。</p>
<h2 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h2><p>不知道是自己的心境開始轉變還是因為溝通方式的不同，覺得以前用通訊軟體溝通時不太友善的人，在改用 Email 溝通之後就變得客氣又有禮貌，而且表達能力也變好了，問題的敘述清楚非常多，不會再像以前總是搞不懂對方想講什麼。</p>
<p>另外也發現到自己比較能有耐心的看完對方的問題，然後根據對方的問題進行比較深度的思考，可以站在對方的立場來設想提供哪種解決方案是最適合他們的方式，想到後會再去多做一層驗證，而不是只想趕快把答案丟出去來結束這一回合。</p>
<p>現在每天在買早餐、等電梯、跑步、晚餐到睡前都有很多空檔可以想些有的沒的，光這禮拜就想到有兩件事可以做：第一個是系統化每天的工作內容，把曾經寫過的扣用自己的方式把它組織起來，方便未來可以快速重複使用，第二個是想做一個與 WordPress 相關的平台，晚上看了 Matt 在 WordCamp US 2019 的演講，覺得又有一堆東西可以玩了！</p>
<p><a href="https://wordpress.tv/2019/11/03/2019-state-of-the-word/">https://wordpress.tv/2019/11/03/2019-state-of-the-word/</a></p>
<p>發現到自己排工作時程會把六日也排進去，雖然是做一些比較學習的活動，但既然都要斷捨離了，六日就還是要離開螢幕，回歸真實世界來做些什麼事，也許又可以把樂高翻出來玩了～</p>
<h2 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h2><p>以前都會說「我再找時間檢查」，或是「我晚點看」，現在可以說「下週三上午處理」，能給對方明確的時間感覺很好，再也不會被突如其來的各種大小問題給佔據每分每秒，就是因為每件事好像都要現在處理，怎麼樣也抓不準今天到底有沒有辦法處理本來該做的事情或是之後的邀約，都被一堆臨時生出的問題給偷走時間了。</p>
<p>今天完成本週預期的工作進度，下午因此有了空檔，開始在規劃自己的 Design System，應該還是會用網站的形式來做，有考慮 Codepen 或是 JSFiddle 之類的網站來處理，但還是習慣自己架 WordPress 來做最彈性。</p>
<p>裝了一堆 block plugin，還被 Astra Theme 的使用流程驚豔到，想不到可以做得這麼直覺好用，以免費版來說設定項跟內建模板算是非常豐富了，但跟自己想的還是有點差距，沒意外的話最後應該還是自己手刻吧，希望整套做起來後也有辦法讓其他工程師來使用這個系統。</p>
<h2 id="Day6-amp-7"><a href="#Day6-amp-7" class="headerlink" title="Day6&amp;7"></a>Day6&amp;7</h2><p>第一個沒有數位裝置的週末，挑戰了自己換紗窗以及縫補破掉的沙發，拜六先看 Youtube(?) 如何更換紗窗教學，然後立馬跑去特力屋採買紗網以及壓條，還有一把很像 Pizza 刀的壓條滾輪，但那邊賣的紗網都超大而且不便宜，所以最後只買了壓條跟滾輪，紗網決定去五金行採買。</p>
<p>不出所料，去五金行買尺寸比較剛好，而且便宜了快 100 塊，工具齊全後拜日開工，先把舊紗窗拆下來，然後用一字起子把舊壓條先挑起來，紗網舊可以拆下來下了。接下來把新紗網覆蓋於窗框上，再來就是最費力的部分：把壓條塞進縫隙中，看影片示範好像很輕鬆，自己用可是費了九牛二虎之力才把壓條塞進去，雖然有滾輪可以前後壓，但轉角的部分不好處理，只好邊用滾輪邊用螺絲起子壓進去，好不容易四邊都壓完，手跟腳都超酸，不虧是每天只會坐在椅子上的阿宅工程師。</p>
<p>搞定裝上紗窗後跟解了 Bug 一樣爽快，只是手腳無力而已，接著換針線活，把沙發皮革裂開的部分用針線縫合，相較於壓條全身省力得多，但改換手指頭跟背酸，因為皮革很厚，針要插進去以及把針拉出來手指頭要很費力，以為自己每天都在打字指力應該很強，想不到縫個一條裂痕就沒力了，頓時覺得自己弱到很爆笑，如果把我丟到無人島我鐵定活不過三天。</p>
<h2 id="Day8"><a href="#Day8" class="headerlink" title="Day8"></a>Day8</h2><p>特意把拜一空下來，作為整理自己工作內容以及執行新計畫的時間，可以一整天做自己喜歡的事實在很不錯。這週的計畫是建置自己的設計系統，我把他取名叫 <a href="http://ods.oberonlai.blog/">ODS - Oberon Desgin System</a>，找了一個類似 Gitbook 的 <a href="https://github.com/tomjn/wp-gitbook">Theme</a>，然後用了 Gutenberg 的<a href="https://wordpress.org/plugins/qubely/">第三方套件</a>做頁籤以及<a href="https://wordpress.org/plugins/wp-codemirror-block/">程式碼 block</a>，再把之前做了半殘的專案的 LOGO 拿來改一下，用很破的英文寫了簡單介紹，最後再把最近專案有用到的 UI components 整理進去，之後有類似的 UI 就直接複製貼上，改改 class 應該就可以搞定，希望能讓切版的速度再提升一些。</p>
<p><img src="https://i2.wp.com/oberonlai.blog/wp-content/uploads/2020/02/CleanShot-2020-02-18-at-10.24.32.jpg?fit=1024,733&ssl=1"></p>
<p>關於分類的方式還在猶豫，到底是否要把 components 跟 scss 拆開來，想把 style 獨立出來是因為每個專案都額外多寫的 style，但現在想想這些 style 好像也都是會對應到 pug，好吧，應該還是比照 UIKit 的分類方式即可，style 會獨立存在的狀況也只有 Mixin 跟 Variable 的部分，這部分需要再喬一下。</p>
<p>之後會再寫教學文說明這裡面的東西要怎麼用，主要是需要搭配 pug 跟 scss，等下禮拜來做另外一個計畫的時候順便把使用流程記錄下來。接下來就是可以邊工作邊把東西整理進去了。</p>
<h2 id="Day9"><a href="#Day9" class="headerlink" title="Day9"></a>Day9</h2><p>今天要準備面臨一些重大決策，有許多環節要進行考量，所以趁著晚上的時間來自己跟自己腦力激盪一下，但想著想著覺得資訊不足，就很想要拿手機起來查些資料，但總覺得一查下去就會沒完沒了，所以告訴自己先用假設的方式來進行決策評估，如果 A 條件成立的話就用 A 方法，不成立的話就改用 B 或 C，但 B 跟 C 也可能需要 D 或 E 的條件成立才有可能執行，所以最後筆記本就被我畫得亂七八糟XD</p>
<p>資訊不夠要下決策真的滿難的，但反而在資訊不足的情況下，才會問自己最重要、最看重的事情是什麼，畢竟沒有任何一個搜尋引擎可以查到你自己在想什麼，現在知道要常常搜尋自己的大腦，常用的話他的演算法也許才會越來越強。</p>
<h2 id="Day10"><a href="#Day10" class="headerlink" title="Day10"></a>Day10</h2><p>覺得電子郵件的來回對話一多，再家上每個話題都開新郵件來溝通，時間一久還是會滿亂的，尤其是搜尋時不像通訊軟體直接打關鍵字就好，目前用的 <a href="https://sparkmailapp.com/">Spark</a> 雖然可以用關鍵字進行搜尋，但搜尋結果只有顯示信件標題跟短短兩行摘要，無法很直觀的確認這封 Email 是否為我要找的內容，都還是必須要一封封點進去查看，目前還沒找到好的解決辦法，只能先針對同一話題進行回覆，避免再產生更多新的郵件。</p>
<h2 id="Day11"><a href="#Day11" class="headerlink" title="Day11"></a>Day11</h2><p>邁入第十一天，開始進入撞牆期，覺得沒有任何網路資訊的 Input 好乏味，退訂了所有電子報，沒有 Product Hunt 或是 Neil Patel 每天寄來的新工具、新影片；沒有 Youtube 的小鈴鐺，好久沒看眼球中央跟台南 Josh；沒有 Facebook 社團的通知，完全不知道 WordPress 正體中文社團裡面又有什麼新資訊。</p>
<p>每天固定只在 18:00 打開 Line、Messenger，白天朋友傳了一堆訊息，只好一個一個 tag 回覆，但回覆完所有訊息，還等不到他們傳來新的，我就又下線了，我想再過一陣子應該就不會有人想要跟我傳 SMS 了吧XD</p>
<p>這陣子陪伴著我的工具就只有好久沒用的小本本以及電子書閱讀器了，在想東西的時候用筆記本做心智圖的發想，以及繪製一些網站的草圖，意外發現擦擦筆竟然如此好用，真的可以擦的很乾淨；至於電子書在之前過年的時候因為有折扣就買了幾本，K 完了「<a href="https://www.books.com.tw/products/0010825335">一人公司</a>」，滿多觀念還不錯，但我想被台灣中小企業老闆看到又多了一個節省成本的說嘴理由，然後這這本書的中文翻譯有點不像中文，我想之後就還是訂閱 <a href="https://pjrvs.com/">Paul Jarvis</a> 的電子報就好，每個禮拜都可以寫長文的網頁設計師真的超強。</p>
<p>另外一本很精彩的是 「<a href="https://www.oreilly.com/library/view/building-web-apps/9781449364779/">Building Web Apps with WordPress</a>」，從來沒看過有書籍可以把 WordPress 探討的這麼透徹，裡面有超多實務技巧，還分析了 WP 每個資料表的 Schema，對應到哪一隻 API 去做 CRUD，而且裡面所使用的範例非常精彩，他做了一個開源專案叫做 <a href="https://schoolpress.me/">SchoolPress</a>，書中每個章節都可以對應到這個專案的各項功能，目前看到第四章，就已經學到了該怎麼把 MVC 的概念應用在 custom theme 的開發上，像是哪些 code 應該是要放在 plugin、哪些要放在 theme，立馬就把所學應用在這個月的專案上。</p>
<p>其他還有 K 完的是 <a href="https://github.com/m615926/wordpress_theme_handbook">WordPress Theme Handbook</a>、<a href="https://www.designbetter.co/design-systems-handbook">Design System Handbook</a>，一直想找時間再把 <a href="https://make.wordpress.org/docs/handbook/past-projects/handbooks/">Make WordPress Document</a>、<a href="https://developer.wordpress.org/plugins/">Plugin Handbook</a>、<a href="https://10up.github.io/Engineering-Best-Practices/">10up Engineering Best Practice</a> 整理成電子書來 K，但每本要整理起來又是不小的工程，真希望有可以爬這些內容然後自動轉成 ePub 的工具，嗯？要來研究爬蟲了嗎？XD</p>
<h2 id="Day12"><a href="#Day12" class="headerlink" title="Day12"></a>Day12</h2><p>今天失守了，原訂的打掃時間被某些緊急狀況耽誤，最後只能很倉促的完成打掃，但整個打掃品質並不好，該如何避免這種情況再次發生？只能捨棄這種會造成緊急情況的機會了。最近也推掉了這種會有緊急狀況必須要處理的機會，現在開始慢慢習慣把時間的自主權找回來後，就特別留意任何會偷時間的事，被偷走的時間是再也賺不回來的。</p>
<h2 id="Day13-amp-14"><a href="#Day13-amp-14" class="headerlink" title="Day13&amp;14"></a>Day13&amp;14</h2><p>拜六試著一起下廚做咖喱飯，距離上次有進廚房做飯大概是十年前了，先去肉舖子買了雞腿肉，再去超商買咖哩塊、紅蘿蔔、馬鈴薯，然後開始處理食材，跟玩 Overcooked 比起來，手忙腳亂的情況有過之而無不及，但處理雞腿肉的真實觸感，是打電動永遠無法體驗到的，雖然用錯鍋子讓廚房起火也是遊戲裡面會出現的情節，好加在有順利滅火。</p>
<p>吃完自己煮的飯一整個覺得好累，然後還要洗難洗的鍋子，煮飯真的超級不輕鬆，要煮飯的所有作業要好幾個小時，真正吃只要 30 分鐘就 KO 了，謝謝所有曾經煮飯給我吃過的人，不管是好吃或難吃的。</p>
<p>拜日去了超久沒去的三峽老街，天氣好路上的風景也好，但感覺人潮並未受影響，還是滿多遊客的，以前去三峽大概都是下午四五點的時候去的，那時候店家都打烊了，這次是中午就出發，難得感受到三峽老街熱鬧的景色。老街周邊多了一個叫做合習文創的景點，他是舊醫院改造成的工作空間，有各種手作職人的工作室進駐，看到師傅們用著各種器具在打造手作品，然後對比一旁的觀光客在旁邊用手機刷著 FB，頓時就很想把數位斷捨離的想法告訴每個人，但我想真的這樣做的話我應該會被警察請走吧…</p>
<p>回到家大概五點多，看著夕陽邊打盹休息，覺得這樣的六日過得好充實，很難再回去靠著電動度過的週末了。</p>
<h2 id="Day15"><a href="#Day15" class="headerlink" title="Day15"></a>Day15</h2><p>期待已久的星期一終於來到，準備把已經在腦海中籌劃好幾天的想法來付諸實現，一早便起了個大早，趕快把其他事情安置妥當後就立馬開始來寫扣，目標是一天之內把它完成，但看來是我想太多了，第一個小時光是在 Google Font 上面挑字型就去了，第二個小時做了 Header&amp;Footer，第三個小時設計了首頁的 50%，上午的時間就用完了@@</p>
<p>下午繼續把首頁完成，然後設計了分類頁，當要開始做內容頁時，就來到了下班時間了，晚上繼續再多弄一個半小時，內容頁進度大概 20%，主要是草稿規劃的想法，跟實際做出來的呈現有點落差，所以只能邊寫扣邊改設計，因此花了不少時間在重新整理。</p>
<p><img src="https://i1.wp.com/oberonlai.blog/wp-content/uploads/2020/02/CleanShot-2020-02-25-at-09.24.11.jpg?fit=1024,785&ssl=1"></p>
<p><img src="https://i0.wp.com/oberonlai.blog/wp-content/uploads/2020/02/CleanShot-2020-02-25-at-09.24.45.jpg?fit=1024,668&ssl=1"></p>
<p>前端頁面還差註冊登入頁、會員管理、文章管理、發文等頁面還沒弄，這樣看起來應該還需要再一週左右的時間才能搞定。</p>
<p>一整天做下來的感覺，只覺得壓力太大，太想在一天之內就全部完成，所以一直不停的趕趕趕，過程之中似乎少了點樂趣，很多扣就直接拿其他的專案來複製貼上，也沒有再重新整理架構，寫法也沒有再重新梳理，覺得這樣求快的過程不是我所追求的。應該放慢一點腳步，把自己覺得可以重用的元件做到位，讓下面的專案可以更方便利用，我想這也是這個專案的目的之一。</p>
<h2 id="Day16"><a href="#Day16" class="headerlink" title="Day16"></a>Day16</h2><p>我覺得自己的時程規劃出了問題，我會把很難在短時間內完成的事情，硬是壓在自己希望完成的時間，然後還會告訴別人我會在這個時間點完成來給自己壓力逼自己要達標。</p>
<p>會這麼做的原因是因為覺得這件事自己「應該」在這個時間就要完成，而無視事情的複雜度與困難度，我在規劃時程是往往會低估這些條件，像是這樣的狀況：今天沒完成的事拉到明天，原本明天該完成的事就拉到後天，等快到自己訂下的期限時，就會累積一堆待辦事項，然後告訴自己：「剩下 N 天了，拼一下應該沒問題」。</p>
<p>另一個原因是希望展現自己的工作能力來獲得認可，這樣就能說嘴我在 N 天內就可以完成一個專案，尤其是在社交場合上，總是想要表現出自己是個熟練的老手，於是久了之後自己也給自己這樣的想法，如果某個專案做超過預計的時間，自己就無法肯定自己，因為與想像中的自己有所不同。</p>
<p>解決辦法就是只能真實面對自己現在所擁有的時間了，在規劃時程的時候從過去的歷史紀錄來估計每個項目需要的時間，然後回推一天之中可以放下幾個任務的安全數目，並且根據實作狀況隨時調整任務安排，再來實驗看看～</p>
<h2 id="Day17"><a href="#Day17" class="headerlink" title="Day17"></a>Day17</h2><p>今天是趕寒假作業的一天，從早到晚瘋狂寫扣，因為沒有在約定好的時間完成工作，只好瘋狂趕工把進度補上，還好在朋友協助另一件大工程的情況下，讓我有時間可以專注在手上的工作，總算在一天之內把原定三天的進度給清完。</p>
<p>太久沒工作到這麼晚，想說應該是躺下秒睡，結果反而因為大腦還停留在寫扣的狀態，一直想著哪邊還可以改寫而失眠，有了這次教訓真的要乖乖的先把寒假作業寫好，剩下的日子才能做好安排，也要花時間把寫過的扣整理成自己的系統，方便下次再重複運用。</p>
<h2 id="Day18"><a href="#Day18" class="headerlink" title="Day18"></a>Day18</h2><p>數位斷捨離進入了下半場，開始在計畫當這次結束以後，要把什麼科技再放回生活中，而什麼東西是要永遠移除的。</p>
<p>我覺得主戰場還是在手機上，每個 APP 都會試圖要你把他們打開來看看裡面有什麼新消息，所以手機裡面的 APP 幾乎八成都可以砍掉，能留下的只有打電話、訊息那些原本內建的「通話」功能，以及與個人帳務相關的 APP，像是數位銀行、記帳軟體等等。</p>
<p>另外是出門用的 APP 只留 Google MAP，本來想說要開始練習用紙本地圖的但被打槍，其他所有訂房訂機票都可以透過電腦或是手機的瀏覽器來處理。</p>
<p>然後手機瀏覽器的預設搜尋引擎改為 <a href="https://duckduckgo.com/">DuckDuckgo</a>，他的隱私功能很不錯，但最主要的是因為他能找到的搜尋結果相對 Google 來說少了非常多，有限的資訊讓我可以只專注在主要要找的內容，但手機搜尋基本上還是會保持著除非必要不然不用的習慣。</p>
<p>剩下因為工作相關而裝的 APP 都能毫無眷戀的移掉了，最捨不得的應該還是<a href="https://apps.apple.com/tw/app/captain-tsubasa-dream-team/id1293738123">大空翼</a>了，花了無數個等待的空檔零碎時間，累積起來應該也有好幾百個小時，每天固定打開領每日獎勵，每週要維持在排行榜一定要打一場，更不用說一年一度的抽卡大放送，我累積了一堆 SSR，整個隊伍的總體戰力是七萬多，全部都升到 UR 並且能力值全滿，重點是不用花半毛錢只要花時間跟耐心就真的可以組成很強的隊伍。現在打這段字的當下覺得自己完全是中二屁孩無誤。</p>
<p>至於通訊軟體是我覺得最難處理的，因為是一個公私不分的場域，尤其是 Line，在思考是否要另外申請一個門號專門給家人朋友聯繫用的，而工作上的 Line 就只在電腦上使用，只是又不想有兩個門號，這部分要再想想。</p>
<p>最後是每天工作的電腦。這部分很單純，只要千千萬萬不要進入 Youtube 首頁就好，想看特定的教學影片就輸入關鍵字然後後面接 youtube，譬如「neil patel youtube」，就可以直接進入頻道頁面閃過恐怖的首頁，Youtube 絕對是遠遠超越 Facebook 的時間殺手。</p>
<h2 id="Day-19"><a href="#Day-19" class="headerlink" title="Day 19"></a>Day 19</h2><p>把經營兩年多來的服務做了一個大回顧，一路上受到了許多朋友的幫助才能走到今天，看了當年自己的企劃文件，才明白自己的每個決策都是有脈絡可循的，只是因為時間久了，就逐漸遺忘了它，然後責備自己為什麼當初不那樣做或這樣做，如果怎樣怎樣的，現在應該可以更好之類的馬後砲。</p>
<p>然後時間久了就打算從記憶中把它抹滅，也因此不再花時間去耕耘、改進或是提升功能，然後一直在想著還有什麼新專案可以做；想告訴自己：有新的想法是很好，但不要因為已經達成某些目標了，就覺得這些目標對自己沒有什麼意義。</p>
<p>當初所花的時間與開發上的心血，都是辛苦一點一滴累積出來的，是充滿著熱血與熱情去打造的，時間久了，這種一時的激情當然會消退，為了追求這樣的激情，又訂了一個接一個的新目標，我的存在價值不是靠著不停創造新網站，而是我的存在本身就是一種價值。</p>
<p>因為做了這件事情，一路上得到的幫助以及結交到的朋友、克服無數的困難、也幫助了很多人解決他們的問題，樂於助人、無私分享、勇於面對挑戰就是我的價值所在，雖然可能賺不到什麼錢，但只要能幫助到人並換得他們一份真心的感想，我想這就是我最大的報酬了。</p>
<p>另外最重要的是，幫助別人前要先幫助自己，給自己合理的時間做每一件事，不要壓榨自己，對自己仁慈一點，世界上真的真的沒有完美這件事。</p>
<h2 id="Day-20-amp-21"><a href="#Day-20-amp-21" class="headerlink" title="Day 20&amp;21"></a>Day 20&amp;21</h2><p>自從開始要在假日從事優質休閒活動後，特力屋變成像是我們的工具室一樣，記得上次去買紗窗的時候看到旁邊有在賣木質紋路的壁貼，就想到自己用了十幾年的 Ikea 書桌早已斑駁掉漆到一個慘不忍睹的境界，所以只能用桌巾把他蓋住，想要粉飾一切。</p>
<p>於是這禮拜就決定來用壁貼來重新整修我的書桌，事實上一開始是想要用油漆，但怕臭又怕刷的太醜，用壁貼應該是相對來得簡單許多。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/IMG_0714-1.jpg"></p>
<p><em>很像去路邊撿回來的一塊書桌</em></p>
<p>壁貼在特力屋的名字叫做「波音軟貼」，我也不懂為何要叫這個名字，有大概八種花色可以選擇，本想選深色的，但又怕太沉重，最後還是選了安全牌的淺褐色。</p>
<p>實際施工的時候本來以為會跟螢幕保護貼一樣，表面會起一堆泡泡不平整，所以貼的時候格外小心，想不到完成後意外的平整，整體看上去會以為真的是一塊全新的木頭一樣。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/IMG_0715.jpg"></p>
<p>邊邊的部分就比較稍微難收一點，比表面還容易起泡，但拿出上次修紗窗的滾輪壓條壓一下，可以有效的壓平表面，算是意外的收穫。轉角的部分就隨意了，反正要靠牆看不到XD</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/IMG_0718.jpg"></p>
<p>完成後跟全新的桌子一模一樣(大心)，這張貼紙我買 120 x 90 CM，花了一百五十幾塊，第一次感受到自己手做比買新的划算超多，然後也開始好奇家中每塊木板到底是真的木頭還是是用貼的，所以每一塊都去撕撕看，結果八成都是貼的XD。</p>
<p>也驚覺師傅的貼工超強，在轉角處完全看不出來是用貼的痕跡，不像自己的桌子，邊邊還會翹起來，但現在還是開心的在上面打字工作，一整個心情超好，希望這張貼紙可以陪我再戰十年。</p>
<h2 id="Day22"><a href="#Day22" class="headerlink" title="Day22"></a>Day22</h2><p>晚上加了班，把該清查、該通知的項目逐一完成，算是讓心中的一塊大石放了下來，感謝願意幫忙配合的朋友快速的協助我完成這些事，經過一晚的努力只剩下一半，剩下的就是需要等待了，希望這個月能全部完成，不然會超噴錢 &gt; &lt;</p>
<p>另外在想要不要主動去幫忙一件事情，縱使之前讓我辛苦萬分，思考了很久，還是想對自己好一點，也許主動幫忙可以得到需要的報酬，但是接踵而來的壓力與緊迫盯人，就是造成自己前陣子壓力破表的因素之一，放過自己吧…</p>
<h2 id="Day23"><a href="#Day23" class="headerlink" title="Day23"></a>Day23</h2><p>晚上看完了「<a href="https://www.books.com.tw/products/0010835357">冒牌者症候群</a>」這本書，解答了長期以來自己心中的擔憂：不管再怎麼努力、完成了多少大大小小的專案，或是得到了多少人的讚賞，都會覺得自己並不值得這些成就，有點言過其實了。</p>
<p>然後當完成一個專案後，就馬不停蹄的繼續下一個或是給自己新的任務，從不讓自己回頭看自己完成了多少的成就；看著其他同領域的大神已經到達自己遙不可及的境界，便覺得自己弱到不行，然後貶低自己，逼自己要更努力才行，久而久之造成自尊低落，也無法真心接受他人的讚美。</p>
<p>每當自己粗心或是無意做錯了什麼，就會責備自己不夠專業，試圖要用更多的工作來彌補這樣的狀況，越是積極要追求什麼，越是把自己逼得更緊更不能鬆懈，為了要達到完美的目標，就這樣一直偏執著，最後或許達到了自己設定的目標，就要再往下個階段邁進，時間久了心裡不生病才奇怪…</p>
<p>世界上沒有完美這件事<br>世界上沒有完美這件事<br>世界上沒有完美這件事</p>
<p>解法就是對自己仁慈一點，好好體會過程，事情盡力去做，不管有沒有完成，都欣然接受結果。對自己仁慈也才能對別人仁慈，不再以自己的高標準來對待其他人，才不會因為別人沒有達到自己心目中的標準而貶低他人的成就。</p>
<p>達到目標要犒賞自己給自己肯定，把成就內化變成自己的信心，以鼓勵自己來取代自我批評，專注在做每件事的當下，尋找會讓自己產生快樂感覺的事物，把心思放在能讓自己愉悅的事情上。</p>
<p>減少自己內心與他人光鮮亮麗的外表來比較，我們永遠也不會知道在他們成功的背後所付出的是什麼，以及生長環境的差異與心理素質，這樣的比較是完全沒有意義的，如果要犧牲某些自己看重的價值來達到他們的成就，那我寧可做自己就好。</p>
<h2 id="Day24"><a href="#Day24" class="headerlink" title="Day24"></a>Day24</h2><p>趁著專案的空擋，趕緊把寫好的扣整理到 <a href="https://ods.oberonlai.blog/">ODS</a> 裡面，目前已累積了 41 個元件，看著自己打的一堆字，最後竟然可以組成一個網站，這種感覺非常爽快。分類的部分也大整理了一番，先只增加已有元件的分類，其他的再陸續補上。</p>
<p>比較拿不定主意的地方是 WordPress PHP 的部分，在想是不是應該要用 template tag 來區分，但有些部分又會跟前端的扣重疊，看來只能用多個分類來進行歸類。</p>
<p>SCSS 變數的部分把 UIKit 裡面比較會常用到的都整理出來，Margin 跟 Padding 增加專案實作上會需要的 class，不然原生 UIKit 對於這兩者都沒有 RWD 的處理，等不到更新只好自己弄了。可以改進的地方是值應該要用變數來做計算，而不要用寫死的方式來指定，這樣就可以透過變數統一修改。</p>
<p>要再繼續整理 WP 的部分，這樣之後 Starter Theme 就可以超清爽，需要加什麼功能再來這邊複製貼上就好，就不用把所有寫過的功能都預先放在 Starter Theme 裡面了。</p>
<h2 id="Day25"><a href="#Day25" class="headerlink" title="Day25"></a>Day25</h2><p>很充實的一天，早晚各與許久未見的朋友吃飯聊天，可能真的太久沒上 FB 了，連朋友換了髮型都不知道XD，聊了工作、新想法、生活，能夠真實與人面對面的交流，所能交流的資訊、想法、甚至是情感層面，都比只靠著通訊軟體簡短的三兩句片段訊息來得豐富完整。</p>
<p>看著其中一位朋友深受數位焦慮、冒牌者症候群所困擾，自己所能做的就是盡可能把書中的知識與他分享，但效果還是有限，畢竟相隔兩地好幾個月才能見一次面，很難靠著一兩次的交談就有所改變，希望他能撐到能影響他的人出現，真心不希望失去這位朋友。</p>
<p>另外以後嚴禁自己在八點過後聚餐，晚上睡覺腸胃一整個不舒服，太久沒這麼晚吃飯給身體的負擔太大，都休息了腸胃卻還在工作，以後真的要避免，如果真的要約就是喝個開水就好，不然真的很難受。</p>
<h2 id="Day26"><a href="#Day26" class="headerlink" title="Day26"></a>Day26</h2><p>等不到三十天，就還是把手機上的通訊軟體給移除了，會做這個決定的原因，是因為不想被週五下班前的問題，持續影響到六日的心情。</p>
<p>週五下午一位客人網站遇到一些狀況，先做了初步的檢測與調整，並且解釋了原因為何，然後更新了外掛與做了設定上的修改。另外還協助檢查整個站的 Request 問題，找出一些可能造成原因的外掛，並且停用後來改善效能。</p>
<p>處理完之後差不多也到了下班時間，就告知客人後續有問題可以用 E-mail 來聯繫，但尚未得到客人的回覆我就先下線了，然後一整個晚上都超想用手機看 Line 來確認客人有沒有收到我最後的訊息，或是查看 E-mail 來確認後續是否有狀況。</p>
<p>睡覺的時候也在想，萬一還是有問題的話原因可能是出在哪裡、要怎麼解決，最後實在受不了，隔天早上起來就立刻把跟工作有關的 APP 全部移除了，逼自己如果還是一定要處理的話，請坐回電腦桌開啟電腦來處理，這樣才能意識到自己是在加班，而不是只是稍微看下訊息然後簡單回下而已。</p>
<p>真的有考慮換回傳統手機，這樣就沒辦法靠手機加班了，也才能讓自己在非上班時間跟工作斷線。但不知道有沒有支援 Podcast 的傳統手機？</p>
<h2 id="Day27-amp-28"><a href="#Day27-amp-28" class="headerlink" title="Day27&amp;28"></a>Day27&amp;28</h2><p>這週末過得很辛苦，長久以來，一直都有上班日沒事、一到假日頭就會開始痛的狀況，先是從肩膀開始，然後是脖子，最後會跑到前腦，嚴重時會超級想吐。</p>
<p>平常工作日每天都會有下午一杯咖啡的習慣，事實上工作日有時候頭也會痛，只是靠著咖啡因跟一堆事情來讓自己沒有注意到頭痛這件事，但現在假日完全不碰電腦了，反而讓頭痛大發作，只要坐在沙發上看書看個一小時，脖子就會開始僵硬，如果這時候沒有起來伸展一下的話就會開始發作。</p>
<p>但這拜六輕忽了坐在沙發上聽 Podcast 的症狀，想不到聽了一個半小時竟然跟看書一樣累，中間沒有起來動一動就整個頭痛爆發，最後還是只能靠著咖啡解決。結果隔天拜日又中招，想說晃了一整天了，可以坐在沙發上看個電影，結果只看了一半，肩頸又不舒服了，因為快接近傍晚了，怕喝咖啡會睡不著，想說要靠著自癒力來復原。</p>
<p>結果整個一發不可收拾，從五點多痛到十點，最後靠著普拿疼跟洗熱水澡，才讓情況好轉，痛的時候一直在問自己：「你到底想怎麼樣？」一直不停變換坐姿或是躺姿，只想找出最不痛的姿勢，有些姿勢好像比較不痛，但卻無法徹底緩解痛感。</p>
<p>試過靠著呼吸調節、認知改變來轉移痛感，但頭痛真的就是會抓住所有的注意力。這兩天頭痛到厭世，拜六痛完後去公園看著小朋友盡情的玩耍，縱使跑了滿身大汗臉紅氣喘也不會頭痛，就覺得好羨慕，在找不到方法以前，難道真的就必須要跟咖啡共處一輩子了嗎？</p>
<h2 id="Day29"><a href="#Day29" class="headerlink" title="Day29"></a>Day29</h2><p>下午沒喝咖啡，到了傍晚開始脖子痛，但還是拼著老命把該做的事情做一做，趁著洗澡的時候再用熱水好好的放鬆一下，以為睡前好一點就沒事了，結果三更半夜被痛醒，沒辦法只好再嗑一顆普拿疼，吃完藥精神好到睡不著，想著接下來自己到底該怎麼辦…</p>
<h2 id="Day30"><a href="#Day30" class="headerlink" title="Day30"></a>Day30</h2><p>不知不覺就來到數位斷捨離的最後一天，跟不使用智慧型手機比起來，覺得自己更大的成就是竟然可以持續更新這篇文章 30 天XD</p>
<p>連續幾天被頭痛困擾著，才發現是咖啡因的戒斷過程，突然不攝取咖啡因所造成的症狀，所以今天就乖乖地買了一杯，然後減少攝取量，從每天一杯變每兩天，然後看能否拉長攝取咖啡因的天數，採用漸進式的方式來戒咖啡，今天一整天頭沒痛起來，覺得人生又有了希望，趕緊來做自己想做的事。</p>
<p>首先是整理讀書心得，花了兩週的時間終於把一本一千五百多頁的英文書 K 完，因為是用電子書閱讀器看，所以可以把畫線的重點直接匯出、複製貼上，然後自以為這樣就完成了。接著逐一看自己畫線的重點，發現我根本想不起來為什麼要在這邊畫線，所以還是只能乖乖的一條一條重新翻回去看上下文，然後再用中文幫自己解釋出來，</p>
<p>程式碼的部分也是要自己打過一次，雖然整本書的範例都有放在 Github，但還是真的要自己打過才會變成自己的東西，或是至少對這樣的用法產生記憶度，不然單純的複製貼上就好像跟大學時期做報告一樣，貼完就什麼都忘了…</p>
<p>而且之後不要累積到整本書都看完才來做紀錄，應該每個章節完成後就來做，這樣才會有印象，也才能針對這個章節的內容做更深入的研究，不然這本書有 17 個章節，想要一口氣全部整理完，不僅不可能，過程之中也會忽略很多細節，這樣就太浪費這本好書了。</p>
<p>下午整理了一個多小時後，知道不可能一口氣整理完後就先擺著，然後準備下一本要看的電子書，因為想把線上的技術文件整理成 ePub 格式，找不到人家做好的，只能自己整理了。上次做過一本超花時間，要把每一頁都貼到 Pages 裡面、整理格式、排版、匯出、轉檔，又意識到想要一次做完這件事也是不可能的。</p>
<p>所以就採取貼到哪就看到哪的策略，同時也可以邊做紀錄，以前總是會很貪心想要一口氣把事情給做完，現在知道應該要按部就班來，才能把事情做得深且透徹。</p>
<p>最後恭喜自己完成三十天的數位斷捨離🥳，對於如何使用科技我會再另外整理一篇心得，這邊簡單下個結語：不用智慧型手機的生活絕對是可以正常過的，而且還會發現新的自己，像是換紗窗或是貼桌子XD</p>
]]></content>
      <categories>
        <category>老人碎念</category>
      </categories>
  </entry>
  <entry>
    <title>【 書摘 】Building Web Apps with WordPress - WordPress 基本介紹</title>
    <url>/tw/building-web-apps-with-wordpress-basic/</url>
    <content><![CDATA[<h2 id="二、WordPress-Basic-WordPress-基本介紹"><a href="#二、WordPress-Basic-WordPress-基本介紹" class="headerlink" title="二、WordPress Basic / WordPress 基本介紹"></a>二、WordPress Basic / WordPress 基本介紹</h2><p>第二章的部分先從介紹 WordPress 主程式的資料夾結構以及資料庫結構與相對應的 API 開始。</p>
<h2 id="WordPress-資料夾結構"><a href="#WordPress-資料夾結構" class="headerlink" title="WordPress 資料夾結構"></a><strong>WordPress 資料夾結構</strong></h2><p>要開發 WordPress 之前，必須知道的第一條鐵律就是「永遠不要修改 WordPress」。這意思是說千萬不要去修改 WordPress 的核心程式，因為只要一更新所有的修改就會被覆蓋，而更新通常都會有修補漏洞的項目，所以為了要能讓網站維持在安全的狀態，更新到最新版本是必要的。</p>
<p>也因此不要修改核心程式碼，要修改之前先找看看有沒有相關的 Hook 可以使用，如果沒找到適合的可以回報給核心維護團隊，請他們把你需要的 Hook 加入，這樣最好的作法。</p>
<p>至於哪些是核心程式碼？除了 wp-content 資料夾以及 wp-config.php 以外，其他都是核心程式碼，你永遠、絕對、不要修改它！</p>
<span id="more"></span>

<blockquote>
<p>Hook 的機制可以想像成是蓋房子的時候預留的管線，當今天房客要牽新的電話線或是水管時，不用把牆壁全部打掉，只要用之前準備好的管線來接就可以。</p>
<p>Hook 分為兩種，Action 是可以把一些特定的 Function 交由 Hook 來執行，Filter 是可以修改參數、顯示文字與設定值，Hook 可以放在你的佈景主題或是外掛來執行，這樣就不用修改到核心程式碼。</p>
<p>現在還不了解 Hook 是什麼也沒關係，更多關於 Hook 的部分之後會一直反覆出現，反覆到你都嫌煩了它還是會一直出現XD，因為他是 WordPress 程式運作的核心要素之一。</p>
</blockquote>
<p>（ㄧ）wp-admin - 所有 WordPress 後台的程式碼都放在這個資料夾裡面，每個檔案都對應一個後台的頁面或是功能。</p>
<blockquote>
<p>如果想要客製 WordPress 後台，會需要知道一堆 Hook，有時候與其去爬 Google 查文件，個人覺得直接看檔案還比較快，有看到 do_action 就是可以掛 Action 的地方，有看到 apply_filter 就是可以掛 Filter 的地方，等找到 Hook 名稱再去 Google 看要怎麼用，不然官方列出來的 Hook 爆炸多，而且很多又長得超像，常常都是要不停用除錯法才能試到我想要的 Hook，非常花時間…</p>
</blockquote>
<p>（二）wp-include - WordPress 所有的 API 、類別都是放在這個資料夾裡面，深入理解他們可以了解 WordPress 的工作方式。</p>
<blockquote>
<p>裡面非常精彩，我最喜歡看他們的類別是怎麼設計的，或是常用的 function 是怎麼寫的，每次隨便逛逛都會有意想不到的收穫～</p>
</blockquote>
<p>（三）wp-content - 我們可以修改的地方，也是放外掛、佈景主題與上傳檔案的地方。</p>
<p>（四）wp-content/themes - 放所有佈景主題的資料夾，要手動上傳佈景主題把東西放在這邊就對了。</p>
<p>（五）wp-content/plugins - 放所有外掛的資料夾，要手動上傳外掛把東西放在這邊就對了。</p>
<p>（六）wp-content/mu-plugins - MU 是 Must Use 必須使用的意思，當把外掛放在這邊的時候，WordPress 會直接自動啟用該外掛，並且不會出現在後台 &gt; 外掛的清單之中，所以當今天如果你要停用所有外掛來進行網站除錯的時候，記得檢查一下有沒有 mu-plugins 這個資料夾，否則萬一問題是出在 mu-pluings 裡面的外掛時，會讓你以為自己在鬼打牆。</p>
<blockquote>
<p>專門定義資料結構的外掛，也就是註冊 CPT、Taxonomy、Nav 的外掛，非常適合放在這個資料夾，因為這些資料是網站的基本元素，不會因為換了佈景主題而消失，也不應該被停用，所以有預設應該被啟用的外掛就放在這邊。</p>
<p>如果要把外掛放在這個資料夾必須要有一隻主要的檔案 .php，然後要引入的檔案可以放在資料夾裡面，而主要檔案不可以放在資料夾裡面，不然會抓不到。</p>
</blockquote>
<p>wp-content 裡面還有其他資料夾，有 WordPress 內建的，也有會因為你使用的外掛而自動產生的，當要搬移網站的時候，最簡單的方式就是把整個 wp-content 打包然後丟到新家去，就能移轉你的網站。當然，資料庫也要記得搬，接下來說明資料庫結構：</p>
<h2 id="WordPress-資料庫結構"><a href="#WordPress-資料庫結構" class="headerlink" title="WordPress 資料庫結構"></a><strong>WordPress 資料庫結構</strong></h2><p>這邊介紹了 WordPress 的資料表，以及存取寫入這些資料表相關的 Function，這些 Function 都可以寫在佈景主題裡面的 function.php 來使用它，或是放在你自己寫的外掛裡面。</p>
<p>資料表名稱的前綴使用預設的 wp_，這可以在 wp-config.php 裡面透過以下參數來修改：</p>
<p>$table_prefix = ‘wp_’; // 把 wp 換成其他前綴</p>
<p>如果你的 WordPress 是使用主機面板安裝的，像是 cPanel、Plesk，因為安全性考量他們會自動幫你修改資料表前綴，所以你打開 PhpMyAdmin 要找的是 abc_options、abc_posts 這些資料表就好，前綴 abc 不用管他。</p>
<hr>
<p><strong>（ㄧ）wp_option</strong> - 該表存放全站設定相關的資料，也就是在後台左側選單 &gt; 設定裡面的設定都會存在這張表裡面，如果你有自己開發外掛的話，也可以把相關的變數存在這個表中。為了節省效能，在寫入時會先把設定的值組成一個陣列再進行 INSERT。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-25-at-08.54.29-1024x140.jpg"></p>
<p>wp_options 資料表結構</p>
<p>wp_options 相關的 Function 定義在 wp-include/option.php，常用的如下：</p>
<p><strong>add_option( $option_name, $option_value, autoload=yes) 新增設定</strong></p>
<p>它會先自動檢查 $option_name 是否存在，不存在的話新增一筆資料，已存在的話會把 $option_value 進行覆寫。autoload 預設為 yes，作用是設定該 $option 是否加入到快取之中。如果你確定每個頁面都會用到這個設定的話，就保持預設值 yes，反之為 no。範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// add option</span>
<span class="token variable">$twitters</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'@bwawwp'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'@bmess'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'@jason_coleman'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用陣列來整理 option_value</span>
<span class="token function">add_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'bwawwp_twitter_accounts'</span><span class="token punctuation">,</span> <span class="token variable">$twitters</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>update_option( $option_name, $option_value ) 更新設定</strong></p>
<p>更新已存在的 $optioni_value，如果該 $option_name 不存在的會自動新增一筆，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// update option</span>
<span class="token variable">$twitters</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span>
         <span class="token variable">$twitters</span><span class="token punctuation">,</span>
         <span class="token keyword">array</span><span class="token punctuation">(</span>
                 <span class="token string single-quoted-string">'@alphaweb'</span><span class="token punctuation">,</span>
                 <span class="token string single-quoted-string">'@pmproplugin'</span>
         <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">update_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'bwawwp_twitter_accounts'</span><span class="token punctuation">,</span> <span class="token variable">$twitters</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>get_option( $option_name ) 取得設定欄位的值</strong></p>
<p>範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// get option</span>
<span class="token variable">$bwawwp_twitter_accounts</span> <span class="token operator">=</span> <span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'bwawwp_twitter_accounts'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span> <span class="token variable">$bwawwp_twitter_accounts</span> <span class="token keyword">as</span> <span class="token variable">$account</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">echo</span> <span class="token variable">$account</span><span class="token operator">.</span><span class="token string single-quoted-string">', '</span><span class="token punctuation">;</span> <span class="token comment">// 輸出 @bwawwp, @bmewss, @jason_coleman</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>delete_option( $option_name ) 刪除設定欄位</strong></p>
<p>範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// delete option</span>
<span class="token function">delete_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'bwawwp_twitter_accounts'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>每次要修改網站管理員電子郵件的時候，WordPress 會發確認信到新的信箱來做確認，但我懶，所以都直接進 wp_options 這個表來修改管理員的 E-mail，找到 option_name 為 admin_email 的欄位，然後修改 option_value 為新的電子郵件即可。</p>
</blockquote>
<hr>
<p><strong>（二）wp_users</strong> - 存放使用者帳密與基本資料，如果要從資料庫修改使用者相關資訊，像是客戶忘記密碼或是要新增一個管理員帳號，就可以在這個表進行處理。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-25-at-09.54.54-1024x249.jpg"></p>
<p>wp_users 資料表結構</p>
<p>wp_users 相關的 Function 定義在 wp-include/pluggable.php、wp-include/user.php，常用的如下：</p>
<p><strong>wp_insert_user( $userdata ) 新增使用者</strong></p>
<p>$userdata 為一個陣列，使用陣列來定義使用者的資料欄位，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// insert user</span>
<span class="token variable">$userdata</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string single-quoted-string">'user_login'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'brian'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'user_pass'</span>     <span class="token operator">=></span> <span class="token string single-quoted-string">'KO03gT7@n*'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'user_nicename'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Brian'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'user_url'</span>      <span class="token operator">=></span> <span class="token string single-quoted-string">'https://alphaweb.com/'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'user_email'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'brian@alphaweb.com'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'display_name'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'Brian'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'nickname'</span>      <span class="token operator">=></span> <span class="token string single-quoted-string">'Brian'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'first_name'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'Brian'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'last_name'</span>     <span class="token operator">=></span> <span class="token string single-quoted-string">'Messenlehner'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'description'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'This is a WordPress Administrator account.'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'role'</span>          <span class="token operator">=></span> <span class="token string single-quoted-string">'administrator'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">wp_insert_user</span><span class="token punctuation">(</span> <span class="token variable">$userdata</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>wp_create_user( $username, $password, $email ) 新增使用者簡易版</strong></p>
<p>相較於 wp_insert_user()，它只要提供帳戶名、密碼、電子郵件三個參數就可以新增使用者，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// create users</span>
<span class="token function">wp_create_user</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'jason'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'YR529G%*v@'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'jason@schoolpress.me'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">**</span><span class="token function">wp_update_user</span><span class="token punctuation">(</span> <span class="token variable">$userdata</span> <span class="token punctuation">)</span> 修改 wp_users 與 wp_usermeta 裡面的欄位<span class="token operator">**</span>

如果修改了使用者密碼，所有的 cookie 會被清除，該使用者會強制登出，<span class="token variable">$userdata</span> 的欄位與 <span class="token function">wp_insert_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 相同，範例如下：

<span class="token comment">// update user-change username fields and change role to admin</span>
<span class="token variable">$userdata</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'ID'</span>         <span class="token operator">=></span> <span class="token variable">$user</span><span class="token operator">-></span><span class="token constant">ID</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'user_pass'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'KO03gT7@n*'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'first_name'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Jason'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'last_name'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'Coleman'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'user_url'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'http://strangerstudios.com/'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'role'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'administrator'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">wp_update_user</span><span class="token punctuation">(</span> <span class="token variable">$userdata</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>昨天用了這支來讓使用者在前台更新登入密碼，結果表單送出後一直噴「Cannot modify header information - headers already sent by…」這個惱人的錯誤，爬了<a href="https://developer.wordpress.org/reference/functions/wp_update_user/">文件</a>才知道，登出再登入的動作需要清除與設定 Cookie，因此必須放在頁面的最前面來執行，也就是要比 get_header() 還要前面。</p>
<p>另外找到了這篇 —&gt; <a href="https://stackoverflow.com/questions/47297101/issue-when-updating-the-password-with-wp-update-user">https://stackoverflow.com/questions/47297101/issue-when-updating-the-password-with-wp-update-user</a></p>
<p>讓我理解到原來重設密碼後的登入是分三個動作：wp_set_password()、wp_set_auth_cookie()、wp_set_current_user()，只是 wp_update_user() 把這些動作都封裝起來可以直接使用。</p>
</blockquote>
<p><strong>get_user_by( $field, $value ) 根據使用者資料來取得使用者</strong></p>
<p>取得的使用者會以 WP_User 物件進行回傳，這支的作用等同於 Sql 語句下：SELECT * FROM wp_users WHERE $field = $value，$field 是使用者資料欄位，$value 是使用者資料值，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// get user by email</span>
<span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">get_user_by</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'email'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'jason@schoolpress.me'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'username: '</span> <span class="token operator">.</span> <span class="token variable">$user</span><span class="token operator">-></span><span class="token property">user_login</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' / ID: '</span> <span class="token operator">.</span> <span class="token variable">$user</span><span class="token operator">-></span><span class="token constant">ID</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>wp_delete_user( $user_id, $reassign ) 刪除使用者並把該使用者文章移轉給其他人</strong></p>
<p>第一個參數為要被刪除的使用者 ID，第二個參數為要繼承文章的使用者 ID，要注意的是如果第二個參數沒有指定，則該使用者的文章都會被移除，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// delete user-delete the original admin and set their posts to our new admin</span>
<span class="token function">wp_delete_user</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token operator">-></span><span class="token constant">ID</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>忘記使用者密碼的話進入 wp_users 找到要修改密碼的使用者，然後找到 user_pass 欄位，在修改前記得先把你的新密碼用<a href="https://www.md5hashgenerator.com/">這個工具</a>來加密成 MD5，加密後才把 MD5 的字串填進 user_pass。因為安全性考量，WordPress 會把所有的使用者密碼都用 MD5 進行加密，如果直接填未加密的密碼進去是無效的。</p>
<p>至於如何從資料庫新增一個管理員帳號可以參考這篇文章 —&gt; <a href="https://wpengine.com/support/add-admin-user-phpmyadmin/">https://wpengine.com/support/add-admin-user-phpmyadmin/</a></p>
</blockquote>
<hr>
<p><strong>（三）wp_usermeta</strong> - 使用者自訂欄位</p>
<p>記錄使用者更多更詳細的資料，也就是除了 wp_user 已經寫死欄位以外的使用者資料，可自行新增使用者欄位</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-26-at-09.17.43-1024x126.jpg"></p>
<p>wp_usermeta 資料表結構</p>
<p>wp_usermeta 相關 Function 常用的如下：</p>
<p><strong>get_user_meta( $user_id, $meta_key, $single=false ) 取得特定使用者的資料</strong></p>
<p>$user_id 為使用者 id，$meta_key 要取得的欄位，如果留空值，會回傳所有相同 $meta_key 的 $meta_value，$single 為 true 的話會以字串回傳符合第一個 $meta_key 的 $meta_value，false 的話則會使用陣列回傳所有符合的 $meta_value，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// get brian's id</span>
<span class="token variable">$brian_id</span> <span class="token operator">=</span> <span class="token function">get_user_by</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'login'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'brian'</span> <span class="token punctuation">)</span><span class="token operator">-></span><span class="token constant">ID</span><span class="token punctuation">;</span>
<span class="token variable">$brians_wife</span> <span class="token operator">=</span> <span class="token function">get_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$brian_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_wife'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Wife 可能有多個(?)，true 的話回傳第一個</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"Brian's wife: "</span> <span class="token operator">.</span> <span class="token variable">$brians_wife</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>update_user_meta( $user_id, $meta_key, $meta_value, $prev_value=”” ) 更新使用者的資料</strong></p>
<p>需要注意的是第四個參數，如果 $meta_key 有多筆符合，在 $prev_value 為空的情況下，$meta_value 只會修改第一筆 $meta_key，如果 $prev_value 有符合多筆 $meta_key 的 $meta_value 其中一筆，則這一筆的 value 會被第三個 $meta_value 給取代掉。範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// update user meta - this will update brian to brian jr.</span>
<span class="token function">update_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$brian_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_kid'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Brian Jr'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Briand'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Brian 有多個小孩(多筆相同的 meta_key)，名字叫做 Braind 的會被修改為 Brain Jr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>add_user_meta( $user_id, $meta_key, $meta_value, $unique=false) 新增使用者資料欄位</strong></p>
<p>習慣上新增使用者資料會使用 update_user_meta()，因為它有判斷 $meta_key 是否存在的功能，會用 add_user_meta 的情境在於要新增多筆 $meat_value 到相同的 $meta_key。第四個參數 $unique 為 true 時代表不允許有多筆相同的 $meta_key，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// add user meta - 3rd parameter is a unique value</span>
<span class="token function">add_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$brian_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_kid'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Dalya'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">add_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$brian_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_kid'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Brian'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">add_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$brian_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_kid'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Nina'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">add_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$brian_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_kid'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Cam'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">add_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$brian_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_kid'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Aksel'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>delete_user_meta( $user_id, $meta_key, $meta_value=””) 刪除使用者資料</strong></p>
<p>第三個參數當有指定 $meta_value 只會刪除符合該 value 的 $meta_key，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// delete brian's user meta</span>
<span class="token function">delete_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$brian_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_wife'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">delete_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$brian_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_kid'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Dalya'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 沒指定 Dalya 的話則所有小孩都會被刪除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<hr>
<p><strong>（四）wp_posts</strong> - 存放文章、頁面、選單、文章版本、以及自定義文章的資料表，而自定義文章就是用這個表裡面的 post_type 欄位來紀錄不同的文章類型</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-26-at-09.53.21-1024x515.jpg"></p>
<p>wp_posts 資料表結構</p>
<p>wp_options 相關的 Function 定義在 wp-include/post.php，常用的如下：</p>
<p><strong>wp_inset_post( $postarr, $wp_error=false) 插入新文章</strong></p>
<p>$postarr 是一個定義新文章內容的陣列，裡面有許多參數可以定義，$wp_error 為 true 時會在文章插入失敗時回傳一個 WP_Error 物件，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// insert post - set post status to draft</span>
<span class="token variable">$args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'post_title'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'文章標題'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'post_excerpt'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'文章摘要'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'post_content'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'內文'</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'post_status'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'draft'</span><span class="token punctuation">,</span>  <span class="token comment">// 文章狀態，有 draft、publish</span>
<span class="token string single-quoted-string">'post_type'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'post'</span><span class="token punctuation">,</span> <span class="token comment">// 文章類型，預設為 post，可以是 page 或其他 CPT</span>
<span class="token string single-quoted-string">'post_author'</span>  <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 作者 ID</span>
<span class="token string single-quoted-string">'menu_order'</span>   <span class="token operator">=></span> <span class="token number">0</span> <span class="token comment">// 文章順序</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$post_id</span> <span class="token operator">=</span> <span class="token function">wp_insert_post</span><span class="token punctuation">(</span> <span class="token variable">$args</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 新文章插入完成後會回傳該文章的 post ID</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'post ID: '</span> <span class="token operator">.</span> <span class="token variable">$post_id</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>wp_update_post( $postarr, $wp_error = false) 更新文章資料</strong></p>
<p>同樣使用 $postarr 陣列來更新資料，記得要提供需要被更新的文章 ID，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// update post - change post status to publish</span>
<span class="token variable">$args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'ID'</span>  <span class="token operator">=></span> <span class="token variable">$post_id</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'post_status'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'publish'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">wp_update_post</span><span class="token punctuation">(</span> <span class="token variable">$args</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>get_post( $post=null, $output=OBJECT, $filter=’raw’) 取得文章資料</strong></p>
<p>第一個參數指定要取得的文章的 ID，如果是在 post loop 中的話留空會自動取得當前文章。$output 資料格式可以設定為 OBJECT 或是 ARRAY_A (關聯式陣列) 與 ARRAY_N(索引式陣列)。$filter 參數為設定要 sanitize 的模式，可選值有 raw、edit、db、display、attribute 與 js，這是與安全性有關的議題，會在第八章的時候提到。範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// get post - return post data as an object</span>
<span class="token variable">$post</span> <span class="token operator">=</span> <span class="token function">get_post</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'Object Title: '</span> <span class="token operator">.</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">post_title</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>

<span class="token comment">// get post - return post data as an array</span>
<span class="token variable">$post</span> <span class="token operator">=</span> <span class="token function">get_post</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token constant">ARRAY_A</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'Array Title: '</span> <span class="token operator">.</span> <span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'post_title'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>get_posts( $args = null ) 取得文章列表</strong></p>
<p>當要取得文章清單時，像是最新文章列表、特定分類列表就可以使用這支 Function。它是根據 WP_Query 類別所設計的。$args 參數可以用陣列的方式來提供文章取得條件，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// get posts - return 100 posts</span>
<span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token function">get_posts</span><span class="token punctuation">(</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
  <span class="token string single-quoted-string">'numberposts'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'100'</span><span class="token punctuation">,</span> <span class="token comment">// 顯示文章數量</span>
  <span class="token string single-quoted-string">'category'</span>         <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">// 文章分類 ID</span>
        <span class="token string single-quoted-string">'orderby'</span>          <span class="token operator">=></span> <span class="token string single-quoted-string">'date'</span><span class="token punctuation">,</span>  <span class="token comment">// 排序條件</span>
        <span class="token string single-quoted-string">'order'</span>            <span class="token operator">=></span> <span class="token string single-quoted-string">'DESC'</span><span class="token punctuation">,</span>  <span class="token comment">// 排序方式，DESC 為降冪，ASC 為升冪</span>
        <span class="token string single-quoted-string">'include'</span>          <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 只顯示特定的文章</span>
        <span class="token string single-quoted-string">'exclude'</span>          <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 排除指定文章</span>
        <span class="token string single-quoted-string">'meta_key'</span>         <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>  <span class="token comment">// 顯示帶有指定欄位的文章</span>
        <span class="token string single-quoted-string">'meta_value'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>  <span class="token comment">// 顯示帶有指定欄位值的文章</span>
        <span class="token string single-quoted-string">'post_type'</span>        <span class="token operator">=></span> <span class="token string single-quoted-string">'post'</span><span class="token punctuation">,</span>  <span class="token comment">// 文章類型</span>
        <span class="token string single-quoted-string">'suppress_filters'</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 如果需要使用 filter 來修改 get_posts 的結果，這個參數要設為 false</span>
<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// loop all posts and display the ID &amp; title</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span> <span class="token variable">$posts</span> <span class="token keyword">as</span> <span class="token variable">$post</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token constant">ID</span> <span class="token operator">.</span> <span class="token string single-quoted-string">': '</span> <span class="token operator">.</span><span class="token variable">$post</span><span class="token operator">-></span><span class="token property">post_title</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>wp_delete_post( $postid=0, $force_delete =false ) 刪除指定文章</strong></p>
<p>第一個參數為要刪除的文章 ID，第二個參數如果為 true 的話，文章就不會進垃圾桶而直接被刪除，代表連救回來的機會都沒有，預設值為 false，範例如下：</p>
<p>// delete post - skip the trash and permanently delete it<br>wp_delete_post( $post_id, true );</p>
<hr>
<p><strong>（五）wp_postmeta</strong> - 文章自訂欄位</p>
<p>如果內建的文章欄位不夠用，想要新增其他欄位的話就會寫在這張表中。WordPress 提供很方便的作法讓你不用再自行增加資料表，每個欄位使用 post_id 來對應到文章。</p>
<p>如果你需要新增欄位但又不想讓使用者在文章編輯畫面看到該欄位，可以用下底線開頭的欄位名稱，這樣 WordPress 會自動在後台隱藏這個欄位而不被使用者看見。</p>
<blockquote>
<p>寫到這張表的時候就想到一件事，每次使用 ACF 開了一堆欄位，當網站開始上大量的資料之後，這張表就會以飛快的速度開始爆肥，因為所有的自訂欄位全部都會塞在裡面，這對於在 DB Query 上會是不小的負擔。</p>
<p>好奇的查了一下有沒有可以把 ACF 欄位獨立成一張表的外掛，想不到還真的有！一間澳洲的公司叫做 Hookturn，他們開發了一隻外掛叫做 <a href="https://hookturn.io/downloads/acf-custom-database-tables/">ACF Custom Database Tables</a>，看影片介紹非常猛，完全就是我想像的功能，售價 139 鎂，對於有規模的網站來說，絕對比再多開兩台 DB 來得划算的多！</p>
<p>Hookturn 還有另外兩隻外掛商品，一隻很實用，直接幫你把欄位的 PHP 產好，另外一隻我覺得根本就是 ACF 應該要內建的功能：<a href="https://hookturn.io/downloads/advanced-forms-pro/">前台表單</a>。它可以把 ACF 的欄位完整呈現在前台，這個拿來做 Web App 超級方便，就不用自己在那邊刻表單刻個老半天了，下一個 Web App 我一定會用它！</p>
</blockquote>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-27-at-09.51.32-1024x126.jpg"></p>
<p>wp_postmeta 資料表結構</p>
<p><strong>get_post_meta( $post_id, $meta_key, $single=false ) 取得文章欄位值</strong></p>
<p>第一個參數為文章 ID，第二個為欄位名稱，如果留空值，會回傳所有相同 $meta_key 的 $meta_value，$single 為 true 的話會以字串回傳符合第一個 $meta_key 的 $meta_value，false 的話則會使用陣列回傳所有符合的 $meta_value，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// get post meta - get 1st instance of key</span>
<span class="token variable">$student</span> <span class="token operator">=</span> <span class="token function">get_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_student'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'oldest student: '</span> <span class="token operator">.</span> <span class="token variable">$student</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>update_post_meta( $post_id, $meta_key, $meta_value, $prev_value=’’) 更新文章欄位</strong></p>
<p>需要注意的是第四個參數，如果 $meta_key 有多筆符合，在 $prev_value 為空的情況下，$meta_value 只會修改第一筆 $meta_key，如果 $prev_value 有符合多筆 $meta_key 的 $meta_value 其中一筆，則這一筆的 value 會被第三個 $meta_value 給取代掉。範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// update post meta - public metadata</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'You SHOULD see this custom field when editing your latest post.'</span><span class="token punctuation">;</span>
<span class="token function">update_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_displayed_field'</span><span class="token punctuation">,</span> <span class="token variable">$content</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// update post meta - hidden metadata</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'SHOULD'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'SHOULD NOT'</span><span class="token punctuation">,</span> <span class="token variable">$content</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">update_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_bwawwp_hidden_field'</span><span class="token punctuation">,</span> <span class="token variable">$content</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>add_post_meta( $post_id, $meta_key, $meta_value, $unique=false)</strong></p>
<p>習慣上新增文章欄位會使用 update_post_meta()，因為它有判斷 $meta_key 是否存在的功能，會用 add_post_meta 的情境在於要新增多筆 $meat_value 到相同的 $meta_key。第四個參數 $unique 為 true 時代表不允許有多筆相同的 $meta_key，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">add_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_students'</span><span class="token punctuation">,</span> <span class="token variable">$students</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>delete_post_meta( $post_id, $meta_key, $meta_value=’’ ) 刪除文章欄位</strong></p>
<p>第三個參數當有指定 $meta_value 只會刪除符合該 value 的 $meta_key，範例如下</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// delete post meta</span>
<span class="token function">delete_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_student'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<hr>
<p><strong>（六）wp_comments</strong> - 紀錄文章留言的資料表</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-30-at-10.05.06-1024x349.jpg"></p>
<p>wp_comments 資料表結構</p>
<p>wp_comments 相關的 Function 定義在 wp-include/comment.php，常用的如下：</p>
<p><strong>get_comment( $comment, $output=OBJECT ) 根據留言 ID 取得留言內容</strong></p>
<p>第一個參數可以為留言 ID 或是 OBJECT，第二個為返回格式，可以為 OBJECT、ARRAY_A 與 ARRAY_n。範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// make comments array</span>
<span class="token variable">$comments</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'ICE CREAM!!!!'</span><span class="token punctuation">;</span>
<span class="token variable">$comments</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Taco Bell'</span><span class="token punctuation">;</span>
<span class="token variable">$comments</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Get a good night sleep'</span><span class="token punctuation">;</span>

<span class="token comment">//loop comments array</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span> <span class="token variable">$comments</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$comment</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// insert comments</span>
    <span class="token variable">$commentdata</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token string single-quoted-string">'comment_post_ID'</span> <span class="token operator">=></span> <span class="token variable">$post_id</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'comment_content'</span> <span class="token operator">=></span> <span class="token variable">$comments</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$comment_ids</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">wp_insert_comment</span><span class="token punctuation">(</span> <span class="token variable">$commentdata</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入留言</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// get comment - get best comment</span>
<span class="token variable">$comment</span> <span class="token operator">=</span> <span class="token function">get_comment</span><span class="token punctuation">(</span> <span class="token variable">$comment_ids</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'best comment: '</span> <span class="token operator">.</span> <span class="token variable">$comment</span><span class="token operator">-></span><span class="token property">comment_content</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>get_comments( $args=’’ ) 取得特定文章的留言列表</strong></p>
<p>該 Funciton 使用 WP_Coomen_Query 類別來取得留言，$args 為選填的陣列或是用 &amp; 符號連結的字串來取留言，常用參數有：</p>
<ul>
<li>  author_email 留言者的電子郵件</li>
<li>  ID 留言 ID</li>
<li>  karma 留言評價</li>
<li>  number 顯示留言筆數</li>
<li>  offset 跳過顯示留言比數</li>
<li>  orderby 排序條件，可選的值有 ‘comment_agent’,’comment_approved’,’comment_author’,’comment_author_email’,’comment_author_IP’,’comment_author_url’,’comment_content’,’comment_date’,’comment_date_gmt’,’comment_ID’,’comment_karma’,’comment_parent’,’comment_post_ID’,’comment_type’,’user_id’,’comment__in’,’meta_value’,’meta_value_num’</li>
<li>  order 排序方式，可選值為 DESC 與 ASC</li>
<li>  parent 父留言的 id (comment 有階層)</li>
<li>  post_id 特定文章的留言</li>
<li>  post_author 文章作者</li>
<li>  post_name 文章名稱</li>
<li>  post_parent 父文章</li>
<li>  post_status 文章狀態</li>
<li>  post_type 文章類型</li>
<li>  status 留言狀態，可選值有 hode, approve, spam, trash</li>
<li>  type 留言類型，可選值有 pingback, trackback</li>
<li>  user_id 留言者的 id</li>
<li>  search 可針對留言的欄位進行關鍵字搜尋，搜尋範圍有：comment_author, comment_author_email, comment_author_url, comment_author_IP, comment_content</li>
<li>  count 當為 true 時返回符合 query 條件的留言筆數，false 時返為留言 Object，預設為 false</li>
<li>  meta_key 留言 meta 的 key</li>
<li>  meta_value 留言 meta 的 value</li>
</ul>
<p>範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$comment_count</span> <span class="token operator">=</span> <span class="token function">get_comments</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'post_id= '</span> <span class="token operator">.</span> <span class="token variable">$post_id</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&amp;count=true'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'comment count: '</span> <span class="token operator">.</span> <span class="token variable">$comment_count</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>一直對 Karma 那個參數很在意，因為從來沒看過 WP 留言內建有什麼評價機制，查了很多都沒有具體的使用範例，最後查到<a href="https://wordpress.stackexchange.com/questions/199950/what-is-comment-karma">這一篇</a>是說資料表裡面有一個叫 comment_karma 的欄位，是用來做防止垃圾留言機制的，但現在都沒人會用這個欄位來做留言評價的功能，所以我想應該是早期 WordPress 留下來的產物，而為了要相容舊版所以就擺在那邊了，真要做留言評分的話還是用 comment meta 來處理。</p>
</blockquote>
<p><strong>wp_insert_comment( $commentdata ) 新增留言</strong></p>
<p>$commentdata 為新增留言需要提供的參數，新增完成後會返回留言 ID，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// insert comment - sub comment from parent id</span>
<span class="token variable">$commentdata</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
<span class="token string single-quoted-string">'comment_post_ID'</span> <span class="token operator">=></span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token comment">// 指定文章</span>
<span class="token string single-quoted-string">'comment_parent'</span> <span class="token operator">=></span> <span class="token variable">$comment_ids</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 指定父留言</span>
<span class="token string single-quoted-string">'comment_content'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'That is a pretty good idea...'</span><span class="token punctuation">,</span> <span class="token comment">// 留言內容</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">wp_insert_comment</span><span class="token punctuation">(</span> <span class="token variable">$commentdata</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其他參數還有：comment_author, comment_author_email, comment_author_url, comment_author_IP, comment_date, comment_date_gmt, comment_karma, comment_approved, comment_agent, comment_type, comment_parent 與 user_id。</p>
<p><strong>wp_delete_comment( $comment_id, $force_delete=false) 刪除留言</strong></p>
<p>需要注意的是第二個參數，為 true 的話就會直接被永久刪除而無法從垃圾桶找回，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// delete comment</span>
<span class="token function">wp_delete_comment</span><span class="token punctuation">(</span> <span class="token variable">$comment</span><span class="token operator">-></span><span class="token property">comment_ID</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<hr>
<p><strong>（七）wp_commentmeta</strong> - 留言自訂欄位</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-31-at-10.15.35-1024x124.jpg"></p>
<p>wp_commentmeta 資料表結構</p>
<p>wp_commentmeta 相關的 Function 定義在 wp-include/comment.php，常用的如下：</p>
<p><strong>get_comment_meta( $comment_id, $meta_key, $single = false ) 取得留言自訂欄位</strong></p>
<p>第一個參數為留言 ID，第二個為欄位名稱，如果留空值，會回傳所有相同 $meta_key 的 $meta_value，$single 為 true 的話會以字串回傳符合第一個 $meta_key 的 $meta_value，false 的話則會使用陣列回傳所有符合的 $meta_value，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// get comment meta - all keys</span>
<span class="token variable">$comment_meta</span> <span class="token operator">=</span> <span class="token function">get_comment_meta</span><span class="token punctuation">(</span> <span class="token variable">$comment_id</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;pre>'</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span> <span class="token variable">$comment_meta</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;/pre>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>add_comment_meta( $comment_id, $meta_key, $meta_value, $unique=false ) 新增留言自訂欄位</strong></p>
<p>第四個參數 $unique 為 true 時代表不允許有多筆相同的 $meta_key，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// add comment meta - meta for view date &amp; IP address</span>
<span class="token variable">$viewed</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token function">date</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"m.d.y"</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"REMOTE_ADDR"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$comment_meta_id</span> <span class="token operator">=</span> <span class="token function">add_comment_meta</span><span class="token punctuation">(</span> <span class="token variable">$comment_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_view_date'</span><span class="token punctuation">,</span> <span class="token variable">$viewed</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'comment meta id: '</span> <span class="token operator">.</span> <span class="token variable">$comment_meta_id</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>update_comment_meta( $comment_id, $meta_key, $meta_value, $prev_value=’’) 更新留言自訂欄位</strong></p>
<p>第四個參數跟其他 xxx_meta 一樣，如果 $meta_key 有多筆符合，在 $prev_value 為空的情況下，$meta_value 只會修改第一筆 $meta_key，如果 $prev_value 有符合多筆 $meta_key 的 $meta_value 其中一筆，則這一筆的 value 會被第三個 $meta_value 給取代掉。範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// update comment meta - change date format to format like</span>
<span class="token comment">// October 23, 2020, 12:00 am instead of 10.23.20</span>
<span class="token variable">$viewed</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token function">date</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"F j, Y, g:i a"</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"REMOTE_ADDR"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">update_comment_meta</span><span class="token punctuation">(</span> <span class="token variable">$comment_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_view_date'</span><span class="token punctuation">,</span> <span class="token variable">$viewed</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>delete_comment_meta( $comment_id, $meta_key, $meta_value=’’ ) 刪除留言欄位</strong></p>
<p>第三個參數當有指定 $meta_value 只會刪除符合該 value 的 $meta_key，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// delete comment meta</span>
<span class="token function">delete_comment_meta</span><span class="token punctuation">(</span> <span class="token variable">$comment_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bwawwp_view_date'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<hr>
<p><strong>（八）wp_temrs</strong> - 該表放了文章分類 ( Category ) 名稱或是自訂分類項目 ( Term ) 的名稱，每一個分類項目都會綁定一個主分類 ( Taxonomy )。常用的文章分類與文章標籤都是一種主分類，主分類底下新增的叫做分類項目。</p>
<blockquote>
<p>這邊很容易讓人搞不清楚，因為不管是 Catergory 還是 Taxonomy 中文都叫「分類」，然後中間還多一個叫 term 的東西 Orz…</p>
<p>後來我的理解方式是只要記得<strong>主類別 Taxonomy</strong>、<strong>分類項目 Term</strong> 就好，譬如主類別是水果 ( Taxonomy )，分類項目 ( Term ) 有溫熱性水果、涼性水果、中性水果等等，至於 Category 則是文章的主類別，Tag 也是文章的主類別，一個文章類型可以有多個主類別。</p>
<p>順帶一提，Category 與 Tag 在技術面上的差異是前者可以有階層關係，而後者只會有一層。</p>
</blockquote>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-31-at-10.53.05.jpg"></p>
<p>文章的分類與標籤</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/03/CleanShot-2020-03-31-at-10.56.14-1024x123.jpg"></p>
<p>wp_terms 資料表結構</p>
<p>wp_terms 相關的 Function 定義在 wp-includes/taxonomy.php，常用的如下：</p>
<p><strong>get_terms( $arg=’’ ) 取得單一或多個主類別的分類項目</strong></p>
<blockquote>
<p>書中說明為 get_terms( $taxonomies, $args= ‘’ )，但查<a href="https://developer.wordpress.org/reference/functions/get_terms/">官方文件</a>指出這是 WP 4.5 版之前的寫法，之後的寫法要把 $taxonomies 放在 $args 裡面，該出以官方文件為準。</p>
</blockquote>
<p>$arg 參數為帶入篩選屬性，相關屬性有：</p>
<ul>
<li>  taxonomy - 主分類名稱，可以用 array 帶入多筆主分類</li>
<li>  orderby - 排序條件，可以是 name、count、term_group、slug，預設是 name</li>
<li>  order - 排序方式，可選值為 ASC 升冪與 DESC 降冪預設為 ASC</li>
<li>  hide_empty - 隱藏所屬文章篇數為 0 的分類項目</li>
<li>  exclude - 排除分類項目</li>
<li>  exclude_tree 排除分類項目以及它的子分類項目</li>
<li>  include - 只顯示指定的分類項目</li>
<li>  number - 設定顯設筆數</li>
<li>  offset - 設定跳過筆數</li>
<li>  fields - 選擇返回分類項目 ID 或是名稱，預設是兩個都返回</li>
<li>  slug - 只顯示符合指定代稱的分類名稱</li>
<li>  hierarchical - 顯示所以分類項目的子分類項目，預設為 true</li>
<li>  search - 搜尋符合指定字串為分類項目名稱的結果，英文字母不區分大小寫</li>
<li>  name_like - 搜尋符合開頭為指定字串的分類項目名稱結果，英文字母不區分大小寫</li>
<li>  pad_counts - 預設為 true，會返回每個分類項目帶有多少子項目的數量</li>
<li>  get - 設定為 all 時，會返回所有父項目或是空的分類項目</li>
<li>  child_of - 取得特定分類項目的子項目</li>
<li>  parent - 取得子項目的父分類項目</li>
<li>  cache_domain - 啟用的話會把查詢結果存在 object cache 之中，以節省重複查詢的時間</li>
</ul>
<p>範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$terms</span> <span class="token operator">=</span> <span class="token function">get_terms</span><span class="token punctuation">(</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string single-quoted-string">'taxonomy'</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'post_tag'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'category'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'hide_empty'</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>get_term( $term, $taxonomy, $outpug= OBJECT, $filter=’raw’ ) 取得分類項目的所有資訊</strong></p>
<p>第一個參數可以是 term ID 或是 term Object，預設值為 0，會回傳所有的項目，第二個參數是該項目所屬的主分類，</p>
<p>$output 資料格式可以設定為 OBJECT 或是 ARRAY_A (關聯式陣列) 與 ARRAY_N(索引式陣列)。$filter 參數為設定要 sanitize 的模式，可選值有 raw、edit、db、display、attribute 與 js，這是與安全性有關的議題，會在第八章的時候提到。範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$term</span> <span class="token operator">=</span> <span class="token function">get_term</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token string single-quoted-string">'category'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$term</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>  <span class="token comment">// 顯示分類項目名稱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>wp_insert_term( $term, $taxonomy, $args=array() ) 新增分類項目</strong></p>
<p>第一個參數為分類項目名稱，如果已經存在的話會更新既有的，第二個參數為所屬主分類，第三個為分類項目的資料，可用參數如下：</p>
<ul>
<li>  alias_of - 分類項目的別名</li>
<li>  description - 分類項目的描述</li>
<li>  parent - 指定所屬父分類項目 ID</li>
<li>  slug - 分類項目代稱</li>
</ul>
<p>範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$parent_term</span> <span class="token operator">=</span> <span class="token function">term_exists</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'fruits'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'product'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// array is returned if taxonomy is given</span>
<span class="token variable">$parent_term_id</span> <span class="token operator">=</span> <span class="token variable">$parent_term</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'term_id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">// get numeric term id</span>
<span class="token function">wp_insert_term</span><span class="token punctuation">(</span>
    <span class="token string single-quoted-string">'Apple'</span><span class="token punctuation">,</span>   <span class="token comment">// the term </span>
    <span class="token string single-quoted-string">'product'</span><span class="token punctuation">,</span> <span class="token comment">// the taxonomy</span>
    <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token string single-quoted-string">'description'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'A yummy apple.'</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'slug'</span>        <span class="token operator">=></span> <span class="token string single-quoted-string">'apple'</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'parent'</span>      <span class="token operator">=></span> <span class="token variable">$parent_term_id</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>wp_update_term( $term_id, $taxonomy, $args=array() ) 更新分類項目資料</strong></p>
<p>更新現有分類項目的資料，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$update</span> <span class="token operator">=</span> <span class="token function">wp_update_term</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'category'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string single-quoted-string">'name'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Non Catégorisé'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'slug'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'non-categorise'</span>
<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>wp_delete_term( $term, $taxonomy, $args=array() ) 刪除分類項目</strong></p>
<p>第三個參數帶有兩個屬性，default 以及 force_default，來決定預設的分類項目。</p>
<hr>
<p><strong>（九）wp_termmeta</strong> - 分類項目的自訂欄位</p>
<p>從 WordPress 4.4 版之後就可以自訂分類項目的欄位，運用的場景可以像是決定分類項目的排列順序，或是其他任何需要擴充分類項目欄位的應用上。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/04/CleanShot-2020-04-01-at-10.04.09-1024x117.jpg"></p>
<p>wp_termmeta 資料表結構</p>
<p>相關的 Function 與其他 user meta、post meta、comment meta 很像，說明如下：</p>
<p><strong>get_term_meta( $term_id, $meta_key=’’, $single=false ) 取得分類項目自訂欄位</strong></p>
<p>第一個參數為留言 ID，第二個為欄位名稱，如果留空值，會回傳所有相同 $meta_key 的 $meta_value，$single 為 true 的話會以字串回傳符合第一個 $meta_key 的 $meta_value，false 的話則會使用陣列回傳所有符合的 $meta_value。</p>
<p><strong>update_term_meta( $term_id, $meta_key, $meta_value, $prev_value=’’ ) 更新分類項目自訂欄位</strong></p>
<p>第四個參數跟其他 xxx_meta 一樣，如果 $meta_key 有多筆符合，在 $prev_value 為空的情況下，$meta_value 只會修改第一筆 $meta_key，如果 $prev_value 有符合多筆 $meta_key 的 $meta_value 其中一筆，則這一筆的 value 會被第三個 $meta_value 給取代掉。</p>
<p><strong>add_term_meta( $term_id, $meta_key, $meta_value, $unique=false ) 新增分類項目自訂欄位</strong></p>
<p>第四個參數 $unique 為 true 時代表不允許有多筆相同的 $meta_key。</p>
<p><strong>delete_term_meta( $term_id, $meta_key, $meta_value=’’) 刪除分類項目自訂欄位</strong></p>
<p>第三個參數當有指定 $meta_value 只會刪除符合該 value 的 $meta_key。</p>
<hr>
<p><strong>（十）wp_term_taxonomy</strong> - 存放主分類 Taxonomy 的資料表</p>
<p>當有分類項目 Term 新增的時候，一定會綁定一個主分類 Taxonomy，WordPress 預設的主分類有 category 與 post_tag。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/04/CleanShot-2020-04-02-at-09.21.44-1024x165.jpg"></p>
<p>wp_term_taxonomy 資料表結構</p>
<p>wp_term_taxonomy 相關 Function 定義在 wp-includes/taxonomy.php，常用如下：</p>
<p><strong>get_taxonomies( $args=array(), $output=’names’, $operator=’and’ ) 取得主分類清單</strong></p>
<p>$args 可以帶入參數來篩選清單，詳細用法第五章會說明，$output 為設定返回格式，預設 names 會返回主分類名稱，或是 objects 返回主分類物件。</p>
<p>$operator 參數可以選擇 and 或是 or，差別在於是否完全符合或是部分符合第一個傳入參數的內容，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
  <span class="token string single-quoted-string">'public'</span>   <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">'_builtin'</span> <span class="token operator">=></span> <span class="token constant boolean">false</span>
   
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token variable">$output</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'names'</span><span class="token punctuation">;</span> <span class="token comment">// or objects</span>
<span class="token variable">$operator</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'and'</span><span class="token punctuation">;</span> <span class="token comment">// 'and' or 'or'</span>
<span class="token variable">$taxonomies</span> <span class="token operator">=</span> <span class="token function">get_taxonomies</span><span class="token punctuation">(</span> <span class="token variable">$args</span><span class="token punctuation">,</span> <span class="token variable">$output</span><span class="token punctuation">,</span> <span class="token variable">$operator</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$taxonomies</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;ul>'</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span> <span class="token variable">$taxonomies</span>  <span class="token keyword">as</span> <span class="token variable">$taxonomy</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;li>'</span> <span class="token operator">.</span> <span class="token variable">$taxonomy</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/li>'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;/ul>'</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>get_taxonomy( $taxonomy ) 取得特定主分類</strong></p>
<p>$taxonomy 為主分類名稱，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$rental_features</span> <span class="token operator">=</span> <span class="token function">get_taxonomy</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'features'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span> <span class="token variable">$rental_features</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>這邊提到的主分類名稱或是 name 是指定義 Taxonomy 的英文名，而非顯示在後台的中文名字。</p>
</blockquote>
<p><strong>register_taxonomy( $taxonomy, $object_type, $args=array() ) 註冊新的主分類</strong></p>
<p>如果你覺得文章只有 category 跟 post_tag 這兩個主分類不夠用，或是自定義文章需要主分類時，就可以用這支來做新增，$taxonomy 為主分類名稱，必須是英文，中文名字會在 $args 裡面的 label 來定義。</p>
<p>$object_type 是定義要把這個主分類綁定到哪一個文章類型上面，$args 有一堆參數來設定主分類的資料，像是上面提到的中文名字就是在這邊設定，更多詳細內容會在第五章介紹，或是看 <a href="https://codex.wordpress.org/Function_Reference/register_taxonomy">Codex 文件</a>有完整的說明。基本範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'init'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'create_book_tax'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">create_book_tax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">register_taxonomy</span><span class="token punctuation">(</span>
        <span class="token string single-quoted-string">'genre'</span><span class="token punctuation">,</span>  <span class="token comment">// 主分類名稱</span>
        <span class="token string single-quoted-string">'book'</span><span class="token punctuation">,</span>   <span class="token comment">// 文章類型</span>
        <span class="token keyword">array</span><span class="token punctuation">(</span>
            <span class="token string single-quoted-string">'label'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'書的分類'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 主分類顯示名稱</span>
            <span class="token string single-quoted-string">'rewrite'</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'slug'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'genre'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'hierarchical'</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>書中提到之前有在討論是否該移除 wp_terms 這張表，然後把裡面的欄位移到 wp_terms_taxonomy，但後來還是為了相容性而作罷，還好沒移掉，不然手上一堆網站會爆炸@@</p>
</blockquote>
<hr>
<p><strong>（十一）wp_term_relationships</strong> - 紀錄 post 與 Taxonomy 綁定關係的資料表</p>
<p>當使用 register_taxonomy() 的時候，第二個參數會指定文章類型，指定後就會紀錄在這張表之中。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/04/CleanShot-2020-04-02-at-09.50.41.jpg"></p>
<p>wp_term_relationships 資料表結構</p>
<p>wp_term_relationships 常用 Function 如下：</p>
<p><strong>get_object_taxonomies( $object, $output=’names’ ) 取得特定文章類型所擁有的主分類</strong></p>
<p>第一個參數為文章類型名稱，第二個參數為設定返回格式，可以是 names 或 objects，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$taxonomy_names</span> <span class="token operator">=</span> <span class="token function">get_object_taxonomies</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'post'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span> <span class="token variable">$taxonomy_names</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>wp_get_object_terms( $object_ids, $taxonomies, $args= array() ) 取得特定文章類型特定主分類的分類項目</strong></p>
<p>第一個參數為文章 ID，可以是字串或陣列。第二個參數是主分類名稱，可以是字串或陣列，第三個是選填的篩選參數，可以用的屬性有：</p>
<ul>
<li>  orderby - 排序條件，可依照 slug、term_group、term_order 來進行排序</li>
<li>  order - 排序方式，可設定 ASC 升冪與 DESC 降冪</li>
<li>  fields - 分類項目欄位，可選值有 ids、names、slugs 以及 all_with_object_id</li>
</ul>
<p>範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$product_terms</span> <span class="token operator">=</span> <span class="token function">wp_get_object_terms</span><span class="token punctuation">(</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token constant">ID</span><span class="token punctuation">,</span>  <span class="token string single-quoted-string">'product'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$product_terms</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">is_wp_error</span><span class="token punctuation">(</span> <span class="token variable">$product_terms</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;ul>'</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span><span class="token punctuation">(</span> <span class="token variable">$product_terms</span> <span class="token keyword">as</span> <span class="token variable">$term</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;li>&lt;a href="'</span> <span class="token operator">.</span> <span class="token function">esc_url</span><span class="token punctuation">(</span> <span class="token function">get_term_link</span><span class="token punctuation">(</span> <span class="token variable">$term</span><span class="token operator">-></span><span class="token property">slug</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'product'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'">'</span> <span class="token operator">.</span> <span class="token function">esc_html</span><span class="token punctuation">(</span> <span class="token variable">$term</span><span class="token operator">-></span><span class="token property">name</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/a>&lt;/li>'</span><span class="token punctuation">;</span> 
            <span class="token punctuation">&#125;</span>
        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;/ul>'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>wp_set_object_terms( $object_id, $terms, $taxonomy, $append=false ) 新增特定文章特定主分類的分類項目</strong></p>
<p>需要注意的是第四個參數，在預設情況下如果設定的分類項目名撐已經存在，則會自動取代，反之則會保留既有的在新增一筆分類項目。範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// An array of IDs of categories we want this post to have.</span>
<span class="token variable">$cat_ids</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">/*
 * If this was coming from the database or another source, we would need to make sure
 * these were integers:
 
$cat_ids = array_map( 'intval', $cat_ids );
$cat_ids = array_unique( $cat_ids );
 
 */</span>
 
<span class="token variable">$term_taxonomy_ids</span> <span class="token operator">=</span> <span class="token function">wp_set_object_terms</span><span class="token punctuation">(</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token variable">$cat_ids</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'category'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">is_wp_error</span><span class="token punctuation">(</span> <span class="token variable">$term_taxonomy_ids</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// There was an error somewhere and the terms couldn't be set.</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Success! The post's categories were set.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Hook，Action-與-Filter"><a href="#Hook，Action-與-Filter" class="headerlink" title="Hook，Action 與 Filter"></a><strong>Hook，Action 與 Filter</strong></h2><p>Hook 說是 WordPress 最重要的機制也不為過，不管是 Theme 還是 Plugin 開發都會需要用到大量的 Hook。什麼是 Hook？簡單說就是先在程式碼裡面貼上一個無痕掛鉤，然後要修改 WordPress 只需把你寫的程式「掛」在這個預先貼好的無痕掛鉤上就可以執行了，外「掛」就是這樣運作的。</p>
<p>跟感冒藥一樣，Hook 也有兩種：Action 與 Filter。</p>
<p><strong>（ㄧ）Action</strong> - 設計新功能的掛鉤</p>
<p>貼上掛鉤的 Function 叫做 do_action( $tag, $arg )，它可以帶入兩個參數，第一個是掛鉤的名字，第二個是資料的參數，可以有很多個，主要作用是讓新功能掛在這邊的時候可以取得資料。</p>
<p>掛的動作叫做 add_action()，第一個參數是掛鉤名字，第二個是要執行新功能的 Function，下面的例子示範要如何在你的 Theme 或是 Plugin 裡面判斷使用者的登入狀態：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'init'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'my_user_check'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">my_user_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">is_user_logged_in</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"已登入！"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 WordPress 核心裡面有一個叫做 init 的掛鉤，它是被貼在當程式初始化的地方，所以只要當程式一載入，就會執行 my_user_check 這隻 Function，而這段程式碼可以放在 Theme 的 function.php 或是 Plugin 的主程式裡面，這樣要判斷會員登入狀態就不用去改 WordPress 核心程式碼。</p>
<blockquote>
<p>所有可以用的 Action 可參考 —&gt; <a href="https://adambrown.info/p/wp_hooks/hook/actions"></a><a href="https://adambrown.info/p/wp_hooks/hook/actions">https://adambrown.info/p/wp_hooks/hook/actions</a>，數量足足有七百多個，但常用的大概就那幾個：init、wp_head、wp_footer 等等，其他的就等到需要的時候再去查就好。</p>
</blockquote>
<p><strong>（二）Filter</strong> - 修改內建資料的掛鉤</p>
<p>跟 Actions 一樣的運作邏輯，但與 Actions 的差異可以從名稱上看出來，Filter 是過濾器的意思，也就是把原本會顯示的內容多裝一個過濾器，去修改資料的最後呈現，相關 Function 說明如下：</p>
<p><strong>apply_filters( $tag, $value) - 裝上過濾器</strong></p>
<p>第一個參數為過濾器的名字，第二個參數決定什麼資料要被過濾，可以有很多個，同樣的，在核心程式碼中一樣有<a href="https://adambrown.info/p/wp_hooks/hook/filters">一大堆</a>已經寫好的 Filter 等著你來用。</p>
<p><strong>add_filter( $tag, $function, $priority, $accepted_args ) 使用過濾器</strong></p>
<p>第一個參數為要用哪個過濾器，第二個為要修改資料的 Function，第三個是執行順序，預設值是 10，數字越小越先執行，當有很多人同時在用過濾器的時候，就用這個數字來決定使用順序。</p>
<p>第四個參數是可接受的參數數量，預設值是 1，實際上會根據 apply_filters 的 $value 數量來決定這個數字，下面例子說明如何修改每一篇文章標題的格式：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'the_title'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'my_filtered_title'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">my_filtered_title</span><span class="token punctuation">(</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$id</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'['</span> <span class="token operator">.</span> <span class="token variable">$value</span> <span class="token operator">.</span> <span class="token string single-quoted-string">']'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>add_filter 第一個是過濾器名字，第二個是要執行的 Function，在這範例中是把文章標題左右各加入中括號，my_filtererd_title 要給兩個參數，因為過濾器 the_title 長這樣：apply_filters( ‘the_title’, $title, $id )，然後執行順序是預設值 10，最後的 2 是指定過濾器的 $title 與 $id。</p>
<p>$id 這個參數在這範例中沒用到，它可以拿到文章的 ID，所以可以針對文章來進行標題的過濾，範例補充如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'the_title'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'my_filtered_title'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">my_filtered_title</span><span class="token punctuation">(</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$id</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$id</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'['</span> <span class="token operator">.</span> <span class="token variable">$value</span> <span class="token operator">.</span> <span class="token string single-quoted-string">']'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>這樣就只會修改文章 ID 為 1 的標題帶有中括號。</p>
<p>在實務上為了程式碼的可讀性，要根據使用目的來選擇 Hook，如果是要修改資料的 return 結果，那就是用 Filter，如果是要在某個特定的時間點來執行你寫的功能，就使用 Action。</p>
<blockquote>
<p>何時要用 Action 還是 Filter 我有時候也搞不清楚，像是移除 WordPress 版本號的顯示是用 Filter，但要關閉後台首頁 Dashboard 預設 Widget 顯示的時候是用 Action。</p>
<p>後來我的理解方式是如果要執行某個具體的「動作」就是用 Action，要「修改」某些內容就是用 Filter，萬一還是搞不清楚就是爬原始碼看它這邊是埋 do_action 還是 apply_filters，久了就會慢慢記起來了。</p>
</blockquote>
<h2 id="本機與主機環境"><a href="#本機與主機環境" class="headerlink" title="本機與主機環境"></a><strong>本機與主機環境</strong></h2><p>WordPress 需要伺服器才能運作，通常在開發上會先使用本機的伺服器環境進行開發，完成後才會放到遠端的主機上讓人瀏覽，以下就本機與主機環境進行說明：</p>
<p><strong>（一）本機開發環境</strong></p>
<p>在開發階段使用本機環境來進行會比較有效率，除了可以離線作業以外，在進行新功能的測試時也不會影響到在正式運作的站，等確認無誤後，再透過 FTP 或是版本控管把程式碼上傳到遠端主機中。</p>
<p>網路上有很多適合 WordPress 在本機開發的軟體，像是 <a href="https://www.mamp.info/en/mac/">MAMP</a> ( Mac / Apache / MySQL / PHP)、<a href="http://www.wampserver.com/en/">WAMP</a> ( Windows / Apache / MySQL / PHP )，另外還有 <a href="https://www.apachefriends.org/index.html">XAMPP</a>、<a href="https://www.ampps.com/">AMPPS</a>，他們是跨平台的建置本機開發環境軟體。</p>
<p>此外還有很多是針對 WordPress 的，像是 <a href="https://serverpress.com/">DesktopServer</a>、<a href="https://localwp.com/">Local</a> 都是非常受歡迎的本機開發環境，這些都有圖形化介面提供使用者操作。</p>
<p>其他還有必須透過終端機指令安裝的軟體，像是 VirtualBox、Vagrant 與 Docker，這些工具適合拿來做自動化測試與部署，在 WordPress.org 有詳細的文件來說明 <a href="https://make.wordpress.org/core/handbook/tutorials/installing-a-local-server/installing-vvv/">Installing Varying Vagrant Vagrants</a> (VVV)。</p>
<blockquote>
<p>要用哪套本機開發軟體主要看個人的使用習慣以及需求，像我是使用 Mac，最早用 MAMP，中間用過 VVV、Docker，後來改用 Local，但因為我的電腦比較舊、容量又小，這些軟體都會把每一個站開出獨立的伺服器環境，所以害我硬碟常常滿載，直到最近終於找到一套非常輕量的本機軟體，速度也很不錯，還可以把我在本機建立 WordPress 站的流程自動化，有興趣的朋友可以參考這篇—&gt;<a href="https://oberonlai.blog/valtpress-setup/">Mac 限定 WordPress 本機開發環境 Valet + ValetPress</a>。</p>
</blockquote>
<p>（二）網站主機</p>
<p>簡單來說，網站主機就是當訪客連到你的網站時所造訪的主機，網站的運作效能、安全性、承載能力很大一部分是取決於使用的主機商，世界上有爆炸多的網站主機服務商，而他們也都可以運作 WordPress，但並非全部的主機商都有針對 WordPress 來進行系統的優化。</p>
<p>代管式主機商 ( Managed WordPress Hosting ) 才會有提供優化過的主機環境，特別是針對大型的 WordPress 網站，會包含許多系統底層的快取機制，進而加快資料庫的存取，如果網站規模大硬體資源不足，很容易就會造成網站斷線的情況。</p>
<p>WordPress 有內建的快取機制來優化內容的呈現，如果主機商沒有幫你做快取的話，可以再搭配快取外掛來加快瀏覽速度，關於快取第十四章會有更深入的說明。</p>
<p>另外還有一些代管式的主機商會提供更多附加功能，像是自動更新外掛、內容傳遞服務 ( CDN ) 等等，這類的廠商有 WP Engine、WordPress VIP、Pagely 以及其他超多的選擇。</p>
<blockquote>
<p>我自己的習慣是租 VPS 然後<a href="https://hellowp.cc/how-to-host-wordpress-with-plesk/">安裝主機管理面板 Plesk</a> 來管理 WordPress，一來比較便宜，二來擁有系統權限可以做的事情比較多，缺點是系統優化、快取那些東西要自己研究，以及網站掛掉的時候要想辦法處理，這樣可以學到很多，對於 WordPress 也會有更深層的認識。</p>
</blockquote>
<h2 id="開發、測試與正式環境"><a href="#開發、測試與正式環境" class="headerlink" title="開發、測試與正式環境"></a><strong>開發、測試與正式環境</strong></h2><p>通常在網站開發的過程中，會有三種不同階段的環境：開發環境 ( Development )、測試環境 ( Staging ) 與正式環境 ( Production )。理想上這三種環境會是在不同的主機上、有獨立的 WordPress 與資料庫。</p>
<p>開發環境又稱為 Dev 或是 DEV，通常是用來寫程式的本機環境；測試環境又稱為 Testing 或是 TEST，主要用來測試上機後的網站，網站的資料與正式環境盡量保持同步；正式環境又稱為 Live 或是 PRD，是你的訪客會造訪的環境。</p>
<p>如果你沒有辦法建立這三種環境，最起碼要有開發與測試兩種，然後絕對不要在正式環境直接進行修改與測試。最好的做法是所有開發都在本機完成，然後使用版本控管系統來把程式碼推到開發環境上，這樣當有多位工程師協同工作的時候就會有版本紀錄，以避免程式碼被覆蓋。</p>
<p>然後如果公司內部要進行測試時，先把正式環境的資料複製到測試環境，然後再把開發環境的程式碼部署到測試環境，等到都測試無誤後，再把程式碼部署到正式環境。</p>
<p>在部署到正式環境前記得要有備份，萬一網站爆炸時才能立即還原，千千萬萬不要以為寫好的程式碼不用測試就可以正常運作，一定都要經過測試才行。</p>
<p>有些代管式的主機商有提供測試環境，像是 WP Engine，他們會把每一個在上面的 WordPress 站都自動建立測試站，是非常方便的功能。</p>
<blockquote>
<p>新的專案我的實務做法是開發在本機，然後用 Github Private Repository 做版控，主機上面使用 Plesk 的 Git 套件，先開測試站與正式站，然後用 Plesk 設定當 Git Push 的時候會自動 Deploy 到測試站裡面，待測試無誤後，再使用 Plesk 的 WordPress Clone 功能把測試站完整複製到正式站去，Plesk 會自動把網址做替換。</p>
<p>網站上線後的修改，我會先用 Plesk 的同步功能，先把正式站的資料庫跟測試站同步，然後再把開發環境的修改 Deploy 到測試站進行測試。</p>
<p>萬一外掛有更新的話，我會統一先在測試站進行更新，確認無誤後再把檔案的部份 ( 不含資料庫 ) 同步到正式站，但有些外掛更新也會動到資料庫，所以檔案同步過去後還是要進正式站的後台去點選資料庫更新。</p>
<p>但我常常還是會偷懶，只有我一個人弄的小專案就還是開個 SFTP 然後搭配 VSCode 的 SFTP 套件，直接在存檔時自動上傳，或是用 <a href="https://code.visualstudio.com/docs/remote/remote-overview">Remote Development</a> 直接 SSH 進主機修改，如果檔案有在本機 Git 一定會做一下，不然就是 Time Machine 備份硬碟隨時插著，以防萬一。</p>
</blockquote>
<p>第二章介紹了 WordPress 的基礎知識，包含如何建立環境、資料的存放方式，以及一些操作資料的 Function，另外還有最重要的 Hook。接下來進入 WordPress 最強大的部分：外掛 Plugin。</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>Hook</tag>
        <tag>localhost</tag>
        <tag>schema</tag>
        <tag>taxonomy</tag>
        <tag>wp_comment</tag>
        <tag>wp_option</tag>
        <tag>wp_posts</tag>
        <tag>wp_terms</tag>
        <tag>wp_users</tag>
      </tags>
  </entry>
  <entry>
    <title>【 書摘 】PHP OOP Way</title>
    <url>/tw/php-oop-way/</url>
    <content><![CDATA[<p>受惠於有無數的前人願意分享以及開源自己的程式碼，才能讓我這種只會去 Stackoverflow 找答案複製貼上的偽工程師開始逐漸學習 PHP，因為當貼過來的東西不能用或是需要修改的時候，就必須要去理解自己到底貼上了什麼碗糕。</p>
<p>對於長年下來習慣 trial and error 寫程式的我來說，當要開發一個功能時，我會先就這項功能的每個步驟開始 Google，譬如要做一個會員註冊系統的後端程式，我可能會先查這些問題：「如何將資料傳送進資料庫」、「如何進行資料庫連線」、「如何判斷資料庫資料寫入完成」等等，然後根據我查到的程式碼依序貼入編輯器裡面，接著見證奇蹟的時刻～</p>
<span id="more"></span>

<p>想當然一定會到處噴錯無法執行，接下來就開始一行一行檢查出錯的地方，然後把錯誤訊息再丟進 Google 裡面查解決辦法，就這樣用老牛拖車的方式把這個功能給兜起來，我常覺得自己不是在「寫」程式而是在「拼」程式，但透過這樣「拼」的過程，也慢慢培養出一些嗅覺，知道哪樣拼不行、應該該怎麼喬才會 Work。</p>
<p>這就像完全不會說英文的人住在美國，為了生活必須要先學會用英文滿足自己吃喝拉撒睡的基本需求，我學程式的過程大概就是這樣的感覺，為了要完成工作領到薪水吃飯，用盡各種方法都要把客戶要的東西生出來，拜 WordPress 所賜，有太多神人貢獻自己的知識、Know How、以及「外掛」XD</p>
<p>但街頭智慧總是會有遇到瓶頸的時候，當一個專案的規模變大、功能變得複雜，或是要回去修改自己 N 年前寫的程式碼，總是會讓我痛到吱吱叫，所以為了要讓自己少叫一點，開始乖乖把 PHP 的基礎知識再重新學習，然後了解該如何組織檔案結構，讓未來的自己或是接手的人好過些。</p>
<p>學習基礎的過程很辛苦，因為我超不愛看一堆理論解釋，只要東西能跑得出來我要的效果就好，管他是怎麼實現的，但逼著吞的結果，卻常常有意外的發現，像是發現這個東西竟然可以這樣用、原來還有這樣的語法可以簡化原本的寫法，因此為了這些出乎意料的小驚喜，還是乖乖的 K 了下去…</p>
<p>但其中我對於物件導向以及設計模式這兩個東西我是怎樣也吞不下去，市面上的 PHP 書籍多半都是參考書，讀起來都很像考試用的，至於 Google 能找到的中文資料只讓我對這兩件事心生畏懼：</p>
<blockquote>
<p>在自然語言中，我們理解抽象的概念是，一個物體的一種大的描述，這種描述對某類物體來說是共有的特性。那麼在PHP中也是一樣的，我們把一個類進行抽象，可以指明類的一般行為，這個類應該是一個模板，它指示它的子方法必須要實現的一些行為。 </p>
</blockquote>
<p>…</p>
<p>為什麼每個中文字我都看得懂，但組在一起後我就沒半句看得懂…</p>
<p>後來我發現很多專有名詞都是中國用語，而這些寫法跟台灣用語完全不一樣，有時候就算是台灣工程師寫的文章，也會因為每個人的背景不同而有不一樣的講法，像是 Class 在中國叫做「類」，台灣通常叫做「類別」，OOP 中國叫做「面向对象」，台灣叫做「物件導向」，某些技術論壇會直接把國外的文章 Google 翻譯成簡體中文，然後再將其繁體中文化，這種東西我看得懂才有鬼啊 😱</p>
<p>後來才知道洋人的玩意兒就直接去看洋人寫的比較快，雖然英文閱讀對我來說很吃力，總是要拿著手機在旁邊查單字，一堆單字查了之後組成句子還是看不懂，但回想起拼湊程式碼的日子，這樣的學習模式自己再熟悉也不過了，所以我最早先從 WordPress Handbooks 開始看，為了護眼還整理成電子書版本，一共有七本，</p>
<p>然後又看了 Building Web Apps with WordPress 還整理了幾篇工作上能直接派上用場的書摘，另外又買了這本 <a href="https://carlalexander.ca/object-oriented-programming-wordpress/">Discover object-oriented programming using WordPress</a>，逐漸對於 OOP 到底該怎麼在實務上運用有了一些些模糊的概念，也對於這個領域的英文單字有了基礎的熟悉度。</p>
<p>而這個月在 K 的這本由 <a href="https://twitter.com/zhukserega">Segrey Zhuk</a> 寫的 <a href="https://leanpub.com/phpoopway">PHP OOP Way</a> 好像有把我更敲醒了一點，秉持著有紀錄才是有確實內化成自己東西的精神，我會試著用實務上的經驗來整理書中的知識，希望可以帶領自己走過學習 OOP 的門檻。另外為了能正確表達專有名詞，我會註記原始的英文單字以便對照。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/2020/09/hero.jpeg"></p>
<p>好長的前言，本篇主角終於現身了</p>
<h2 id="使用方法來組合屬性"><a href="#使用方法來組合屬性" class="headerlink" title="使用方法來組合屬性"></a>使用方法來組合屬性</h2><p>物件導向程式開發最為人所熟知的就是「封裝」的概念，關於它的定義不太好記，但常用的話大概會知道它是關於把事物的原理隱藏在一個黑箱裡面的過程，就像我在煮飯時按下電鍋的按鈕，時間到飯就會煮好了，而這中間的是如何實現的我不需要去理解，更不用去自己實作這個過程。</p>
<p>但為何這個概念如此重要？難道不能直接把所有屬性都讓人可以公開存取嗎？首先，我們要了解類別在物件導向程式開發中所扮演的角色：它是所有實體物件的設計圖，而它是被設計用在特定用途上的，所以我們必須要確保它能正確的被使用，而如何使用就是透過操作介面，就像是電鍋的煮飯按鈕一樣。</p>
<p>當我們決定哪些功能要做成可以被使用者操作的介面時，這樣的設計過程就是封裝，而封裝的主要目的就是要限縮介面，以避免使用者誤用，想像一下，如果電鍋設計師決定讓使用者自行控制溫度，那麼在煮飯時就要隨時調整溫度，萬一跑去炒個菜或是收衣服沒留意溫度，飯可能不是冷的不然就是燒焦了 &gt; &lt;</p>
<p>離開廚房回到程式開發現場，當我們有一個類別叫做 Client，然後根據這個 Client 類別設計出實體物件，而這個實體物件就能依照 Client 類別所設計的方式來讀取屬性或功能。想像這個 Client 是一位站在你眼前活生生的真人客戶，你可以看到他的臉、衣服、眼睛顏色，你可以跟他說話、問他問題或是得到答案，但你不會看到他的想法、體溫、以及血壓。</p>
<p>這些特徵對於客戶本身非常重要，但卻沒有必要讓別人知道，尤其你跟他只是在閒聊的時候…</p>
<p>舉例來說，我們有一個非常簡單的類別：User 來處使用者資訊，它有三個屬性：姓名、電子郵件與年齡，我們將在沒有封裝概念且完全公開屬性的條件下開始，在建立實體物件的時候我們希望這三個屬性是必要的，所以在建構式函式宣告時需要帶入這三個屬性的參數：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> User <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token variable">$email</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$email</span><span class="token punctuation">,</span> <span class="token variable">$int</span> <span class="token variable">$age</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">email</span> <span class="token operator">=</span> <span class="token variable">$email</span><span class="token punctuation">;</span>
    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'John'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'john@example.com'</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>把類別設計完成後，我們現在有一個商業邏輯：檢查該名使用者是否已滿 18 歲，滿了才能瀏覽 18 禁的內容：</p>
<p>if( $user-&gt;age &lt; 18 ) {<br>  throw new TooYoungException ( ‘等你滿 18 歲再來吧～’ );<br>}</p>
<p>上面的寫法看起來很合理，直接存取 $user 的公開屬性 age，就能判斷是否有滿足特定年紀，而這樣的判斷式會遍佈整個程式裡面，只要有需要判斷 $user 年紀的地方就需要下這一個判斷式，假設到了下個月，需要改成 21 歲時該怎麼做？對，這時候就只能用編輯器進行全站搜尋取代 18 這個數字。</p>
<p>另一個問題在於任何人都可以隨意修改 $user 的年紀，因為這個屬性是可以公開存取的，所以在建立實體之後，還是能夠被進行複寫，這是不合理的：</p>
<p>$user = new User( ‘john’, ‘john@example.com’, 18 );<br>$user-&gt;age = 21; // 可以直接被覆寫</p>
<p>還有一個更嚴重的問題：雖然年齡這個屬性被強制要求於建構式函式中必填，但還是缺少了參數驗證的機制，雖然我們已經有用 int 來確認 $age 參數是整數，但卻無法驗證年齡是否為負數：</p>
<p>$user = new User( ‘John’, ‘john@example.com’,  -20);</p>
<p>以上這些問題的主要原因在於 User 類別沒有把屬性綁定在方法裡面，這個類別看起來比較像是某種類型的資料結構而非真正的類別。所以接下來，我們開始來設計介面，第一個步驟就是先把隱藏所有的屬性，以及新增方法來取得 $user 的年齡：</p>
<p>class User {<br>  private $name;<br>  private $email;<br>  private $age;</p>
<p>  public function __constructor( string $name, string $email, int $age ){<br>    $this-&gt;name = $name;<br>    $this-&gt;email = $email;<br>    $this-&gt;age = $age;<br>  }</p>
<p>  public function getAge(): int {<br>    return $this-&gt;age;<br>  }</p>
<p>我們先透過宣告私有屬性，修正了公開屬性可以直接存取因而被覆寫的問題，下一步是把年齡的判斷邏輯隱藏在類別裡面，對於實體物件來說，它不用知道具體的年齡，只要知道他是否滿足特定年紀即可：</p>
<p>class User {<br>  …<br>  public function isYoung(): bool {<br>  return $this-&gt;age &lt; 18;<br>  }<br>}</p>
<p>新增 isYoung() 這個方法就能解決之後年齡要變動的問題。現在 User 這個類別看起來比較像真正的「類別」了，當我們要檢查 user 的年紀不用直接存取屬性來進行判斷，而改用 isYoung() 來檢查即可。</p>
<p>if($user-&gt;isYoung(){<br>  throw new TooYoungException;<br>}</p>
<p>透過以上的改寫就能把商業邏輯與實現細節隱藏在類別之中，而這就叫做「封裝」。我們把屬性的存取放在方法裡面，這些屬性對於實體物件來說是無從得知的，實體物件只能透過方法來讀取它需要的資料。但在實務上該如何判斷哪些屬性是公開、私有或是可繼承？我們應該全部都用私有屬性然後透過方法來設定其值嗎？</p>
<p>設計類別的時候我們的主要目標是要保護屬性避免被實體物件直接存取。所以我們可以從只有私有屬性開始，藉此來確保安全性。如果要提供公開屬性最好有明確且必要的理由。另一方面，千萬別認為只要用了私有屬性跟公開設定方法就可以不用做資料驗證動作：</p>
<p>class User {<br>  private $name;<br>  private $email;<br>  private $age;</p>
<p>  public function __constructor( string $name, string $email, int $age ){<br>    $this-&gt;name = $name;<br>    $this-&gt;email = $email;<br>    $this-&gt;setAge($age);  // 改使用 setter 來設定年紀，才能加入驗證機制<br>  }</p>
<p>  …</p>
<p>  public function setAge( int $age ): self {<br>    $this-&gt;age = abs($age);<br>    return $this;<br>  }<br>}</p>
<p>透過以上的修改，就能把不需對外公開的屬性隱藏，並且使用公開介面來設定這些屬性。</p>
<h2 id="定義新的資料類型"><a href="#定義新的資料類型" class="headerlink" title="定義新的資料類型"></a>定義新的資料類型</h2><p>關於物件導向的抽象化概念很多人都聽過，但卻很難解釋的很清楚，常聽到的解釋是：「抽象化是一種可以讓程式碼重複使用的概念」，而這也是我們從網路上學到關於物件導向程式設計的知識。如果你真的需要重用程式碼，建立抽象類別並且繼承它，這樣就寫完收工了，但，真的是如此嗎？這邊有個陷阱：有 N 種方法可以達成重複使用程式碼的目的，而使用抽象類別是最糟糕的一種XD</p>
<blockquote>
<p>關於抽象化的概念光看名字就覺得很抽象不好理解，這邊借用科技島讀第 454 期的文章「<a href="https://daodu.tech/06-11-2020-manage-complex-system-abstraction">掌握複雜系統的利器 — 抽象化思考</a>」來說明：中文將 abstraction 翻譯為「抽象化」不太貼切。這裡的 abstract 比較接近「摘要」，因此翻譯為「摘要化」或「本質化」會更精準。摘要的目標是提綱挈領，找出系統的核心，是具體的；而不是像「抽象」聽起來是模糊、不具體的。</p>
<p>我喜歡科技島讀 Michael 對於 Abstract 的詮釋，很精準的點出抽象類別的真正含義，它是一種資料類型的呈現方式，就跟我們常用的字串、整數、布林值一樣，是一種很純粹且具體的事物，我們不會說字串、整數很抽象，因為我們每天都用到那頭去，因此要把 Abstract Class 看成是一種資料類型，後文會提及更多這樣的觀念。</p>
</blockquote>
<p>讓我們從另外一個方向來思考：PHP 作為一種程式語言，它有許多不同的資料類型，像是整數、浮點數、字串、陣列等等，當需要做數學運算時，我們會用整數、浮點數，當需要邏輯判斷時，我們會用布林值，這是大家都知道的基本觀念，因為我們每天都在用，連想都不用想就知道該用誰。</p>
<p>有了這些基礎類型後，我們就能處理更複雜的資料。舉例來說，像是需要儲存使用者的資料，當然，我們可以用陣列的形式來儲存：</p>
<p>$user = [<br>  ‘name’ =&gt; ‘John’,<br>  ‘email’ =&gt; ‘john@mail.com’,<br>  ‘age’ =&gt; 30<br>];</p>
<p>這樣的資料類型雖然簡潔但卻不實用，因為它只能存放屬性而沒有定義方法，這時候就是類別派上用場的時候。我們可以把它視為一種新的資料類型，在 PHP 內建的資料類型裡面，並沒有一種類型叫做使用者，所以我們使用類別來自行建立，我們可以設計屬性及方法，未來就可以像用字串或是陣列一樣使用它。</p>
<p>class User {<br>  …<br>}</p>
<p>$user = new User();<br>$user-&gt;do_method();</p>
<p>一個新的類別定義了介面來讓其他人可以使用這個資料類型，當我們設計了公開方法後，就像在對使用這個資料類型的工程師說：「嗨！歡迎使用這個新的資料類型，只要遵循特定規則你就知道怎麼使用了～」，當我們把類別視為資料類型時這是非常重要的觀念，類別的公開介面就是一連串的規則，它定義了該類型如何使用。</p>
<p>以 PHP 內建的資料類型來說，我們知道如何讀取陣列值的用法，如果不照著它的規則來用，就絕對會噴錯：</p>
<p>$var = 3;<br>echo $var[0]; // 應該不會有人這樣用吧？</p>
<p>$var_arr = [‘a’,’b’,’c’];<br>echo $var_arr[0]; // 陣列就是這樣用的啊</p>
<p>每一個資料類型都有自己的一套的行為，也就是公開介面所提供的操作方式，這些行為可不能被隨意改變，不然就會是場災難，保持一致的使用介面是身為資料類型最基本的觀念之一。</p>
<p>所以當我們把抽象類別也看做是一種資料類型時，上述的觀念也同樣適用在它身上，在我們設計類別的時候，我們就有責任必須要寫出一致的使用介面供他人使用，而 PHP 提供了一些規則協助我們設計類別，帶有關鍵字 abstract 的類別無法建立實體，而方法應該被定義在子類別之中。</p>
<p>當我們使用繼承時，我們的職責是要遵守父類別的介面，下一個章節會討論更多關於繼承的部分。總括來說，封裝與抽象化是互相關聯的，抽象化是移除不需要的細節以聚焦在事物的本質( 本質化 / 摘要化 )，而封裝是在抽象化的過程中會使用到的一門技術，它將細節隱藏起來，只提供公開介面來讓使用者進行操作。</p>
<p>抽象化是一個較大的範疇，如果沒有封裝是無法實現抽象化的。</p>
<h2 id="關聯資料類型家族"><a href="#關聯資料類型家族" class="headerlink" title="關聯資料類型家族"></a>關聯資料類型家族</h2><p>當聽到繼承的時候你腦海中第一個浮現的印象是什麼？無疑是程式碼的重複使用，對吧？讓我們忘記這事從頭開始吧～</p>
<p>在上一個章節中提到，我們把抽象化看做是定義一個新資料類型的過程，然後使用 extend 關鍵字來建立子類別，而這也就是所謂的繼承，透過繼承可以判斷類別之間是否有親戚關係，子類別會擁有父類別所有非私有的屬性與方法，所以子類別是其父類別更明確具體規格的版本( 青出於藍勝於藍XD )。</p>
<blockquote>
<p>晚上睡不著的時候想到：如果 Abstract 是本質化、摘要化的意思，那麼繼承抽象類別的子類別，比較像是把抽象類別的細節完整描述出來，就像做報告的時候一樣，第一頁通常會是大綱或目錄，然後再從目錄去延伸內容，而這延伸的內容就是子類別要做的事，如果以這樣的關係來發想，父類別可能比較適合稱作為「根類別」或「主類別」，所有繼承它的類別則叫做「延伸類別」。</p>
</blockquote>
<p>雖然子類別擁有自己具體的規格，但使用者基本上還是認定它是父類別的延伸，因此父類別能用的方法也能完全無痛的用在子類別身上，以程式碼來說明：</p>
<p>class Task {<br>  private $isClosed;<br>  private $closedAt;</p>
<p>  public function close(){<br>    $this-&gt;isClosed = true;<br>    $this-&gt;$closedAt = date(“Y-d-m H:i:s”);</p>
<pre><code>return $this;
</code></pre>
<p>  }<br>}</p>
<p>class Project extends Task { }</p>
<p>範例中有一個父類別叫做 Task，子類別 Project 繼承了所有非私密屬性與方法，使用者會認定這兩個類別都是一種新的資料類型叫做 Task，而能使用的方法為 close()。接下來考慮另外一個類別 User 要使用 Task：</p>
<p>class User {<br>  public function completeTask( Task $task ){<br>    $task-&gt;close();<br>  }<br>}<br>$user = new User()<br>$user-&gt;completeTask( new Task() );<br>$user-&gt;completeTask( new Project() );</p>
<p>當子類別 Project 沒有定義任何新的方法時，上述的程式碼運作正常，但設計子類別就是為了更多更具體的功能所以才需要它，但把新的方法加入子類別之後，很容易就會開始造成問題：</p>
<p>class Task {<br>  private $isClosed;<br>  private $closedAt;</p>
<p>  public function close(){<br>    $this-&gt;isClosed = true;<br>    $this-&gt;$closedAt = date(“Y-d-m H:i:s”);</p>
<pre><code>return $this;
</code></pre>
<p>  }<br>}</p>
<p>class Project extends Task {<br>   public function close(){<br>     parent::close();<br>   }<br>}</p>
<p>// Client Code<br>class User {<br>  public function completeTask( Task $task ){<br>    $task-&gt;close();<br>  }<br>}<br>$user = new User()<br>$user-&gt;completeTask( new Task() );  // 正常運作<br>$user-&gt;completeTask( new Project() ); // 直接炸裂</p>
<p>發現到最後一行為何會炸裂嗎？Project 新增了與 Task 相同的方法名叫做 close，然後執行父類別的 close，但因為 Project 的 close() 沒有回傳值，而父類別是有的，在子類別沒有遵循父類別的情況下因此造成錯誤。子類別繼承父類別的當下，子類別就應該要遵守父類別的規則，所以當我們在子類別加入新的方法時要非常小心。</p>
<p>這種回傳資料的錯誤可以加上類型提示來讓除錯容易得些，程式碼編輯器可以透過這些宣告來提醒你錯誤的地方：</p>
<p>class Task {<br>  private $isClosed;<br>  private $closedAt;</p>
<p>  public function close(): self { // 加入 self 來提示回傳的是類別本身<br>    $this-&gt;isClosed = true;<br>    $this-&gt;$closedAt = date(“Y-d-m H:i:s”);</p>
<pre><code>return $this;
</code></pre>
<p>  }<br>}</p>
<p>class Project extends Task {<br>   public function close(): void { // 加入 void 來提示沒有回傳任何值<br>     parent::close();<br>   }<br>}</p>
<p>另外一個關於繼承的重要議題是繼承的深度，也就是這個家族有幾代同堂，除了子類別外，是否還有孫類別、曾孫類別、甚至是曾曾孫類別，實務上的建議是能夠越小越好，小家庭會讓事情比較單純，不然要繼承遺產的的話就很麻煩XD</p>
<p>減少繼承的深度可以比較容易掌握每一代之間的關係，如果上面 Project 的範例有繼承到曾曾孫類別，這樣我們必須要橫跨好幾代才能找到原來問題是出在子類別，當程式龐大時可就不這麼容易找到了。</p>
<p>或是我們也有可能會在繼承的類別中覆寫父類別的方法，以及忘記寫父類別中必要的方法，當這些錯誤發生而繼承的深度又太深時，都會讓除錯非常痛苦。所以理想的深度大概是兩到三代，再多就失控了。</p>
<p>繼承有很多好處，像是將類別群組化以及覆寫被繼承的方法，接下來我們要討論繼承最為人所熟知的用途：程式碼重用。對於程式碼的重複利用之所以會用繼承的方式來實作，是因為很多 MVC 的框架都是這樣做的，想要新增一個 controller？繼承 contorller 父類別即可～</p>
<p>namespace App;</p>
<p>use Illuminate\Database\Eloquen\Model;</p>
<p>class User extends Modle {<br>  …<br>}</p>
<p>使用框架的好處是當需要某些功能時，使用 extends 關鍵字來繼承框架已經設計好的父類別，在大部分情況下這樣做沒問題，但繼承的子類別未必會變成 model 或 view，所以當下次為了要使用某些實用的方法而繼承父類別建立子類別時，要記住這些類別都是一種資料型態，不然很容易會遇到上面提及的問題。</p>
<p>同時要記得要盡量維持淺薄的繼承關係，只有父與子兩代是最好的深度。當然，不是所有情境都能符合這個原則，但如果要發展更多階層，最好有明確的理由以及知道自己在做什麼。</p>
<h2 id="盡可能使用-Final-關鍵字"><a href="#盡可能使用-Final-關鍵字" class="headerlink" title="盡可能使用 Final 關鍵字"></a>盡可能使用 Final 關鍵字</h2><p>當新增類別的時候，全部使用 final 關鍵字來進行宣告，來確保該類別是不能被繼承的，除非這個類別是被設計來給其他類別來繼承的：</p>
<p>final class User {<br>  …<br>}</p>
<p>使用 final 關鍵字最大的好處是不允許子類別的存在，因此沒有任何人可以改變它的行為。當沿用一個類別的時候就會把封裝的概念給破壞掉，因為子類別可以看到父類別的內部行為並且複製取代，就像前面提到的 Projcet 與 Task 這兩個類別一樣，當子類別複寫父類別的方法時就很容易造成錯誤。</p>
<p>同時，final 關鍵字也避免讓我們使用繼承作為程式碼重用的手段，當我們不能透過繼承來重用程式碼，我們就會開始思考該如何設計更有邏輯與組織的類別。當然，只要我們有需要，隨時都可以移除 final 關鍵字，但如果先把 final 類別作為預設值，我們就會考慮到要移除它的理由，final 就像是一個提醒功能，提醒我們深思熟慮繼承類別的必要性。</p>
<h2 id="不同的類型擁有相同的行為"><a href="#不同的類型擁有相同的行為" class="headerlink" title="不同的類型擁有相同的行為"></a>不同的類型擁有相同的行為</h2><p>在進入主題之前，我們先來複習一下關於介面的定義方式：</p>
<p>interface InterfaceName {<br>  public function method( $parameter );<br>}</p>
<p>介面可以包含方法與常數，但卻不能有任何的屬性。所有在介面裡面定義的方法都必須是公開而且沒有實作細節，在 PHP 中，可以使用 extends 關鍵字來繼承另外一個介面：</p>
<p>interface ParentInterface {<br>  public function method( $parameter );<br>}</p>
<p>interface ChildInterface extends  ParentInterface {<br>  public function another_method( $parameter );<br>}</p>
<p>與類別不同之處在於介面可以從其他多個介面進行繼承：</p>
<p>interface LoggerInterface extends WritableInterface, ReadableInterface {<br>  …<br>}</p>
<p>當我們建立介面的時候，代表有使用這個介面的類別都必須要把該介面裡面的方法實作出來，舉例來說，當我們需要確保一個物件必須執行某些特定的方法時，我們就可以使用介面，介面是不同程式開發者之間的協議規範，就跟公司與公司之間的合約一樣，不履行就會發生問題。( 上法院或是程式爆炸 )</p>
<p>interface Flyable {<br>  public function fly( int $distance );<br>}</p>
<p>final class Bird implements Flyable {<br>  public function fly( int $distance ){<br>    // implementation<br>  }<br>}</p>
<p>final class Plane implements Flyable {<br>  public function fly( int $distance ){<br>    // implementation<br>  }<br>}</p>
<p>當類別決定實作某個介面時，這個類別就必須要有這個介面的公開方法，如同上面的範例一樣，鳥跟飛機都實作了 Flyable 這個介面，所以這兩個類別都必須要有 fly 這個公開方法，不然就會發生錯誤。要注意的是如果一個類別同時實作了兩個介面，那這兩個介面不可以有相同的方法名稱，不然會造成混淆。</p>
<p>而抽象類別也有提供介面，但關鍵的不同之處在於抽象類別直接提供了實作邏輯，以下使用抽象類別來改寫上面的例子：</p>
<p>abstract class FlyableEntity {<br>  protected $wings;<br>  abstract public function fly( int $distance );<br>}</p>
<p>當使用了抽象類別即代表我們設計了一個全新的資料類型，這個資料類型提供了一個抽象方法來作為介面，所以在子類別中可以進行介面的實作：</p>
<p>final class Bird extends FlyableEntity {<br>  public function fly( int $distance ){<br>    // child class implementation<br>  }<br>}</p>
<p>以真實世界的邏輯來看上面的例子可能有點奇怪，因為 FlyableEntity 不是一種本質化或是摘要化，這邊只是為了要示範抽象類別作為介面使用的範例。</p>
<p>如果使用抽象類別就可以達到介面的效果，那為何還需要宣告 Interface 呢？下面會繼續探討兩者之間的關係與差異。</p>
<h2 id="介面與抽象類別"><a href="#介面與抽象類別" class="headerlink" title="介面與抽象類別"></a>介面與抽象類別</h2><p>抽象類別是以一種新的資料類型呈現，而類別定義了物件的藍圖，我們知道如何透過類別來建立物件，就像我們知道如何使用字串或陣列一樣，當我們繼承一個類別時，就等於是創造了一個新的次要類型，我們不需要學新的用法就能使用它，因為只要能知道父類別怎麼用即可，下面以一個 Cahce 類別作為範例：</p>
<p>namespace Cache;</p>
<p>abstract class Cache {<br>  abstract public function get($key);<br>  abstract public function set($key,$value);<br>}</p>
<p>namespace Cache;<br>final class FIleSystemCache {}</p>
<p>namespace Cache;<br>final class RedisCache {}</p>
<p>namespace Cache;<br>final class NullCache {}</p>
<blockquote>
<p>命名空間 namespace 的用途是避免相同的類別名稱而造成衝突，第一段程式中的 namespace Cache 宣告這個檔案的命名空間為 Cache，而下面三段的開頭都使用了 _namespace Cache_，即代表接在後面的類別都屬於 Cache 這個命名空間之中，因此類別 FileSystemCache、RedisCache、NullCache 這三個類別都擁有父類別 Cache 的 get 與 set 方法。</p>
<p>更多命名空間介紹可以參考<a href="https://medium.com/verybuy-dev/namespace%E5%91%BD%E5%90%8D%E7%A9%BA%E9%96%93%E4%BB%8B%E7%B4%B9-e50a7fef029d">這篇文章</a>。</p>
</blockquote>
<p>上面所有的類別都應該遵守它們的父類別 Cache 的行為，每一個子類別都與父類別相關聯，雖然它們可以用自己的方法來實作快取機制，但它們都用共同的公開介面：使用 get 來設定快取的值、使用 set 來儲存需要被快取的內容，這兩個方法都需要帶入 $key 來傳送給這兩個方法。</p>
<p>想像一下有個類別叫作 Product，我們需要把它加入快取之中，我們可以使用前綴 prodcut_ 來組合它的 ID 來作為快取的 key：</p>
<p>$product = new Product();</p>
<p>//…</p>
<p>$cache-&gt;set( ‘product_‘.$product-&gt;id, $product )</p>
<p>簡單明暸，但假設今天我們也想要把商品分類加進快取之中，我們就會比照辦理：</p>
<p>$cache-&gt;set( ‘category_‘.$category-&gt;id, $category )</p>
<p>然後再次假設如果我們因為業務需求改變，因此決定要變更 Proudct 的快取 key，這件任務就會非常的阿雜，我們必須要翻遍所有程式碼然後搜尋取代 product_.$product-&gt;id 這個地方，有很高的機率會漏掉它並且造成臭蟲，而且這樣的蟲非常不好抓。</p>
<p>如果我們讓類別 Cahce 不用設定 key、或是將其封裝於 Product 裡面呢？舉例來說，每一個需要被快取的 Product 或是 Category 類別都有一個方法叫做 getCacheKey，這方法會回傳要用在 Cache 裡面的 key，未來當需要修改 key 值時，只要變更 getCacheKey 這一個方法即可。</p>
<p>class Product {<br>  public function getCacheKey(): string {<br>    return ‘product_‘.$this-&gt;id;<br>  }<br>}</p>
<p>class Category {<br>  public function getCacheKey(): string {<br>    return ‘category_‘.$this-&gt;id;<br>  }<br>}</p>
<p>看起來比較好一些，但還有另外一個問題：我們必須確保每一個要使用快取類別的物件都有 getCacheKey 這個方法，回到 Cache 類別來加入一些判斷：</p>
<p>abstract class Cache {<br>  public function get( $key ) {<br>    $key = $this-&gt;resolveKey( $key );<br>    return $this-&gt;getFromCache( $key );<br>  }</p>
<p>  abstract protected function getFromCache( $key );</p>
<p>  protected function resolveKey( $key ) {<br>    if( is_object( $key ) &amp;&amp; method_exists( $key, ‘getCacheKey’) ) {<br>      return $key-&gt;getCacheKey();<br>    }<br>    throw new CacheException( ‘Object should implement method getCacheKey()’ );<br>  }</p>
<p>  public funciton set( $key=’’, $entity ) {<br>    $key = $this-&gt;resolveKey( $key );<br>    return $this-&gt;storeInCache( $key );<br>  }</p>
<p>  abstract protected function storeInCache( $key, $data );<br>}</p>
<p>為了要檢查傳進去 Cache 的物件是否帶有 getCacheKey 方法，必須增加了一些條件來判斷，這讓程式變得又臭又長。根據 Cache 的業務邏輯，它必須要有 Key 才能作後續的動作，這時後類型提示就派上了用場，舉例來說，當我們要求參數必須是陣列的時候，就可以使用 array 來提示參數的資料類型。</p>
<p>在我們的範例中，我們擁有 Product 與 Category 這兩個類別，他們是兩種不同的資料類型，我們沒有辦法建立像是 Cache 這種抽象類別的階層關係，當然，雖然可以另外再新增一個抽象類別叫做 CachedEntity 並擁有 getCacheKey 方法，然後讓它的子類別實作 getCacheKey。</p>
<p>但這不是一個好主意，因為這些類別並不是真的彼此關聯，它可能看起來很彈性但這類的解決方法最後都會變成包山包海的超大物件，所以，讓我們來考慮使用介面：Interface。</p>
<p>介面不會產生新的資料類型，取而代之的是描述一個資料類型的單ㄧ面向，它只提供方法的骨架，這骨架裡面沒有任何的內容，我們可以建立一系列方法的骨架，最後在物件裡面來實作細節，根據上面的範例，我們定義一個介面叫做 Cacheable，然後讓 Product 與 Category 來實作 Cacheable 裡面的方法：</p>
<p>interface Cacheable {<br>  public function getCacheKey(): string;<br>}</p>
<p>class Category implements Cacheable {<br>  public function getCacheKey: string {<br>    return ‘category_‘.$this-&gt;id;<br>  }<br>}</p>
<p>class Product implements Cachebable {<br>  public function getCachekey: string {<br>    retrun ‘product_‘.$this-&gt;id;<br>  }<br>}</p>
<p>現在我們可以用類型提示來檢查要傳進去 Cache 的參數是否為 Cacheable：</p>
<p>abstract class Cache {<br>  abstract public funciton get(Cacheable $entity);<br>  abstract public funciton set(Cacheable $entity, $data);<br>}</p>
<p>另外 Cacheable 介面還可以定義另外一個方法來取得快取資料：getCacheData()，這個方法會回傳已快取資料的陣列。</p>
<p>interface Cacheable {<br>  public function getCacheKey(): string;<br>  public function getCacheData();<br>}</p>
<p>class Category implements Cacheable {<br>  public function getCacheKey: string {<br>    return ‘category_‘.$this-&gt;id;<br>  }<br>  public function getCacheData(): array {<br>    return [<br>      ‘name’ =&gt; $this-&gt;name,<br>      ‘slug’ =&gt; $this-&gt;slug,<br>      ‘productsNum’ =&gt; $this-&gt;products-&gt;count()<br>    ];<br>  }<br>}</p>
<p>class Product implements Cachebable {<br>  public function getCachekey: string {<br>    retrun ‘product_‘.$this-&gt;id;<br>  }<br>   public function getCacheData(): array {<br>    return [<br>      ‘name’ =&gt; $this-&gt;name,<br>      ‘slug’ =&gt; $this-&gt;slug,<br>      ‘images’ =&gt; $this-&gt;images,<br>      ‘productsNum’ =&gt; $this-&gt;products-&gt;count()<br>    ];<br>  }<br>}</p>
<p>透過這樣的改寫來把所有的邏輯都封裝在 Cacheable 裡面，實作 Cacheable 這個介面的類別都擁有自己的 getCacheKey 與 getCacheData 的方法，抽象類別 Cache 完全不知道快取儲存與讀取的細節，只要用原本的 set 與 get 方法就能操作快取，而原本的 set 方法也不需要傳第二個 $data 參數了：</p>
<p>abstract class Cache {<br>  abstract public funciton get(Cacheable $entity);<br>  abstract public funciton set(Cacheable $entity);<br>}</p>
<p>Cache 類別完全信任 Cacheable 介面，因為實現 Cacheable 的類別一定會把介面定義的一堆方法完全實作出來，也因為這樣，Cache 類別可以完全信賴 Cacheable。</p>
<p>可以注意到介面的命名規則通常是用 able 或是 ing 的形容詞結尾，更進一步的說，它可以適用在所有不同的資料類型上，就像形容詞可以用在形容各種名詞，上面的範例我們有兩個類別叫做 Category 跟 Proudct，而我們用「可快取的 - Cacheable」 來形容它們，因此在實務上會慣用形容詞來幫介面命名。</p>
<p>當使用抽象類別的時候，我們的常數可能會有許多不同的值：</p>
<p>abstract class AbstractTable {<br>  const TABLE = null;<br>}</p>
<p>class UsersTable extends AbstractTable {<br>  const TABLE = ‘users’;<br>}</p>
<p>class OrdersTable extends AbstractTable {<br>  const TABLE = ‘oreds’;<br>}</p>
<p>我們可以在子類別裡面複寫或是重新宣告父類別中的常數，有時候很方便，就像上面的例子一樣，但這樣就不是常數了，假設我們真的需要一個不能被變動的常數，就可以把它定義在介面之中：</p>
<p>interface MathInterface {<br>  const PI = 3.14159;<br>}</p>
<p>class MathOperations implements MathInterface {<br>  const PI = 3.14 // Fatal Error!<br>}</p>
<p>在 PHP 中關於介面的常數還有另外一個特性：使用該介面的類別雖然無法重新宣告其常數，但如果又有一個子類別繼承了使用該介面的類別，那麼在這個子類別中又可以重新宣告這個常數：</p>
<p>interface MathInterface {<br>  const PI = 3.14159;<br>}</p>
<p>class MathOperations implements MathInterface {}</p>
<p>class MultiplicationOperations extends MathOperations {<br>  const PI = 3.14; // This works fine<br>}</p>
<p>總結：使用抽象類別就是我們要定義新的資料型態的時候，在繼承抽象類別的子類別中，我們可以複寫或是實作父類別中方法的細節，最重要的是我們要確保這些子類別與父類別是真的有血緣關係（同資料型態），而非為了要取得父類別的某些好處（重用程式碼）而去繼承它。</p>
<p>至於介面只提供公開的方法，使用介面可以確保實作該介面的類別具有介面指定的方法，而方法的實作細節都在類別裡面，因此可以根據業務邏輯作調整，同時又能達到資料型別提示的作用，省去寫一堆驗證物件的判斷。</p>
<h2 id="複製與貼上程式碼"><a href="#複製與貼上程式碼" class="headerlink" title="複製與貼上程式碼"></a>複製與貼上程式碼</h2><p>在 PHP 裡面沒有提供複數繼承的功能，一個子類別只能繼承一個父類別，有些人會覺得這樣不好，因為就不能同時繼承多個帶有實用的方法的類別，看到這邊我們已經理解為何透過繼承來達到程式碼重用的作法是最糟的，但假設我們在某些情境下真的需要重用之前寫過的程式碼，難道真的要複製貼上嗎？</p>
<p>舉例來說，我們有一個購物商城，它有商品型錄，型錄裡面有商品分類與商品品項，我們想要讓網址不要用 id 顯示，而是用人類看得懂的名稱，所以我們需要讓分類與品項都擁有自己的網址代稱：</p>
<p>class Product {<br>  private $name;</p>
<p>  public function slug(): string {<br>    $cleared = preg_replace(‘/[^A-Za-z0-9]+/‘,’-‘,$this-&gt;name);<br>    return strtolower($cleared);<br>  }<br>}</p>
<p>class Category {<br>  private $name;</p>
<p>  public function slug(): string {<br>    $cleared = preg_replace(‘/[^A-Za-z0-9]+/‘,’-‘,$this-&gt;name);<br>    return strtolower($cleared);<br>  }<br>}</p>
<p>很明顯的 slug 方法完全一模一樣，沒有人喜歡重複，因為很容易產生臭蟲，所以上面的寫法不推薦。如果另外寫一個類別叫做 BaseModelWithSlug 來處理的話，也不是一個好主意，因為這樣就只是為了功能而去做類別的繼承，還記得上面提到的基本觀念嗎？繼承一定要有血緣關係（同資料型態），BaseModelWithSlug 類別連資料型態都稱不上。</p>
<p>在這種情境下最適合的作法就是使用關鍵字 Trait，根據 php.net 的定義：Trait 是一套程式碼重用的技術，並減少單一繼承的限制，讓開發者可以自由地在不同的類別之中重複使用方法。</p>
<p>換句話說，Trait 可以讓我們用一個可重用的物件來整合相關的方法，然後這些重用物件會把裡面定義好的方法貼入到類別裡面。這跟繼承有什麼不同？差別在於 Trait 跟繼承一點關係都沒有，它比較像是 Mixin 混搭的概念。</p>
<p>Trait 也提供了很多方式來避免在繼承情況下所造成的衝突問題，如果一個方法同時被宣告在多個 Trait 裡面，那麼就會產生錯誤提示。只要記住使用 Trait 就是要取代複製貼上程式碼的行為，當一個類別使用 Trait 的時候，就好像是把 Trait 裡面的方法複製下來然後貼到類別裡面。</p>
<p>下面我們來建立一個產生網址代稱的 Trait：</p>
<p>trait HasSlug {<br>  public function slug(): string {<br>    $cleared = preg_replace(‘/[^A-Za-z0-9]+/‘,’-‘,$this-&gt;name);<br>    return strtolower($cleared);<br>  }<br>}</p>
<p>class Product {<br>  use HasSlug;<br>  private $name;<br>}</p>
<p>class Category {<br>  use HasSlug;<br>  private $name;<br>}</p>
<p>首先使用關鍵字 trait 宣告後，在類別裡面使用 use 來貼上 Trait 裡面的方法，這樣就能夠重複使用 slug 方法了，記得 use 要在類別的最前面，因為 PHP 需要找出類別的結構。但假設我們想要讓網址代稱是用類別的其他私有屬性呢？上面的範例是直接寫死 $this-&gt;name，如果要保持彈性可以新增一個方法來取得 name：</p>
<p>trait HasSlug {<br>  public function slug(): string {<br>    $string = $this-&gt;getStringForSlug();<br>    $cleared = preg_replace(‘/[^A-Za-z0-9]+/‘,’-‘, $string);<br>    return strtolower($cleared);<br>  }<br>  abstract protected function getStringForSlug(): string;<br>}</p>
<p>class Product {<br>  use HasSlug;<br>  private $name;<br>  protected function getStringForSlug(): string {<br>    return $this-&gt;name;<br>  }<br>}</p>
<p>class Category {<br>  use HasSlug;<br>  private $name;<br>  private $shortName;<br>  protected function getStringForSlug(): string {<br>    return $this-&gt;shortName;<br>  }<br>}</p>
<p>上面的範例中我們在 trait 裡面多加入了一個方法叫做 getStringForSlug()，它會返回字串，而真正產生網址代稱是透過這個方法，因此在不同的類別中，我們可以定義不同的網址代稱取得方式，這樣就能同時達成動態產生代稱且又不重複程式碼的目標了。</p>
<p>現在我們重新思考一下關於資料型別與介面的問題，我們把 Cateogry 變得更複雜一些：</p>
<p>class Category {<br>  use HadSlug;<br>  private $name;</p>
<p>  protected function getStringForSlug(): string {<br>    return $this-&gt;shortName;<br>  }</p>
<p>  public function parent(): self {<br>    // returns a parent category<br>  }</p>
<p>  public function products(): array {<br>    // returns products<br>  }</p>
<p>}</p>
<p>萬一使用 trait 的類別有自己的公開介面會發生什麼事？在使用 trait 前有兩個方法：parent() 與 products()，而透過 trait 新增加了 slug() 方法，而沒有人可以保證實作 Category 的類別有 slug 方法，所以就必須要去爬類別的原始碼，然後找到 trait 裡面帶有的方法。</p>
<p>因此我們需要建立一個新的介面來確保該類別是有帶有 slug 方法的：</p>
<p>interface Sluggable {<br>  public function slug(): string;<br>}</p>
<p>trait HasSlug {<br>  // …<br>}</p>
<p>class Category Implements Sluggable {<br>  use HasSlug;</p>
<p>  // …<br>}</p>
<p>class Product Implements Sluggable {<br>  use HasSlug;</p>
<p>  // …<br>}</p>
<p>有了 Sluggable 介面，我們就可以利用它做資料類型提示，這樣就能確保有使用 HasSlug 的類別是擁有 slug 方法的，這樣的用法在大型且複雜的應用程式中是非常重要且不可或缺的。</p>
<p>關於 trait 還有一個可能發生的問題是如果有使用屬性並且預期它會出現在類別裡面的時候，以最上面第一個把代稱寫死的範例來說，trait 直接利用類別的 $name 來作為代稱的初始值，因此 trait 會認定有用它的類別一定會有 $name 這個屬性。</p>
<p>但假設在 Product 類別裡面要拿來做網址代稱的屬性名稱叫做 $titile，那麼這個 trait 就會出錯，要解決這個方法我們可以多加一個 property_exists 判斷來檢查屬性是否存在：</p>
<p>trait HasSlug {<br>  public function slug(): string {<br>    if(!property_exists($this,’name’)){<br>      throw new Exception(<br>        ‘No property “name” to create slug’<br>      )<br>    }</p>
<pre><code>$cleared = preg\_replace(&#39;/\[^A-Za-z0-9\]+/&#39;,&#39;-&#39;,$this-&gt;name);
return strtolower($cleared);
</code></pre>
<p>  }<br>}</p>
<p>最後要注意的是 trait 可以取得類別的私有屬性與方法，在某些情況下對於 trait 來說很方便，但如果是需要繼承就拿不到了：</p>
<p>trait Printable {<br>  function print(): void {<br>    echo $this-&gt;title;<br>  }<br>}</p>
<p>class Book {<br>  use Printable;</p>
<p>  private $title = “A very interesting book”;<br>}</p>
<p>$book = new Book;<br>$book-&gt;print(); // A very interesting book</p>
<p>上面的範例不是好作法，因為私有屬性就是私有的，是不能讓類別以外的人所存取的，縱使是 trait 也是一樣，如果要這樣做最好有明確的理由，並且在使用時要特別小心。</p>
<p>Trait 是非常強大且彈性的工具，用來取代複數繼承的機制，它可以改善你的程式碼並且避免多餘的程式碼重複，但換個角度看，它也有可能變得越來越複雜，所以在使用上還是要盡量小心。</p>
<h2 id="關於多型"><a href="#關於多型" class="headerlink" title="關於多型"></a>關於多型</h2><p>在物件導向中，多型是最重要的概念，關於多型 Polymorphism 這個字在程式開發社群常被解釋為是一種單一介面到不同資料型態實體間轉換的規則，是指在程式執行階段，物件能夠依照不同的情況改變資料型態，多型有很多種，但有些因為 PHP 本身的限制而無法達成。</p>
<h3 id="帶有特定目的的多型-Ad-hoc-Polymorphism"><a href="#帶有特定目的的多型-Ad-hoc-Polymorphism" class="headerlink" title="帶有特定目的的多型 Ad-hoc Polymorphism"></a>帶有特定目的的多型 Ad-hoc Polymorphism</h3><p>這一類的多型常見的例子是宣告相同的方法名稱但卻帶有不同類型的參數，程式會自動判斷帶入參數的資料類型並決定要用哪一個方法：</p>
<p>class Calculator {<br>  public function sum(int x, int y){<br>    return x + y;<br>  }<br>  public function sum(float x, float y){<br>    return x+y;<br>  }<br>}</p>
<p>如果參數是整數，會用第一個方法，如果是浮點數，則用第二個方法，但可惜的是在 PHP 裡面不能這樣寫，會出現重複宣告的錯誤。</p>
<h3 id="子類別的多型-Subtype-Polymorphism"><a href="#子類別的多型-Subtype-Polymorphism" class="headerlink" title="子類別的多型 Subtype Polymorphism"></a>子類別的多型 Subtype Polymorphism</h3><p>這一類多型是最常見的，它的意思是當我們在類別裡面有不同的方法但卻做著類似的事情的時候，我們應該把這些方法使用相同的名稱來命名。我們確信所有類別都有相同的介面、方法與使用相同的參數。</p>
<p>當我們的介面被實作的時候，我們不需要去關心這些類別是如何運作的，根據他們共有的介面，我們就可以知道它們的方法與行為，所以我們完全清楚如如何使用它們，下面範例先示範沒有使用多型的寫法，在之前的範例我們有一個基本的抽象類別叫做 Cache，以及一些衍伸該類別的類別，像是 MemcacheCache、FileCache 以及 RedisCache，接下來我們讓一個類別 Application 來使用 Cache，並且加入清除快取的邏輯在裡面：</p>
<p>final class Application {<br>  private $cache;</p>
<p>  public function setCache(Cache $cache):void {<br>    $this-&gt;cache = $cache;<br>  }</p>
<p>  public function flushCache(){<br>    switch(get_class($this-&gt;cache)){<br>      case “MemcacheCache”:<br>        $this-&gt;cache-&gt;clearMemcache();<br>        break;<br>      case “FileCache”:<br>        $this-&gt;cache-&gt;unlineFile();<br>        break;<br>      case “RedisCache”:<br>        $this-&gt;cache-&gt;flushRedis();<br>        break;<br>    }<br>  }<br>}</p>
<p>可以發現當不同類別有著類似卻沒有提供一個共用介面的時候，我們就必須要用這種醜醜的 switch 或是 if else 條件式來處理這些行為，如果日後多了一種快取機制又必須進到這個類別來新增一筆條件。</p>
<p>為了改善這個問題，我們需要一套可以共用的介面，我們可以把每個判斷條件拆解成獨立的類別，並且將實作細節隱藏在共用介面之中，看起來我們需要在 Cache 類別加入一個方法叫做 flush()，然後每個子類別來實作這個 flush() 方法：</p>
<p>abstract class Cache {<br>  abstract public function flush():void;<br>}</p>
<p>final class MemcacheCache extends Cache {<br>  public function flush():vod {<br>    $this-&gt;memcache-&gt;flush();<br>  }<br>}</p>
<p>final class FileCache extends Cache {<br>  public function flush():vod {<br>    unlink($this-&gt;file);<br>  }<br>}</p>
<p>final class RedisCache extends Cache {<br>  public function flush():vod {<br>    $this-&gt;redis-&gt;flush();<br>  }<br>}</p>
<p>然後我們可以修改原本在 Application 裡面的 flushCache 方法，並且移除掉所有的 switch 條件式判斷，因為我們不用再去處理不同快取間的清除方式，這些快取清除的定義都在子類別之中：</p>
<p>final class Application {<br>  private $cache;</p>
<p>  public function setCache(Cache $cache):void {<br>    $this-&gt;cache = $cache;<br>  }</p>
<p>  public function flushCache(){<br>    $this-&gt;cache-&gt;flush(); // 一行搞定<br>  }<br>}</p>
<p>修改之後 flushCache 變得簡單又清楚，如果要之後要新增一個 NullCache 就不會動到 Application 類別，只要新建一個 extends Cache 的類別即可。這就是所謂的多型，我們把不同的邏輯隱藏在一個方法後面 ( flushCache )，因此我們可以安全地新增實作細節，並且每一個類別都知道該如何使用它。</p>
<p>另一方面，如果各類別之間是沒有從屬關連的，我們也可以使用介面來實現上述的多型，舉例來說，我們有一個 Cache 類別使用 cacheable 物件來存放快取的內容，每一個使用 cacheable 介面的類別都必須實作 getCacheKey 的具體細節：</p>
<p>interface Cacheable {<br>  public function getCacheKey(): string;<br>}</p>
<p>final class Product implements Cacheable {<br>  public function getCacheKey(): string {<br>    return ‘product_‘.$this-&gt;id;<br>  }<br>}</p>
<p>final class Category implements Cacheable {<br>  public function getCacheKey(): string {<br>    return ‘category_‘.$this-&gt;id;<br>  }<br>}</p>
<p>Product 跟 Category 是兩個沒有從屬關係的類別，但因為他們使用了相同的介面，讓我們可以用相同的方法正確的使用它們。</p>
<p>final class Cache {<br>  public function store(Cacheable $cacheable): void {<br>    $this-&gt;store($cacheable-&gt;getCacheKey(), $cacheable);<br>  }<br>}</p>
<p>$cache = new Cache();<br>$product = new Product();<br>$category = new Category();</p>
<p>$cache-&gt;store($product);<br>$cache-&gt;store($category);</p>
<p>在這裡 Cache 類別完全不用擔心當參數傳入的物件是什麼，因為透過介面已約束傳入的類別必定會帶有 getCacheKey 方法，所以 Cache 可以無後顧之憂的使用它們。</p>
<p>不管是帶有從屬關係的 abstract 類別或是彼此沒有關聯而透過介面來把不同邏輯隱藏在同一個方法後面的過程，都是多型的展現。</p>
<h3 id="參數式的多型-Parametric-Polymorphism"><a href="#參數式的多型-Parametric-Polymorphism" class="headerlink" title="參數式的多型 Parametric Polymorphism"></a>參數式的多型 Parametric Polymorphism</h3><p>不像上文第一個介紹的帶有特定目的的多型，參數式多型是 PHP 特有的，因為 PHP 的寬鬆資料類型而產生的，當沒有做類型提示時，我們可以傳入我們想要的函式或是方法：</p>
<p>function sum($a, $b){<br>  return $a + $b;<br>}</p>
<p>echo sum((int)2,(int)3); //5<br>echo sum((float)1.6,(float)2.12); // 3.72<br>echo sum(‘abc’,4); //4</p>
<p>這一類的多型我們不在意傳入參數的資料類型，不管傳入什麼都能順利輸入結果，讓我們來重新看一次子類別多型的範例：</p>
<p>final class Cache {<br>  public function store(Cacheable $cacheable): void {<br>    $this-&gt;store($cacheable-&gt;getCacheKey(), $cacheable);<br>  }<br>}</p>
<p>這邊的 $this-&gt;store 方法就是使用參數式的多型，只要它接收到的參數是 Cacheable 的類型，它就能正常運作，就跟上面第一個範例中的 sum 函式一樣。</p>
<p>可以發現子類別多型與參數式多型彼此間關係密切，我們透過繼承或是介面建立了不同的子類別，然後根據它們的基礎類型來使用它們。</p>
<h2 id="依賴注入-Dependency-Injection"><a href="#依賴注入-Dependency-Injection" class="headerlink" title="依賴注入 Dependency Injection"></a>依賴注入 Dependency Injection</h2><p>以物件導向開發的應用程式裡面，每個物件彼此都互相依賴。假設我們現在有一個專門在做資料庫 Query 的類別叫做 QueryBuilder，然後有天我們發現某筆資料的 Query 速度非常慢，我們想要增加 Log 紀錄來追查緩慢的原因，所以我們需要一個 logger 物件來做這件事情：</p>
<p>final class QueryBuilder {<br>  public function execute(string $sql, array $params): void {<br>    //…<br>    $logger = new Logger();<br>    $logger-&gt;info(<br>      ‘DB:’.$sql,’;’.implode(‘,’,$params);<br>    );<br>  }<br>}</p>
<p>我們使用 $logger 物件來紀錄每一次 Query 的 SQL 執行語句與參數，看起來好像這樣就能解決了，但假設你的同事某天修改了 Logger 類別的建構式，並且在建立物件時需要多帶一個參數叫做 $filename，那麼這支 QueryBuilder 就會爆炸噴錯，然後整個網站的資料庫 Query 也會跟著 GG。</p>
<p>當然，這樣的修改可以透過很多方式來避免，但只因為多了一個參數就能讓整個網站爆炸，這代表了程式背後的結構設計有很大的問題，同時顯現出整體架構的脆弱性。</p>
<h3 id="Hardcoded-dependencies"><a href="#Hardcoded-dependencies" class="headerlink" title="Hardcoded dependencies"></a>Hardcoded dependencies</h3><p>每當我們在一個類別之中使用另外一個類別時，如果這個類別是抽象類別是 OK 的，但如果是實作一般類別就要避免，最危險之處在於一個物件在它不應該被實體化的地方被建立，就像上面範例中的 Logger 類別，那麼哪裡才是適合的地方呢？</p>
<p>讓我們先從反面的例子來找出錯誤的地方。我們已經看過上面的錯誤範例，如果 Logger 修改了建構式就要搜尋所有有用到 Logger 的類別來進修改，雖然現在的程式編輯器都有全站搜尋取代的功能，但 PHP 一門擁有動態類型的程式語言，下面這個範例會讓編輯器不容易找到：</p>
<p>function makeInstance($class){<br>  return new $class;<br>}</p>
<p>$className = ‘Logger’;<br>$logger = makeInstance($className);</p>
<p>類別名稱有可能使用變數來存放，然後透過函示來進行實體化，在這種情況下只有當程式出錯時才會發現原來這邊也有宣告 Logger。所以為了修正這個問題，我們必須把在類別中 new Logger() 移除，並使用參數的方式來傳入：</p>
<p>fincal class QueryBuilder {<br>  public function execute(string $sql, array $params, Logger $logger=null): void {<br>    //…<br>    if($logger){<br>      $logger-&gt;info(<br>        ‘DB:’.$sql.’;’.implode(‘,’,$params)<br>      );<br>    }<br>  }<br>}</p>
<p>我們可以讓 Logger 利用類型提示的方式以參數帶入，並透過判斷式來確保當有傳入 $logger 的時候才執行 Logger 類別的 info 方法，透過這樣的寫法改善了以下問題：</p>
<ul>
<li>  QueryBuilder 不用依賴 Logger 的建構式</li>
<li>  QueryBuilder 不用依賴任何類別的實例化，Logger 能安全的被使用</li>
<li>  可以設計一個假的 Logger 類別來做測試，當多人開發時如果 Logger 還沒被寫好，撰寫 QueryBuilder 類別的工程師就能先自己做一個暫時的 Logger 類別</li>
</ul>
<p>當我們用參數的方式把依賴的類別傳入後，這樣的技術就叫做依賴注入，把需要依賴的類別寫死在需要它的類別之中，就會違反了單一職責原則，如果我們把依賴類別直接在類別中建立，這樣至少有兩個需要改善的理由。</p>
<p>我們來看看另外一個例子，類別 Delivery 負責傳送訂單到物流系統的 API，它有一組 HTTP 方法來負責 API 的請求：</p>
<p>final class Delivery {<br>  private $client;</p>
<p>  public function __construct(){<br>    $this-&gt;client = new HttpClient();<br>  }</p>
<p>  public function send(Order $order): array {<br>    $response = %this-&gt;client-&gt;post(‘/orders/create’,$order-&gt;toJson());<br>    return json_decode($response,true);<br>  }</p>
<p>  public function getStatus(int $orderId): array{<br>    $response = $this-&gt;client-&gt;get(‘/orders/info’,$orderId);<br>    return json_decode($response,true);<br>  }<br>}</p>
<p>看到 new HttpClient() 了嗎？我們再次把依賴的類別寫死在裡面，現在我們已經知道正確的做法是用參數的方式傳入才對。但這個物件在每一個方法都有用到，如果每個方法都要多傳一個 new HttpClient 參數顯得有些累贅，在建構式宣告時就傳入是比較好的作法，根據經驗法則：如果一個類別沒有這個依賴物件就無法運作，那麼在宣告建構式時就應該把這個依賴物件用參數的方式傳入。</p>
<p>Delivery 類別修改如下：</p>
<p>final class Delivery {<br>  private $client;</p>
<p>  public function __construct(HttpClient $client){ // 在這邊傳入<br>    $this-&gt;client = $client;<br>  }</p>
<p>  public function send(Order $order): array {<br>    $response = %this-&gt;client-&gt;post(‘/orders/create’,$order-&gt;toJson());<br>    return json_decode($response,true);<br>  }</p>
<p>  public function getStatus(int $orderId): array{<br>    $response = $this-&gt;client-&gt;get(‘/orders/info’,$orderId);<br>    return json_decode($response,true);<br>  }<br>}</p>
<h3 id="在建構式或是新增方法傳入"><a href="#在建構式或是新增方法傳入" class="headerlink" title="在建構式或是新增方法傳入"></a>在建構式或是新增方法傳入</h3><p>在上面的範例中，我們在 Delivery 的建構式中來傳入 HttpClient 物件，但為何是用建構式來做依賴注入？為何不新增一個叫做 withClient() 的方法來管理 HttpClient 物件？這樣看起來比較彈性，同時也能保持建構式的簡潔，以及如果之後還需要對 HttpClient 物件做設定會來得更方便，但這會造成另一個嚴重的問題：</p>
<p>final class Delivery {</p>
<p>  private $client;</p>
<p>  public function withClient(HttpClient $client): void {<br>    $this-&gt;client = $client;<br>  }</p>
<p>  public function send(Order $order):array {<br>    $response = $this-&gt;client-&gt;post(‘/orders/create’,$order-&gt;toJson());<br>    return json_decode($response,true);<br>  }</p>
<p>  public function getStatus(int $orderId): array {<br>    $response = $this-&gt;client-&gt;post(‘/orders/info’,$ordId);<br>    return json_decode($response,true);<br>  }<br>}</p>
<p>當我們把依賴類別從建構式裡面移除並使用獨立的方法來傳入時，我們就成功建立了一個可以保持設定彈性的物件，但問題就會來了，參考下面的範例：</p>
<p>final class DeliveryController {<br>  private $delivery;<br>  public function __constructor(Delivery $delivery){<br>    $this-&gt;delivery = $delivery;<br>  }<br>  public function sendOrder(int $orderId): void {<br>    $order = Order::find($orderId);<br>    $delivery-&gt;sendOrder($order);<br>  }<br>}</p>
<p>$delivery = new Delivery();<br>$controller = new DeliveryController($delivery);</p>
<p>$controller-&gt;sendOrder(111); // 會噴錯</p>
<p>雖然 DeliverController 類別已經傳入了 Delivery 類別的物件，但 DeliverController 類別無法得知 Delivery 物件是否已經準備妥當，因為它沒有辦法知道 withClient 方法是否已被呼叫，另外在這邊已經違反了封裝原則，DeliverController 不應該去關心所傳入的 Delivery 物件內部是如何運作的。</p>
<p>我們應該要避免寫出這一類不完整的類別，他們常造成臭蟲並且很難除錯與測試，因此這就是為什麼當一個類別如果不依賴另外一個類別就無法運作的話，這個依賴的類別必須要在建構式裡面就傳入的原因。</p>
<p>如果不是不依賴就無法運作的情況，我們就可以安心的使用方法來傳入依賴類別。讓我們來改寫上面 QueryBuilder 的範例，使用 setter 方法來傳入依賴類別：</p>
<p>fincal class QueryBuilder {<br>  private $logger;</p>
<p>  public function withLogger(Logger $logger):void {<br>    $this-&gt;logger = $logger;<br>  }</p>
<p>  public function execute(string $sql, array $params): void {<br>    //…<br>    if($this-&gt;logger){<br>      $this-&gt;logger-&gt;info(<br>        ‘DB:’.$sql.’;’.implode(‘,’,$params)<br>      );<br>    }<br>  }<br>}</p>
<p>在這範例中，依賴類別在 withLogger 這個 setter 方法中傳入，這樣就不會有預期外的副作用了，因為依賴的物件並沒有被封裝在 QueryBuilder 裡面，當我們提供一個 setter 方法給依賴類別，使用時就能透過該方法來置換依賴物件，但要小心如果修改了依賴類別的狀態，很容易就會破壞了封裝原則。</p>
<p>關於 Setter 注入的準則：對於一個物件來說，使用 Setter 方法來注入的依賴類別不是必須的，這些依賴不應該取代外部物件的功能，而應該是直接沿用。</p>
<h3 id="依賴注入容器"><a href="#依賴注入容器" class="headerlink" title="依賴注入容器"></a>依賴注入容器</h3><p>現在你可能會有一個疑問：我們該在哪裡建立所有的依賴？很顯然我們應該透過參數的方式傳入，但在那之前我們需要先建立他們，如果只是像下面這樣宣告 Logger 是沒有太大改善的：</p>
<p>$queryBuilder-&gt;query( $sql, $params, new Logger() );</p>
<p>如果是在方法裡面來建立依賴，這樣又會遇到一樣的問題。我們需要一個地方來存所有的依賴。我們應該不用每次都還要重複宣告依賴類別，只要多一個 new 就會多一個潛在問題，因此這就是依賴注入容器登場的時候了。</p>
<p>我們知道一個類別不應該靠它自己來設定依賴，而是用注入的方式來處理，但如果這些依賴本身也有自己的依賴，我們應該透過建構式來傳入這些依賴，所以我們要在哪裡建立這些依賴？如果在每次需要他們時才建立一次感覺怪怪的，而且要管理這些依賴會變得很棘手。</p>
<p>在上述範例 Delivery 類別中，我們有一個在建構式宣告的依賴 HttpClient，HttpClient 本身帶有一個網址參數，必須在宣告實體時帶入，所以當每次我們需要 Delivery 物件的時候，都要寫成這樣：</p>
<p>$httpClient = new HttpClient( ‘<a href="https://api-url.com&/#39;">https://api-url.com&#39;</a> );<br>$delivery = new Delivery( $httpClient );</p>
<p>現在看起來已經有點複雜了，如果我們想把 HttpClient 的回應寫進 Log 裡面，會再需要一個 Logger 物件，而它也要用注入的方式處理，結果會變成這樣：</p>
<p>$logger = new Logger();<br>$httpClient = new HttpClient( ‘<a href="https://api-url.com&/#39;">https://api-url.com&#39;</a> );<br>$delivery = new Delivery( $httpClient, $logger$ );</p>
<p>程式變得越來越複雜而且醜醜的，依賴注入容器的核心概念是把建立依賴的邏輯隱藏起來，只要寫過一次之後就能直接使用，當我們需要依賴的時候，我們跟該容器做請求，剩下的細節就靠這個容器幫我們完成：</p>
<p>final class Container {<br>    public function makeDelivery(): Delivery {<br>        $logger = new Logger();<br>        $httpClient = new HttpClient( ‘<a href="https://api-url.com&/#39;">https://api-url.com&#39;</a> );<br>        return new Delivery( $httpClient, $logger$ )<br>    }<br>}</p>
<p>// 實作<br>$container = new Container();<br>$delivery = $container-&gt;makeDelivery();</p>
<p>上面的範例很簡單，主要的用意是隔離依賴類別實例化的邏輯，所以如果依賴有所變動的話，只要修改這個容器就好，而在實作時我們也不用擔心 Delivery 該如何設定、要引入哪些依賴，只要呼叫容器即可。</p>
<p>當然，除非是為了學習，你不用寫自己的依賴容器，有許多現成的套件可以使用：</p>
<ul>
<li>  <a href="https://php-di.org/">PHP-DI</a></li>
<li>  <a href="https://github.com/silexphp/Pimple">Pimple</a></li>
<li>  <a href="https://symfony.com/doc/current/components/dependency_injection.html">Symfony THe Dependency Injection Component</a></li>
</ul>
<p>挑你喜歡的即可，大部分這一類的工具都是使用 <a href="https://www.php.net/manual/en/class.reflection.php">PHP Reflection API</a>，能大大的減少自己開始的時間並運用套件提供的功能更有效率的管理依賴。</p>
<h3 id="依賴注入要注意的地方"><a href="#依賴注入要注意的地方" class="headerlink" title="依賴注入要注意的地方"></a>依賴注入要注意的地方</h3><p>透過上述的說明我們已經了解依賴注入的使用方法，現在該是來看看在什麼時機下不適合用它：</p>
<h4 id="太多依賴"><a href="#太多依賴" class="headerlink" title="太多依賴"></a>太多依賴</h4><p>當一個類別在建構式中有很多的依賴，這就是第一個警示告訴我們這個類別管太多了（違反單一職責原則）</p>
<p>final class OrderController {<br>    public function __construct(<br>        OrderRepository $ordersRepo,<br>        PaymentGateway $payments,<br>        ShippingService $shipping,<br>        Logger $logger,<br>        Email $mailer<br>    ){<br>        $this-&gt;ordersRepo = $ordersRepo;<br>        $this-&gt;paymentGateways = $payments;<br>        $this-&gt;shipping = $shipping;<br>        $this-&gt;logger = $logger;<br>        $this-&gt;mail = $mail;<br>    }<br>}</p>
<p>首先，檢查建構式裡面的依賴項目，也許有些並非是必要的依賴，可以透過 Setter 方法來傳入。舉例來說，在處理 payment 的時候，正常情況下不會管到 shipping 的業務，另外一個做法是用一個 Container 傳到建構式裡面，然後再來處理這些依賴：</p>
<p>final class OrderController {<br>    public function __construct( Container $container ){<br>        $this-&gt;ordersRepo = $container-&gt;get( ‘ordersRepo’);<br>        $this-&gt;paymentGateways = $container-&gt;get( ‘paymentGateways’);<br>        $this-&gt;shipping = $container-&gt;get( ‘shipping’);<br>        $this-&gt;logger = $container-&gt;get( ‘logger’);<br>        $this-&gt;mail = $container-&gt;get( ‘mail’);<br>    }<br>}</p>
<p>但這樣的作法違反了 Server Locator 設計模式，透過一個 Container 來隱藏所有依賴的資訊，如果想要測試這個類別，就必須要檢查所有的依賴，還需要給這些依賴提供測試資料，同時我們也無法確認這些依賴是否有在 Container 裡面被正確註冊。</p>
<p>在這樣的情況下，就失去了依賴注入的優點，物件本身不應該要去關心 Container 的實作細節。</p>
<p><strong>待續</strong></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>自由接案也是一種職涯選擇</title>
    <url>/tw/wordpress-freelance-choice/</url>
    <content><![CDATA[<p>事實上，在 11 年的職涯中，我上過 8 年的班，也就是說這 8 年我都是過著白天上班晚上趕案子的生活。每一個時期我都給自己不同的接案理由：</p>
<p>剛出社會我就知道自己想從事網頁設計的工作，但自己非本科系出身又沒有相關經歷，當年市場上很少有公司願意聘請這樣的素人，只好白天在書店打工晚上去接案網找案子做，小案件的發包者不太在意接案者的經歷，只要能讓他們相信他們的需求我能做得出來就好，所以第一個想接案的理由是因為找不到工作。</p>
<span id="more"></span>

<p>第二個我會去接案的原因是想增加經驗，畢竟當公司的基層員工很難得到主導專案的機會，但去客戶公司做簡報的時候，自己扮演的不只是一顆螺絲釘，而是對客戶來說專案成敗的要角，這帶給我很大的成就感，覺得自己是被需要的，所以第二個接案的理由是想滿足自我虛榮感。</p>
<p>第三個動機是想多賺點錢，當年開始上班後除了有學貸要還、有房租要繳、有目標要存，每個案子不管大小 ( 通常是小 )，三五千塊什麼亂七八糟的案子都接，加減補一下很難調漲的死薪水，所以第三個接案的理由是想賺外快。</p>
<p>如果你是因為上述的其中一個原因而想要開始下班兼職接案，我可以斬釘截鐵的跟你說：「千萬不要！！！」。如果我可以回到十年前看到開始第一次接案的自己，我會先把他的電腦摔爛然後賞他兩巴掌，告訴他這樣盲目的接案好像多少可以學到一些東西，但是必須付出的代價太大了，沒有必要也不值得。</p>
<p>為了求一個機會而去接案，往往只能接到低價而且很難收尾的案子，只求機會不求報酬會被客戶凹個半死，客戶器重你只是因為便宜又好用；只求報酬不求機會，沒有具體展現出解決問題的能力的話根本接不到半個案子，真正高報酬的案子不是給我這種晚上兼差的半調子，不管是哪一種，只是要是基於上述的原因投入接案，一定會進入某種惡性循環：案子金額低 &gt; 被客戶凹 &gt; 結不了案 &gt; 賺不到錢 &gt; 沒有自信 &gt; 為了生存再去低價搶案 &gt; 案子金額低。</p>
<p>白天在上班晚上就是投資自己，不管是加強專業技能還是打電動都好，兼職接案是一種看似利多實則處處充滿陷阱的大坑：素人找不到工作機會就是想盡辦法用各種方式繼續找，抱持著找不到就沒飯吃的動力來逼自己解決這個問題，像是把自己非技術專業的人格特質展現出來，或是懇請親朋好友介紹，現在線上線下的技術社群很多，走出去看看求職市場需要的是什麼樣的人才。</p>
<p>其次，如果在公司無法擔任要角來歷練自己就去跟主管自薦，表明自己希望接下公司重要專案，如果得不到就代表能力不足，需要再去提升自己，如果是一家沒辦法歷練自己的公司就把履歷開起來，久而久之當處在能歷練自己的公司且有能力承擔更多職責時，薪水自然就會來，這也是為什麼這三個原因都不是好的接案動機。</p>
<p>如果真的這麼想接案，一定要全職投入才有成功的機會，這時候的關鍵就是：你的成功定義是什麼？先定義出對自己來說怎麼樣的工作型態才是最理想、最符合自己性格的。我一開始也不太不清楚這個定義是什麼，只知道自己不喜歡通勤，對於公司職責分配的方式覺得不合理，以及一層又一層的組織結構，有很多好的想法無法快速推動，或是公司的某些決策讓自己覺得好像哪裡怪怪卻又說不出來…</p>
<p>反正有在上班的朋友都知道，每天都有一堆人在江湖身不由己的苦差事，也許換間公司情況會不一樣，現在國內採取扁平化組織、敏捷開發的優秀軟體公司越來越多，更不用說還有越來越盛行的遠距工作，只要努力找一定能找得到適合自己的公司。而我面對這些問題的解決方式，就是開始寫下我自己認為最理想的工作條件：</p>
<ol>
<li>可以在任何地點、任何時間工作</li>
<li>能發揮自己所學，持續學習新東西並能實際應用</li>
<li>能對社會上的其他人產生影響力</li>
<li>能透過自己的專業幫助到別人</li>
</ol>
<p>這四點是我選擇成為全職接案者的理由，透過設計自己的工作方法，安排每天的時間該如何運用，不用再受到公司的規範與約束以及有形或無形的人際壓力，早上吃完早餐後走到書桌前就到公司了，要幾點吃午餐、午覺睡多久、下午想耍廢去放風，全部都自己決定，這就是傳說中的「自由工作者」。</p>
<p>上面這一切聽起來似乎很美好？並沒有，當接不到案子沒有收入時這一切就會崩壞了，因此下一篇我們來聊聊案源該從何而來，以及如何篩選出最適合自己的客戶。</p>
<blockquote>
<p>如果無從想像自己的理想工作長什麼樣子，從每天跟朋友家人在抱怨的工作鳥事開始反思，想想怎麼做會更好，這個思考的結果就是自己心目中的理想工作了～</p>
</blockquote>
]]></content>
      <categories>
        <category>接案</category>
      </categories>
      <tags>
        <tag>商業模式</tag>
        <tag>職涯發展</tag>
      </tags>
  </entry>
  <entry>
    <title>接案網不是拿來接案的</title>
    <url>/tw/wordpress-freelance-clients/</url>
    <content><![CDATA[<p>我以前最常用的接案網叫做愛蘇活，當年不像現在有這麼多免費的接案社團，大部分都是要付年費才能取得發案者的聯絡資訊，我每天都會去瀏覽案件，一有網頁相關的案子我就會寫信去應徵，然而這種亂槍打鳥的找案子方式很快就遇到了瓶頸，因為案件看過去都是那幾個，而且競爭者超多，尤其不乏低價接案者。</p>
<p>接案網案件看似很多，但真的每個案件都是適合自己的嗎？以前的我會告訴自己，有人給我工作做還挑什麼，尤其在缺案子的時候更會洗腦自己接下擺明就是爛攤子的案件，當時我的接案的動機是希望能靠自己的力量活下去，在沒飯吃的情況下，根本無法管到什麼理想。</p>
<span id="more"></span>

<p>就如同上一篇文章提到的，只是想靠接案糊口很容易迷失自我，並且陷入惡性循環中。花了十年的時間我才知道自己選擇接案職涯是因為想創造理想的工作環境，如果案件的修改永無止境、客戶照三餐追殺進度，這樣離理想的生活只會越來越遠。</p>
<p>因此我會告訴十年前的自己，先不要急著找案源，而是思考自己在接案市場的優勢是什麼，哪些案子不要碰，哪些是要積極去爭取的。這件事說起來容易，但要能找到自我定位需要花很多很多時間來摸索，有時候以為自己找到了，卻可能是曇花一現，或是會有很長一段時間在迷惘，完全不知道自己幹嘛，這些都是很正常的。</p>
<p>像我最早想從事的是網頁設計，但被客戶改稿改到懷疑人生，而後逐漸轉變為不是 0 就是 1 的程式開發，在認識了 WordPress 之後變成偽全端工程師，我知道很多不會寫程式的人會用 WordPress 架站，所以就一定會有需要程式設計師解決問題的時候，再加上科班工程師都不太喜歡改這種現成的架站工具，這讓半路出家的我有了切入點。</p>
<p>某些客製化的修改對程式設計師來說可能沒有什麼，但對一般客戶來說一段 display: none 就能解決他們困擾已久的問題，這就是價值所在，知道自己的技術能對哪一類客戶產生價值是確保案源穩固的關鍵。</p>
<p>有了這層認知以後，我們就能去接案平台或社團做潛在客戶的資料蒐集，觀察發包案件背後發包者的屬性、他們需要被解決的問題什麼，這樣我們就能針對客戶類型來設計作品集，進而讓潛在客戶可以主動找上我們，當客戶是自己找上門時，就能建立信任感，有這樣的信任感就能擺脫初期的競爭者，從茫茫的接案者中脫穎而出。</p>
<p>行業百百種，但會發包網站建置案件的業主不外乎以下三種：</p>
<h3 id="中小企業"><a href="#中小企業" class="headerlink" title="中小企業"></a>中小企業</h3><p>通常中小企業不會有專門負責網站營運或開發的部分，公司可能會有資訊部，但主要都是管理硬體設備，職責並未包含需要寫程式的開發工作，這種專案通常是老闆意識到網站年久失修需要改版，因此需要外部的團隊來進行協助建置。</p>
<h3 id="接案單位"><a href="#接案單位" class="headerlink" title="接案單位"></a>接案單位</h3><p>這類型通常指的是專門承接案件的設計公司、公關公司或是行銷公司，因為他們的本業並非網站建置，而是剛好遇到客戶有需求不得不一併提供這方面的服務，雖然現在有不少的數位行銷公司，但沒聘請專職的程式設計師也不在少數。</p>
<h3 id="創業者"><a href="#創業者" class="headerlink" title="創業者"></a>創業者</h3><p>這類通常是準備自行創業的創業家，已經籌備許久準備要把他們腦海中的想法付諸實現，尤其是以網路平台為主題的創業，他們可能缺少技術力，但有的是商業模式以及能夠做資源整合的能力。</p>
<p>這三種類型的案件我都接過，雖然最終目的都是要架站，但是他們對於接案者的期待都不太ㄧ樣。對中小企業來說，他們會挹注資源在這個專案上，因此專案金額相對較高，而且是全公司各部會都要參與的專案，所以密集頻繁的會議必定不會少，聯繫窗口的溝通與整合能力是案件能否順利進行的關鍵，運氣好的話可以直接跟老闆做需求訪談，但萬一無法接洽到最高層級，然後窗口沒有把高層的想法精準傳達給執行者，這案子就會進入一種無法推展的彌留狀態，導致專案時間就會拉長，時間拉長就沒利潤甚至還要賠本耗下去。</p>
<p>其次，接案單位的案子由於是二包，有些甚至是好幾包，這樣的情況下無法直接得知客戶需求，只能透過大包轉述，因此會有做完的東西被全部翻盤的可能性，或是上游的溝通有落差，導致下游的執行者疲於奔命，另外還會有急件的狀況，製作時間短但好處是付錢快，跟接案單位合作會議可能會少一些，而且取得信任後能長久配合確保案源。</p>
<p>第三種創業家是變數最多但也是我覺得最有潛力的客戶，可能有預算也可能沒預算，唯一能確定的是要修改的項目可能會比前兩種類型都來得多，因為決策時時刻刻都在變化，創業的過程是瞬息萬變的，這類案件的優勢在於能跟客戶建立深層的信賴關係，未來有任何網站修改的需求客戶第一個想到的就是你，你不用再跟別人比價、提案，這種深度的合作關係對於接案者來說是不可多得的機會。</p>
<p>以上簡單介紹在接案市場上常見的發案者類型，思考自己可能是適合哪種類型的案子，下一篇我們來說明如何針對這三種業主來設計自己的作品集，我們的目標是可以讓客戶自己找上門來，進而從接案網的紅海中跳脫出來。</p>
<blockquote>
<p>想起自己以前曾經把服務項目印成實體傳單，然後走進商辦一間一間按門鈴發 DM…</p>
</blockquote>
]]></content>
      <categories>
        <category>接案</category>
      </categories>
  </entry>
  <entry>
    <title>接案者的作品集</title>
    <url>/tw/wordpress-freelance-portfolio/</url>
    <content><![CDATA[<p>身為剛入行的接案者最困擾的莫過於沒有足夠的作品可以展示，我嘗試過為了吸引業主的目光，做了很多針對特定產業的展示網站當做樣板，我去日本的網頁設計靈感網站擷取合適的案例，放上客戶 LOGO 與產品做成示意圖來讓客戶想像他們的下一個網站會長什麼樣子，我花了很多時間挑選素材、寫假文案、做合成圖，讓它看起來就像是真的成品一樣，但實際運作後發現沒什麼鳥毛用。</p>
<p>後來我才明白，我自以為客戶想要的是一個精美的網站，所以作品集以視覺為主的呈現方式來吸引客戶，但事實上客戶需要一個網站是因為要達成某種目的，一個網站如果不能幫助企業完成目標，再漂亮也是沒有意義的。</p>
<span id="more"></span>

<p>了解客戶的出發點後，我開始學習網站企劃、數位行銷、搜尋引擎最佳化、網站分析等等的相關知識，以協助客戶設計出真正對企業有幫助的網站為目標，並將學習心得重點整理在作品集中，才逐漸得到來信詢問，而對於工程師接案來說，了解這些知識會有助於與客戶進行溝通，進而理解為何他們想要這樣設計。</p>
<p>如果要以中小企業為接案主要目標，以下三個要素是我認為在作品集中要包含的：</p>
<ol>
<li><p>作品集以公司品牌或是工作室的角度來設計會比個人部落格來得好，由於客戶對於架站並不熟悉，如果不是熟人介紹的，判斷合作對象是否值得信賴的標準都會先看公司規模，如果合作對象是個人的話對雙方來說風險都高，公司對公司才有法律約束力，所以最好可以把作品集塑造成專門在承接開發公司的專業感。</p>
</li>
<li><p>作品集的重點在於具體描述曾經解決過什麼問題、用什麼方法解決、以及後續的成效，成效如果有數字最好，沒有也沒關係，用文字描述即可，重點是絕對不要造假，這個業界很小的，萬一被踢爆以後就很難混了。</p>
</li>
<li><p>作品集清楚說明能夠承接的案件內容，並且透明化合作流程，以及站在客戶的角度整理合作接案的常見問題，進而增加信任度以獲得潛在客戶的來信。</p>
</li>
</ol>
<p>然而在我過去的經驗中，會接觸到這一類客戶多半還是在上班的親朋好友或是前同事的轉介，然後當第一個專案完成後獲得客戶的信任時，也能再得到他們的的引薦，因此作品集扮演的角色就是讓已經認識你的人知道你會做什麼。</p>
<p>如果想要靠網站建置相關的關鍵字在搜尋引擎上被陌生客戶找到，簡直比登天還難，你不可能打得過專門接案的資訊公司或是網頁設計公司，他們除了有長年經營的文章內容，還有固定預算買關鍵字廣告。</p>
<p>我不推薦剛入行的程式接案朋友去接這一類的案子，因為這樣的案件寫程式碼只是其中一環，還需要花大量的時間跟客戶開會溝通、確認需求、整理文件，如果因為案件金額高而想去接，最好還是可以跟夥伴一起合作，請他負責專案管理的職務，讓自己可以專心開發。</p>
<p>至於哪一類型的案子才有可能被潛在客戶找到呢？接案單位或是創業家的類型我覺得才是身為個人接案者的主要目標，我歸納出以下作品集的整理重點：</p>
<ol>
<li><p>個人部落格會比形象網站好，原因是這類案件初始預算相對於中小企業來說可能會比較低，找獨立開發者可以降低製作成本，所以作品集越個人化越好，部落格是很好的形式，對搜尋引擎來說也很友善。</p>
</li>
<li><p>作品集可以著重在專業技術層面的應用，不同於中小企業，這類客戶他們懂一點技術，但又不是完全理解，如果表現出你能實際使用這個技術來解決現實中的某個問題，對於他們來說會非常有價值，他們可以拿去跟客戶銷售，變成公司的競爭力。</p>
</li>
<li><p>勤更新履歷，不管是正在執行中的專案、最近在研究的技術、正在看的書或是任何值得一提的事蹟，讓人感受到這個作品集是活的，並且持續學習新東西分享出來，同時也盡可能表達你對業界當下熱門議題的看法，可以吸引到有相同想法的客戶認識你。</p>
</li>
<li><p>去接案網蒐集自己相關案件的關鍵字，觀察發案者都用哪些詞描述他們的需求或問題，然後在作品集中有計畫的安排這些關鍵字，或是直接針對客戶的問題提出你的技術解決方案，就有很大的機會被搜尋到。</p>
</li>
</ol>
<p>作品集準備好了之後，就是找機會多曝光，像是去社團分享自己的寫的文章，或是在相關議題的下方留言分享你的看法，接下來就是等待機會的降臨了，但，要如何分辨好不容易等到的究竟真的是機會還是屎坑，下一篇我會來分享如何判斷一個案子是否值得承接。</p>
]]></content>
      <categories>
        <category>接案</category>
      </categories>
  </entry>
  <entry>
    <title>找出適合自己的案子</title>
    <url>/tw/wordpress-freelance-survey/</url>
    <content><![CDATA[<p>當花了很多時間整理經營作品集後，得到主動來信詢問真的會非常感動，可以感受到自己是被社會所需要的，在肯定完自己的努力後，我們就要靜下心來評估這個案件是否該去承接，通常我會有以下幾個步驟：</p>
<h3 id="1-確認自我目標"><a href="#1-確認自我目標" class="headerlink" title="1. 確認自我目標"></a>1. 確認自我目標</h3><p>我在我工作的書桌牆上貼著一張接案事業的成長飛輪計畫圖，這張圖是我的指南針，問自己當下所做的每個決策，是否能達成正向的循環，以避免讓自己深陷在看似利多卻無法脫身的泥沼中。舉例來說，我現在只專注在承接 WordPress 外掛開發的案件，除了要做的事情相對單純外，同行的競爭者也較少，而且通常會找上我的客戶都已經是 WordPress 的老手，我不用再費心去做 WordPress 101 教學。</p>
<span id="more"></span>

<p>早期我會接那種從無到有架設網站的案子，也曾經跟朋友合作接案並負責程式開發的部分，在多次的摸索與嘗試後，就能逐漸發現哪類的案子有市場、有需求、有利潤，而且還是自己做得到的，每一個案件完成後都能讓自己的作品集多了同類型的專案，因此又能吸引到同一類的客戶上門詢問，透過這樣正向的循環累積，案源問題就不用再擔心了。</p>
<h3 id="2-調查客戶資訊"><a href="#2-調查客戶資訊" class="headerlink" title="2. 調查客戶資訊"></a>2. 調查客戶資訊</h3><p>先調查看看來信者的背景，公司行號通常都會有簽名檔，或是公司信箱也能查到資訊，看看公司是做什麼產業的、公司規模、資本額，最重要是的有沒有負面新聞，曾經遇過一位客戶想找我合作，當我把負責人的名字丟進 Google 查，發現到有一篇文章寫這位負責人與文章作者曾經發生過一些糾紛，因為我滿想接這位客戶的案子但又害怕是雷，於是我就想與其自己在這邊猜疑不如直接問當事人，最後雖然得知事件的全貌，但最後我還是放棄這個案子，原因是我有其他更好的案件選擇，這些年下來我告訴自己，當我猶豫的時候不要碰就對了。</p>
<p>學會放下已經談了一陣子的案子真的非常困難，但如果學不會的話社會大學就會一直給你機會讓你學到不要不要的，直到有切身之痛時才能真正明白這個道理。</p>
<h3 id="3-觀察客戶對專案的理解程度"><a href="#3-觀察客戶對專案的理解程度" class="headerlink" title="3. 觀察客戶對專案的理解程度"></a>3. 觀察客戶對專案的理解程度</h3><p>很常遇到一種來信，整封信就只有兩句話：「我方有網站需求，請報價。」或是會附上一個參考網站連結，然後說：「我們想做一個跟 XXX 一樣的網站，請報價。」這種來討報價單的基本上我一律跳過，雖然有可能是因為發案者在專案初期階段需要得知製作價格來規劃預算，但這種直接被討價的來信感覺還是很不舒服。</p>
<p>我以前都會乖乖的跟他們回信詢問案件的執行細節，不想放過任何一個可以接案的機會，但有不少次談到後來他們就說專案還在草擬中，或是計畫被暫時終止，從此之後我就不想再花時間回這種信了，如果客戶的來信很籠統，沒有任何執行細節與計畫，就不要浪費時間在他們身上，等時間到了他們自然會再回來。</p>
<p>如果通過上面的初步評估又是自己沒開發過想要挑戰的功能，我就會試著回信詢問一些問題並邀約線上會議，拜疫情所賜，許多業主都很習慣線上會議了，這可以省下許多舟車勞頓的時間，透過會議，我能再進一步確認這位客戶的處事風格、說話方式是否與我合得來。</p>
<p>曾經開過一場線上會議，對方邊走路邊跟我開，背景的噪音吵到不行，他的講話速度超快，感覺就是一個急性子。他說他們今天就要決定外包廠商，時間很趕，請我今天下班前就要出報價單，我回說還沒得知需求我沒有辦法評估，他說就是一個簡單的會員系統、簡單的購物功能、簡單的商品管理，於是我就回說單是會員系統來說，就有 A 要做，另外 B 也是通常會有的，有 B 的話也要考慮 C 跟 D 的問題，這些都會影響報價。</p>
<p>講到最後他就說這些都不重要，只需要一個價格就好，我說沒辦法，結果就被掛了電話，當下雖然氣到發抖，但很慶幸我只花了三十分鐘能避免未來三個月的痛苦時光，因此開一場線上會議還是很划算的。</p>
<p>接到不對的案子會嚴重威脅到生活，因為有合約的關係，不可能說不做就不做，再加上還有自己的名聲，硬著頭皮也必須要撐到結案，所以如果可以在開案前就能辨識出不能碰的案子，絕對是接案順利的關鍵，通常不對的案子會有以下幾個怪味道：</p>
<h3 id="1-急著要上線"><a href="#1-急著要上線" class="headerlink" title="1. 急著要上線"></a>1. 急著要上線</h3><p>明明要做的東西很多卻無法有足夠的專案時間來執行，因此在開案前要先爭取到足夠的開發時間以及預留一些緩衝，但這種案子多半都是先前出了很多問題才會在最後關頭要趕緊收尾上線，除非是像活動頁內容不多需要在活動前完成的案子，不然絕對不要碰。</p>
<h3 id="2-需求反覆不定"><a href="#2-需求反覆不定" class="headerlink" title="2. 需求反覆不定"></a>2. 需求反覆不定</h3><p>報價單出去後被改了又改，原先報的項目不夠說要追加，或是原本的 A 項目主管決定不做了，改作 B 項目，我還遇過不少要出多份報價單讓他們老闆選菜單的。</p>
<h3 id="3-大砍報價金額"><a href="#3-大砍報價金額" class="headerlink" title="3. 大砍報價金額"></a>3. 大砍報價金額</h3><p>不管是對半砍，還是直接開令人傻眼的金額，這種會凹的客戶合作起來也不會愉快到哪裡去了。</p>
<h3 id="4-合約大改"><a href="#4-合約大改" class="headerlink" title="4. 合約大改"></a>4. 合約大改</h3><p>客戶的法務要求把專案逾期的甲方責任歸屬罰則全部刪掉，只留下乙方的罰則以及對自己有利的條文，窗口說不可能會用到這些罰則，事後證明還真的會用到，所以遇到那些怕罰則的公司一定要躲遠遠的，他們鐵定是慣犯。</p>
<p>如果是一開始就談得不愉快的客戶，當然就很好辨識，麻煩的是那種很會跟你搏感情、裝麻吉的窗口，讓你一步一步不自覺得心甘情願接他們的案子，所以上面這些判斷步驟與怪味道就是評估的依據，還是那句老話：案子寧缺勿濫，接下去賠掉的是人生。</p>
<p>在通過以上的種種評估後，我們決定要承接這個案子了，接下來就是最關鍵的報價，下一篇會分享該如何進行報價，以及重新探討關於結案這件事。</p>
]]></content>
      <categories>
        <category>接案</category>
      </categories>
  </entry>
  <entry>
    <title>程式設計報價 (ㄧ）- 報價單的 Bug</title>
    <url>/tw/wordpress-freelance-quotation-1/</url>
    <content><![CDATA[<p>老實說，在自己還沒轉型以前，我最討厭的部分就是接洽新專案這個環節，從詢問來信開始，初步了解需求，然後碰面洽談提案 ( 當時線上會議還不流行 )，整理會議記錄、網站規格、報價單、合約書，寄給客戶之後開始針對報價單的內容逐一刪減，被砍價是理所當然，而議價是我覺得最難受的過程，彷彿在說我這個人不值這個價，雖然理智上知道這是商業談判的一環，但心理上很容易就會跟自己過不去。</p>
<p>接下來就是合約書，要提交給客戶的法務審查，審完後提出修改，當然修改條件我也要看過，於是中間又是一連串的來回，最後，真正開案大概是第一次會面之後的三個月了，而這三個月所花費的時間還沒有產生任何一毛的收入。</p>
<span id="more"></span>

<p>以往我的報價方式是用我每月的生活成本來計算，一般來說如果是要架設企業官網的話，我會從企劃、設計到程式開發等工作項目估算開發時間，假設我一個月的目標是要賺 10 萬塊，而過去的經驗這類案子我估計兩個月可以做完，那我總價就會報 20 萬元，如果沒在兩個月內做完，我就開始賠本了。</p>
<p>然後報價單裡面列了一些很空洞的項目，像是 WordPress 安裝、資料庫建置、環境配置、前後端程式開發、API 串接等等，不能寫得太具體是因為根本就還不知道實際開發會遇到哪些問題，只能就過去的經驗把基本的開發流程列入，而列這些基本的項目也是擔心報價單被拆解，被拆解就無法報到我期望的金額，所以報價單都是列一些基本不能砍的項目，再加上客戶特別在意的功能所組成的。</p>
<p>接下來我會想盡辦法用各種文件以及約定結案日期來讓專案可以在兩個月內完成，像是每週固定會議、追客戶資料、整理修改需求單、驗收確認表，同時還要處理設計、開發，但做這麼多行政作業的結果，真的能在設下的時間點內結掉的專案少之又少。</p>
<p>所以每當下一次專案開始的時候，又會給自己增加更多規定來確保案件能如期執行，然後樂觀地期待著這次應該沒問題了吧！當重複失敗了 N 次以後，才開始認真重新檢視自己的工作流程，歸納出以下三點原因為何這樣的報價方式存在著 Bug：</p>
<h2 id="自己個性的使然"><a href="#自己個性的使然" class="headerlink" title="自己個性的使然"></a>自己個性的使然</h2><p>我喜愛寫程式，我願意學習各種程式開發的知識，更希望透過自己學到的東西，去幫助需要的人，同時也能讓自己有飯吃，然後透過我的專業技能去解決他們的問題並讓自己獲得成就感，這是我給自己工作成功的定義。</p>
<p>然而隨著時間經過，就會不知道被第幾版的修改需求單給澆熄了熱情，每天在做的事情就是跟客戶爭執說這些功能並非在當初的報價範圍裡面所以沒辦法做，但更多時候就是睜一眼閉一眼做給客戶，因為爭論要做不做的時間已經夠我把這功能做完了，但背後更大的原因其實是我「害怕衝突」。</p>
<p>這樣最後的結果就是一直被凹，有苦自己吞，不停的告訴自己沒關係，這些新加的東西我應該很快就能處理完，多做就是多學，這些客戶會感謝我、會介紹更多客戶給我，弄不完就加班處理，這次拼一下、撐過去就是我的了、男人就是要能忍耐，然後把自己變成只是為了要能結案收尾款的工作機器，客戶要加的需求合不合理我早就不想管了。</p>
<p>因此在當初約定的報價製作項目下，實際要執行的項目是多了好幾倍，每多開發一個功能就要多一道修改驗收的流程，還會影響到既有的已經開發完成的功能，這樣完全不可能在原本預計的時間內完成。</p>
<h2 id="客戶對於外包專案的認知"><a href="#客戶對於外包專案的認知" class="headerlink" title="客戶對於外包專案的認知"></a>客戶對於外包專案的認知</h2><p>要能把報價單裡面所有的項目準時做完除了要靠自己的努力外，剩下九成九的關鍵都是要看客戶對於這個專案的認知，對於客戶來說，通常需要發包就代表他們公司內部沒有專人可以處理這件事，所以花了錢無非就是希望可以減少人事並得到預期的結果。</p>
<p>但很多公司往往忽略了外包的溝通成本，畢竟「預期的結果」公司內部不同職位的人會有不同的看法，更不用說還要傳達給公司外部的接案者，光是一個按鈕的位置可能就可以討論好幾個禮拜，而這些討論在還沒具體執行前都是一團謎，等公司內部討論出一個結論後，可能跟原本報價單裡面的項目完全不一樣。</p>
<p>再加上負責專案的窗口往往都有自己原本的工作要做，所以等待網站需要的資料、文案、素材也會花上很長一段時間，其他像是等待確認製作方向、驗收製作項目等等，這些全都不是我可以掌控的因素，這些溝通成本都無法反應在報價單上面。</p>
<p>因此即使照著過去的同類型專案的經驗來估算案件金額，每一間公司的狀況都不一樣，遇到「特別不一樣」的公司就會後悔當初自己報太低，雖然可以追加製作預算，但中間需要「再溝通」的時間，我寧願趕快結掉去接洽新的案子，對組織龐大的公司來說追加預算不是一件容易的事。</p>
<h2 id="其他外力因素"><a href="#其他外力因素" class="headerlink" title="其他外力因素"></a>其他外力因素</h2><p>其他像是身體不適、小孩出生、家人生病、窗口離職、職務轉換、老闆出差、颱風、全球疫情等等的各種外力因素，都可能造成公司決策的改變。</p>
<p>總結以上三點因素，我得到了一個結論：「專案永遠不可能在一開始預計的結案日期結案，因為需求每天都在變」。真實世界裡有太多的變數在影響著一個專案的進行，如果報價單出去後就再也不能變動了，這對甲乙雙方都是一種雙輸的局面。</p>
<p>依照傳統合約的定義方式，只要乙方把報價單裡面的項目全部製作完成，並且收回尾款就算是結案，但所謂的「製作完成」只是乙方單方面的認知，對於甲方來說，乙方的產出到底能否符合商業與管理上的需求，這樣的認知是非常主觀的。</p>
<p>最常聽到的就是當甲方看到成品時發現某個他認知「理所當然會有」的功能結果沒有，就會很驚訝的問說：「這功能不是基本的嗎」？然後乙方就會納悶，開始解釋這功能當初沒有寫進報價單所以沒有開發，於是雙方就會進入僵持，直到某方退讓或是協調出雙方都能接受的作法。</p>
<p>雙方的目標不一致是讓結案如此困難的原因，甲方要能透過這個專案的產出來達成商業目標，而乙方是要嚴守當初報價的內容，避免無止境的修改需求或新功能讓自己或公司陷入營運的困境，但商場上每天都是瞬息萬變，昨天討論的內容可能今天就會被推翻，更不用說是在兩個月前討論的規格，怎麼可能在兩個月後完全一模一樣，所以乙方就會非常辛苦，為了要結案可能要做某些退讓，同時也要堅守底線不然案子會賠到脫褲子。</p>
<p>上述這些狀況都是我以前每天的風景，但知道原因之後，問題就解決一半了，下一篇文章我會介紹讓我接案職涯 180 度大轉變的方法，讓我現在可以每天有兩個小時創作時間與週休三日靠得就是它：「敏捷式接案」。</p>
]]></content>
      <categories>
        <category>接案</category>
      </categories>
  </entry>
  <entry>
    <title>程式設計報價 (二) - 重新定義甲乙方關係</title>
    <url>/tw/wordpress-freelance-quotation-2/</url>
    <content><![CDATA[<p>從傳統的接案甲乙方關係我們發現，因為利益的衝突，甲方也不可能得到乙方 100% 的專業協助，因為乙方要的是結案，沒有在報價單裡面的項目乙方沒有義務提供，但甲方花了錢就是希望為了獲得這些專業建議，所以造成彼此雙輸的局面。</p>
<p>所以我對於結案的認知，並非是收到尾款或是過了約定結案時間後就算結案，而是乙方可以滿足甲方的商業目標而提供持續性的專業建議，當甲方決定暫停該專案或是結束與乙方的合作關係時，這才是所謂的「結案」，當甲乙方的關係不再是短期的專案性質，而是持續性的互惠合作，這樣的接案方式我稱之為「敏捷式接案」。</p>
<span id="more"></span>

<p>敏捷式接案的核心精神是捨棄傳統的報價單、合約書，改用時薪估價、Email 約定合作細節，並透明化開發過程，像是分享時間記錄、開放版本控管權限、每週固定回報進度等等，再根據實際花費時數來計算費用，以月結的方式來減少發案方的一次性大額開銷以及維持接案方的固定現金流。</p>
<p>很多案件剛開始時甲乙雙方都不熟悉，談的時候很愉快，結果實際做起跟彼此的想像落差很大，在敏捷式接案中發生這樣的狀況也沒關係，就直接終止合作，隨時都能「結案」，不需要為了硬撐合約書上的條文而折磨彼此，更不用吵已經做的進度佔專案總金額的多少比例來退費。</p>
<p>在這樣的合作模式下，報價就再也不是固定的金額，而是在專案初期針對已經知道的部分進行開發時數預估，同時也能把需求訪談的時間估算進去，然後把總小時數乘以單位時薪，就能讓客戶大概知道要準備多少預算來執行這件事，重點是要讓客戶明白這個金額不是案件的總金額，一切都只是預估，是會有變動的。</p>
<p>如果客戶已經很明確的知道他要做的功能，那我就會把要做這個功能的每一個流程拆解成小單位來進行估時，譬如說以評估串接金流時數為例：</p>
<p>(一) 前置作業 - 2 小時</p>
<ul>
<li>金流串接相關資料交付確認 - 1h</li>
<li>開發環境與程式碼部署配置 - 1h</li>
</ul>
<p>(二) WooCommerce 設定介面開發 - 4 小時</p>
<ul>
<li>設定頁面需求確認 - 1h</li>
<li>新增金流設定欄位 - 1h</li>
<li>前台結帳頁金流選擇介面 - 2h</li>
</ul>
<p>(三) 信用卡金流串接 - 12 小時</p>
<ul>
<li>串接需求確認 - 2h</li>
<li>金流商授權驗證加密機制- 2h</li>
<li>傳送訂資料欄位處理 - 3h</li>
<li>金流商回傳資料寫入 - 3h</li>
<li>交易失敗處理 - 2h</li>
</ul>
<p>(四) 測試&amp;資料移轉 - 3 小時</p>
<ul>
<li>測試&amp;正式環境信用卡金流測試 - 2h</li>
<li>外掛程式移轉至正式機作業 - 1h</li>
</ul>
<p>這份列表的重點是我把溝通成本的時數也一併評估進去，像是客戶提供功能開發所需資料的時間、需求確認的時間、測試的時間等等，這些以往都沒辦法放進報價單裡面的項目，如果是用估算的話就能很讓客戶具體的看到做這件事情所有的預估成本，這樣比只列出空洞的大項目更能讓客戶把焦點放在要執行的具體細節上而非只是在意專案總價。</p>
<p>每個項目的估時我是參照 Scrum 的故事點所設計的，雖然 Scrum 強調的是以相對的時間單位來預估開發複雜度，但我從經驗得知用絕對單位才能讓客戶感受到實際的花費，我的時間預估有四種單位：</p>
<p>評估 1 小時的項目：通常是我十分鐘就可以解決的事，也就是完全不複雜、可以快速搞定的功能，但也不是沒有評估錯誤的時候，萬一估錯的話我就還有 50 分鐘的時間可以來把問題釐清，並且檢討自己為何會錯估的原因。</p>
<p>評估 2 小時的項目：做過類似的功能、可以在腦海中想像開發這個功能需要哪些步驟，雖然可能會有點複雜，但腦袋很清楚該如何實作出來，或是需要跟客戶一起合作討論的項目，這讓會議時間也能收費。</p>
<p>評估 3 小時的項目：需要打很多字的功能，像是上面例子中的要處理傳送給金流商的一堆欄位，以及拿到回傳資料後的處理，或是需要處理前端 UI 的部分，我都會估三個小時。</p>
<p>評估 4 小時的項目：自己從沒做過項目、腦海中無法想像會有哪些步驟、需要花時間先進行研究的功能，隨著經驗與能力的提升，需要 4 小時的項目會越來越少，大部分都能拆解成多個 2 小時的項目。</p>
<p>我的評估項目不會有超過 4 個小時以上的，如果超過 4 個小時，就代表這個項目太大了<br>，還沒有被拆解成能被執行的最小單元，把每項功能拆解足夠細的任務後，就能把所有項目的小時數進行加總乘以時薪，就可以估算出開發這個平台至少要準備多少預算，萬一超出客戶預算太多，就直接從清單中去刪減，留下真正需要的功能，或是請客戶排出優先順序，把資源用在真正重要的事情上。</p>
<p>隨著開發的經驗越來越多，寫一份評估表可以越來越快，可以省下整理報價單的寶貴時間，也能採取更彈性的作法，像是客戶希望設定每月預算，就能以不超過這個時數為前提，優先開發客戶在意的功能。</p>
<p>待預算經過客戶確認後，就能開工了。對，不用訂金、報價單、合約書，彼此合作的約定只需要透過 Email 保存即可，這時候只要在收信軟體開一個專案的資料夾，然後把關於這個案件的信件全都往裡面丟即可。</p>
<p>這樣的方式聽起來好像很夢幻但又覺得抖抖的，心裡會懷疑真的有客戶會接受這樣的合作模式嗎？沒有先拿到訂金、審過報價單、合約書，之後發生任何糾紛該如何是好？下一篇文章我會整理出這種接案模式面臨的挑戰，以及實際運作之後遇過的問題。</p>
]]></content>
      <categories>
        <category>接案</category>
      </categories>
  </entry>
  <entry>
    <title>程式設計報價 (三) - 常見問題</title>
    <url>/tw/wordpress-freelance-quotation-3/</url>
    <content><![CDATA[<p>上一篇文章中介紹的報價方法，在我這一年多來的實驗結果，碰過很多無法接受或是仍舊希望要有報價單、合約書的客戶，面對這類的狀況，我會持續溝通這樣合作的好處，進而先嘗試合作一些小案子看看，讓他們實際感受到這樣的模式對雙方都有益處，另一方面可以讓自己站在客戶角度來思考他們的問題，提供真正對他們有幫助的建議，這樣才能建立信任並保持長久的合作關係。</p>
<p>當然，任何方法用在真實世界總是會遇到很多挑戰，下面整理出一些我常被問到的問題：</p>
<h2 id="Q1-沒訂金、沒報價單、沒合約會不會沒保障？"><a href="#Q1-沒訂金、沒報價單、沒合約會不會沒保障？" class="headerlink" title="Q1. 沒訂金、沒報價單、沒合約會不會沒保障？"></a>Q1. 沒訂金、沒報價單、沒合約會不會沒保障？</h2><p>就算有訂金、報價單、合約書也常常有做到一半人不見或是因為各種理由收不回尾款的案子，所謂的保障，對雙方來說就是時間到了看得到成果並且拿得到酬勞，一堆文件作業也都是為了要確保雙方能信守承諾、當其中一方背信時有求償損失的備案而已。</p>
<span id="more"></span>

<p>對接案者來說，時薪計價最大的風險就是在於一個月的款項請不到，也就是白做工一個月，相較於以往好幾個月才能請一次款，只損失一個月的工作小時數已經是不幸中的大幸，而且只花一個月甚至幾週的時間就可以認識一間公司或一個人，不用花上好幾個月或好幾年的時間才知道，已經算是少走很多冤枉路了。</p>
<p>當然，如果要上法院，每週定期回報記錄 Email 都能拿來作為證據，但還是要衡量官司打下去的成本是否會讓自己深陷泥沼，畢竟一般有規模的公司都會有法務部門來專責處理法律糾紛，程式接案者或是小型工作室這方面就會比較吃虧。</p>
<p>對發案方來說，合作一個月的過程中就能知道對方的工作方式，像是有沒有定期回報進度、是否有固定產出，如果發現苗頭不對，不用等到一個月，可能只要幾週的時間就能知道是否要提早結清工作時數並尋找下一間合作廠商，如果有合約在，片面解約都是需要付出成本的，所以為了避免罰則，縱使知道合作對象有問題，還是必須要硬撐下去走完合約，通常最後的結果都不會太好。</p>
<h2 id="Q2-預估工作項目跟實際執行時間有落差？"><a href="#Q2-預估工作項目跟實際執行時間有落差？" class="headerlink" title="Q2. 預估工作項目跟實際執行時間有落差？"></a>Q2. 預估工作項目跟實際執行時間有落差？</h2><p>在客戶需求還沒有完成需求確認、操作流程等等的功能細節前，所有的估時都是憑著過去經驗來做預測的，就像要做一個購物網站，基本會有的功能像是購物車、結帳、金流、物流串接等等，這些都有過去的時數可以參考，但每家公司的商業情境不同，管理需求也不同，因此實際執行上一定會跟當初預估的工作項目有所落差。</p>
<p>但透過每週的定期回顧，就會慢慢釐清整個專案到底有多大，以及目前的完成進度百分比，所以重點應該是放在持續的追蹤與溝通，只要能透明化專案的資訊，客戶就不會覺得計時是黑箱作業而產生不信任感。</p>
<h2 id="Q3-開會也要計時？"><a href="#Q3-開會也要計時？" class="headerlink" title="Q3. 開會也要計時？"></a>Q3. 開會也要計時？</h2><p>一個專案最花時間的地方不是坐在電腦前面寫程式，而是釐清客戶的需求以及確認成品是否有達到客戶的商業目標，初期的需求溝通的越明確，就越能減少後期修改的時間，但要能協助沒有網站專業知識的客戶釐清需求是一門學問，而且很多時候懂得這些專業知識的客戶也會把功能變得錯綜複雜。</p>
<p>這是人之常情，在一個專案被發起時，公司內部會有許多的聲音需要整合，好的整合是可以排出優先順序，但大部分情況是所有需求都要實現，因此會產生矛盾與衝突，譬如說客服部希望在每頁的頁首可以放上明顯的客服信箱連結，以減少客服電話的量，但業務部希望放上聯絡電話，就能跟客戶進行直接銷售。</p>
<p>沒有整合好的需求就會變成 Email 跟聯絡電話同時以巨大的字級顯示在頁首，什麼都要顯眼最後就會變成什麼都不顯眼，這時候釐清客戶的需求後就能提供相對應的作法，譬如說在電腦版顯示 Email、手機版顯示電話號碼，或是採取 A/B test 來實驗怎麼放會比較好，這些都是接案者的經驗，這些經驗沒有辦法 Google 得到，因為這是根據客戶的情境所設計的。</p>
<p>問出正確的問題、提出有效的作法、幫助客戶釐清真正重要的目標，這就是開會時接案者所提供的價值，就像美劇上常看到的心理醫生諮詢一樣，開會計時才能把溝通成本具體化，進而改善溝通效率。</p>
<h2 id="Q4-為何這個工作項目要花這麼多時間？"><a href="#Q4-為何這個工作項目要花這麼多時間？" class="headerlink" title="Q4. 為何這個工作項目要花這麼多時間？"></a>Q4. 為何這個工作項目要花這麼多時間？</h2><p>有些客戶會質疑某些工作項目應該不會太複雜，花這麼多時間不太合理，這樣的情況有兩種，一種是任務沒有被正確的拆解，像是要做購物網站，購物功能只被當作是一個工作項目，購物功能包含有前台頁面的建置、商品管理、訂單管理、金物流串接、會員功能等等的細項，如果只列了一個購物功能可能就要會花費數十個小時來開發，從總小時數來看就會覺得這個單一工作項目花了太多時間。</p>
<p>另一種情況是客戶懂技術，他們以自己過去的經驗來判斷，所以會覺得某些時間的花費不合理。當然，工程師程度有高有低，做事的方式也會有所不同，這時候版本控管就是很好的溝通管道，因為程式碼的透明，客戶可以看到專案的原始碼，進而提出改善建議，也能判斷承接的工程師是否有辦法勝任這個工作。</p>
<p>所以當客戶質疑某工作項目的時數過多，根據拆解後的任務來進行討論就是很具體的作法，讓客戶可以明白每個待辦事項的目的，讓客戶知道這功能不是按下 Enter 就能搞定的，也或者是經過討論後我們會發現某些環節是不需實作的，藉此能降低整體開發時數。</p>
<h2 id="Q5-程式的保固期間該如何計算？"><a href="#Q5-程式的保固期間該如何計算？" class="headerlink" title="Q5. 程式的保固期間該如何計算？"></a>Q5. 程式的保固期間該如何計算？</h2><p>不用計算。</p>
<p>通常保固指的是當專案已經過了約定結案日期後，如果還有發生程式上的臭蟲需要被修復的維護期間，在保固期間內的 Bug 修改，接案方有責任協助處理，這時候問題就來了，到底什麼是「臭蟲」？網站開不了？功能無法正常使用？實際用起來應該這樣改比較好？</p>
<p>關於臭蟲的定義也是一個吵不完的話題，常常客戶覺得是 Bug 的地方也許是某個邏輯沒有實作，但對於接案方來說這個邏輯並沒有在當初開發時接收到客戶的需求，而且結案時不都已經驗收過了，怎麼會現在才發現有這樣的問題？或是更多時候是使用者發現的 Bug，這些都讓臭蟲的定義很難有一個客觀的標準，除非在合約書裡面列出所有關於臭蟲的定義。</p>
<p>回到保固的定義，指的是過了「約定結案日期」後的維護，以敏捷式接案的定義來看，並沒有所謂的結案日期，因此也就沒有保固這樣的概念。網站上線後有問題，持續的以時薪計價進行修改臭蟲或是根據使用者回饋進行調整，就不用為了保固範圍而犧牲能讓網站變得更好的改進措施，而接案方也能提供更多實務上的建議讓網站達成商業目標。</p>
<h2 id="Q6-時薪計價對動作快的工程師很吃虧？"><a href="#Q6-時薪計價對動作快的工程師很吃虧？" class="headerlink" title="Q6. 時薪計價對動作快的工程師很吃虧？"></a>Q6. 時薪計價對動作快的工程師很吃虧？</h2><p>很常聽到不建議接案者採用時薪報價的理由是因為動作越快能賺到的時數薪水越少，所以會很吃虧，但我的經驗是能把事情用最快的方法解決，藉此取得客戶的信任，才會有接不完的工作機會。</p>
<p>要知道，一個持續在經營的網站每天都會有各種大大小小的狀況需要排除，或是根據顧客的使用回饋進行調整，如果客戶信任你，你完全不用擔心會沒時數可以賺，反而會覺得好想趕快把功能完成讓客戶可以去拼業績，然後客戶業績因為你的協助有所提升，進而會再開更多需求來請你處理，達成一種正向循環。</p>
<h2 id="Q7-時薪計價接不到大公司的案子？"><a href="#Q7-時薪計價接不到大公司的案子？" class="headerlink" title="Q7. 時薪計價接不到大公司的案子？"></a>Q7. 時薪計價接不到大公司的案子？</h2><p>只要你有能力可以解決客戶頭痛已久的問題，那麼公司就不會在意要用什麼方式跟你合作，然而可能還是需要一些文件來完成形式，尤其是請款流程，但因為你的價值，客戶會自己想辦法去設計出一套適合這樣合作模式的流程，你就不用再花時間去處理這些行政事務，進而專注在解決客戶的問題。</p>
<h2 id="Q8-這樣接案真的賺得到錢嗎？"><a href="#Q8-這樣接案真的賺得到錢嗎？" class="headerlink" title="Q8. 這樣接案真的賺得到錢嗎？"></a>Q8. 這樣接案真的賺得到錢嗎？</h2><p>絕對賺得到。</p>
<p>以往專案的計價方式會分三期付款，頭款訂金，做到某個程度收二期款，客戶驗收完成後收尾款，更大一點的案子可能會分更多期，但除了頭款以外，剩下的款項都是要看客戶臉色，有個萬一的話，可能會長達好幾個月沒有收入，更不用說接一些二包或 N 包的政府標案，這是要等大包結案才有得拿的。</p>
<p>很多案子看似金額很高，但扣除掉實際執行的天數後，換算下來的月薪常常比上班族還要可憐，因此用時薪計價的月結方式，才能保持穩定現金流，每個月的工作有拿到酬勞事情做起來才會愉快。</p>
<p>當然，以上的說法不可能百分之百讓每一位客戶都能買單，公司有各種的行政流程與企業文化，有些還是堅持要有報價單合約書，並且採用專案方式計價，遇到這種也沒關係，就果斷的放棄這個機會吧，世界上一定還有其他的客戶值得你跟他合作，要記住，我們自己接案就是要獲得心目中理想的工作方式！</p>
<p>搞定報價後，下一篇我會介紹敏捷式接案該如何啟動專案，以及如何確認需求並且拆解成明確的執行項目。</p>
]]></content>
      <categories>
        <category>接案</category>
      </categories>
  </entry>
  <entry>
    <title>敏捷式接案實踐 (一) - 拆解需求</title>
    <url>/tw/wordpress-freelance-practice-1/</url>
    <content><![CDATA[<p>以時數評估的方式來報價，最大的好處是可以大幅減少專案從接洽到真正啟動之間的時間，這段時間越長，對於接案者現金流的風險越大，因為在等待簽約的過程中，你不知道是否該繼續談新案子，萬一談了，有可能會超出自己的工作負荷量，如果沒去談，原本正在談的案子萬一沒成交這個月就要喝西北風了。</p>
<p>有接案者為了維持現金流，只要有新案子就一律都去談，為的就是能夠先拿到案子的訂金來撐過這個月的開銷，然而手上累積一堆案子做不完，只好再外包或是開始請人，於是每個月的開銷又變得更高，只好再去接更多案子，這樣很容易讓開發品質下降。</p>
<span id="more"></span>

<p>透過時數評估方法，依照過去的經驗平均可以在一週之內決定是否要啟動專案，因為當任務被有效拆解後，對決策者來說資訊透明能更快的下決策，因此如何快速的有效拆解客戶需求以作出評估是很關鍵的一環。</p>
<p>拆解的方法首先是區分開發性質，WordPress 外掛開發的工作不外乎前台資料的 Query、後台設定頁面、取得或傳送資料給外部服務，以及資料的寫入，只要掌握這幾種性質就能知道該如何列出工作項目，像是以開發金流為例，需要把訂單資料傳送給金流商，再將金流商回傳的資料寫入資料庫，最後在結帳頁顯示對應的交易結果。不同的付款方式都會有類似的流程，所以就能根據付款方式詳列出需要開發的步驟。</p>
<p>其次，拆解的項目中應該也要包含確認完成標準與測試除錯的時間。</p>
<p>確認完成標準指的是對客戶來說這個工作怎樣算是完成，重點在於站在客戶的立場，而非自認為把程式寫完就算完成。通常我會用使用者故事 ( User Story ) 來描述客戶的需求，描述的基本公式為：身為 ( 某種使用者 )，我可以 ( 進行某種操作 )，以達到 ( 某種目標 )，再以開發金流外掛為例：</p>
<ul>
<li>身為顧客，我可以在結帳時選擇 A 金流商的信用卡付款來完成結帳</li>
<li>身為顧客，我可以在刷卡完成後看到交易結果，以確保有正確的完成付款</li>
<li>身為管理者，我可以在顧客刷卡時收到電子郵件通知，以確保交易過程正常</li>
<li>身為管理者，我可以在後台訂單管理看到顧客的刷卡方式，以作為後續管理之用</li>
</ul>
<p>當列出這些故事以後，客戶可以完整的看到他的需求的各種面向，尤其是不同使用者之間的操作行為是為了要達成什麼目標，進而思考還有沒有什麼情境是沒有被考慮到。像是顧客身份有可能會區分為已註冊或未註冊顧客、VIP 與 VVIP 顧客，或是購買不同類型的商品會對應到不同的金流結帳方式，這些可能都是客戶沒有想到的地方。</p>
<p>因此在確認完成標準的這個環節，我就會開始計時作為專案正式啟動的第一步驟，不管專案大或小，一定要請客戶確認完成標準，因為當討論下去之後，可能會發現原本評估的 A 項目不需執行，反而還多增加了 B 跟 C，這都會影響實際開發的時數。</p>
<p>例外一個必要的工作項目就是測試與除錯的時間，我會把這個時間拿來寫單元測試，或是把一些外掛的核心功能用自動化腳本定期執行，藉此來確保外掛能正常運作，但要跟客戶溝通清楚這邊的測試與除錯只限於開發中的狀況，等到開發完成上線後發生的臭蟲，會需要另外花時間處理。</p>
<p>因為使用者總是可以用我們從沒想過的方式來進行操作，或是使用的裝置以及環境問題導致了某種例外狀況，這些問題都是我們要一起與客戶學習並經歷的過程，尤其是在 WordPress 這種龐大又錯綜複雜的環境下，可能只要更新某一支外掛就能造成例外錯誤。</p>
<p>當我們花了很多時間評估時數、確認完成標準，跟客戶反覆溝通實際要執行的項目，但永遠要記住，真實世界充滿了無數的變數。</p>
<p>我遇過實際開工後，執行了三分之一時，發現到這個功能的邏輯並非我想像的這麼單純，通常 WordPress 只要找對關鍵字就能得到很多現成的答案，再來東拼西湊就能完成，但找不到解決方案就要自己設計，所以會多很多步驟。</p>
<p>如果距離該項目的剩餘可用時數不到一小時，而我預計可能需要再兩個小時，那麼就要趕緊回報客戶目前手邊遇到的困難，並且解釋需要這兩小時來做哪些項目，讓客戶理解狀況以進行評估，如果客戶不能接受，那就要思考出變通的方法或是先擱置這個項目，等之後有預算再來進行。</p>
<p>另一種情況是客戶所在的商業環境產生變化，可能昨天討論的使用者故事需要新增或修改，這時候就需要再回到確認完成驗收標準的階段，整理出使用者故事後再次拆解任務。總之，任務拆解是動態的，不是拆完後就固定在那邊了，重點是要能夠讓客戶理解做這件事需要的步驟與時間即可，隨時調整是敏捷式接案的常態。</p>
<p>把任務拆解完成之後，接下來進入實作階段，下一篇我會介紹最重要的計時工具以及看板方法。</p>
]]></content>
      <categories>
        <category>接案</category>
      </categories>
  </entry>
  <entry>
    <title>敏捷式接案實踐 (二) - 專案管理</title>
    <url>/tw/wordpress-freelance-practice-2/</url>
    <content><![CDATA[<p>當同時進行多個專案，每個專案又有上百個工作項目待執行的時候，看板方法可以非常有條理的呈現專案狀態。我喜歡使用看板是因為它可以很方便的知道接下來要執行的項目，同時又能讓客戶很直覺的了解目前正在進行的工作，透過推拉系統來更新專案狀態，比以往的甘特圖來得更靈活且彈性。</p>
<p>早期最知名的線上看板軟體莫過於 Trello，但後來發現另外一套名叫 Ora 的工具更適合我，它有許多實用的免費功能：</p>
<span id="more"></span>

<p><strong>看板範本</strong>：我可以在建立新專案時使用預先定義好的範本，省去重新建立的時間。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-freelance-practice/wordpress-freelance-practice-03.jpg"></p>
<p><strong>豐富的卡片設定</strong>：我習慣把一個大功能放在同一張卡片，在裡面我可以紀錄客戶需求、使用者故事、新增待辦清單、加入附件、留言與標籤註記，方便把所有與這功能相關的資料、討論集中在一起。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-freelance-practice/wordpress-freelance-practice-04.jpg"></p>
<p><strong>計時功能與報表</strong>：每張卡片可以設定預估完成的小時數，在執行時按下計時按鈕，就能在卡片上看到累計時間，如果超出了預估時間它會以明顯的樣式提醒，另外卡片裡的待辦清單也能個別計時，透過分析報表可以追蹤某段時間內特定專案的工作項目個別花費的時數。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-freelance-practice/wordpress-freelance-practice-05.jpg"></p>
<p><strong>行事曆檢視</strong>：除了看板顯示外，它還可以切換成行事曆模式，如果卡片有設定預計執行時間，在行事曆上面就能看到一週或是整月份的工作安排，讓自己知道目前手邊的工作量與進度。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-freelance-practice/wordpress-freelance-practice-06.jpg"></p>
<p><strong>聊天模式</strong>：當有上百個卡片、上百則留言要回覆時，使用看板會非常難找，常常一不小心就會漏掉，因此 Ora 設計了像是 Slack 的聊天頻道來讓專案成員可以快速在不同的卡片間進行切換並留言，同時還能看到既有卡片的資訊，解決了看板模式不方便檢視與回覆留言的問題。</p>
<p><strong>佛系的付費方案</strong>：Ora 可以用個人或是組織的方式加入成員，用組織的方式比較好，有些功能像是聊天模式只有組織可以用，它的收費模式是當組織成員超過三位時，才需要按成員數量付費，對於個人接案者來說非常夠用。</p>
<p>雖然 Ora 常常會有些小臭蟲，但綜合以上的好處，它已經是我作為敏捷式接案的必備管理工具，下面列出我實際在使用 Ora 管理專案的流程：</p>
<h3 id="Step1-建立組織、看板與-Github-存放庫"><a href="#Step1-建立組織、看板與-Github-存放庫" class="headerlink" title="Step1. 建立組織、看板與 Github 存放庫"></a>Step1. 建立組織、看板與 Github 存放庫</h3><p>當承接新專案時，我會先建立合作單位的組織名稱，再把專案建立於該組織下，因為同一個合作對象可能會不只一個專案，以組織來區分比較有系統。完成專案建立後，我會套用固定的看板範本，這個範本是根據自己的工作習慣而建立的流程，主要分為幾個步驟：</p>
<p><strong>衝刺工作項目</strong>：我會把案件開始前評估的工作項目加到這邊，如果之後有新增任何需求也都會直接寫在這邊，在加入卡片的同時也會把預估時數加進去，在執行時就能確保時數用量。</p>
<p>**預備 - 分析及文件製作(2)**：這裡面的項目會從衝刺工作項目拉進來，分配接下來準備要做的工作，名稱有中 (2) 代表的是 WIP（ Work In Progress ） ，意思是這個 Board 最多只能放兩個 Task，再多的話就要排隊或是插隊了。</p>
<p>**開發 - 進行中(2)**：確認要做的工作後，我就會把卡片拉到這邊，並且開始計時，同樣的後面也有 (2)，也就是如果進行中的工作超過兩張卡片，剩下的就要排隊了。</p>
<p><strong>開發 - 完成</strong>：當卡片完成後我會停止計時，由於大部分時候我都在本機開發，所以在還沒部署到測試機的項目我會先放在這邊，等到累積到一定數量或是完整的功能都完成時才會進行部署。</p>
<p><strong>測試</strong>：這邊放已經部署到測試機的完成項目，也是需要請客戶驗收的項目，確認沒問題後就可以打勾，即代表該項目製作完成，如果有問題可以透過下方的留言區進行討論，並確認花費時數，如果有需要修改的地方，那麼這張卡片就會回到預備的步驟，如果留言中有提到新的需求，再把它獨立成新的卡片並放在衝刺工作項目。</p>
<p><strong>發佈</strong>：已經完成驗收並部署到正式機的工作事項，作為歸檔的用途。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-freelance-practice/wordpress-freelance-practice-01.jpg"></p>
<p>完成看板的建置以後，我會去 Github 建立這個專案的存放庫，並且把權限分享給客戶，可以讓他看到每次更新的 Commit 以及隨時下載最新的版本，如果客戶不會操作也沒關係，Ora 可以跟 Github 連動，直接把 Commit 跟卡片做關聯，這樣就能在同一個地方看到程式碼的修改狀態。</p>
<h3 id="Step2-管理工作項目"><a href="#Step2-管理工作項目" class="headerlink" title="Step2. 管理工作項目"></a>Step2. 管理工作項目</h3><p>我以前會把每一個工作項目都建立卡片，好處是可以針對每個項目進行追蹤與討論，但後來發現卡片太多管理不易，而且很多卡片所完成的內容並非是能讓客戶驗收的，像是「傳送資料到金流商」、「接收金流商回傳資料處理」，因此我現在改為把完整可以驗收的功能放在同一張卡片之中，而完成這個功能的執行細節放在卡片的待辦清單裡面。</p>
<p>這樣當卡片移動到測試的步驟時，客戶就可以依照使用者故事來進行測試，並驗收每個環節是否運作正常，同時也能追蹤該功能所花費的總時數。</p>
<h3 id="Step3-每週回顧與月結算"><a href="#Step3-每週回顧與月結算" class="headerlink" title="Step3. 每週回顧與月結算"></a>Step3. 每週回顧與月結算</h3><p>Ora 的報表可以看當月的總花費時數，我會在每週一上午把截至上週的總工作小時數回報給客戶，並說明上週完成項目以及本週預計執行工作，最重要的是跟客戶確認目前的工作優先順序，以便根據客戶的預算與商業目標進行調整，到了月底結算日再用 Ora 報表功能匯出當月所有時數明細以供客戶備查。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-freelance-practice/wordpress-freelance-practice-02.jpg"></p>
<p>透過預估、Ora 管理與 Github 分享可以有效降低客戶對於計時模式的不安全感，搭配定期回報主動告知專案狀況更能讓客戶掌握專案進度。</p>
<p>當這樣的工作模式建立起來之後，接下來就是該重新檢視自己的工作習慣了，下一篇我會介紹接案者的時間管理，如果常被客戶追殺進度，搞得必須熬夜趕工，這樣無法擁有好的工作品質。</p>
]]></content>
      <categories>
        <category>接案</category>
        <category>專案管理</category>
        <category>看板方法</category>
      </categories>
  </entry>
  <entry>
    <title>敏捷式接案實踐( 三 ) - 時間管理</title>
    <url>/tw/wordpress-freelance-practice-3/</url>
    <content><![CDATA[<p>自從改變自己的工作模式後，現在平均的案量是每天有計時的工作時數大概是三個小時，並且同時有三位長期配合的客戶，週休三日，禮拜三強制自己排休，維持做二休一的節奏。</p>
<p><strong>「每天只做三小時卻能同時接案三位客戶!?」</strong></p>
<p>如果在我還沒轉型前有人跟我這樣說，我會覺得這人一定是在唬爛。以前我的極限是一個月兩個案子，然後每天工時至少八小時，常常做到晚上加班加到十、十二小時也是家常便飯，為了要讓專案趕在某個約定好的日期完成，就是只能一直拼命的做做做。</p>
<p>現在回過頭來看待以前的自己覺得好不可思議，每天忙得跟狗一樣卻沒什麼成就感，心情又很容易受到客戶意見的影響，尤其是做好的功能又說要改，規格一變動工時的爆增就無法避免，這篇文章就是要來跟大家分享我是如何轉型成 333 工作法。</p>
<span id="more"></span>


<h2 id="這個專案要做多久？"><a href="#這個專案要做多久？" class="headerlink" title="這個專案要做多久？"></a>這個專案要做多久？</h2><p>常遇到客戶來信說他需要一個網站，然後接下來的問題就是多少錢以及要做多久，有時候也會在 FB 的接案社團裡面的看到業主的發案文，簡略描述了案件需求後就希望徵求報價與開發時程，然後就會看到留言區蓋起私訊牆，其中還不乏說已私訊報價與製作時間。</p>
<p>我每次看到心裡都會有一個大問號：「在根本還不了解客戶需求的具體工作事項前，這個價格與時間都是怎麼評估出來的？」但事實上我知道答案，因為我以前也是這樣報價的：假設客戶要一個購物網站，根據過去專案的經驗大概需要兩個月，如果時間是兩個月，我就把我的生活成本以及想要賺的部分加好後作為報價。</p>
<p>所以接下來為了要在兩個月完成這個案子，一定要花上所有的時間把它做完，因為沒做完我就賠錢了，案子多拖一個月，就等於多賠一個月的生活費，而且最重要的是我想努力把案子結掉，所以根本沒有心思或時間再去接洽新的案子，因為只要接了另外一個案，原本的案件能執行的時間就會被壓縮。</p>
<p>所以一個月同時進行兩個案子就已經是我的極限，光是要釐清客戶需求、規劃程式架構、功能開發、測試，就讓我精疲力盡，而且這樣的時間規劃完全沒考量到客戶的商業情境，因為當功能真正實作出來之後，老闆看到後會覺得好像應該再加些什麼，老闆的老闆也會有想法，所以當做好後要再加東西總是會讓我火冒三丈，心裡總是有 OS 說為何不一開始提出來？但冒完後就還是往肚裡吞，為了結案繼續默默的修改。</p>
<p>這樣造成的結果就是每天工時拉長，兩個月內要完成的話，每一週都會有必須要完成的進度，如果稍微延遲了，加班把進度追回來是一定要的，但如果是客戶需求變動而造成工作量增加，還是要想辦法把在時程內完成。喔，對了，等待客戶回覆確認需求的時間也是算在時程內喔~</p>
<h2 id="月底一定要準時上線！"><a href="#月底一定要準時上線！" class="headerlink" title="月底一定要準時上線！"></a>月底一定要準時上線！</h2><p>現在，如果客戶希望某項專案可以在某個日期前完成我絕對不會立刻答應，我會先估算開發小時數，然後根據最近手邊工作量來確認該功能在一個工作天之內我能分配多少時間來處理，譬如說如果總工時我評估需要 10 個小時，而我現在每天可以分配兩個小時來做它，那麼至少需要五個工作天。</p>
<p>所以關鍵在「工作事項」，特別是規模稍大一點的開發專案，在初期的評估根本無法預料到底會花多久時間，因為從想法到具體實作之間還存在著大量的空白需要被填補，很多細節是客戶甚至是我都沒想到的狀況，因此在專案初期就要能訂出準確的開發時程，這基本上就只是在瞎猜，猜完後讓客戶安心而已，實作後發現時程超出預期，就必須要花更多心力爭取時間與預算。</p>
<p>因此我通常會回覆客戶說等專案進行了幾週後，再來確認是否有可能在他們希望的時間內完成，當開始執行後就會知道需要實作的細節以及可能會花比較多時間的工作項目在哪裡，進而討論這些工作項目是否要在該階段開發，如果這些項目都要完成，以小時數換算成工作天，再來估算最後完成日才是有依據的時程規劃。</p>
<p>但在實務經驗上，就我接觸過的公司來說，會嚴格遵守「預定上線時間」的客戶少之又少，大部分都是開案時講得十萬火急，然後開始執行後才發現到有許多不可控因素在影響專案時程，因此控制「工作事項」比控制「時間」來得重要。具體的說：</p>
<p><strong>把焦點放在「解決客戶關鍵問題」的工作事項上</strong>。</p>
<h2 id="今天一定要處理好，急件！"><a href="#今天一定要處理好，急件！" class="headerlink" title="今天一定要處理好，急件！"></a>今天一定要處理好，急件！</h2><p>理解客戶的期待是在於「解決問題」而非一定要把所有工作做完後，就能讓自己從被時程追殺的壓力中釋放出來，但偶爾還是會接到客戶的緊急電話說這個東西今天一定要處理好，會有這樣的狀況有兩種可能性：</p>
<p>第一種是公司有重要的商業決策需要執行，而這決策因為外在環境的變動所以來得非常臨時且突然，接到這種需求下我會把目前手上正在進行的工作事項提醒客戶，說明本週預計執行的項目是否要延後，同時評估新功能需要的工作時數，先把具體的待辦清單列出來，就可以讓客戶清楚的了解開發這功能的步驟與項目。</p>
<p>因此客戶就會開始思考如果今天就要完成的話可以先做哪些他真正需要的，或是根據工作時數來推遲下決策的時間，譬如從一天變三天，也可以評估是否需要尋找其他外包廠商進行協助。</p>
<p>第二種可能性是公司內部在忙其他專案，很多功能已經開發完成但還沒驗收，然後某天老闆想到這個專案，就開始追 PM 專案進度，而 PM 可能當下也在忙別的專案，被老闆追殺後再來追殺外包廠商，這種情況下就會出現所謂的「緊急會議」。</p>
<p>每次參與這種會議壓力都很大，因為 PM 會在會議前把累積的待測試項目一口氣測完，然後一口氣把所有問題丟出來，看起來接案者好像沒做事一樣，通常這樣的下場就是壓時間，並要求在期限內全部修改完畢。</p>
<p>遇到這種情況我會擇期再約，一來當天手上都有既定的工作要完成，二來在會議前的這段時間，透過專案管理工具來提醒 PM 該驗收的項目，並請他們提出修改需求，讓專案可以重新動起來，動起來後召開的會議就比較能聚焦在解決問題上。</p>
<h2 id="333-工作法的前提"><a href="#333-工作法的前提" class="headerlink" title="333 工作法的前提"></a>333 工作法的前提</h2><p>這半年來我嘗試了很多，發現到不是所有類型的案子都適合自己的工作方法，像是一頁式需要快速完成切版或是大型專案要配合其他人員時程的案子我就無法承接，相反的，既有網站的功能修改、新創平台或是剛起步的網站開發比較適合我，而且看到因為我的協助而讓客戶的業績蒸蒸日上可以讓我從中得到成就感。</p>
<h3 id="我的工作時間安排如下"><a href="#我的工作時間安排如下" class="headerlink" title="我的工作時間安排如下"></a>我的工作時間安排如下</h3><ol>
<li>固定時段收信，把待處理事項安排時間處理。工作時不開任何通訊軟體、社群網站，聯繫管道只有電子郵件、專案管理工具與電話聯繫。</li>
<li>切割工作時段，配合作息。開電腦時間為 09:00<del>19:00，一天兩班制，早上為 11:30</del>13:00，下午為 17:30~19:00，計時的工作時段就是專注解決待辦事項，其他零碎時間就能寫部落格、研究新技術、收發電子郵件以及上健身房運動。</li>
<li> 晚上下班後檢視本週的剩餘天數的工作安排，並把今日新收到與未完成的項目做分配，看是要安排在本週處理還是下週。</li>
<li>細分工作項目，盡力讓每件事都能被追蹤，尤其是是在同一討論串提及的需求，要隨時整理成待辦事項，否則東西一多很容易漏掉。</li>
<li>新增的每一項工作都要評估預計花費小時數，這關係到客戶的預算以及該功能有沒有辦法在預期內做出來的判斷標準，估越多才能越了解自己，越了解自己才能幫助客戶越準確的評估。</li>
</ol>
<p>雖然工作方法很明確，但有時候還是會破了戒，像是晚上加班、一天工作十小時，所以我幫自己訂了以下的原則：</p>
<ol>
<li>不要接十萬火急的案子，這是加班的元兇，解法是試想接了這樣的案子會失去些什麼</li>
<li>不要為了討好客戶隨口答應時間，這是我的老毛病，解法是仔細評估時間再回覆</li>
<li>不要開當天才通知的會議，會被殺個措手不及，解方是一律回絕當天會議，另約時間</li>
<li>需求確認後立刻寫進專案管理工具，不要等到累積很多再來整理</li>
<li>卡了超過一小時的 Bug 就不要再繼續處理了，放下它，先改做其他事或是睡一覺，大腦會自動 Debug，屢試不爽</li>
</ol>
<p>要維持這樣的工作型態，要有不害怕失去客戶的勇氣，這勇氣有些人可能是天生的，但也可以後天訓練得來的，像我就是後者，有時候下班後會不小心喵到需要修改的急件通知，或是明明是放假日，但有些功能還沒收尾，心裡都還是會很想開電腦去把它改完。</p>
<p>歸根就底，我很害怕因為客戶不滿意我的工作效率而不再與我合作，後來我告訴自己，如果客戶真的這麼在意專案進度，那麼他們應該是直接聘請工程師才能有效掌控時程，客戶選擇外包主要的目的還是在於解決問題，那麼只要在預計時間內解決，那些無法立即處理的急件就是公司本身的問題而非在我身上了。</p>
<p>最後就算真的因此失去客戶了，我反而能把時間花在創造其他收入來源的工作上，在下一篇文章中，我會介紹工程師接案的收入管理，該如何決定自己的價值，取決於你如何看待自己。</p>
]]></content>
      <categories>
        <category>接案</category>
        <category>專案管理</category>
        <category>看板方法</category>
      </categories>
  </entry>
  <entry>
    <title>敏捷式接案實踐( 四 ) - 收入管理</title>
    <url>/tw/wordpress-freelance-practice-4/</url>
    <content><![CDATA[<p>在還沒有跟夥伴一起接案、案件收入全放進自己口袋的時期，接過案件金額最高紀錄是 24 萬 8，當時是負責網站改版，從企劃、專案管理、WordPress 架設、主機維護，前前後後花了半年多的時間才把這個案子結掉。</p>
<p>這個案子當初在寫報價單的時候很興奮，因為從來沒報過這麼高金額的案子，報價項目列了一大堆，當然也免不了中間的議價，花了很多時間整理文件，這案子大概談了兩個多月才成交，算一算加上實作的六個月，整個案子總共花了八個月的時間來賺這 24 萬 8，平均下來月薪是 248,000 / 8 = 31,000，跟我剛出社會第一份穩定工作的薪水差不多。</p>
<p>在這六個月的期間內，我不敢接其他的案子，因為這案子對當時的我來說不小，除了程式開發外還要負責需求確認與專案管理，再加上網站的架構很龐大，要一次性的全部翻掉牽涉到多個單位的舊架構，做到後來，我只求能順利結案，根本不敢奢望還能有多少利潤。</p>
<span id="more"></span>

<p>而這樣的狀況也發生在其他案子身上，所以很長的一段時間我是根本存不到錢的，有時候連打平生活開銷都有難度，直到參加了一場聚會遇到了貴人，也是我第一次採用時薪接案的開始。這位貴人本身就是程式底，並且經營一間很有規模的接案公司，第一個合作案件是我從沒做過的 WooCommerce 串接。</p>
<h2 id="轉變的契機"><a href="#轉變的契機" class="headerlink" title="轉變的契機"></a>轉變的契機</h2><p>我當時完全不知道該怎麼報價，我只知道我想用時薪談，也許是自己多年寫的 WordPress 分享文得到他的信任、或者真的單純就是貴人，沒有談多久，我們就以時薪計價展開了合作。合作過程中，他教會了我時薪接案最重要的一件事：拆解需求。</p>
<p>在他還沒幫我拆解之前，這個功能我完全不知道該從何下手，但當每個大功能被拆解成一個個可執行的工作項目時，這個大功能看起來好像就沒有這麼困難了，當案件進行了快一個月時，我很擔心目前的花費時數會超出他的預算，所以我寫信問他：「我目前已經做了 N 小時，這樣會不會超出你的預算？」，我抱持著要停止計時但還是要把案子做完的心理準備，但想不到得到的回應是：「 OK 的，只要案子解決能讓大家睡得安穩最重要！」</p>
<p>這是我第一次感受到原來自己是值這個價的，多年接案的委屈讓自己不斷的貶低自己，不管是被砍價或是被凹東凹西，都會懷疑自我的價值何在，這位貴人的這句話讓我重新思考自己在市場上的定位，以及該如何找到可以認同我的價值的客戶。</p>
<p>此外，透過與貴人合作，我也建立起敏捷式接案的雛形，之後透過一個又一個的案件來逐漸完善這樣的工作模式，並且在遇到問題時改良管理方法，像是案件開始時的時數預估讓客戶可以分配預算、每週定期回報、需求拆解，以及最重要的月結請款，真的很謝謝這位貴人教了我這麼多，讓我可以從死胡同中走出來。</p>
<h2 id="時薪該怎麼訂"><a href="#時薪該怎麼訂" class="headerlink" title="時薪該怎麼訂"></a>時薪該怎麼訂</h2><p>查到不少文章在教接案如何定價，看到一種作法是根據自己過去的月薪換算成小時數，然後多加上勞健保以及其他隱藏成本來做為自己的時薪定價，萬一你從沒上過班，可能就沒辦法這樣算，再加上公司開的薪水是根據內部的人力薪資結構來計算的，接案市場考量的是解決問題的能力。</p>
<p>我的作法是先去查國外 WordPress 開發者的薪資，然後再算出自己一個月目標收入是多少，以及最重要的一個月「想」工作幾個小時，看清楚，是「想」而不是「要」做個小時。</p>
<p>舉個例子，假設我一個月想要有十萬元的收入，每天扣除掉談案子、回信、寫文章、卡關、逛 FB 的時間，我有三小時是真正有在開發產出的時數，那麼一個月扣掉假日我的基本時數就有 3 x 22 = 66 小時，那麼我的時薪只要開 100,000 / 66 = 1,515 元左右就能達標。</p>
<p>剩下的就是要想辦法每個月湊足這 66 個小時的工作時數，所以剛開始轉型後，我專注在接小案，太大的案子就跟客戶談部分需求來接，因為我的目標不再是要接一個上百萬的案子來賺上好幾個月，而是專心的把每個月的時數達標即可，案子金額越高要付出的時間成本越多，時間一拉長變數就多，變數一多就很難結案。</p>
<p>另一方像 WordPress 的案件類型，市場上有很大一部分的案源需求不是要從無到有建置一個站，而是經營中的網站陸續發生一些問題要排除，像是外掛衝突、效能問題、網站被駭的後續處理等等，或是要根據網站經營的狀況新增功能。</p>
<p>對時薪接案來說，這一類案件可以很容易讓發案方看到接案者的價值，因為要做的事情相對不多，但卻能解決客戶的痛點，相較於架設一個新的站，現在架站門檻已經是非常低了，很多人上完 WordPress 的基礎課程就能去接案賺錢了，自然而然價值要被看到相對較難。</p>
<h2 id="如何提升收入"><a href="#如何提升收入" class="headerlink" title="如何提升收入"></a>如何提升收入</h2><p>假設今天我想要減少工作小時數來做自己想做的事，但依舊還是能維持收入目標，那麼其中一種方法就是提高時薪。因為 WordPress 接案市場的特性，對願意投入的程式設計師來說，可以佔到一塊很特別的位置，當大家都是用現成外掛在架站時，懂 WordPress 又懂程式反而會讓時薪可以比一般純程式開發案件好上許多。</p>
<p>就像是就讀第一志願但全校排名墊底的同學，轉學到萬年吊車尾的學校去當第一名一樣，立刻就會得到關注，所以把自己放在對的地方是關鍵，當然還是要不停的持續學習、提升自己的開發能力，但會寫 PHP 在這個圈子基本上就已經是贏在起跑點了。</p>
<p>至於何時該調漲自己的時薪，我嘗試過的方法是在新案件的估時中漲個幾百塊來測試新客戶的接受程度，而不會去調整已經合作許久老客戶。但後來我放棄這樣的作法，因為我覺得萬一今天手上有兩個案件，一個時薪比較高，當我在做時薪比較低的案子時內心可能會有些不平衡，所以從我轉型後我從來沒有調漲過時薪，一律都是維持在剛開始的價格。</p>
<p>所以一開始就要開讓自己可以舒服的價格，雖然可能會失去某些客戶，但只要能留下願意持續合作的客戶，每個月要達成目標時數就不會太困難。</p>
<p>既然不提高時薪還有什麼方法可以增加收入呢？下一篇文章我會介紹 WordPress 程式接案者提高收入的作法！</p>
]]></content>
      <categories>
        <category>接案</category>
        <category>專案管理</category>
      </categories>
  </entry>
  <entry>
    <title>自由工作者提升收入的方法</title>
    <url>/tw/wordpress-freelance-revenue/</url>
    <content><![CDATA[<p>接案不是創業，它只是另外一種領薪水的工作方式，所以沒有辦法一夕致富，縱使今天談到了金額百萬或千萬的案子，簽完了約之後還是要把工作做完才能得到酬勞，跟直接販售商品賣出後就能有收入進帳完全不一樣，接案在成交後才是開始。</p>
<p>WordPress 最有趣的地方在於其豐富的生態圈，因為用的人非常多，所以衍伸出許多不同的商業模式，常常看到想都沒想過的服務出現，關鍵是要有實驗精神，很多獲得成功的創業家不曉得已經做過多少產品，這些沒有獲得成功的產品不是失敗，而是為未來的成功鋪路。</p>
<p>下面我以自己曾經嘗試過的收入提升方法為例，列出我認為的優缺點以及個人心得，這些方法所需要的技能不太相同，但都是以 WordPress 為核心而衍伸出來的：</p>
<span id="more"></span>


<h2 id="團隊接案"><a href="#團隊接案" class="headerlink" title="團隊接案"></a>團隊接案</h2><p>以時薪接案來說，就算不吃不喝不睡，自己一個月能工作的小時數最多就是那樣，一個人的時間畢竟是有限的，但如果是兩個或三個人以上呢？就能多出好幾倍的時間來接案。以我來說，除了剛出社會的頭幾年是自己在接案外，其他多年的時間我都是跟夥伴一起在合作，夥伴負責洽談、溝通、管理專案，而我負責程式設計。</p>
<p>這樣的好處是一個月可以同時接洽多位新客戶，我可以只專注在開發上面。要去哪裏找到這樣的夥伴呢？我有合作過的對象是前同事，因為共事很多年了，知道對方的為人與能力值得信賴，也有從客戶引薦的接案朋友，這位朋友的專長在設計，剛好需要程式開發的夥伴。</p>
<p>有夥伴一起接案，戰鬥力瞬間提升 200%，不管是一起腦力激盪該如何解決客戶需求，還是碰到不順遂時有人可以互相討拍，都是讓我能持續走下去的關鍵。</p>
<p>至於跟他人合作接案的風險，九成九都還是在合作對象的為人，不管是拿到頭款人就不見留下你與客戶收拾殘局，或是只是單方面的傳達客戶需求而從不考慮夥伴工作負荷量，遇到這種能夠離越遠越好，我很慶幸我合作過的夥伴都是佛心來的，不僅專業而且願意為彼此著想，我覺得關鍵還是要一起共事過才能知道這人說得跟做的是不是同一套。</p>
<p>當我實踐敏捷式接案的模式後，也持續在尋找能夠一起打拼的夥伴，在這樣的模式下對於任務的估時、收入的分成、工作的分配等細節，我也還在摸索如何讓這樣的方法可以被複製在其他夥伴身上，因為我深信這樣的模式可以幫助到許多因為接案而深陷困境中的朋友，同時又能提升自己的產能進而主動去接洽更多案件。</p>
<p>我設想的情境是每一位夥伴都有獨自完成專案開發的能力，而所有夥伴的工作項目都已經被有效拆解在一個大池子裡面，如果今天我手邊有空檔，可以去領其中一位夥伴的工作項目來做，然後領到時薪分成。</p>
<p>如果我手邊的工作項目滿到多出來，夥伴也可以領去執行，這樣我們大家就能在想多賺點錢時不會沒工作做，或是想休息時候還被客戶追殺，因為工作都是建立在 WordPress 之上，所以彼此都會很熟悉正在開發的功能，進而增加溝通效率，但這樣合作的前提是基於時薪接案的框架下，並且彼此願意開誠佈公、透明化以及都有獨自完成專案的能力。</p>
<h2 id="主機代管"><a href="#主機代管" class="headerlink" title="主機代管"></a>主機代管</h2><p>自己最早在玩 WordPress 的時候不會寫半行程式碼，關於主機這一塊更是完全不懂，不管是安裝 PHP、Apache 或是 MySql，所用的都是虛擬主機商提供的操作介面，裡面有一鍵安裝 WordPress 的功能。</p>
<p>當年用了不少虛擬主機商架設過 WordPress，每當網站出現一些狀況的時候，寫信反應去主機商最常得到的回覆都是因為我用了 WordPress 所以造成這些問題，感覺問題都是出在它身上，但卻又得不到具體的解決方案，最後大部分都還是靠自己摸索才搞定。</p>
<p>所以在 WordPress 代管主機服務還沒有像現在這樣大爆發出現的時候，我就決定要幫曾經跟自己一樣求助無門的朋友來代管 WordPress 主機，代管與非代管的差別在於前者除了提供主機空間外，還會提供 WordPress 相關的技術諮詢服務，不管是安裝設定、外掛建議、外掛衝突排除、效能最佳化等等，只要是跟 WordPress 有關的問題都可以尋求我的協助。</p>
<p>於是我跟一位也是接案認識的好友一起成立這個服務，我負責 WordPress 他負責主機底層系統的建置，期間代管了上百個網站，也帶來了接案以外的固定收入，甚至是跟很多客戶變成朋友，還一起合作再去接案子或是開發產品。</p>
<p>但這個提升收入的方法讓我年紀越大越不適應，尤其是在轉型接案模式後，對於時間的運用變得格外敏感。記得某年的年度旅行，出發前還因為我堅持要帶筆電而跟老婆吵架，為的就是預防代管主機有警急狀況需要處理，結果還真的遇到了，搞得很多天的行程還要老婆等我解決後才能出發。</p>
<p>或是有時在下班後甚至在睡前會看到客戶來信說主機有狀況，本想裝作沒看見但心裏又會很在意，於是默默地開啟電腦把狀況排除才能安心睡覺，這讓我的精神一直處於一種緊繃的狀態，連六日或出遊都沒辦法好好的放鬆。</p>
<p>如果要用這個方法來提升收入，需要有把工作自動化的技能，以及與客戶簽下管理協議，明定障礙排除、回應時段等等來保護自己的生活，不然為了要賺維護費所付出的代價太大了。</p>
<h2 id="販售外掛"><a href="#販售外掛" class="headerlink" title="販售外掛"></a>販售外掛</h2><p>這個方法起因是受到朋友的鼓勵，以及他給了我許多實務面的建議，讓我願意嘗試這個方法來增加收入，想不到做了之後發現滿好玩的，而且還帶來了新的工作機會，又能結合自己最喜歡做的開發工作，可說是好處多多。</p>
<p>我的作法是先把之前曾經開發或是還沒開發但自覺得有人會需要的外掛寫一篇介紹文，文中介紹該外掛的主要用途，以及做幾個示意的設定頁面，並放上聯絡方式，接下來就等待潛在客戶來信詢問。</p>
<p>當我累積到一定數量的詢問信件時，我就會著手把這個外掛真的寫完，像是重新整理檔案結構、加入設定頁面、依照文章中的說明新增功能，然後加入更新以及序號驗證機制，讓它成為在市場上可以販售的外掛。</p>
<p>接下來一樣用 WordPress 建一個購物網站，把要販售的外掛上架、裝上金流外掛、調整一些結帳欄位，選一個不奇怪的佈景主題，然後就能開張賣錢了。</p>
<p>最後再回到文章的部分，把原本的聯絡方式改成購買連結，然後發信給之前有來詢問的潛在客戶，這樣就能成交了。做這件事情最好玩的地方在於可以快速驗證自己的想法是否有人會買單，而且當真的有人買了感覺非常爽快，所以我現在每天都會固定安排時間來做件事，雖然目前的收入沒有很多，但幻想著也許哪天會被某間大公司買下來就讓我動力滿滿。</p>
<p>其他自由工作者常見的收入模式還有出書、開實體課、開線上課、賣周邊等等，選擇要用哪種方法我覺得還是要看自己投入在哪種模式最開心，總之就跟上班一樣，三不五時都要思考著萬一自己哪天沒辦法做或是失去工作了，該靠什麼活下去。也或許可以選擇賺到目標就足夠了，騰出時間去幫助更多人，這樣的接案生活對我來說是非常值得追求的。</p>
]]></content>
      <categories>
        <category>接案</category>
        <category>專案管理</category>
      </categories>
  </entry>
  <entry>
    <title>機智接案生活</title>
    <url>/tw/wordpress-freelance/</url>
    <content><![CDATA[<p>看過很多文章提到程式設計師接案的陷阱，因自己非本科出身，所以覺得這些陷阱都不會發生在自己身上，再加上自己有一點點的企劃經驗，對於專案管理也稍有涉略，又會做一點設計跟前端切版，搭配 WordPress 以為接案之路會一帆風順，想不到還是苦苦掙扎了好幾年的光陰。</p>
<p>我嘗試過三次全職接案之路。</p>
<p>第一次做到繳不出房租來，所幸在親戚的介紹下進入一間保險公司上班當網站企劃，才有了穩定收入再也不用擔心生活費，但做了五年之後，對於公司制度文化有太多的內心小劇場了，於是決定要離職，進而建立符合自己期待的工作模式。</p>
<span id="more"></span>

<p>第二次接案撐了一年半，比第一次因為沒案子所以做不下去來得好一些，案源算是比較穩，但問題出在專案管理，每個案子花了太多時間，然後每天都在跟客戶爭論當初報價單沒有提到的功能是否該製作，最後一整個放棄自己，客戶想改啥就隨便他改，只要拿得到尾款能活下去就好。</p>
<p>而且上個案子結不了案，新的案子又來，雖然知道會忙不過來但還是要接，因為不曉得錢到底何時會進來，因此常常工作堆在一起根本無法消化，最後受不了，還是逃離接案的生活去了一間朋友介紹的公司當前端工程師。</p>
<p>又能夠回到固定領月薪的日子覺得超開心，相較於每個案子都要面對不同的老闆，上班只要搞定一個就覺得輕鬆八百倍，於是又這樣做了三年，但內心仍然一直有著想要再次挑戰自己的想法，直到因公司經營方向與個人理念不符後，我再次離職。</p>
<p>第三次出來接案做到現在，這次學會跟朋友一起合作，承接單價比較高的案件，但還是偶爾會發生一個案子要做上半年甚至是一年的狀況，然後跟第二次接案的時候一樣，最後自己都放棄了一些堅持，再加上受到疫情的影響，案源又開始不太穩定。</p>
<p>於是一直思索著該如何讓自己的接案之路順暢以及又能保有自我的方法，最終得到的結論：使用時薪的方式來工作，每個月固定請款，做多少算多少，再也不用因為報價單裡面的項目爭執不休，也不用只想著要結案而放棄堅持，就這樣，突然間我好像開竅了，只是花了十年的時間。</p>
<p>知道做的事情可以得到相對應的回報之後，就願意以更積極的態度去面對挑戰，不管是主動去接從來沒做過的案子，或是固定寫文章記錄學習到的東西以及過去的工作經驗，都是重新面對與檢視自己最脆弱的環節，看清楚後就沒什麼好怕了，就跟開發很複雜的功能一樣，只要把任務拆解成很多環節，逐一完成小工作，最後就能完成大目標。</p>
<p>面對不懂的事物就去研究它，沒有人一生下來就什麼都懂的，看到神人前輩也不用覺得自卑，因為他們一定都已經努力了比我更多倍的時間在這些事情上，不能只看到表面的結果而貶低自己，這樣對自己不公平。</p>
<p>所以永遠不要放棄自己理想的生活模式，不斷的嘗試、找尋機會，總有一天一定會找得到的，雖然過程可能會一波三折，但得到後你會感謝自己曾經這麼努力過，也許未來某一天我也可能會再進入公司上班，所以不管是接案、創業、上班哪一種模式，能找到自己喜歡的方式就是最棒的生活！</p>
<p>接下來我會具體的介紹如何開發一支 WooComerce 的金流外掛，從收到串接文件開始、文件該注意地方有哪些、工作項目的預估，到開發環境的建置、需要用到的 WooCommerce API、設定頁面的開發、測試、金流商 API 串接，以及如何在 VPS 建立 WordPress、自動化部署、版本更新及維護。</p>
<p>再到把這支外掛商品化、自架更新主機、加入序號控管機制等等，我會以實務開發中會遇到的問題來帶入開發 WordPress 所需的相關知識，當有了這層基礎認識以後，遇到其他專案時，都能用對關鍵字找到答案，玩 WordPress 有一個很大的重點，那就是自己找尋答案的能力，我希望看完這系列文章的朋友都能學會這樣的能力。</p>
<p>搞定接案的實務面後，讓我們開始 Hello World 吧！</p>
]]></content>
      <categories>
        <category>接案</category>
      </categories>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰</title>
    <url>/tw/woocommerce-payment/</url>
    <content><![CDATA[<p>WordPress 的接案者主要區分為兩種類型：懂得運用各種外掛、佈景主題來滿足客戶需求的接案者，另一種為專門客製化的程式開發者。許多像我一樣沒有程式基礎的朋友，剛接觸到 WordPress 時都會被它生態圈的深度與廣度驚艷到，只要是能想得到的功能幾乎都有人開發出來，更不用說豐富的佈景主題容易讓人有選擇障礙，再加上成熟的付費外掛市集更是買也買不完。</p>
<p>早期許多接案者結合了這些工具進行接案獲得了豐碩的果實，他們熱心的把這些接案用的佈景主題、外掛整理成文章、拍教學影片分享出來，或是做成一系列的線上課程，內容的完整度可以讓學員上完後就能真的做出一個滿足客戶基本需求的官網或是包含金物流串接的購物網站。</p>
<span id="more"></span>

<p>所以架站的門檻越來越低了，市場上的競爭者也越來越多，這時候這種類型的接案者勢必要開始把自己的核心價值放在除了架站以外的項目，像是數位行銷、廣告投放、社群經營或是搜尋引擎最佳化的服務，不然就很容易被市場淘汰，像我這部分就很弱，所以開始學習寫程式改做開發就變成我後來的選擇路線。</p>
<p>但該做的外掛都已經被開發出來了，走程式開發路線還有什麼機會呢？有的，而且超級多，因為 WordPress 的便利性讓市場上用它架站的客戶數量龐大，首先這就讓潛在需求變多，其次，客戶的網站不是做完就沒事了，隨著業務的發展，每天都會有許多變化，如果線上業務沒有跟著實體業務的情境來做調整，這會讓客戶失去很多業績，所以針對客戶內部需求的客製化就是很大的一塊市場，而且只要公司沒倒，永遠都會有做不完的需求。</p>
<p>最後，也是我覺得最關鍵的一點，不管 WordPress 生態圈再豐富、功能再強大，有一塊客戶需求是無法被滿足的，那就是與本地化的服務整合，不會有國外的開發者想整合台灣的 CRM 廠商，或是住在歐洲的開發者不可能來串接台灣的金流服務，因為在他們的市場根本沒人用，這時候就是我們在地開發者的切入機會，因此這幾年有越來越多台灣的資訊公司投入 WordPress 生態系。</p>
<h2 id="WordPress-工程師-vs-PHP-工程師"><a href="#WordPress-工程師-vs-PHP-工程師" class="headerlink" title="WordPress 工程師 vs. PHP 工程師"></a>WordPress 工程師 vs. PHP 工程師</h2><p>WordPress 是一個既有的框架，就跟其他的程式框架一樣，有自己的規則與設計哲學在裡面，它是在 2003 年誕生的，十幾年的歷史雖然有不少包袱，但早已是一套非常成熟的框架，有數以千計的工程師貢獻過核心程式碼，這些都讓 WordPress 不斷的進化與成長 ( 也常常進化到爆炸就是了 🤣  )，那麼已經熟悉 PHP 的工程師朋友，該如何切入 WordPress 開發呢？我從以下三點來說明：</p>
<h3 id="一、對於勾點（-Hook-）機制的理解"><a href="#一、對於勾點（-Hook-）機制的理解" class="headerlink" title="一、對於勾點（ Hook ）機制的理解"></a>一、對於勾點（ Hook ）機制的理解</h3><p>勾點機制是 WordPress 可以擁有成千上萬各式各樣外掛的主要原因，透過「掛」載的動作就能在不需修改核心程式碼的情況下，加入新的功能，這樣當核心程式碼在更新的時候，新功能一樣可以被保留下來。看過太多被硬改 WordPress 核心程式碼的狀況，然後客戶被廠商要求 WordPress 不得更新，這會導致其他後果。</p>
<p>WordPress 的更新除了會加入新功能以外，還會修補許多安全性漏洞，畢竟它是全世界市佔率最高的架站工具，也會引來想要大展身手的攻擊者，所以如果不能更新 WordPress，那可能只能把主機的網路線拔掉才會 100% 安全。</p>
<p>為了要能更新 WordPress 程式，勾點機制是絕對必要的，而且透過它，還能提供開放介面讓其他工程師來修改自己寫好的外掛，像是購物車 WooCommerce 就有超多針對它開發的外掛，而我們即將要介紹的金流外掛也是屬於這一類。</p>
<h3 id="二、對於-Loop-與操作資料庫方式的理解"><a href="#二、對於-Loop-與操作資料庫方式的理解" class="headerlink" title="二、對於 Loop 與操作資料庫方式的理解"></a>二、對於 Loop 與操作資料庫方式的理解</h3><p>WordPress 第二個核心是 Loop，它是顯示所有文章內容的機制，傳統 PHP 的作法是先建立資料庫連線，然後寫資料庫語法，把需要的資料取得後，再用迴圈的方式呼叫出來，而 WordPress 使用 Loop 簡化了這樣的流程，還提供許多豐富的 API 來自訂取得的資料內容。</p>
<p>雖然 PHP 工程師還是可以使用傳統的方法來做資料庫的操作，但前面提到，WordPress 已經有全世界的工程師幫你開發出各種 API，無論是針對安全性、效能，都是經過持續的優化再優化，沒有道理不用它，透過這些 API 除了簡化開發流程、增加安全性與效能外，更能學習到世界上其他工程師是如何處理相同問題的邏輯與思維，這對於開發者本身會有很大的幫助。</p>
<h3 id="三、對於-WordPress-安全性的理解"><a href="#三、對於-WordPress-安全性的理解" class="headerlink" title="三、對於 WordPress 安全性的理解"></a>三、對於 WordPress 安全性的理解</h3><p>上文提到，因為 WordPress 的成功引來了一大群攻擊者，要如何維護 WordPress 的安全性，都已經是許多國外企業的核心服務項目，最有名的就是 Wordfence 他們是一間專門開發 WordPress 防火牆外掛的公司，通時也常發表關於 WordPress 核心程式、佈景主題與外掛的漏洞研究報告。</p>
<p>常看他們的報告會發現，很多外掛的漏洞常發生在缺少驗證程式執行者的身份、執行者的請求來源以及對於惡意程式碼的過濾，這些議題在其他框架也都會遇到，只是因為 WordPress 很大，還有專門的機構來研究漏洞，所以當看到 WordPress 安全性相關的新聞報導時別驚慌，去客觀理解漏洞產生的原因後，就能知道該如何防範。</p>
<p>因此為了提升安全性，使用 WordPress 內建的 API 會是比較好的選擇，另外在執行寫入動作前，先用 <code>curent_user_can()</code> 檢查使用者權限、<code>wp_nonce_url()</code> 確認傳送資料的來源是否為同一個網站、<code>sanitize_*()</code> 過濾使用者輸入的內容、<code>esc_*()</code> 過濾從資料庫取得的內容，再搭配資料的驗證，像是是否為空值、手機號碼是否為 10 碼等等，這些基本功做到就能防止一般常見的攻擊手法。</p>
<p>以上這些開發 WordPress 的核心概念我會透過一個鐵人付金流外掛來逐一介紹，現在只要記得這三個大方向就好，Hook、Loop、Security。</p>
<h2 id="WooCommerce-金流串接"><a href="#WooCommerce-金流串接" class="headerlink" title="WooCommerce 金流串接"></a>WooCommerce 金流串接</h2><p>WooCommerce 是 WordPress 母公司 Automattic 在 2015 年併購下來的一款專門做購物車的外掛，因為其豐富的功能以及能解決使用者在網路上賣東西的需求，讓原本只是拿來寫部落格用的 WordPress 逐漸成為建置購物網站的選擇。</p>
<p>至於為何選擇介紹 WooCommerce 金流串接來做為程式開發者的切入點？上文提到，不管全世界開發者設計了多少工具，本地的需求還是只能由本地的開發者來實現，再加上因為這類需求是直接關係到客戶的業績，能夠很具體的展現開發者的價值，所以對接案者來說，報價會比較有空間跟彈性。</p>
<p>最重要的一點，只要是使用 WooCommerce 建置的購物車、並且開發時都遵循 WooCommerce 的規則，都可以通用這支外掛，因此可以直接販售給其他有相同需求的客戶，一次工重複賣，這絕對對是開發者的夢想。</p>
<p>因此接下來的文章我會以四個單元來介紹如何開發 WooCommerce 金流外掛，並且帶到開發 WordPress 需要知道的核心知識，並且附上延伸資源來做補充，未來遇到問題就能靠自己的力量找到答案。</p>
<p><strong>(一) 前置作業</strong>：說明如何拆解金流開發需求、串接文件需要注意的重點，以及本機開發環境與外掛結構介紹。</p>
<p><strong>(二) 設定介面</strong> 說明如何建立設定選項以及增加自訂欄位來記住金流商回傳的資訊，同時介紹 WordPress 的資料庫，以及如何 CRUD。</p>
<p><strong>(三) 實作付款類別</strong>：WooCommerce 的金流類別介紹，解析內含的屬性與方法，並且說明如何傳遞與接收參數，以及該如何寫單元測試來進行驗證。</p>
<p><strong>(四) 部署與發行</strong>：介紹如何自動化部署到遠端主機，以及當想要販售該外掛給其他客戶時該如何做到外掛更新以及序號控管的機制。</p>
<p>下一篇我們就先從前置作業說明如何拆解 WooCommerce 金流串接需求開始。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰 (ㄧ) - 串接文件</title>
    <url>/tw/woocommerce-payment-document/</url>
    <content><![CDATA[<p>不管是哪一家軟體公司或是金物流廠商，只要他們有提供 API 介面來服務外部網站，通常一定會有串接文件可讓開發者參考，串接文件就像是 API 使用說明書，讓開發者可以知道該怎麼與手邊的系統進行整合。</p>
<p>串接文件通常有分線上版與離線版，離線版就是會拿到一份 PDF 或 Word 檔，台灣金流業者多半是這種類型，可以直接在官網下載。另外有些廠商可能有某種商業考量，會需要申請並審核通過後才能取得他們的串接文件。</p>
<p>還有的是在官網找不到文件下載的連結，只能透過業務窗口取得，總之不管文件的形式為何，當我們的客戶說想要串接金流或是其他的服務時，第一個首要之務就是取得串接文件，有串接文件我們才能評估工作項目。</p>
<span id="more"></span>

<p>其次，如果拿到的文件是離線檔案，務必要確認是否為最新版本，我就曾經發生過拿到舊的版本結果一直無法順利串接的情況，正常情況下廠商的 API 介面只會新增不會修改或刪除既有的方法，但還是讓我遇到了，因此一定要跟客戶確認文件是否為最新版本。</p>
<p>有了文件之後還需要取得客戶的使用名稱與密鑰，如果以金流為例，通常會有商家代號以及串接密鑰，前者是金流商辨識客戶的依據，後者是拿來算出加密演算法的參數之一，而金流商會用這個密鑰算出來的值來作為請求付款的身份驗證，所以取得與客戶身份相關的串接資料是必要的。</p>
<p>正常情況下，廠商提供的 API 會有分正式與測試環境，通常是用請求路徑來區分，如果是接金流的話，還會有測試卡號來驗證刷卡是否正常運作，而不用掏自己的信用卡，但也遇過沒有測試卡號只能用一元訂單來測試的廠商，這些資訊在串接前最好都能請客戶先跟廠商確認，不然串接到一半才發現這些資訊有誤的話，會浪費很多時間在進行除錯。</p>
<h2 id="金流串接文件注意重點"><a href="#金流串接文件注意重點" class="headerlink" title="金流串接文件注意重點"></a>金流串接文件注意重點</h2><p>接下來，當我們拿到文件後，必須先理解這家廠商的 API 邏輯，理解後我們才能比較準確的進行任務拆解與工時評估，通常我會注意文件的以下幾個重點：</p>
<h3 id="流程怎麼走？"><a href="#流程怎麼走？" class="headerlink" title="流程怎麼走？"></a>流程怎麼走？</h3><p>根據流程圖可以先大概掌握要在什麼時間點把訂單資料送給金流商、在哪個階段做授權驗證以及接收回傳資料的時機，台灣的第三方金流多半是訂單傳送時同時做授權驗證，驗證成功後交給金流商跳轉到付款頁，現在市面上也有陸續出現直接在客戶網站內完成結帳的服務，只要看流程圖我們大概就可以知道客戶網站跟金流廠商之間的資料是如何傳送的。</p>
<h3 id="驗證怎麼做？"><a href="#驗證怎麼做？" class="headerlink" title="驗證怎麼做？"></a>驗證怎麼做？</h3><p>這是金流商用來驗證從客戶傳過去的資料是否為客戶網站，不同的廠商名稱可能不太一樣，有叫檢查碼的，還有檢核碼、加密法、簽名演算法一堆名稱，文件會說明該如何將傳送資料做大小寫排序、經過組合客戶密鑰、URL Encode、產生雜湊值、轉換大小寫等一堆折騰人的過程，比較貼心的廠商會提供程式範例，我會把這範例寫成一個靜態方法，之後在做驗證時就可以重複利用。</p>
<h3 id="要傳的參數有哪些？"><a href="#要傳的參數有哪些？" class="headerlink" title="要傳的參數有哪些？"></a>要傳的參數有哪些？</h3><p>通常要傳給金流商的參數很多，但不外乎就是訂單的相關資料，我會注意有沒有比較特別的欄位，也就是 WooCommerce API 無法一行程式拿到的資料，這種會增加開發時數的欄位要及早發現，還有就是設定付款方式的欄位該如何使用、資料類型為何、有沒有什麼限制，尤其是限制的部分，會需要在資料傳送前先做檢核，像是姓名長度、電話號碼的格式等等，這些都需要計入工作項目之中。</p>
<h3 id="回傳的參數有哪些？"><a href="#回傳的參數有哪些？" class="headerlink" title="回傳的參數有哪些？"></a>回傳的參數有哪些？</h3><p>根據客戶的商業情境不同，可能會需要取得刷卡的後四碼或是交易流水號以方便客戶對帳，所以要預先知道能取得的回傳資料有哪些，才能把訂單欄位建立好並寫入資料庫。</p>
<h3 id="交易失敗會顯示什麼？"><a href="#交易失敗會顯示什麼？" class="headerlink" title="交易失敗會顯示什麼？"></a>交易失敗會顯示什麼？</h3><p>串接文件通常會有狀態碼對應訊息的表格，用來說明當 API 回應某些狀態碼時代表的是什麼意思，我會特別關注交易失敗的狀態碼，像是卡號錯誤、信用卡驗證碼錯誤等等的訊息，以便在接受回傳資訊時可以把交易失敗的例外狀況考慮進去，再根據狀態碼來顯示訂單交易失敗的原因，這樣當出問題時才能進行追蹤。</p>
<h2 id="鐵人付金流外掛開發任務拆解"><a href="#鐵人付金流外掛開發任務拆解" class="headerlink" title="鐵人付金流外掛開發任務拆解"></a>鐵人付金流外掛開發任務拆解</h2><p>看完文件後，對於該如何串接這個廠商的 API 心裏大概就會有個底，接下來我把開發任務拆解為四大類：</p>
<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><p>這個階段會包含三個工作，分別是確認完成驗收標準、金流串接相關資料交付確認以及開發環境與程式碼部署配置。首先要跟客戶確認需要串接的付款方式有哪些，以及採用使用者故事來描述顧客結帳流程以及管理者的操作行為。通常金流商提供的付款方式很多種，每種的使用費用不太一樣，客戶會因成本考量有可能全接或是只接部分的付款方式。</p>
<p>另外還需確認付款的介面設計、顧客完成後的顯示欄位以及後台訂單對帳資訊，因為我們已經先行閱讀過文件了，所以可以跟客戶主動建議哪些資料可以顯示以採取對應的作法。</p>
<p>其次的金流串接相關資料交付最好在開工前取得，並且確保是正確的資料，避免串接到一半發生問題，而這部分的工時就是遇到這種狀況的緩衝。</p>
<p>最後的開發環境與程式碼部署配置在後續的文章會提及，主要就是建立開發 WooCommerce 的環境配置。</p>
<h3 id="WooCommerce-設定介面開發"><a href="#WooCommerce-設定介面開發" class="headerlink" title="WooCommerce 設定介面開發"></a>WooCommerce 設定介面開發</h3><p>前台的介面是在 WooCommerce 結帳頁增加金流選項，以及會根據不同的付款方式顯示不同的介面，像是分期付款的選擇期數，後台的介面是讓客戶可以自行輸入商代代號、密鑰以及切換正式或測試環境的設定，後台的介面事實上不一定需要，但有的話可以省下日後修改程式的時間，而且如果未來要發行此外掛的話，設定介面是必須的項目。</p>
<h3 id="金流-API-串接"><a href="#金流-API-串接" class="headerlink" title="金流 API 串接"></a>金流 API 串接</h3><p>這部分包含了串接文件中的實作，像是加密演算法、整理傳送資料與接收回傳資料，以及交易失敗的處理，通常不同付款方式的傳送與接收資料回不大相同，而且還會分即時回傳以及非同步回傳的狀態，像是信用卡結完帳就能立刻取得交易結果，但是 ATM 轉帳或是超商代碼繳費就必須等到顧客真的去付錢後金流商才會回傳資料，所以這部分我會根據不同的付款方式來進行工時預估。</p>
<h3 id="測試與除錯"><a href="#測試與除錯" class="headerlink" title="測試與除錯"></a>測試與除錯</h3><p>主要包含寫自動化測試與人工測試交易失敗是否有出現正確的提示訊息，以及嘗試著用一些手法像是將訂單金額改為 0 元訂單看能否成功交易，最重要的是測試正式環境的運作是否一切正常，這時前置作業中的確認完成驗收標準就可以當作是測試清單，來確保交易如預期中的結果。</p>
<p>當理解金流串接文件以及確認客戶需求後，下一篇文章我們開始來搭建 WordPress 的本機開發環境，並且運用一些自動化指令碼讓 WooCommerce 開發環境可以自動一鍵安裝完成，省去手動處理的時間。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
      </tags>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰（二）- 開發環境</title>
    <url>/tw/woocommerce-payment-local-development/</url>
    <content><![CDATA[<p>在自己的電腦中建立一個 WordPress 需要的材料有 PHP、Apache or Nginx 以及 MySql，如果不想手動各別安裝，市面上也有很多現成的免費套裝軟體可以把這些環境自動建置起來，而且還可以根據自己的需要切換不同的版本，然後只要下載 WordPress、伺服器設定、資料庫連線等一系列步驟，就能在本機架設好 WordPress 網站。</p>
<p>由於這幾年全代管 WordPress 網站主機的服務盛行，這些廠商為了增加市占率，提供給開發者免費的軟體來建置本機環境，除了已經內建基本服務外，最方便的是一鍵就能建立網站，所有的伺服器、資料庫連線設定它都已經幫我們處理好，然後當做完後點選部署，直接就能把網站上傳到他們的主機上，省去所有部署的繁瑣流程，關鍵字搜尋「local wordpress development」就能找到很多這類軟體。</p>
<span id="more"></span>

<p>這些套裝軟體的好處很多，除了上述提到的一鍵架好 WordPress 以外，還有提供網站複製、對外分享連結、WP CLI、預設安裝佈景主題、測試發信等等實用的功能，而且 Windows /  MacOS 都有支援，最重要的是完全免費，如果是想快速架設的朋友我建議可以先用這些工具來熟悉 WordPress 的操作。</p>
<p>雖然上述軟體的優點很多，但有一個致命的缺點就是很吃硬碟空間，尤其是對我這台只有 128G 的 Mac 來說，因為這些軟體多半都是用 Docker 來配置每一個站的環境，等於每一個站就會有獨立的 PHP、Nginx、MySql，更不用說如果還要切換版本的話，每個版本都是獨立的映像檔，網站一多佔用的硬碟空間就會暴增。</p>
<p>另外一個缺點是因為是執行在 Docker 上面，這些軟體為了避免長時間執行吃記憶體，所以只會在啟用時才把環境建置起來，這導致了每次重啟的時間會稍微久一點，以及有時候網站的效能會低落，但如果你的工作機硬碟有 1TB、RAM 有 32G，那麼這些工具可以幫你省下很多時間。</p>
<h2 id="Laravel-Valet"><a href="#Laravel-Valet" class="headerlink" title="Laravel Valet"></a>Laravel Valet</h2><p>如果沒有，而且你的工作環境是 MacOS，我會推薦使用 Valet。Valet 是 PHP 框架 Laravel 提供給 Mac 使用者的本機開發環境，它最大的好處是共用背景執行的 Nginx，只要當電腦開機時就會同步啟用，也不會像套裝軟體每建一個站就會有獨立的 Nginx 要安裝與執行。另外它使用了 DnsMasq 這套 DNS 軟體，無需再自行修改 host 檔來新增測試站網址。</p>
<p>官網上面提到 Valet 執行時大約只會站 7MB 的記憶體，而且速度非常快，我這幾年來已經全面改用 Valet 建過數百個站，我的配備是 2013 MBP 128G SSD、8GB RAM，到現在還每個站跑起來還是跟飛的一樣，完全不會有越用越慢的問題。</p>
<p>Valet 除了可以跑 Laravel，當然也能作為 WordPress 的開發環境，開發者 Aaron Rutley 寫了一份名為 valetpress 的指令稿，透過 WordPress 命令列工具 WP CLI 來完成環境配置，從敲下第一行指令到真正建立好網站，我實測的平均秒數是 6 秒多，完勝所有用套裝軟體的速度。</p>
<p>另一個好處是可以修改腳本的內容，改成符合自己需要的，像是我常常需要空的 WooCommerce 環境來進行測試，我只要在終端機裡面輸入 <code>$vp wc</code>，就能在十秒內建置好裝有 Storefront 佈景主題、倒入測試資料、WooCommerce 以及常用金流外掛的測試站。</p>
<h2 id="Valet-安裝步驟"><a href="#Valet-安裝步驟" class="headerlink" title="Valet 安裝步驟"></a>Valet 安裝步驟</h2><p>先確保作業系統必須是 MacOS，我目前的版本是 10.15.7，CPU 是 Intel Core i5：</p>
<h3 id="一、安裝-Homebrew"><a href="#一、安裝-Homebrew" class="headerlink" title="一、安裝 Homebrew"></a>一、安裝 Homebrew</h3><p>Homebrew 是 MacOS 專用的套件管理系統，開啟終端機，輸入以下指令即可安裝</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ &#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;HEAD&#x2F;install.sh)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安裝完成後，先確認 brew 可以正確執行，</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ brew update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果執行 brew update 發生錯誤，要先把別名加入 .bash_profile，</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ open .bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>輸入上面的指令後會打開一個文字檔，在檔案的最下面加入以下文字：</p>
<pre class="line-numbers language-none"><code class="language-none">export PATH&#x3D;”&#x2F;usr&#x2F;local&#x2F;bin:$PATH”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>確認 brew update 可以正確執行後就可以進入到下一步驟。</p>
<h3 id="二、安裝-PHP-amp-Composer"><a href="#二、安裝-PHP-amp-Composer" class="headerlink" title="二、安裝 PHP&amp;Composer"></a>二、安裝 PHP&amp;Composer</h3><p>先使用 Homebrew 安裝 PHP，再安裝 PHP 套件管理系統 Composer：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ brew install php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ brew install composer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="三、安裝-MySql"><a href="#三、安裝-MySql" class="headerlink" title="三、安裝 MySql"></a>三、安裝 MySql</h3><p>Valet 官方文件是安裝 MySql 5.7，個人是習慣裝 Mariadb：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ brew install mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果遇到要登入資料庫的時候，會出現 **’ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’ (2)**，時，先進到該路徑把這檔案刪除，</p>
<p>如果再次登入出現 **’Access denied for user ‘root’@’localhost’**，前往編輯 MySql 設定：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ vi &#x2F;usr&#x2F;local&#x2F;etc&#x2F;my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>加入下面這行後儲存後退出：</p>
<pre class="line-numbers language-none"><code class="language-none">[mysqld]  
skip-grant-tables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>最後再重啟資料庫即可。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ brew services restart MariaDB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="四、安裝-Valet"><a href="#四、安裝-Valet" class="headerlink" title="四、安裝 Valet"></a>四、安裝 Valet</h3><p>使用 composer 下載 valet 套件：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ composer global require laravel&#x2F;valet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>等待下載完成後開始執行安裝：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ valet install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>這時候可能會出現找不到 valet 指令的錯誤訊息：<strong>command not found: valet</strong>，因為 valet 是 composer 的套件，而套件會被裝在 vendor 資料夾底下，因此沒辦法直接呼叫，這時候要把 vendor 路徑進行 export。我的環境是用 zsh，所以要打開 .zshrc 來加入設定：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ open ~&#x2F;.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然後加入下方路徑後儲存：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;sbin:&#x2F;Users&#x2F;user&#x2F;.composer&#x2F;vendor&#x2F;bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>設定檔有任何修改記得要跑一次 source 才會套用更新：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ source ~&#x2F;.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>加入後再次 valet install，會出現 <strong>stopping Nginx</strong> 的訊息，代表正在啟用 valet 中，但如果出現 <strong>Homebrew PHP appears not to be linked.</strong> 代表 Homebrew 沒有連結到正確的 PHP，輸入以下指令來產生連結：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ brew link php –force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再次輸入 valet install 即可啟用 Valet。Valet 預設情況下它會在背景執行，所以如果要連上測試站的話，再也不用像以前啟用 MAMP、Docker、Local 要等上一段時間，只要一開機 Valet 就會自動啟用。</p>
<h3 id="五、安裝-WP-CLI"><a href="#五、安裝-WP-CLI" class="headerlink" title="五、安裝 WP-CLI"></a>五、安裝 WP-CLI</h3><p>WP CLI 是 WordPress 非常實用的指令工具，可以從系統面來管理網站，不管是安裝外掛或是匯入資料庫都能透過指令操作，安裝方式可以參考官方的說明，另外我們也可以使用 Homebrew 來安裝：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ brew install wp-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>裝完後記得把 wp 關鍵字加入到個人設定檔中，這樣就可以用 wp –info 這樣的簡寫來操作它。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ chmod +x wp-cli.phar  
$ sudo mv wp-cli.phar &#x2F;usr&#x2F;local&#x2F;bin&#x2F;wp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="六、下載-ValetPress"><a href="#六、下載-ValetPress" class="headerlink" title="六、下載 ValetPress"></a>六、下載 ValetPress</h3><p>上面環境都完成後，剩下就是加入 WordPress 的自動化腳本。先在本機 user 目錄新開一個隱藏目錄叫做「 .valetpress」 與目錄 「Sites」 資料夾，前者是放自動化腳本，後者是之後新建 WordPress 站的網站根目錄。</p>
<p>我依照 Aaron Rutley 所寫的腳本新增了與 WooCommerce 相關的部分，下載連結如下：</p>
<p><a href="https://github.com/oberonlai/.valetpress">下載 ValetPress - WooCommerce 版</a> </p>
<p>解壓縮後放入這個 /username/.valetpress 這個目錄中，然後 .zshrc 要引入這個 valetpress 這個檔案，先打開 zsh 設定檔</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ open ~&#x2F;.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>加入以下判斷式：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">if [ -f ~&#x2F;.valetpress&#x2F;valetpress ]; then  
	source ~&#x2F;.valetpress&#x2F;valetpress  
else  
	print “404: ~&#x2F;.valetpress&#x2F;valetpress not found.”  
fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一樣，設定檔改好後記得要跑 source 才會更新，如果你有自己改寫 valetpress 也記得要 soruce 一下：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ source ~&#x2F;.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>我新增的指令如下：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">if [ $1 &#x3D; &quot;wc&quot; ]; then
	cd ~&#x2F;Sites
	echo &quot;$&#123;VP_BOLD&#125;ValetPress, create empty new site with WooCommerce$&#123;VP_NONE&#125;&quot;
	echo &quot;$&#123;VP_YELLOW&#125;Project Name:$&#123;VP_NONE&#125;&quot;
	read project_name
	mkdir &quot;$project_name&quot;
	cd &quot;$project_name&quot;
	mysql -uroot -e &quot;create database \&#96;$project_name\&#96;&quot;
	wp core download --locale&#x3D;zh_TW --skip-content
	wp core config --dbname&#x3D;&quot;$project_name&quot; --dbuser&#x3D;root --dbhost&#x3D;127.0.0.1
	wp core install --url&#x3D;&quot;$project_name&quot;.test --title&#x3D;&quot;$project_name&quot;.test --admin_user&#x3D;&quot;$project_name&quot;  --admin_password&#x3D;password --admin_email&#x3D;wordpress@wordpress.org
	wp language core install zh_TW
	wp language core activate zh_TW
	wp option update timezone_string &quot;Asia&#x2F;Taipei&quot;
	wp site switch-language zh_TW
	echo &quot;$&#123;VP_GREEN&#125;Success:$&#123;VP_NONE&#125; Project Created: $&#123;VP_UNDERLINE&#125;https:&#x2F;&#x2F;$project_name.test&#x2F;$&#123;VP_NONE&#125;&quot;
	wp plugin install woocommerce
	wp language plugin install woocommerce zh_TW
	wp plugin install ry-woocommerce-tools
	wp language plugin install ry-woocommerce-tools zh_TW
	wp plugin activate woocommerce ry-woocommerce-tools
	wp theme install storefront
	wp language theme install storefront zh_TW
	wp theme activate storefront
	echo &quot;Valet Link Project&quot;
	cd ~&#x2F;Sites&#x2F;&quot;$project_name&quot;&#x2F;
	valet link $project_name
	valet secure $project_name
	echo &quot;L: $&#123;VP_UNDERLINE&#125;https:&#x2F;&#x2F;$project_name.test&#x2F;wp-admin&#x2F;$&#123;VP_NONE&#125;&quot;
	echo &quot;U: $project_name&quot;
	echo &quot;P: password&quot;
fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>裡面大部分都是 WP CLI 的指令，像是安裝中文語系檔、安裝 WooCommerce 外掛、安裝 Storefront 佈景主題並且啟用它們，然後使用 valet link 來做連結，以及 secure 來做 SSL，預設的帳密為專案名稱 / password，如果要換登入密碼可以在 wp core install 那邊修改。</p>
<p>之後新建一個裝有 WooCommerce 的測試站步驟如下：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ vp wc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>輸入專案名稱：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ValetPress, create empty new site with WooCommerce
Project Name:
wc-test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>接下就會全自動化進行安裝：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wc-test
Downloading WordPress 5.8 (zh_TW)...
Using cached file &#39;&#x2F;Users&#x2F;oberonlai&#x2F;.wp-cli&#x2F;cache&#x2F;core&#x2F;wordpress-5.8-zh_TW.zip&#39;...
Success: WordPress downloaded.
Success: Generated &#39;wp-config.php&#39; file.
Success: WordPress installed successfully.
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>完成後就可以用專案名稱的網址來進入測試站，如果要砍掉測試站只要輸入 <code>$vp delete</code> 即可，刪除的同時資料庫也會一併移除，無須再手動處理。</p>
<p>搞定開發環境後，下一篇文章介紹 WordPress 的資料夾基本結構，以及建立金流外掛的必備知識。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
      </tags>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰（三）- 建立資料夾結構</title>
    <url>/tw/woocommerce-payment-structure/</url>
    <content><![CDATA[<p>使用 Valet 或是其他本機環境軟體把 WordPress 安裝好之後，切換到網站根目錄，可以看到 以下的檔案結構：</p>
<pre class="line-numbers language-none"><code class="language-none">├── index.php
├── license.txt
├── readme.html
├── wp-activate.php
├── wp-admin
├── wp-blog-header.php
├── wp-comments-post.php
├── wp-config-sample.php
├── wp-config.php
├── wp-content
├── wp-cron.php
├── wp-includes
├── wp-links-opml.php
├── wp-load.php
├── wp-login.php
├── wp-mail.php
├── wp-settings.php
├── wp-signup.php
├── wp-trackback.php
└── xmlrpc.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一共有三個資料，分別是 wp-admin、wp-content 與 wp-includes，其中 wp-admin 是存放後台相關的檔案，wp-includes 是提供所有開發時會用到的 API，關於這兩個資料夾我們必須要記住的唯一一個重點就是：千萬絕對不可不要去修改裡面的檔案，因為他們是 WordPress 的核心程式，只要一更新就會被複寫，如果你在網路上爬到一些程式碼片段是要進去這兩個資料夾修改的，請直接忽略跳過。</p>
<blockquote>
<p>絕對不要修改 wp-admin 與 wp-includes 裡面的檔案</p>
</blockquote>
<p>根目錄中我們唯一可以自行修改的檔案是 wp-config.php，裡面包含了資料庫連線資訊、驗證用的金鑰，以及可以控制環境的常數設定，如果需要啟用除錯模式、設定資料表前綴，都是在 wp-config.php 裡面處理。</p>
<p>接下來我們的主戰場是在 wp-content，結構說明如下：</p>
<span id="more"></span>

<pre class="line-numbers language-none"><code class="language-none">wp-content
├── languages
├── plugins
├── themes
└── uploads<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>languages</strong> : 放佈景主題或是外掛的語系檔，只會有 .po 與 .mo 兩種檔案類型</p>
<p><strong>plugins</strong> : 放外掛的資料夾，如果不透過後台而要手動安裝的話，把外掛資料夾放到這個目錄即可</p>
<p><strong>themes</strong> 放佈景主題的資料夾，同樣的，直接將佈景主題資料夾放到這個目錄就能在後台看到相對應的佈景主題</p>
<p><strong>uploads</strong> 所有透過後台上傳的檔案、圖片都會放在這個目錄中</p>
<h2 id="新增外掛"><a href="#新增外掛" class="headerlink" title="新增外掛"></a>新增外掛</h2><p>我們現在要來開發外掛，所以先將目錄切換至 plugins，並且新增一個名為 iron-pay 的資料夾：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ cd Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins
~&#x2F;Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins $ mkdir iron-pay<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>這時候我們就可以看到 plugins 目錄裡面有兩個資料夾：</p>
<pre class="line-numbers language-none"><code class="language-none">plugins
├── iron-pay
└── woocommerce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>開發 WordPress 外掛與 WooCommerce 外掛基本上是一模一樣的，因為 WordPress 的機制讓我們可以開發外掛的外掛，只要該外掛本身有提供勾點 ( Hook )，就能在不動到原始程式碼的情境下進行修改，WooCommerce 提供非常豐富且數量龐大的勾點，因此我們可以不用修改 WooCommerce 的原始碼就能新增金流功能。</p>
<p>要寫一支外掛很簡單，開好資料夾並切換到該目錄後新增一個與資料夾同名的檔案：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">~&#x2F;Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins $ cd iron-pay
~&#x2F;Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins&#x2F;iron-pay $ touch iron-pay.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>開啟 iron-pay.php 將以下註解放入檔案最上方：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * @link              https://oberonlai.blog
 * @since             1.0.0
 * @package           irp
 *
 * @wordpress-plugin
 * Plugin Name:       WooCommerce 鐵人付
 * Plugin URI:        https://oberonlai.blog
 * Description:       新增 WooCommerce 鐵人支付金流
 * Version:           1.0.0
 * Author:            Oberon Lai
 * Author URI:        https://oberonlai.blog
 * License:           GPL-2.0+
 * License URI:       http://www.gnu.org/licenses/gpl-2.0.txt
 * Text Domain:       irp
 * Domain Path:       /languages
 * WC tested up to: 5.6.0
 * WC requires at least: 5.3
 */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要注意的地方是 Plugin Name 與 Description，這是外掛名稱與描述，WC tested up to 是 WooCommerce 的版本相容性，WC requires at least 是該站的 WooCommerce 最低版本，存檔後就可以在 WordPress 後台的外掛清單看到這支外掛並啟用它。</p>
<p>接下來加入一些開發外掛時常會用到的功能：</p>
<h3 id="判斷-WooCommerce-是否有啟用"><a href="#判斷-WooCommerce-是否有啟用" class="headerlink" title="判斷 WooCommerce 是否有啟用"></a>判斷 WooCommerce 是否有啟用</h3><p>因為我們的金流外掛是依附在 WooCommerce 上面的，如果它沒有啟用的話可能會造成某些預期外的錯誤，因此先做啟用判斷會比較保險，繼續在 iron-pay.php 中加入以下程式碼：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * @link              https://oberonlai.blog
 * @since             1.0.0
 * @package           irp
 *
 * @wordpress-plugin
 * Plugin Name:       WooCommerce 鐵人付外掛
 * Plugin URI:        https://oberonlai.blog
 * Description:       新增 WooCommerce 鐵人支付金流
 * Version:           1.0.0
 * Author:            Oberon Lai
 * Author URI:        https://oberonlai.blog
 * License:           GPL-2.0+
 * License URI:       http://www.gnu.org/licenses/gpl-2.0.txt
 * Text Domain:       irp
 * Domain Path:       /languages
 * WC tested up to: 5.6.0
 * WC requires at least: 5.3
 */</span>
	
<span class="token comment">/**
 * Check WooCommerce Activied
 */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">in_array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce/woocommerce.php'</span><span class="token punctuation">,</span> <span class="token function">apply_filters</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'active_plugins'</span><span class="token punctuation">,</span> <span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'active_plugins'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    
	<span class="token keyword">require_once</span> <span class="token constant">ABSPATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'wp-admin/includes/plugin.php'</span><span class="token punctuation">;</span>
    
	<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">is_plugin_active</span><span class="token punctuation">(</span> <span class="token function">plugin_basename</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">deactivate_plugins</span><span class="token punctuation">(</span> <span class="token function">plugin_basename</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/**
         * Error admin notice
         */</span>
        <span class="token keyword">function</span> <span class="token function">require_woocommerce_notice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;div class="error">&lt;p>外掛啟用失敗，需要安裝並啟用 WooCommerce 5.3 以上版本。&lt;/p>&lt;/div>'</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'admin_notices'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'require_woocommerce_notice'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第一行先判斷在已啟用的外掛列表中，是否含有 woocommerce/woocommerce.php 這筆資料，get_option() 是取得設定值的函式，apply_filters 是放入勾點的函式，這邊代表的是如果有其他的程式使用了 <code>add_filter( &#39;active_plugins&#39; )</code> 這個勾點來修改已啟用的外掛清單，那麼也會被列入 in_array 的判斷之中。</p>
<p>接下來我們因為要使用 is_plugin_active  所以要先引入 wp-admin/includes/plugin.php，這個函式會判斷我們的外掛是否被啟用，它傳入的參數是外掛的主檔案，也就是 iron-pay.php，所以我們先判斷 WooCommerce 是否有被啟用，如果沒有的話而我們的外掛被啟用了，就會觸發 <code>deactivate_plugins()</code> 停用外掛以及出現錯誤提示。</p>
<pre class="line-numbers language-add_action()```" data-language="add_action()```"><div class="caption"><span>是另外一種勾點，這邊帶入兩個參數，第一個是勾點的名稱 admin_notices，也就是後台的提示訊息，第二個是回呼函式，也就是我們要在這個勾點上做什麼事情。</span></div><code class="language-add_action()```">
函式 &#96;&#96;&#96;require_woocommerce_notice()&#96;&#96;&#96; 裡面輸出提示訊息，提示說要先啟用 WooCommerce 才能啟用我們的外掛。這段程式碼我們帶到了 WordPress 的核心概念勾點，勾點有兩種：action 與 filter。

action 是可以把一些特定的函式交由勾點來執行，就像 &#96;&#96;&#96;add_action( &#39;admin_notices&#39;, &#39;require_woocommerce_notice&#39; )&#96;&#96;&#96; 這樣。Filter 是可以修改參數、顯示文字或設定值，就像&#96;&#96;&#96;add_filter( &#39;active_plugins&#39;, &#39;new_plugin_active&#39; )&#96;&#96;&#96; 這樣，action 的回呼函式不一定要輸出結果，而 filter 因為修改資料所以會需要 return 回傳修改後的結果。

勾點可以放在佈景主題或是外掛來執行，這樣就不用修改到核心程式碼。如果現在還不了解勾點是什麼也沒關係，後續關於勾點的部分會在外掛實作中一直反覆出現，

### 常數定義與自動載入

當判斷我們的外掛可以正確被啟用後，接下來就先把之後會常用到的常數定義出來：

&#96;&#96;&#96;php
&lt;?php

&#x2F;**
 * @link              https:&#x2F;&#x2F;oberonlai.blog
 * @since             1.0.0
 * @package           irp
 *
 * @wordpress-plugin
 * Plugin Name:       WooCommerce 鐵人付外掛
 * Plugin URI:        https:&#x2F;&#x2F;oberonlai.blog
 * Description:       新增 WooCommerce 鐵人支付金流
 * Version:           1.0.0
 * Author:            Oberon Lai
 * Author URI:        https:&#x2F;&#x2F;oberonlai.blog
 * License:           GPL-2.0+
 * License URI:       http:&#x2F;&#x2F;www.gnu.org&#x2F;licenses&#x2F;gpl-2.0.txt
 * Text Domain:       irp
 * Domain Path:       &#x2F;languages
 * WC tested up to: 5.6.0
 * WC requires at least: 5
 *&#x2F;
	
&#x2F;**
 * Check WooCommerce Activied
 * 略
 *&#x2F;
	
&#x2F;**
 * Define Variable
 *&#x2F;
define( &#39;IRP_PLUGIN_VERSION&#39;, &#39;1.0.0&#39; );
define( &#39;IRP_PLUGIN_URL&#39;, plugin_dir_url( __FILE__ ) );
define( &#39;IRP_PLUGIN_DIR&#39;, plugin_dir_path( __FILE__ ) );
define( &#39;IRP_PLUGIN_BASENAME&#39;, plugin_basename( __FILE__ ) );

&#x2F;**
 * Autoload
 *&#x2F;
require_once( IRP_PLUGIN_DIR . &#39;vendor&#x2F;autoload.php&#39; );
\A7\autoload( IRP_PLUGIN_DIR . &#39;src&#39; );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這四個常數經常會用到，像是引入 js 或 css 檔，就可以用這些常數來指定路徑與版本號，Autoload 的部分使用了由 Aaron Holbrook 所開發的 a7/autoload，他使用了迴圈去掃指定目錄的所有檔案，然後再透過 autoload 機制去逐一載入，雖然該套件已經有兩年多沒更新了，但用到目前為止都非常的穩定沒出過任何問題。</p>
<p>用了它在 src 目錄底下所有的檔案，不管有幾層目錄、多少檔案，透過它就可以自動完整載入，縱使修改了檔名或是資料夾名稱，依舊都能正常運作，非常適合需要頻繁變動的資料夾結構。</p>
<p>下一步這我們就用 Composer 來進行安裝。</p>
<h3 id="設定-Composer-環境"><a href="#設定-Composer-環境" class="headerlink" title="設定 Composer 環境"></a>設定 Composer 環境</h3><p>安裝 Composer 的教學網路非常多，這邊主要示範給 WordPress 外掛開發者的環境設定。第一步先開啟終端機然後把目錄切到正在開發的外掛底下然後執行 composer init：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">~&#x2F;Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins&#x2F;iron-pay $ composer init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>composer 會用對話式的介面來協助我們進行設定，依序要回答六個問題：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">This command will guide you through creating your composer.json config.

Package name (&lt;vendor&gt;&#x2F;&lt;name&gt;) [oberonlai&#x2F;my-plugin]: 
Description []: 
Author [Oberon Lai &lt;m615926@gmail.com&gt;, n to skip]: 
Minimum Stability []: stable
Package Type (e.g. library, project, metapackage, composer-plugin) []: project
License []: propreitary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>基本上因為這不是要上傳到 Composer 套件庫 Packagist 的套件，我習慣都直接採用預設值，如果有特殊需求可以再個別調整，第七題是關鍵，它會問你是否要安裝相依套件：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Define your dependencies.

Would you like to define your dependencies (require) interactively [yes]? 
Search for a package: a7&#x2F;autoload
Enter the version constraint to require (or leave blank to use the latest version): <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>輸入套件名稱 a7/autoload 按下 Enter 後 Composer 就會開始自動搜尋 Packagist 上面的所有 PHP 套件並且指定安裝的版本，如果要安裝最新版就直接 Enter 下一步即可，<a href="https://github.com/a7/autoload">a7/autoload</a> 這個套件可以把指定資料夾裡面的檔案全部自動載入，如果沒有它就需要一個一個手動指定要自動載入的資料夾。</p>
<p>完成後接下來又會再問一次是否要搜尋其他套件，這邊我們什麼都不輸入直接下 Enter 即可。</p>
<p>接下來它會詢問是否要安裝只有在開發時才需要的套件，像是做單元測試 PHPUnit 這一類只會在開發環境中需要的套件就可以在這邊安裝，但目前我們先跳過，之後講解單元測試的文章再另行說明：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Would you like to define your dev dependencies (require-dev) interactively [yes]? no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接下來就會看到整個 Composer 設定檔的草稿，它會請你確認是否正確，輸入 Enter 即可，這樣就完成 composer.json 設定檔了。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">&#123;
    &quot;name&quot;: &quot;oberonlai&#x2F;irpon-pay&quot;,
    &quot;type&quot;: &quot;project&quot;,
    &quot;require&quot;: &#123;
        &quot;a7&#x2F;autoload&quot;: &quot;^2.1&quot;
    &#125;,
    &quot;license&quot;: &quot;propreitary&quot;,
    &quot;authors&quot;: [
        &#123;
            &quot;name&quot;: &quot;Oberon Lai&quot;,
            &quot;email&quot;: &quot;m615926@gmail.com&quot;
        &#125;
    ],
    &quot;minimum-stability&quot;: &quot;stable&quot;
&#125;

Do you confirm generation [yes]? yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最後它會問你是否要安裝設定檔中的套件，按下 Enter 即可</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Would you like to install dependencies now [yes]? yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最後就會出現安裝完成的訊息，這就代表我們已經把 Composer 已經所需套件準備完成：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">No lock file found. Updating dependencies instead of installing from lock file. Use composer update over composer install if you do not have a lock file.
Loading composer repositories with package information
Updating dependencies
Lock file operations: 1 install, 0 updates, 0 removals
  - Locking a7&#x2F;autoload (2.1)
Writing lock file
Installing dependencies from lock file (including require-dev)
Package operations: 1 install, 0 updates, 0 removals
  - Installing a7&#x2F;autoload (2.1): Extracting archive
Generating autoload files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>觀察我們外掛的目錄，會發現多了 composer.json、composer.lock 以及 vendor 資料夾，未來我們任何從 Composer 安裝的套件都會放在 vendor 這個資料夾底下。</p>
<p>完成 Composer 的設定後我們再新增一個 src 資料夾，之後需要自動載入的類別都會放在這個目錄下：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">~&#x2F;Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins&#x2F;iron-pay $ mkdir src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>到這邊，外掛的基本結構就完成了：</p>
<pre class="line-numbers language-none"><code class="language-none">iron-pay
├── composer.json
├── composer.lock
├── iron-pay.php
├── src
└── vendor
    ├── a7
    ├── autoload.php
    └── composer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下來我們開始來進行設定頁面的實作。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
      </tags>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰（四）- 資料庫結構</title>
    <url>/tw/woocommerce-payment-database/</url>
    <content><![CDATA[<p>在開始開發金流外掛的後台設定頁面前，我們先來快速認識一下 WordPress 的資料表，同時介紹讀取寫入會用到的函式，以下為有安裝 WooCommerce 的 WordPress 網站所有的資料表：</p>
<pre class="line-numbers language-none"><code class="language-none">wp_actionscheduler_actions
wp_actionscheduler_claims
wp_actionscheduler_groups
wp_actionscheduler_logs
* wp_commentmeta
* wp_comments
* wp_links
* wp_options
* wp_postmeta
* wp_posts
* wp_term_relationships
* wp_term_taxonomy
* wp_termmeta
* wp_terms
* wp_usermeta
* wp_users
wp_wc_admin_note_actions
wp_wc_admin_notes
wp_wc_category_lookup
wp_wc_customer_lookup
wp_wc_download_log
wp_wc_order_coupon_lookup
wp_wc_order_product_lookup
wp_wc_order_stats
wp_wc_order_tax_lookup
wp_wc_product_meta_lookup
wp_wc_reserved_stock
wp_wc_tax_rate_classes
wp_wc_webhooks
wp_woocommerce_api_keys
wp_woocommerce_attribute_taxonomies
wp_woocommerce_downloadable_product_permissions
wp_woocommerce_log
wp_woocommerce_order_itemmeta
wp_woocommerce_order_items
wp_woocommerce_payment_tokenmeta
wp_woocommerce_payment_tokens
wp_woocommerce_sessions
wp_woocommerce_shipping_zone_locations
wp_woocommerce_shipping_zone_methods
wp_woocommerce_shipping_zones
wp_woocommerce_tax_rate_locations
wp_woocommerce_tax_rates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>WordPress 本身預設的資料表只有 * 註記的那幾個，其他都是 WooCommerce 產生的，每張表都有 wp_ 的前綴，這可以在 wp-config.php 裡面透過以下變數來修改：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$table_prefix</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'wp_'</span><span class="token punctuation">;</span> <span class="token comment">// 在第一次安裝還沒有建立庫時修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果你的 WordPress 是使用套裝軟體安裝的，因為安全性考量他們會自動幫你修改資料表前綴，所以當你進入資料庫要找的是 xxx_options、xxx_posts 這些資料表，看前綴後面的名稱就好。接下來介紹五個表，分別是與設定、訂單、以及會員資料相關的表。</p>
<span id="more"></span>


<h2 id="wp-options"><a href="#wp-options" class="headerlink" title="wp_options"></a>wp_options</h2><p>該表存放全站設定相關的資料，也就是在後台左側選單 &gt; 設定裡面的設定都會存在這張表裡面，我們要開發的 WooCommerce 金流外掛，也是把相關的變數存在這個表中。為了節省效能，在寫入時可以先把設定的值組成陣列再進行 INSERT。</p>
<table>
<thead>
<tr>
<th>#</th>
<th>column_name</th>
<th>data_type</th>
<th>character_set</th>
<th>collation</th>
<th>is_nullable</th>
<th>column_default</th>
<th>extra</th>
<th>foreign_key</th>
<th>comment</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>option_id</td>
<td>bigint(20) unsigned</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>NULL</td>
<td>auto_increment</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>option_name</td>
<td>varchar(191)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>option_value</td>
<td>longtext</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>autoload</td>
<td>varchar(20)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td>yes</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>wp_options 相關的函式定義在 wp-include/option.php，常用的如下：</p>
<p><strong>add_option( $option_name, $option_value, autoload=yes) 新增設定</strong></p>
<p>它會先自動檢查 $option_name 是否存在，不存在的話新增一筆資料，已存在的話會把 $option_value 進行覆寫。autoload 預設為 yes，作用是設定該 $option 是否加入到快取之中。如果你確定每個頁面都會用到這個設定的話，就保持預設值 yes，反之為 no。範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// add option</span>
<span class="token variable">$twitters</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'@abc'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'@cde'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'@fgh'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用陣列來整理 option_value</span>
<span class="token function">add_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'irp_twitter_accounts'</span><span class="token punctuation">,</span> <span class="token variable">$twitters</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>update_option( $option_name, $option_value ) 更新設定</strong></p>
<p>更新已存在的 $optioni_value，如果該 $option_name 不存在的會自動新增一筆，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// update option</span>
<span class="token variable">$twitters</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span>
	<span class="token variable">$twitters</span><span class="token punctuation">,</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'@ijk'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'@lmn'</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">update_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'irp_twitter_accounts'</span><span class="token punctuation">,</span> <span class="token variable">$twitters</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>get_option( $option_name ) 取得設定欄位的值</strong></p>
<p>範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// get option</span>
<span class="token variable">$irp_twitter_accounts</span> <span class="token operator">=</span> <span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'irp_twitter_accounts'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span> <span class="token variable">$irp_twitter_accounts</span> <span class="token keyword">as</span> <span class="token variable">$account</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">echo</span> <span class="token variable">$account</span><span class="token operator">.</span><span class="token string single-quoted-string">', '</span><span class="token punctuation">;</span> <span class="token comment">// 輸出 @abc, @cde, @fgh, @ijk, @lmn</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>delete_option( $option_name ) 刪除設定欄位</strong></p>
<p>範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// delete option</span>
<span class="token function">delete_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'irp_twitter_accounts'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h2 id="wp-posts"><a href="#wp-posts" class="headerlink" title="wp_posts"></a>wp_posts</h2><p>存放文章、頁面、選單、文章版本、以及自定義文章的資料表，而自定義文章就是用這個表裡面的 post_type 欄位來紀錄不同的文章類型，WooCommerce 商品的 post_type 為 proudct，訂單則為 shop_order，它並沒有新建資料表來存放，而是放在 wp_posts 裡面。</p>
<table>
<thead>
<tr>
<th>#</th>
<th>column_name</th>
<th>data_type</th>
<th>character_set</th>
<th>collation</th>
<th>is_nullable</th>
<th>column_default</th>
<th>extra</th>
<th>foreign_key</th>
<th>comment</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>ID</td>
<td>bigint(20) unsigned</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>NULL</td>
<td>auto_increment</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>post_author</td>
<td>bigint(20) unsigned</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>post_date</td>
<td>datetime</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>0000-00-00 00:00:00</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>post_date_gmt</td>
<td>datetime</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>0000-00-00 00:00:00</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>post_content</td>
<td>longtext</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>post_title</td>
<td>text</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>post_excerpt</td>
<td>text</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>post_status</td>
<td>varchar(20)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td>publish</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>comment_status</td>
<td>varchar(20)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td>open</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>ping_status</td>
<td>varchar(20)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td>open</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>11</td>
<td>post_password</td>
<td>varchar(255)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>12</td>
<td>post_name</td>
<td>varchar(200)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>13</td>
<td>to_ping</td>
<td>text</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>14</td>
<td>pinged</td>
<td>text</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>15</td>
<td>post_modified</td>
<td>datetime</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>0000-00-00 00:00:00</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>16</td>
<td>post_modified_gmt</td>
<td>datetime</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>0000-00-00 00:00:00</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>17</td>
<td>post_content_filtered</td>
<td>longtext</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>18</td>
<td>post_parent</td>
<td>bigint(20) unsigned</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>19</td>
<td>guid</td>
<td>varchar(255)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>20</td>
<td>menu_order</td>
<td>int(11)</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>21</td>
<td>post_type</td>
<td>varchar(20)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td>post</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>22</td>
<td>post_mime_type</td>
<td>varchar(100)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>23</td>
<td>comment_count</td>
<td>bigint(20)</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>wp_posts 相關的函式定義在 wp-include/post.php，常用的如下：</p>
<p><strong>wp_inset_post( $postarr, $wp_error=false) 插入新文章</strong></p>
<p>$postarr 是一個定義新文章內容的陣列，裡面有許多參數可以定義，$wp_error 為 true 時會在文章插入失敗時回傳一個 WP_Error 物件，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// insert post - set post status to draft</span>
<span class="token variable">$args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'post_title'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'文章標題'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'post_excerpt'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'文章摘要'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'post_content'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'內文'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'post_status'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'draft'</span><span class="token punctuation">,</span>  <span class="token comment">// 文章狀態，有 draft、publish</span>
	<span class="token string single-quoted-string">'post_type'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'post'</span><span class="token punctuation">,</span> <span class="token comment">// 文章類型，預設為 post，可以是 page 或其他 CPT</span>
	<span class="token string single-quoted-string">'post_author'</span>  <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 作者 ID</span>
	<span class="token string single-quoted-string">'menu_order'</span>   <span class="token operator">=></span> <span class="token number">0</span> <span class="token comment">// 文章順序</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$post_id</span> <span class="token operator">=</span> <span class="token function">wp_insert_post</span><span class="token punctuation">(</span> <span class="token variable">$args</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 新文章插入完成後會回傳該文章的 post ID</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'post ID: '</span> <span class="token operator">.</span> <span class="token variable">$post_id</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>wp_update_post( $postarr, $wp_error = false) 更新文章資料</strong></p>
<p>同樣使用 $postarr 陣列來更新資料，記得要提供需要被更新的文章 ID，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// update post - change post status to publish</span>
<span class="token variable">$args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'ID'</span>          <span class="token operator">=></span> <span class="token variable">$post_id</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'post_status'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'publish'</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">wp_update_post</span><span class="token punctuation">(</span> <span class="token variable">$args</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>get_post( $post=null, $output=OBJECT, $filter=’raw’) 取得文章資料</strong></p>
<p>第一個參數指定要取得的文章的 ID，如果是在 post loop 中的話留空會自動取得當前文章。$output 資料格式可以設定為 OBJECT 或是 ARRAY_A (關聯式陣列) 與 ARRAY_N(索引式陣列)。$filter 參數為設定要 sanitize 的模式，可選值有 raw、edit、db、display、attribute 與 js，可以做輸出內容的過濾。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// get post - return post data as an object</span>
<span class="token variable">$post</span> <span class="token operator">=</span> <span class="token function">get_post</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'Object Title: '</span> <span class="token operator">.</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">post_title</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>

<span class="token comment">// get post - return post data as an array</span>
<span class="token variable">$post</span> <span class="token operator">=</span> <span class="token function">get_post</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token constant">ARRAY_A</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'Array Title: '</span> <span class="token operator">.</span> <span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'post_title'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>get_posts( $args = null ) 取得文章列表</strong></p>
<p>當要取得文章清單時，像是最新文章列表、特定分類列表就可以使用這支函式。它是根據 WP_Query 類別所設計的。$args 參數可以用陣列的方式來提供文章取得條件，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// get posts - return 100 posts</span>
<span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token function">get_posts</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'numberposts'</span>      <span class="token operator">=></span> <span class="token string single-quoted-string">'100'</span><span class="token punctuation">,</span> <span class="token comment">// 顯示文章數量</span>
		<span class="token string single-quoted-string">'category'</span>         <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">// 文章分類 ID</span>
		<span class="token string single-quoted-string">'orderby'</span>          <span class="token operator">=></span> <span class="token string single-quoted-string">'date'</span><span class="token punctuation">,</span>  <span class="token comment">// 排序條件</span>
		<span class="token string single-quoted-string">'order'</span>            <span class="token operator">=></span> <span class="token string single-quoted-string">'DESC'</span><span class="token punctuation">,</span>  <span class="token comment">// 排序方式，DESC 為降冪，ASC 為升冪</span>
		<span class="token string single-quoted-string">'include'</span>          <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 只顯示特定的文章</span>
		<span class="token string single-quoted-string">'exclude'</span>          <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 排除指定文章</span>
		<span class="token string single-quoted-string">'meta_key'</span>         <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>  <span class="token comment">// 顯示帶有指定欄位的文章</span>
		<span class="token string single-quoted-string">'meta_value'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>  <span class="token comment">// 顯示帶有指定欄位值的文章</span>
		<span class="token string single-quoted-string">'post_type'</span>        <span class="token operator">=></span> <span class="token string single-quoted-string">'post'</span><span class="token punctuation">,</span>  <span class="token comment">// 文章類型</span>
		<span class="token string single-quoted-string">'suppress_filters'</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 如果需要使用 filter 來修改 get_posts 的結果，這個參數要設為 false</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// loop all posts and display the ID &amp; title</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span> <span class="token variable">$posts</span> <span class="token keyword">as</span> <span class="token variable">$post</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">echo</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token constant">ID</span> <span class="token operator">.</span> <span class="token string single-quoted-string">': '</span> <span class="token operator">.</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">post_title</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>wp_delete_post( $postid=0, $force_delete =false ) 刪除指定文章</strong></p>
<p>第一個參數為要刪除的文章 ID，第二個參數如果為 true 的話，文章就不會進垃圾桶而直接被刪除，代表連救回來的機會都沒有，預設值為 false，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// delete post - skip the trash and permanently delete it  </span>
<span class="token function">wp_delete_post</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="wp-postmeta"><a href="#wp-postmeta" class="headerlink" title="wp_postmeta"></a>wp_postmeta</h2><p>如果內建的文章欄位不夠用，想要新增其他欄位的話就會寫在這張表中。WordPress 提供很方便的作法讓你不用再自行增加資料表，每個 postmeta 使用 post_id 來對應到文章。</p>
<p>如果你需要新增欄位但又不想讓使用者在文章編輯畫面看到該欄位，可以用下底線開頭的欄位名稱，這樣 WordPress 會自動在後台隱藏這個欄位而不被使用者看見。</p>
<p>在開發金流外掛時會需要新增一些訂單欄位，像是從金流商回傳的訂單資料、卡號末四碼、以及相關資訊，而這些資料就可以放在 postmeta。</p>
<table>
<thead>
<tr>
<th>#</th>
<th>column_name</th>
<th>data_type</th>
<th>character_set</th>
<th>collation</th>
<th>is_nullable</th>
<th>column_default</th>
<th>extra</th>
<th>foreign_key</th>
<th>comment</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>meta_id</td>
<td>bigint(20) unsigned</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>NULL</td>
<td>auto_increment</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>post_id</td>
<td>bigint(20) unsigned</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>meta_key</td>
<td>varchar(255)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>YES</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>meta_value</td>
<td>longtext</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>YES</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>相關函式如下：</p>
<p><strong>get_post_meta( $post_id, $meta_key, $single=false ) 取得文章欄位值</strong></p>
<p>第一個參數為文章 ID，第二個為欄位名稱，如果留空值，會回傳所有相同 $meta_key 的 $meta_value，$single 為 true 的話會以字串回傳符合第一個 $meta_key 的 $meta_value，false 的話則會使用陣列回傳所有符合的 $meta_value，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// get post meta - get 1st instance of key</span>
<span class="token variable">$student</span> <span class="token operator">=</span> <span class="token function">get_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'irp_order'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'oldest student: '</span> <span class="token operator">.</span> <span class="token variable">$student</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>update_post_meta( $post_id, $meta_key, $meta_value, $prev_value=’’) 更新文章欄位</strong></p>
<p>需要注意的是第四個參數，如果 $meta_key 有多筆符合，在 $prev_value 為空的情況下，$meta_value 只會修改第一筆 $meta_key，如果 $prev_value 有符合多筆 $meta_key 的 $meta_value 其中一筆，則這一筆的 value 會被第三個 $meta_value 給取代掉。範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// update post meta - public metadata</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'You SHOULD see this custom field when editing your latest post.'</span><span class="token punctuation">;</span>
<span class="token function">update_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'irp_displayed_field'</span><span class="token punctuation">,</span> <span class="token variable">$content</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// update post meta - hidden metadata</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'SHOULD'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'SHOULD NOT'</span><span class="token punctuation">,</span> <span class="token variable">$content</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">update_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_irp_hidden_field'</span><span class="token punctuation">,</span> <span class="token variable">$content</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>add_post_meta( $post_id, $meta_key, $meta_value, $unique=false)</strong></p>
<p>習慣上新增文章欄位會使用 update_post_meta()，因為它有判斷 $meta_key 是否存在的功能，會用 add_post_meta 的情境在於要新增多筆 $meat_value 到相同的 $meta_key。第四個參數 $unique 為 true 時代表不允許有多筆相同的 $meta_key，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">add_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'irp_orders'</span><span class="token punctuation">,</span> <span class="token variable">$orders</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>delete_post_meta( $post_id, $meta_key, $meta_value=’’ ) 刪除文章欄位</strong></p>
<p>第三個參數當有指定 $meta_value 只會刪除符合該 value 的 $meta_key，範例如下</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// delete post meta</span>
<span class="token function">delete_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'irp_student'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="wp-users"><a href="#wp-users" class="headerlink" title="wp_users"></a>wp_users</h2><p>存放使用者帳密與基本資料，如果要從資料庫修改使用者相關資訊，像是客戶忘記密碼或是要新增一個管理員帳號，就可以在這個表進行處理。</p>
<table>
<thead>
<tr>
<th>#</th>
<th>column_name</th>
<th>data_type</th>
<th>character_set</th>
<th>collation</th>
<th>is_nullable</th>
<th>column_default</th>
<th>extra</th>
<th>foreign_key</th>
<th>comment</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>ID</td>
<td>bigint(20) unsigned</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>NULL</td>
<td>auto_increment</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>user_login</td>
<td>varchar(60)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>user_pass</td>
<td>varchar(255)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>user_nicename</td>
<td>varchar(50)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>user_email</td>
<td>varchar(100)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>user_url</td>
<td>varchar(100)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>user_registered</td>
<td>datetime</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>0000-00-00 00:00:00</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>user_activation_key</td>
<td>varchar(255)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>user_status</td>
<td>int(11)</td>
<td>NULL</td>
<td>NULL</td>
<td>NO</td>
<td>NULL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>display_name</td>
<td>varchar(250)</td>
<td>utf8mb4</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>wp_users 相關的函式定義在 wp-include/pluggable.php、wp-include/user.php，常用的如下：</p>
<p><strong>wp_insert_user( $userdata ) 新增使用者</strong></p>
<p>$userdata 為一個陣列，使用陣列來定義使用者的資料欄位，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// insert user</span>
<span class="token variable">$userdata</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'user_login'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'oberon'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'user_pass'</span>     <span class="token operator">=></span> <span class="token string single-quoted-string">'!@oberon!@#$'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'user_nicename'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'oberon'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'user_url'</span>      <span class="token operator">=></span> <span class="token string single-quoted-string">'https://oberonlai.blog/'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'user_email'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'m615926@gmail.com'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'display_name'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'Oberon Lai'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'nickname'</span>      <span class="token operator">=></span> <span class="token string single-quoted-string">'Oberon'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'first_name'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'Oberoni'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'last_name'</span>     <span class="token operator">=></span> <span class="token string single-quoted-string">'Lai'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'description'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'This is a WordPress Administrator account.'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'role'</span>          <span class="token operator">=></span> <span class="token string single-quoted-string">'administrator'</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">wp_insert_user</span><span class="token punctuation">(</span> <span class="token variable">$userdata</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>wp_create_user( $username, $password, $email ) 新增使用者簡易版</strong></p>
<p>相較於 wp_insert_user()，它只要提供帳戶名、密碼、電子郵件三個參數就可以新增使用者，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// create users</span>
<span class="token function">wp_create_user</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'oberon'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'!@oberon!@#$'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'m615926@gmail.com'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>wp_update_user( $userdata ) 修改 wp_users 與 wp_usermeta 裡面的欄位</strong></p>
<p>如果修改了使用者密碼，所有的 cookie 會被清除，該使用者會強制登出，$userdata 的欄位與 wp_insert_user() 相同，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// update user-change username fields and change role to admin</span>
<span class="token variable">$userdata</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
	<span class="token string single-quoted-string">'ID'</span>         <span class="token operator">=></span> <span class="token variable">$user</span><span class="token operator">-></span><span class="token constant">ID</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'user_pass'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'!@oberon!@#$'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'first_name'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Oberon'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'last_name'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'Lai'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'user_url'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'https://oberonlai.blog'</span><span class="token punctuation">,</span>
	<span class="token string single-quoted-string">'role'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'administrator'</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">wp_update_user</span><span class="token punctuation">(</span> <span class="token variable">$userdata</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果要用這個函式來讓使用者在前台更新登入密碼，記得要在 init 執行，因為它會觸發登出再登入的動作，這個動作需要清除與設定 Cookie，因此必須放在頁面的最前面來執行，也就是要比 get_header() 還要前面。</p>
<p>此外，重設密碼後的登入是分三個動作：wp_set_password()、wp_set_auth_cookie()、wp_set_current_user()，wp_update_user() 把這些動作都封裝起來可以直接使用。</p>
<p><strong>get_user_by( $field, $value ) 根據使用者資料來取得使用者</strong></p>
<p>取得的使用者會以 WP_User 物件進行回傳，這支的作用等同於 Sql 語句下：SELECT * FROM wp_users WHERE $field = $value，$field 是使用者資料欄位，$value 是使用者資料值，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// get user by email</span>
<span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">get_user_by</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'email'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'m615926@gmail.com'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'username: '</span> <span class="token operator">.</span> <span class="token variable">$user</span><span class="token operator">-></span><span class="token property">user_login</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' / ID: '</span> <span class="token operator">.</span> <span class="token variable">$user</span><span class="token operator">-></span><span class="token constant">ID</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>wp_delete_user( $user_id, $reassign ) 刪除使用者並把該使用者文章移轉給其他人</strong></p>
<p>第一個參數為要被刪除的使用者 ID，第二個參數為要繼承文章的使用者 ID，要注意的是如果第二個參數沒有指定，則該使用者的文章都會被移除，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// delete user-delete the original admin and set their posts to our new admin</span>
<span class="token function">wp_delete_user</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token operator">-></span><span class="token constant">ID</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="wp-usermeta"><a href="#wp-usermeta" class="headerlink" title="wp_usermeta"></a>wp_usermeta</h2><p>記錄使用者更多更詳細的資料，也就是除了 wp_user 已經內建的欄位以外的使用者資料，可自行新增使用者欄位，相關函式常用的如下：</p>
<p><strong>get_user_meta( $user_id, $meta_key, $single=false ) 取得特定使用者的資料</strong></p>
<p>$user_id 為使用者 id，$meta_key 要取得的欄位，如果留空值，會回傳所有相同 $meta_key 的 $meta_value，$single 為 true 的話會以字串回傳符合第一個 $meta_key 的 $meta_value，false 的話則會使用陣列回傳所有符合的 $meta_value，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// get brian's id</span>
<span class="token variable">$oberon_id</span> <span class="token operator">=</span> <span class="token function">get_user_by</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'login'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'oberon'</span> <span class="token punctuation">)</span><span class="token operator">-></span><span class="token constant">ID</span><span class="token punctuation">;</span>
<span class="token variable">$oberons_wife</span> <span class="token operator">=</span> <span class="token function">get_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$brian_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'oberon_wife'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Wife 可能有多個(?)，true 的話回傳第一個</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"Oberon's wife: "</span> <span class="token operator">.</span> <span class="token variable">$oberons_wife</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>update_user_meta( $user_id, $meta_key, $meta_value, $prev_value=”” ) 更新使用者的資料</strong></p>
<p>需要注意的是第四個參數，如果 $meta_key 有多筆符合，在 $prev_value 為空的情況下，$meta_value 只會修改第一筆\ $meta_key，如果 $prev_value 有符合多筆 $meta_key 的 $meta_value 其中一筆，則這一筆的 value 會被第三個 $meta_value 給取代掉。範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// update user meta - this will update oberon to oberon jr.</span>
<span class="token function">update_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$oberon_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'oberon_kid'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Oberon Jr'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Miffy'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Oberon 有多個小孩(多筆相同的 meta_key)，名字叫做 Miffy 的會被修改為 Oberon Jr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>add_user_meta( $user_id, $meta_key, $meta_value, $unique=false) 新增使用者資料欄位</strong></p>
<p>習慣上新增使用者資料會使用 update_user_meta()，因為它有判斷 $meta_key 是否存在的功能，會用 add_user_meta 的情境在於要新增多筆 $meat_value 到相同的 $meta_key。第四個參數 $unique 為 true 時代表不允許有多筆相同的 $meta_key，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// add user meta - 3rd parameter is a unique value</span>
<span class="token function">add_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$oberon_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'oberon_kid'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Dalya'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">add_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$oberon_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'oberon_kid'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Oberon Jr'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">add_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$oberon_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'oberon_kid'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Nina'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">add_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$oberon_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'oberon_kid'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Cam'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">add_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$oberon_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'oberon_kid'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Aksel'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>delete_user_meta( $user_id, $meta_key, $meta_value=””) 刪除使用者資料</strong></p>
<p>第三個參數當有指定 $meta_value 只會刪除符合該 value 的 $meta_key，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// delete oberon's user meta</span>
<span class="token function">delete_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$oberon_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'oberon_wife'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">delete_user_meta</span><span class="token punctuation">(</span> <span class="token variable">$oberon_id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'oberon_kid'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Miffy'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 沒指定 Miffy 的話則所有小孩都會被刪除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>關於 WordPress 資料庫還有很多部分可以介紹，像是自訂資料表以及全域變數 $wpdb 等等，現階段我們把焦點先放在開發金流的設定頁面上，下一篇會介紹 WooCommerce API。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
      </tags>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰（五）- 全域設定</title>
    <url>/tw/woocommerce-payment-options/</url>
    <content><![CDATA[<p>對於 WordPress 資料庫結構有個大概的認識後，我們就能把後台的設定選項歸納為兩種，一種是放在 wp_options 的全域設定，另外一種是放在 wp_{xxx}meta 裡面的局部設定。在這個金流外掛之中我們會做到以下兩種設定欄位：</p>
<ul>
<li>金流商的商店代號、金鑰以及除錯設定</li>
<li>訂單紀錄交易回傳結果</li>
</ul>
<p>第一個種欄位是全域設定，所以我們會把他寫在 wp_options 裡面，第二種是局部設定，寫在 wp_postmeta 裡面。這篇文章我們先來處理全域設定的部分。</p>
<p>如果我們要做的設定選項無法關聯到 post、user 或是其他資料欄位的話，放在全域設定會是比較好的選擇，像是網站的標題、描述、語系、時區這些跟網站本身有關的項目，或是我們自行開發的外掛需要提供一些設定功能時，就會放在 wp_options 裡面。</p>
<p>WordPress 的 Settings API 提供了豐富的函式可以來新增後台選單以及設定項的表單欄位，如果我們要製作設定頁面完全不用寫到半行 HTML 跟處理表單 POST 的問題，WordPress 全都幫我們封裝好了，而 WooCommerce 的設定 API 跟 WordPress 不同，它另外寫了一支抽象類別 WC_Settings_Page 來讓我們繼承使用。</p>
<span id="more"></span>

<p>由於我們是要開發 WooCommerce 金流外掛為主，所以本篇會用 WooCommerce 的 Settings API 來做說明。先讓我們回顧一下目前鐵人付外掛的資料夾結構：</p>
<pre class="line-numbers language-none"><code class="language-none">iron-pay
├── composer.json
├── composer.lock
├── iron-pay.php
├── src
└── vendor
    ├── a7
    ├── autoload.php
    └── composer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>將目錄切換到 src 資料夾，並且新增 Options.php：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">~&#x2F;Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins&#x2F;iron-pay$ cd src
~&#x2F;Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins&#x2F;iron-pay$ touch Options.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>關於檔案的命名方式，在 WordPress Coding Standard 的建議是採用 class-xxx.php 這樣的形式，但由於之後會提到測試 PHPUnit 的部分，為了要遵循 PSR-4 的自動載入機制，使用駝峰再搭配命名空間的寫法會比較方便後續的作業，取名為 Options 是為了要跟資料表做呼應，代表這個檔案負責處理的是全域設定的相關功能。</p>
<p>WooCommerce 設定頁的基本邏輯如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/**
 * Add setting page
 *
 * @param array $settings settings.
 */</span>
<span class="token keyword">class</span> <span class="token class-name">IronPay_Setting</span> <span class="token keyword">extends</span> <span class="token class-name">WC_Settings_Page</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">//...</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">add_setting_page</span><span class="token punctuation">(</span> <span class="token variable">$settings</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token variable">$settings</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IronPay_Setting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token variable">$settings</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_get_settings_pages'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'add_setting_page'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>它是透過一個 Filter 勾點來修改既有的 $settings 陣列，而回呼函式 add_setting_page 要處理的就是增加 $settings 的值後返回它。而新增 $settings 的值是要繼承抽象類別 WC_Settings_Page 並返回實例，接下來開啟 Opitons.php 貼上以下程式碼：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Irp</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">set_options</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">class</span> <span class="token class-name">Options</span> <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>WC_Settings_Page</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 設定項實作</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_get_settings_pages'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'irp\set_options'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先，為了可以大量減少在類別或是函式名稱增加前綴來避免衝突的做法，以及方便程式碼重用，我們改用命名空間的作法來進行辨識，這樣如果要用在其他專案只要修改命名空間就好，不然沒有前綴像 set_options 或是 Options 這種菜市場名一定每天都會噴錯。因為使用了命名空間，所以在需要繼承的類別以及函式要注意到路徑問題。</p>
<p>其次，為了方便管理，我把繼承類別放在函式之中，最後再透過 woocommerce_get_settings_pages 勾點去執行它，之後如果要新增相關的設定欄位，都可以在 Options 這個檔案中一併處理。接下來是 Options 類別的實作細節，包含建構式在內一共有七個方法，我們逐一來看：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> Options <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>WC_Settings_Page</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'irp_setting_gateway'</span><span class="token punctuation">;</span>
		<span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_settings_tabs_array'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'add_settings_tab'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">51</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_settings_'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'output'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_settings_save_'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'save'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在建構式中首先設定了父類別的 ID 屬性，這代表這組全域設定的代稱，後面設定了三個勾點，分別是管理 WooCommerce 設定頁籤、輸出設定欄位、儲存設定欄位三個功能，第一個方法 add_settgins_tab 增加設定頁籤：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/**
 * Add a new settings tab to the WooCommerce settings tabs array.
 *
 * @param array $settings_tabs setting tab.
 * @return array $settings_tabs setting tab.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add_settings_tab</span><span class="token punctuation">(</span> <span class="token variable">$settings_tabs</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token variable">$settings_tabs</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'irp_setting_gateway'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'鐵人付設定'</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token variable">$settings_tabs</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://oberonlai.blog/wp-content/uploads/woocommerce-settings-api/woocommerce-settings-api-01.jpg"></p>
<p>第二個 output 方法為渲染表單欄位：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/**
 * Render fields html.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">global</span> <span class="token variable">$current_section</span><span class="token punctuation">;</span>
	<span class="token variable">$settings</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">set_fields</span><span class="token punctuation">(</span> <span class="token variable">$current_section</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>WC_Admin_Settings</span><span class="token operator">::</span><span class="token function">output_fields</span><span class="token punctuation">(</span> <span class="token variable">$settings</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>先用 WooCommerce 的 $current_section 來取得所在設定頁的 ID，然後傳入稍後會實作的 set_fields 方法，最後使用 WC_Admin_Settings 的靜態方法把欄位顯示在設定頁。</p>
<p>第三個 save 方法為儲存表單資料：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/**
 * Save fields value.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">global</span> <span class="token variable">$current_section</span><span class="token punctuation">;</span>
	<span class="token variable">$settings</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">set_fields</span><span class="token punctuation">(</span> <span class="token variable">$current_section</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>WC_Admin_Settings</span><span class="token operator">::</span><span class="token function">save_fields</span><span class="token punctuation">(</span> <span class="token variable">$settings</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>邏輯跟 output 相似，透過 save_fields 可以直接把欄位都寫進資料庫，無需再手動處理，最後最重要的是來新增設定欄位，也就是 set_fields 方法的實作：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/**
 * Get all the settings for this plugin for @see woocommerce_admin_fields() function.
 *
 * @return array Array of settings for @see woocommerce_admin_fields() function.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_fields</span><span class="token punctuation">(</span> <span class="token variable">$section</span> <span class="token operator">=</span> <span class="token constant">null</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token variable">$settings</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'一般設定'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'title'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_general_setting'</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'title'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'除錯資訊'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'type'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'checkbox'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'default'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'no'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'desc'</span>    <span class="token operator">=></span> <span class="token function">sprintf</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'紀錄日誌於以下路徑：&lt;code>%s&lt;/code>'</span><span class="token punctuation">,</span> <span class="token function">wc_get_log_file_path</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'iron-pay'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'id'</span>      <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_debug_log_enabled'</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'type'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'sectionend'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'id'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_general_setting'</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'商家資料設定'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'title'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_api_settings'</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'測試模式'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'checkbox'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'如果要使用測試模式請勾選，未勾選則為正式交易環境'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_testmode_enabled'</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'測試商家'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'text'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'請輸入測試商家代號'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_testmode_orgno'</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'測試金鑰'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'text'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'請輸入測試金鑰'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_testmode_secret'</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'正式商家'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'text'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'請輸入正式商家代號'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_orgno'</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'正式金鑰'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'text'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'請輸入正式金鑰'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_secret'</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'type'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'sectionend'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'id'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_api_settings'</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token variable">$settings</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到裡面就是使用陣列來定義欄位的類型與名稱，比較特別的是 type 為 sectionend 的陣列，它會對應到相同的 ID 來作為一個段落的區分，像是第一個 sectionend 對到的是 irp_general_setting 因此一般設定裡面的除錯資訊是一個區塊。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/woocommerce-settings-api/woocommerce-settings-api-02.jpg"></p>
<p>欄位的參數說明如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">array</span><span class="token punctuation">(</span>
     <span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'欄位顯示名稱'</span><span class="token punctuation">,</span>
     <span class="token string single-quoted-string">'description'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'欄位描述'</span><span class="token punctuation">,</span>
     <span class="token string single-quoted-string">'type'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'text|password|textarea|checkbox|select|multiselect'</span><span class="token punctuation">,</span>
     <span class="token string single-quoted-string">'default'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'預設值'</span><span class="token punctuation">,</span>
     <span class="token string single-quoted-string">'class'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'CSS 類別'</span><span class="token punctuation">,</span>
     <span class="token string single-quoted-string">'css'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'行內樣式'</span><span class="token punctuation">,</span>
     <span class="token string single-quoted-string">'label'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'選項標籤'</span><span class="token punctuation">,</span> <span class="token comment">// 限於 checkbox</span>
     <span class="token string single-quoted-string">'options'</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>  <span class="token comment">// select/multiselects 選項</span>
          <span class="token string single-quoted-string">'key'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'value'</span>
     <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過這樣的方式來設計欄位好處是非常方便，再加上樣式也會符合整體風格，以及內建過濾敏感字串，這要自己刻的話會花上不少時間。但如果想要設計自己的設定頁面也是完全可行的，不管是使用 WordPress Settings API 還是專門建立 custom fields 的外掛都可實現，但站在使用者角度來看，提供給 WooCommerce 的功能做在其設定頁面裡面會比較符合操作的邏輯性。</p>
<p>最後完成後的 Options.php 如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Irp</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">set_options</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">class</span> <span class="token class-name">Options</span> <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>WC_Settings_Page</span> <span class="token punctuation">&#123;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'irp_setting_gateway'</span><span class="token punctuation">;</span>
			<span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_settings_tabs_array'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'add_settings_tab'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">51</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_settings_'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'output'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_settings_save_'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'save'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">/**
		 * Add a new settings tab to the WooCommerce settings tabs array.
		 *
		 * @param array $settings_tabs setting tab.
		 * @return array $settings_tabs setting tab.
		 */</span>
		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add_settings_tab</span><span class="token punctuation">(</span> <span class="token variable">$settings_tabs</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$settings_tabs</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'irp_setting_gateway'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'鐵人付設定'</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token variable">$settings_tabs</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">/**
		 * Get all the settings for this plugin for @see woocommerce_admin_fields() function.
		 *
		 * @return array Array of settings for @see woocommerce_admin_fields() function.
		 */</span>
		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_fields</span><span class="token punctuation">(</span> <span class="token variable">$section</span> <span class="token operator">=</span> <span class="token constant">null</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$settings</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
				<span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'一般設定'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'title'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_general_setting'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'除錯資訊'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'checkbox'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'default'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'no'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'desc'</span>    <span class="token operator">=></span> <span class="token function">sprintf</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'紀錄日誌於以下路徑：&lt;code>%s&lt;/code>'</span><span class="token punctuation">,</span> <span class="token function">wc_get_log_file_path</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'iron-pay'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'id'</span>      <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_debug_log_enabled'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'type'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'sectionend'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'id'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_general_setting'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'商家資料設定'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'title'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_api_settings'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'測試模式'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'checkbox'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'如果要使用測試模式請勾選，未勾選則為正式交易環境'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_testmode_enabled'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'測試商家'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'text'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'請輸入測試商家代號'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_testmode_orgno'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'測試金鑰'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'text'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'請輸入測試金鑰'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_testmode_secret'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'正式商家'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'text'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'請輸入正式商家代號'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_orgno'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'正式金鑰'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'text'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'desc'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'請輸入正式金鑰'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_secret'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'type'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'sectionend'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'id'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_payment_api_settings'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token variable">$settings</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">/**
		 * Render fields html.
		 */</span>
		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">global</span> <span class="token variable">$current_section</span><span class="token punctuation">,</span> <span class="token variable">$hide_save_button</span><span class="token punctuation">;</span>
			<span class="token variable">$settings</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">set_fields</span><span class="token punctuation">(</span> <span class="token variable">$current_section</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>WC_Admin_Settings</span><span class="token operator">::</span><span class="token function">output_fields</span><span class="token punctuation">(</span> <span class="token variable">$settings</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">/**
		 * Save fields value.
		 */</span>
		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">global</span> <span class="token variable">$current_section</span><span class="token punctuation">;</span>
			<span class="token variable">$settings</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">set_fields</span><span class="token punctuation">(</span> <span class="token variable">$current_section</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>WC_Admin_Settings</span><span class="token operator">::</span><span class="token function">save_fields</span><span class="token punctuation">(</span> <span class="token variable">$settings</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_get_settings_pages'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'irp\set_options'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>要提供哪些設定欄位要根據串接金流商以及客戶的需求而定，完成全域設定之後接下要處理的是訂單以及使用者欄位，下一篇會介紹該如何新增自訂欄位 metabox。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
        <tag>WC_Settings_Page</tag>
      </tags>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰（六）- 自訂欄位</title>
    <url>/tw/woocommerce-payment-metabox/</url>
    <content><![CDATA[<p>先來回顧一下目前鐵人付金流外掛的資料夾結構：</p>
<pre class="line-numbers language-none"><code class="language-none">iron-pay
├── composer.json
├── composer.lock
├── iron-pay.php
├── src
│   └── Options.php
└── vendor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上一篇我們完成了 WooCommerce 的全域設定，接下來我們要在後台的訂單管理頁新增一個交易結果以及紀錄金流商的回傳訊息，以便客戶日後可以針對有問題的訂單進行追蹤。WordPress 的後台有很多現成的欄位，參考下圖：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-metabox/wordpress-metabox-01.jpg"></p>
<p>如果要新增的很容易，使用函式 <code>add_meta_box()</code> 跟勾點 <code>add_meta_boxes</code> 來傳入產生表單欄位的 HTML，最後使用勾點 <code>save_post</code> 在儲存文章時觸發 <code>update_post_meta()</code> 即可將該欄位的資訊寫入資料庫：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function">irp_add_custom_box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token variable">$screens</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'shop_order'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">foreach</span> <span class="token punctuation">(</span> <span class="token variable">$screens</span> <span class="token keyword">as</span> <span class="token variable">$screen</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">add_meta_box</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'iron_pay_result'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'鐵人付交易結果'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'irp_custom_box_html'</span><span class="token punctuation">,</span>
			<span class="token variable">$screen</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'side'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'low'</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'add_meta_boxes'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'irp_add_custom_box'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">irp_custom_box_html</span><span class="token punctuation">(</span> <span class="token variable">$post</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token variable">$code</span>   <span class="token operator">=</span> <span class="token function">get_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_irp_resp_code'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">get_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_irp_resp_result'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token delimiter important">?></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>回傳代號<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>irp_resp_code<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">esc_attr</span><span class="token punctuation">(</span> <span class="token variable">$code</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">x-readonly</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>交易結果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>irp_resp_result<span class="token punctuation">"</span></span> <span class="token attr-name">x-readonly</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">esc_textarea</span><span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
	<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">irp_save_postdata</span><span class="token punctuation">(</span> <span class="token variable">$post_id</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'irp_resp_code'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">update_post_meta</span><span class="token punctuation">(</span>
			<span class="token variable">$post_id</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'_irp_resp_code'</span><span class="token punctuation">,</span>
			<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'irp_resp_code'</span><span class="token punctuation">]</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'irp_resp_result'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">update_post_meta</span><span class="token punctuation">(</span>
			<span class="token variable">$post_id</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'_irp_resp_result'</span><span class="token punctuation">,</span>
			<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'irp_resp_result'</span><span class="token punctuation">]</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'save_post'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'irp_save_postdata'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就完成我們要的欄位了～</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-metabox/wordpress-metabox-02.jpg"></p>
<p>以上範例修改自官方文件，然而這個做法真的要記起來每個步驟真的非常困難，再加上還必須要知道一堆函式與勾點，我寫了這麼多年，每次真的要用到時都還是要去查文件，覺得效率不高，因此我整理了一套 wp-metabox 的 PHP 套件來簡化這些步驟，接下來示範如何使用這個套件來完成一樣的自訂欄位。</p>
<span id="more"></span>


<h2 id="新增訂單資料夾結構"><a href="#新增訂單資料夾結構" class="headerlink" title="新增訂單資料夾結構"></a>新增訂單資料夾結構</h2><p>我們先進入 src，資料夾，並新增 Posts 以及在 Posts 裡面的 ShopOrder 資料夾，並增加 Metabox.php 檔案，完成後資料夾結構如下：</p>
<pre class="line-numbers language-none"><code class="language-none">iron-pay
├── composer.json
├── composer.lock
├── iron-pay.php
├── src
│   ├── Options.php
│   └── Posts
│       └── ShopOrder
│           └── Metabox.php
└── vendor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>之所以要用兩個資料夾來分類，主要目的是為了方便日後管理，我是根據 WordPress 的資料庫結構來設計的，Posts 資料夾對應的是 wp_posts，而 ShopOrder 是 post type 為 shop_order 的相關檔案，裡面放了自訂欄位的 Metabox.php，如果之後需要做訂單相關的非同步處理，就可以增加 Ajax.php，或是要做訂單資料的撈取就可以新增 Query.php。</p>
<p>萬一之後客戶需要在商品管理頁面增加自訂欄位，那它的檔案路徑就會是 Posts/Product/Metabox.php，因為 Product 也是存放在 wp_posts 裡面的。這樣的分類方式可能要對資料表有一定的熟悉程度會比較好上手，這樣做的好處是如果在其他專案也需要用到訂單的自訂欄位或是其他功能，整包資料夾複製過去後修改命名空間的第一層名稱就可以重用。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token punctuation">&#123;</span>yourprefix<span class="token punctuation">&#125;</span><span class="token operator">/</span>Posts<span class="token operator">/</span>ShopOrder<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然後類別名稱、檔案名稱都不用再修改，不然常見的 WordPress 外掛檔名寫法都是要帶一堆前綴，然後宣告類別前要先檢查類別是否存在，引入命名空間之後可以很大程度增加程式碼的重用性，同時讓資料夾結構對應到命名空間，就不用再取 class-yourprefix-shop-order-metabox.php 這種又臭又長的名字。</p>
<h2 id="安裝-wp-metabox-套件"><a href="#安裝-wp-metabox-套件" class="headerlink" title="安裝 wp-metabox 套件"></a>安裝 wp-metabox 套件</h2><p>將目錄切回到 iron-pay 資料夾底下，來進行 wp-metabox 套件的安裝：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">~&#x2F;Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins&#x2F;iron-pay$ composer require oberonlai&#x2F;wp-metabox <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安裝完成後開啟 src/Posts/ShopOrder/Metabox.php 檔案，貼入以下程式碼：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Posts<span class="token punctuation">\</span>ShopOrder</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">ODS<span class="token punctuation">\</span>Metabox</span><span class="token punctuation">;</span>

<span class="token variable">$metabox</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Metabox</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'id'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'iron_pay_field'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'title'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'鐵人付交易結果'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'screen'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'shop_order'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'context'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'side'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'priority'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'low'</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$metabox</span><span class="token operator">-></span><span class="token function">addText</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_resp_code'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'label'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'回應代號'</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$metabox</span><span class="token operator">-></span><span class="token function">addTextarea</span><span class="token punctuation">(</span>
	<span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'id'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'irp_resp_result'</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'label'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'交易結果'</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-metabox/wordpress-metabox-03.jpg"></p>
<p>有別於最原始的範例，我們再也不用記一堆韓式跟勾點，也不用處理欄位值得儲存或更新，只要建立 Metabox 實例，然後看要新增什麼欄位就用對應的方法，透過跟 WooCommerce Settings API 類似的陣列值傳入方式來設定欄位，以下針對 Metabox 類別傳入的參數做說明：</p>
<p><strong>id</strong> 自訂區塊的唯一 ID，所有的自訂欄位都要放在自訂區塊中，如果想要新增不同的區塊則需要再建立另外一個 new Metabox()</p>
<p><strong>title</strong> 自訂欄位的顯示名稱</p>
<p><strong>screen</strong> 設定顯示在哪個 Post Type 底下，我們要顯示在訂單頁所以是 shop_order。該如何知道目標的頁面是哪種 post type? 可以從網址最後的一個參數 post_type 就知道：</p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;woocommerce.test&#x2F;wp-admin&#x2F;edit.php?post_type&#x3D;shop_order<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>context</strong> 自訂區塊的顯示位置，可選值有 normal, side, advanced，side 是在右側欄</p>
<p><strong>priority</strong> 自訂區塊與其他區塊的順序，可選值有 high、core、default、low，越高越前面</p>
<p>此外，該套件支援八種自訂欄位，常見的文字、單選框、下拉選單，另外還有圖片上傳、所見即所得編輯器以及重複器，具體的用法都很相似，傳入的參數都只有三個，id、label 與 desc，比較特別的是重複器欄位，但在這個外掛之中我們先不會用到它，更多欄位用法可以參考套件中的 README.md。</p>
<p>另外如果我們需要傳入更多的參數像是 class、style、attr 之類的屬性也非常容易，只要開啟 vendor/oberonlai/wp-metabox/Metabox.php 這個類別，就能看到 add 欄位以及產出 HTML 的方法，從中我們還可以學到 WordPress 的過濾方法，像是 esc_attr() 以及 esc_html() 等等，這些都是在開發外掛時需要注意的安全性。</p>
<p>眼尖的朋友可能會發現 WooCommerce 有內建一個訂單備註的欄位，在實務上我們常常也會用它來記錄訂單的狀態變更以及相關資訊，但如果一個訂單備註過多時就會變得不太好找，所以我自己在習慣上都還是會另外開一個自訂區塊來處理金流商的回傳資訊。</p>
<p>完成設定頁面後下一篇我們先來了解 WooCommerce 的結帳流程，以及最重要的金流類別 WC_Payment_Gateway。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
        <tag>WC_Settings_Page</tag>
      </tags>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰（七）- WC_Payment_Gateway</title>
    <url>/tw/woocommerce-payment-gateway/</url>
    <content><![CDATA[<p>WooCommerce 的金流主要分為兩種，即時與非即時完成付款，即時指的是當訂單成立後就可以取得消費者的付款結果，像是信用卡、WebATM，WooCommerce 提供三種模式來處理即時付款：</p>
<ol>
<li><p>付款表單 - 讓消費者直接在站內完成信用卡或是付款相關資訊的填寫，由於安全性的考量，台灣有支援這種模式的金流商相對較少，但因為其結帳的便利性可降低付款跳出率，這幾年有不少廠商開始支援 Token 交易代碼化，也就是傳送過程中並非直接傳送消費者的卡號，而是使用一串代碼來避免直接暴露。</p>
</li>
<li><p>Iframe 嵌入 - 按下結帳時使用 Iframe 顯示卡號輸入畫面，之前國內也有金流商是採用這種方式付款，但該金流商目前已停止該類型的付款方式。</p>
</li>
<li><p>頁面跳轉 - 不讓消費者在站內提供付款資訊，而是跳轉到金流商的頁面進行付款，這是目前的主流方式，根據金流商運作模式，有些是使用 Form 來 Post，或是需要呼叫 API 來取得跳轉網址。</p>
</li>
</ol>
<p>非即時付款的金流常見的有虛擬轉帳帳號、超商代碼繳費，有些金流商會需要跳轉到他們的介面，像是選擇要產生的轉帳帳號是用哪家銀行、列印哪家超商的繳費代碼，也有廠商沒提供這些選擇，就是單純的直接回傳固定一家銀行或超商的繳費資訊，這種類型的就是直接將回傳結果顯示在站內即可。</p>
<span id="more"></span>

<p>WooCommerce 最常見的結帳流程為：加入購物車 &gt; 輸入帳單資訊 &gt; 跳轉到第三方付款頁 &gt; 跳轉回站內感謝頁，接下來說明新增 WooCommerce 金流付款的架構。</p>
<h2 id="WooCommerce-新增金流-Gateway"><a href="#WooCommerce-新增金流-Gateway" class="headerlink" title="WooCommerce 新增金流 Gateway"></a>WooCommerce 新增金流 Gateway</h2><p>在實作之前我們先釐清中英對照，Payment 指的是付款公司，實務上會是把金流商的公司名稱作為 Payment，而一個金流商會提供許多不同的付款方式，像是信用卡、ATM、超商代碼等等，而這些付款方式就是 Gateway。</p>
<p>首先繼承 WooCommerce 的金流類別 <code>WC_Payment_Gateway</code>，並將類別的宣告放在 <code>plugins_loaded</code> 勾點裡面：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">add_gateway</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">class</span> <span class="token class-name">CreditCard_Gateway</span> <span class="token keyword">extends</span> <span class="token class-name">WC_Payment_Gateway</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'plugins_loaded'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'add_gateway'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>CreditCard_Gateway 不用建立實例，這部分 WooCommerce 會幫我們處理，在命名上最好可以很直觀的理解這是哪一種付款方式，接下來在 woocommerce_payment_gateways 勾點新增付款方式的類別名稱即可：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">add_gateway_class</span><span class="token punctuation">(</span> <span class="token variable">$methods</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$methods</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'CreditCard_Gateway'</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> <span class="token variable">$methods</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_payment_gateways'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'add_gateway_class'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就能完成金流功能的註冊，接下來我們需要實作 <code>My_Gateway</code> 類別。</p>
<h2 id="CreditCard-Gateway-類別必要實作屬性與方法"><a href="#CreditCard-Gateway-類別必要實作屬性與方法" class="headerlink" title="CreditCard_Gateway 類別必要實作屬性與方法"></a>CreditCard_Gateway 類別必要實作屬性與方法</h2><p>首先要有建構式來指定金流名稱、ID、描述等等基本資料，另外還需要執行設定項的初始化：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">add_gateway</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">class</span> <span class="token class-name">CreditCard_Gateway</span> <span class="token keyword">extends</span> <span class="token class-name">WC_Payment_Gateway</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span>                 <span class="token operator">=</span> <span class="token string single-quoted-string">'my_credit_card'</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">icon</span>               <span class="token operator">=</span> <span class="token string single-quoted-string">'imgUrl'</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">has_fields</span>         <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">method_title</span>       <span class="token operator">=</span> <span class="token string single-quoted-string">'信用卡'</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">method_description</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'使用信用卡付款'</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'plugins_loaded'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'add_gateway'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> <code>$this-&gt;id</code> – 付款方式的唯一 ID，最好帶有自己的前綴，因為同一間金流商可能會有其他第三方開發金流外掛，如果只用金流商的前綴發生衝突的機率很高</p>
<p><code>$this-&gt;icon</code> – 顯示在前台結帳頁付款名稱旁的圖標，讓消費者知道他們會透過哪一間金流公司進行付款</p>
<p><code>$this-&gt;has_fields</code> – 在結帳頁是否有提供付款資訊填寫表單，因為我們大部分都是使用跳轉到第三方，所以這邊設成 false 即可</p>
<p><code>$this-&gt;method_title</code> – 付款方式名稱，會顯示在 WooCommerce 的設定頁</p>
<p><code>$this-&gt;method_description</code> - 付款方式描述，會顯示在 WooCommerce 的設定頁</p>
<p>設定完屬性後，建構式裡面還需要設定以下內容：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">add_gateway</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">class</span> <span class="token class-name">CreditCard_Gateway</span> <span class="token keyword">extends</span> <span class="token class-name">WC_Payment_Gateway</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 略</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">init_form_fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">init_settings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">title</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'title'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">description</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'description'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_update_options_payment_gateways_'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'process_admin_options'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'plugins_loaded'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'add_gateway'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第一個方法 <code>init_form_fields()</code> 稍後會實作，它的功用在建立 Gateway 的設定項，在前面的文章中，我們已經把金流的相關設定放在全域設定裡面，因為一個金流商會提供多種 Gateway，所以把設定放在 Gateway 裡面的話對於使用者來說會很麻煩，一樣的金流商店代號、密鑰資訊在信用卡、ATM、超商代碼都要個別輸入，因此這類資訊放在全域設定裡面會比較恰當。</p>
<p>但如果你接的金流只有一個 Gateway 的話，把設定項放在這邊就很適合。第二個方法是 <code>init_settings()</code>，它的功用是初始化設定，之後就可以透過 <code>get_option()</code> 取得 init_form_fields 裡面的設定欄位值，像是：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">title</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'title'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">description</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'description'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<p>title 跟 description 稍後會實作在 <code>init_form_field()</code> 方法裡面，而這邊 <code>$this-&gt;title</code> 以及 <code>$this-&gt;description</code> 有別於 <code>method_title</code> 與 <code>method_description</code>，他們是顯示在前台結帳頁的付款方式名稱，這個名稱可以透過設定項來讓使用者自行修改，而最後的勾點 <code>woocommerce_update_options_payment_gateways_&#123;gateway_id&#125;</code> 則是更新設定內容，<code>process_admin_options</code> 我們不需實作，交由 <code>WC_Payment_Gateway</code> 處理即可。</p>
<p>接下來是實作 <code>init_form_fields</code> 方法，我們只需要最基本的三個欄位即可：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">add_gateway</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">class</span> <span class="token class-name">CreditCard_Gateway</span> <span class="token keyword">extends</span> <span class="token class-name">WC_Payment_Gateway</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 略</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">init_form_fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">form_fields</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
				<span class="token string single-quoted-string">'enabled'</span>     <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'啟用/停用'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'label'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'啟用付款'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'checkbox'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'default'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'no'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'title'</span>       <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'付款方式名稱'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'text'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'description'</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'付款方式描述'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'textarea'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'plugins_loaded'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'add_gateway'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最後是 <code>process_payment</code> 方法，它會處理點擊結帳按鈕後的行為，包含建立訂單、改變訂單狀態、清空購物車、將欄位傳送到金流商、取得網址後進行頁面跳轉，這部分我們會在下一篇串接信用卡來進行實作。</p>
<h2 id="WC-API-的用途"><a href="#WC-API-的用途" class="headerlink" title="WC API 的用途"></a>WC API 的用途</h2><p>通常傳送訂單資料給金流商的時候，都會需要帶一個成功付款後的完成結帳網址，當金流商走完流程後就會根據該網址來進行頁面跳轉，WooCommerce API 提供一個動態的勾點 <code>woocommerce_api_&#123;slug&#125;</code>，只要替換 slug 就能製造出這個跳轉網址，範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">redirect_thankyou_page</span><span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">// 處理金流商回傳的參數</span>
	<span class="token variable">$args</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">;</span>
	<span class="token function">wp_safe_redirect</span><span class="token punctuation">(</span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_checkout_order_received_url</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_api_thankyou'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'redirect_thankyou_page'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>當金流商導回 <a href="https://example.com/wc-api/thankyou">https://example.com/wc-api/thankyou</a> 的時候，我們就能拿到參數的資訊做處理，然後將頁面跳轉到感謝頁，在非即時付款金流商要背景通知付款完成的情境下，也可以使用這個勾點來做到接收參數的功能。</p>
<p>以下為付款方式 Gateway 類別的完整基礎架構：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">add_gateway</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">class</span> <span class="token class-name">CreditCard_Gateway</span> <span class="token keyword">extends</span> <span class="token class-name">WC_Payment_Gateway</span> <span class="token punctuation">&#123;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span>                 <span class="token operator">=</span> <span class="token string single-quoted-string">'credit_card'</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">icon</span>               <span class="token operator">=</span> <span class="token string single-quoted-string">'imgUrl'</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">has_fields</span>         <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">method_title</span>       <span class="token operator">=</span> <span class="token string single-quoted-string">'信用卡'</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">method_description</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'使用信用卡付款'</span><span class="token punctuation">;</span>

			<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">init_form_fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">init_settings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">title</span>       <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'title'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">description</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'description'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_update_options_payment_gateways_'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'process_admin_options'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">init_form_fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">form_fields</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
				<span class="token string single-quoted-string">'enabled'</span>     <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'啟用/停用'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'label'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'啟用付款'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'checkbox'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'default'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'no'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'title'</span>       <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'付款方式名稱'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'text'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'description'</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'付款方式描述'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'textarea'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">process_payment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token comment">// 處理點擊結帳按鈕後的行為</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'plugins_loaded'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'add_gateway'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下一篇我們來實作鐵人付金流的信用卡 Gateway。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
        <tag>WC_Settings_Page</tag>
      </tags>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰（八）- 發起付款請求</title>
    <url>/tw/woocommerce-payment-request/</url>
    <content><![CDATA[<p>了解 WooCommerce 金流的基本架構後，我們來進行串接的實作，在開始前先回顧一下目前的外掛結構：</p>
<pre class="line-numbers language-none"><code class="language-none">iron-pay
├── composer.json
├── composer.lock
├── iron-pay.php
├── src
│   ├── Options.php
│   └── Posts
│       └── ShopOrder
│           └── Metabox.php
└── vendor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先我們假設鐵人付這家金流公司的支付運作模式，以信用卡與虛擬帳號轉帳兩種付款方式為例，說明實際狀況中可能會遇到的方法以及對應的設計方式，理論上同一家金流公司都會採用同一種邏輯，本文為了示範不同情境所以採用不同邏輯，實際情況以金流商提供的技術文件為主。</p>
<span id="more"></span>


<h3 id="鐵人付信用卡付款流程"><a href="#鐵人付信用卡付款流程" class="headerlink" title="鐵人付信用卡付款流程"></a>鐵人付信用卡付款流程</h3><p>建立訂單採用 HTTPS 協議， 將訂單資料以 POST ( HTTP Method ) 傳送，返回結果採用 JSON 格式，返回結果如下：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
	<span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"200"</span><span class="token punctuation">,</span>
	<span class="token property">"info"</span><span class="token operator">:</span> <span class="token string">"訂單建立成功"</span><span class="token punctuation">,</span>
	<span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"html"</span><span class="token operator">:</span> <span class="token string">"https://ironpay.test/payment"</span><span class="token punctuation">,</span> 	
		<span class="token property">"out_trade_no"</span><span class="token operator">:</span> <span class="token string">"111"</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>當按下結帳按鈕時要發起 API 請求，在經過驗證請求來源後會回傳付款網址，取得該網址後提供給 <code>WC_Payment_Gateway</code> 的 <code>process_payment()</code> 來進行跳轉。</p>
<h3 id="鐵人付虛擬帳號付款流程"><a href="#鐵人付虛擬帳號付款流程" class="headerlink" title="鐵人付虛擬帳號付款流程"></a>鐵人付虛擬帳號付款流程</h3><p>建立訂單採用 HTTPS 協議， 將訂單資料以 POST ( HTTP Method ) 傳送後立即返回取號結果，等消費者轉帳完成後金流商由伺服器呼叫客戶網站的通知付款網址。</p>
<h2 id="新增付款方式"><a href="#新增付款方式" class="headerlink" title="新增付款方式"></a>新增付款方式</h2><p>接下來我們先在 src 建立 Gateways 資料夾，並新增 <code>CreditCard.php</code>、<code>VirtualAccount.php</code>、<code>Request.php</code> 以及 <code>Response.php</code> 四個檔案，並另外在 src 資料夾增加一個工具類別 <code>Utility.php</code>：</p>
<pre class="line-numbers language-none"><code class="language-none">iron-pay
├── composer.json
├── composer.lock
├── iron-pay.php
├── src
│   ├── Gateways
│   │   ├── CreditCard.php
│   │   ├── Request.php
│   │   ├── Response.php
│   │   └── VirtualAccount.php
│   ├── Options.php
│   ├── Posts
│   │   └── ShopOrder
│   │       └── Metabox.php
│   └── Utility.php
└── vendor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>CreditCard 與 VirtualAccount 分別為實作信用卡與虛擬帳號的類別，Request 為建立訂單的請求類別，Response 負責處理從金流商回傳的資料。根據上一篇的架構，<code>CreditCard.php</code> 內容如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Gateways</span><span class="token punctuation">;</span>

<span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">exit</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Set payment class
 */</span>
<span class="token keyword">function</span> <span class="token function">add_irp_credit_card</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">class</span> <span class="token class-name">CreditCard</span> <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>WC_Payment_Gateway</span> <span class="token punctuation">&#123;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span>                 <span class="token operator">=</span> <span class="token string single-quoted-string">'irp_credit_card'</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">icon</span>               <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">has_fields</span>         <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">method_title</span>       <span class="token operator">=</span> <span class="token string single-quoted-string">'鐵人付信用卡'</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">method_description</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'使用鐵人付信用卡付款'</span><span class="token punctuation">;</span>

			<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">init_form_fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">init_settings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">title</span>       <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'title'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">description</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'description'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_update_options_payment_gateways_'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'process_admin_options'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_payment_gateways'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token constant">__CLASS__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'add_gateway_class'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add_gateway_class</span><span class="token punctuation">(</span> <span class="token variable">$methods</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$methods</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">__CLASS__</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token variable">$methods</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">init_form_fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">form_fields</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
				<span class="token string single-quoted-string">'enabled'</span>     <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'啟用/停用'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'label'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'啟用付款'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'checkbox'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'default'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'no'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'title'</span>       <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'付款方式名稱'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'text'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'description'</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>
					<span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'付款方式描述'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'type'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'textarea'</span><span class="token punctuation">,</span>
					<span class="token string single-quoted-string">'css'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'max-width: 400px;'</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">process_payment</span><span class="token punctuation">(</span> <span class="token variable">$order_id</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 處理付款請求</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token class-name static-context">CreditCard</span><span class="token operator">::</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'plugins_loaded'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Irp\Gateways\add_irp_credit_card'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到除了基本的架構外，我們新增了兩個方法，一個是靜態方法 <code>reigster()</code> 來管理勾點 <code>woocommerce_payment_gateways</code> 的類別名稱註冊，另一個 <code>add_gateway_class()</code> 方法來取得類別名稱，最後再用 <code>CreditCard::register()</code> 呼叫勾點，就能把新增付款方式的功能包在同一個函式之中。</p>
<p>然後我們依樣畫葫蘆來建立虛擬帳號的付款方式，開啟 VirtualAccount.php，貼入以下程式碼：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Gateways</span><span class="token punctuation">;</span>

<span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">exit</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Set payment class
 */</span>
<span class="token keyword">function</span> <span class="token function">add_irp_virtual_account</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">class</span> <span class="token class-name">VirtualAccount</span> <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>WC_Payment_Gateway</span> <span class="token punctuation">&#123;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span>                 <span class="token operator">=</span> <span class="token string single-quoted-string">'irp_virtual_account'</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">icon</span>               <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">has_fields</span>         <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">method_title</span>       <span class="token operator">=</span> <span class="token string single-quoted-string">'鐵人付虛擬帳號'</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">method_description</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'使用鐵人付虛擬帳號付款'</span><span class="token punctuation">;</span>

            <span class="token comment">// 以下略</span>
    <span class="token punctuation">&#125;</span>

    <span class="token class-name static-context">VirtualAccount</span><span class="token operator">::</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'plugins_loaded'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Irp\Gateways\add_irp_virtual_account'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>完成後就能在 WooCommerce 設定頁看到鐵人付相關的付款方式：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/woocommerce-payment-gateway/woocommerce-payment-gateway-02.jpg"></p>
<p>在實務中，如果不同的 Gateway 有相同的屬性或方法，可以把共用元素獨立成抽象類別，然後讓抽象類別繼承 <code>WC_Payment_Gateway</code>，要實作的付款方式再繼承這個抽象類別，或是把相同的部分拆成 Trait，就能方便管理不同付款方式之間的共有屬性與方法。</p>
<h2 id="新增請求類別"><a href="#新增請求類別" class="headerlink" title="新增請求類別"></a>新增請求類別</h2><p>請求的部分因為有很多參數要彙整以及帶有不同的請求方式，所以我們把請求拆成獨立的 Request 類別來處理，然後再於付款方式裡面的 <code>process_payment()</code> 來建立實例，並傳入 Gateway 類別本身來完成請求，Request 基本架構如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Gateways</span><span class="token punctuation">;</span>

<span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">exit</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/**
	 * The gateway instance
	 *
	 * @var WC_Payment_Gateway
	 */</span>
	<span class="token keyword">protected</span> <span class="token variable">$gateway</span><span class="token punctuation">;</span>

	<span class="token comment">/**
	 * Constructor
	 *
	 * @param  WC_Payment_Gateway $gateway The payment gateway instance.
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span> <span class="token variable">$gateway</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">gateway</span> <span class="token operator">=</span> <span class="token variable">$gateway</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>	
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先，我們要取得 Gateway 實例的相關屬性與方法，所以使用 <code>$gateway</code> 來存放付款類別，並在建構式指定給 <code>$gateway</code> 屬性。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Gateways</span><span class="token punctuation">;</span>

<span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">exit</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 略</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span> <span class="token variable">$gateway</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 略</span>
	<span class="token punctuation">&#125;</span>	
	<span class="token comment">/**
	 * Build transaction args.
	 *
	 * @param WC_Order $order The order object.
	 * @return array
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_transaction_args</span><span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$args</span> <span class="token operator">=</span> <span class="token function">apply_filters</span><span class="token punctuation">(</span>
			<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">gateway</span><span class="token operator">-></span><span class="token property">id</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'_transaction_args'</span> <span class="token punctuation">,</span>
			<span class="token keyword">array</span><span class="token punctuation">(</span>
				<span class="token string single-quoted-string">'nonce_str'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'nonce'</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'orgno'</span>           <span class="token operator">=></span> <span class="token string single-quoted-string">'商家代號'</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'out_trade_no'</span>    <span class="token operator">=></span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_order_number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'secondtimestamp'</span> <span class="token operator">=></span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'total_fee'</span>       <span class="token operator">=></span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_total</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token variable">$order</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token variable">$args</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下來透過 <code>get_transaction_args()</code> 方法來整理要傳送給金流商的參數，這邊的參數陣列會放在 <code>apply_filters()</code> 裡面，這個 WordPress 內建的函式讓我們可以自訂勾點，第一個參數傳勾點名稱、第二個傳陣列內容，第三個可以讓這個勾點帶入參數，之後我們就可以用 <code>add_filter( &#39;irp_credit_card_transaction_args&#39;, &#39;callback&#39;, 10, 2 )</code>方式來動態新增參數：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">add_transaction_args</span><span class="token punctuation">(</span> <span class="token variable">$args</span><span class="token punctuation">,</span> <span class="token variable">$order</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">array_merge</span><span class="token punctuation">(</span>
		<span class="token variable">$args</span><span class="token punctuation">,</span>
		<span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'returnurl'</span> <span class="token operator">=></span> <span class="token function">home_url</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'wc-api/iron-pay'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'backurl'</span>   <span class="token operator">=></span> <span class="token function">home_url</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'wc-api/iron-pay-offline'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'irp_credit_card_transaction_args'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'add_transaction_args'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因為每個付款方式可能會需要帶入不同的參數，所以 Request 這邊先寫好共用的參數，在付款方式那邊就可以使用勾點 Filter 額外新增需要的參數。</p>
<p>Utility 類別定義了一系列靜態方法，像是做演算法的雜湊、產出隨機字串、Log 方法等等，這裡面的方法大部分可以通用在不同的專案之中，像是一種工具箱的概念。接下來是第一種呼叫 API 的方式：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Gateways</span><span class="token punctuation">;</span>

<span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">exit</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 略</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span> <span class="token variable">$gateway</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 略</span>
	<span class="token punctuation">&#125;</span>	
	<span class="token comment">/**
	 * Build transaction args.
	 *
	 * @param WC_Order $order The order object.
	 * @return array
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_transaction_args</span><span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 略</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token comment">/**
	 * Request api and get redirect url
	 *
	 * @param WC_Order $order The order object.
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">build_request</span><span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$order</span>   <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WC_Order</span><span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$options</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
			<span class="token string single-quoted-string">'method'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'POST'</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'timeout'</span> <span class="token operator">=></span> <span class="token number">60</span><span class="token punctuation">,</span>
			<span class="token string single-quoted-string">'body'</span>    <span class="token operator">=></span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_transaction_args</span><span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token function">wp_remote_request</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'金流商 API 請求網址'</span><span class="token punctuation">,</span> <span class="token variable">$options</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">is_wp_error</span><span class="token punctuation">(</span> <span class="token variable">$response</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// API 回傳資料處理</span>
			<span class="token variable">$body</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span> <span class="token function">wp_remote_retrieve_body</span><span class="token punctuation">(</span> <span class="token variable">$response</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 取得跳轉網址後返回</span>
			<span class="token keyword">return</span> <span class="token variable">$body</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'html'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 取得跳轉網址：'https://ironpay.test/payment';</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// API 請求失敗的處理</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這一段需要值得注意的是 <code>wp_remote_request()</code> 這個函式，它封裝了 WordPress 的 HTTP 請求物件，透過它可以很方便的發起 HTTP 請求，第一個參數為請求網址，第二個為要傳送的參數，我們把金流商所需的資料藉由 <code>get_transaction_args()</code> 取得後放在 body 進行傳送，<code>wp_remote_request()</code> 的如果請求正確回傳 JSON 時，則用 <code>wp_remote_retrieve_body()</code> 取得 JSON 後進行格式轉換，如果請求的結果有誤，使用 <code>is_wp_error()</code> 來進行判斷。</p>
<p>第二種傳送方法是使用表單：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Gateways</span><span class="token punctuation">;</span>

<span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">exit</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 略</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span> <span class="token variable">$gateway</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 略</span>
	<span class="token punctuation">&#125;</span>	
	<span class="token comment">/**
	 * Build transaction args.
	 *
	 * @param WC_Order $order The order object.
	 * @return array
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_transaction_args</span><span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 略</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token comment">/**
	 * Request api and get redirect url
	 *
	 * @param WC_Order $order The order object.
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">build_request</span><span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 略</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token comment">/**
	 * Generate the form and redirect to IronPay
	 *
	 * @param WC_Order $order The order object.
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">build_request_form</span><span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

		<span class="token variable">$order</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>WC_Order</span><span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
			<span class="token delimiter important">?></span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>請稍候重新導向中...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IrpForm<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">esc_url</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'API 請求網址'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">accept-charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
				<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
				<span class="token variable">$fields</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get_transaction_args</span><span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">foreach</span> <span class="token punctuation">(</span> <span class="token variable">$fields</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;input type="hidden" name="'</span> <span class="token operator">.</span> <span class="token function">esc_html</span><span class="token punctuation">(</span> <span class="token variable">$key</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'" value="'</span> <span class="token operator">.</span> <span class="token function">esc_html</span><span class="token punctuation">(</span> <span class="token variable">$value</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'">'</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
				<span class="token delimiter important">?></span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
				document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'IrpForm'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
			<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

		<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name type-declaration">Exception</span> <span class="token variable">$e</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token class-name static-context">Utility</span><span class="token operator">::</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token variable">$e</span><span class="token operator">-></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' '</span> <span class="token operator">.</span> <span class="token variable">$e</span><span class="token operator">-></span><span class="token function">getTraceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>準備好兩種傳送方式後，讓我們回到 CreditCard.php，繼續信用卡的付款實作 <code>process_payment()</code>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Gateways</span><span class="token punctuation">;</span>

<span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">exit</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Set payment class
 */</span>
<span class="token keyword">function</span> <span class="token function">add_irp_credit_card</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">class</span> <span class="token class-name">CreditCard</span> <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>WC_Payment_Gateway</span> <span class="token punctuation">&#123;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 略</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 略</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add_gateway_class</span><span class="token punctuation">(</span> <span class="token variable">$methods</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 略</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">init_form_fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 略</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">process_payment</span><span class="token punctuation">(</span> <span class="token variable">$order_id</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$order</span>      <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>WC_Order</span><span class="token punctuation">(</span> <span class="token variable">$order_id</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$request</span>    <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span> <span class="token variable">$this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$return_url</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-></span><span class="token function">build_request</span><span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
				<span class="token string single-quoted-string">'result'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'success'</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'redirect'</span> <span class="token operator">=></span> <span class="token variable">$return_url</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token class-name static-context">CreditCard</span><span class="token operator">::</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'plugins_loaded'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Irp\Gateways\add_irp_credit_card'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們先建立了 Request 實例並將付款方式類別本身當作參數傳進去，然後使用 <code>build_request()</code> 來取得跳轉網址，這邊記得要先取得 WooCommerce 的 <code>$order</code> 訂單物件後傳給它，才能在 Request 實例中取得訂單資訊，最後返回一個付款網址，並將取得的網址指定給 redirect。</p>
<p>接下來是處理虛擬轉帳的付款實作，開啟 VirtualAccount.php：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Gateways</span><span class="token punctuation">;</span>

<span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">exit</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Set payment class
 */</span>
<span class="token keyword">function</span> <span class="token function">add_irp_virtual_account</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">class</span> <span class="token class-name">VirtualAccount</span> <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>WC_Payment_Gateway</span> <span class="token punctuation">&#123;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 略</span>
			<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_receipt_'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'receipt_page'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 略</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add_gateway_class</span><span class="token punctuation">(</span> <span class="token variable">$methods</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 略</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">init_form_fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 略</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">/**
		 * Process payment
		 *
		 * @param string $order_id The order id.
		 * @return array
		 */</span>
		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">process_payment</span><span class="token punctuation">(</span> <span class="token variable">$order_id</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$order</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>WC_Order</span><span class="token punctuation">(</span> <span class="token variable">$order_id</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
				<span class="token string single-quoted-string">'result'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'success'</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'redirect'</span> <span class="token operator">=></span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_checkout_payment_url</span><span class="token punctuation">(</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">/**
		 * Redirect to IronPay payment page
		 *
		 * @param WC_Order $order The order object.
		 * @return void
		 */</span>
		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">receipt_page</span><span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$request</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span> <span class="token variable">$this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$request</span><span class="token operator">-></span><span class="token function">build_request_form</span><span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token class-name static-context">VirtualAccount</span><span class="token operator">::</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'plugins_loaded'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Irp\Gateways\add_irp_virtual_account'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要注意的地方有三個：</p>
<ol>
<li><p><code>process_payment()</code> 指定的跳轉網址為 <code>get_checkout_payment_url()</code>，這是指站內的付款頁面</p>
</li>
<li><p>新增 <code>receipt_page()</code> 方法發起 Request 的前端表單傳送方法 <code>build_request_form()</code></p>
</li>
<li><p>在建構式新增勾點 <code>woocommerce_receipt_irp_virtual_account</code> 來觸發 <code>receipt_page()</code> 方法</p>
</li>
</ol>
<p>這邊的運作的邏輯是當消費者按下結帳按鈕後，直接跳轉去結帳完成頁，然後從結帳完成頁產生的表單來做資料傳送，這樣就不用處理 API 的回傳結果直接進行頁面跳轉判斷。</p>
<p>當資料傳送過去後，接下來就是要準備 WC API 來接收金流商的回傳結果，下一篇我們繼續處理接收回傳資料的部分。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
        <tag>WC_Settings_Page</tag>
      </tags>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰（九）- 接收回傳資料</title>
    <url>/tw/woocommerce-payment-response/</url>
    <content><![CDATA[<p>完成付款請求之後，接下來是準備好接收金流商回傳資訊的 Response 類別，目前外掛的資料夾結構如下：</p>
<pre class="line-numbers language-none"><code class="language-none">iron-pay
├── composer.json
├── composer.lock
├── iron-pay.php
├── src
│   ├── Gateways
│   │   ├── CreditCard.php
│   │   ├── Request.php
│   │   ├── Response.php
│   │   └── VirtualAccount.php
│   ├── Options.php
│   ├── Posts
│   │   └── ShopOrder
│   │       └── Metabox.php
│   └── Utility.php
└── vendor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>開啟 Response.php 檔案，輸入以下程式碼：</p>
<span id="more"></span>

<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Gateways</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Irp<span class="token punctuation">\</span>Utility</span><span class="token punctuation">;</span>

<span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">exit</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Receive response from ironpay.
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Response</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">/**
	 * Initialize and add hooks
	 *
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

		<span class="token comment">// Online Payment listener.</span>
		<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_api_iron-pay'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token constant">__CLASS__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'receive_response'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ironpay_online_response'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token constant">__CLASS__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'valid_response'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Offline Payment listener.</span>
		<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_api_iron-pay-offline'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token constant">__CLASS__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'receive_response'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ironpay_offline_response'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token constant">__CLASS__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'valid_response_offline'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name static-context">Response</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先，我們用靜態方法 <code>init()</code>來初始化勾點的部分，勾點一共分為兩組，分別是即時付款 Online Payment 以及非即時付款 Offline Payment。每一組又個別有兩個勾點，我們先看 Online Payment 這一組，第一個勾點是 WooCommerce API 所提供的，也就是前面我們有提到的動態勾點：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_api_iron-pay'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token constant">__CLASS__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'receive_response'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>這代表當我們的造訪 <code>https://woocommerce.test/wc-api/iron-pay/</code> 會觸發 <code>receive_response</code> 這個方法，這個方法的主要功能為驗證當請求這個網址時有接收到金流商回傳的參數，並且通過加密演算法的驗證。</p>
<p>第二個勾點為 <code>ironpay_online_response</code>，當看到有我們自己命名前綴的勾點時，就代表這是我們自己新增的，新增的方法稍後會實作。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ironpay_online_response'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token constant">__CLASS__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'valid_response'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>這個勾點會在通過我們的請求來源安全性驗證後觸發 <code>valid_response()</code>，該方法實作更新訂單資料、改變庫存狀態、以及將回傳資料寫入資料庫後進行頁面跳轉等行為。</p>
<p>有了 Online Payment 勾點的理解之後，Offline Payment 也是一樣的邏輯，設定好回傳網址後，我們就能在請求類別 Request 裡面將這兩個網址作為參數傳給金流商，通知他們當消費者完成後結帳後會呼叫這兩個網址。</p>
<p>通常金流商回有兩種呼叫方式，一種是前景呼叫，也就是透過消費者的瀏覽器跳轉到我們提供的網址，不管是即時或是非即時付款，都需要讓消費者回到原站會比較合理。</p>
<p>另一種是背景呼叫，常見於非即時付款，因為消費者已經走完結帳流程關閉瀏覽器了，當消費者隔天完成轉帳，需要靠金流商的主機來發起付款完成通知，這種請求也就是俗稱的背景呼叫。</p>
<p>不同金流商對於這兩種呼叫方式的參數命名都不太相同，前景呼叫有可能叫 <code>return_url</code> 或是 <code>back_url</code>，背景呼叫有可能叫做 <code>notify_url</code> 或是 <code>callback_url</code>，因為這些名稱都無法很直觀的分辨到底是前景還是背景，所以詳讀文件的參數名稱以及流程圖會比較保險些，不然只根據參數名稱來傳很容易搞錯。</p>
<p>接下來是實作 <code>receive_response()</code> 方法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Gateways</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Irp<span class="token punctuation">\</span>Utility</span><span class="token punctuation">;</span>

<span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">exit</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Receive response from ironpay.
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Response</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">/**
	 * Initialize and add hooks
	 *
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 略</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token comment">/**
	 * Receive response from ironpay
	 *
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">receive_response</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$params</span> <span class="token operator">=</span> <span class="token function">wc_clean</span><span class="token punctuation">(</span> <span class="token function">wp_unslash</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$args</span>   <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
				<span class="token string single-quoted-string">'authcode'</span>        <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'authcode'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'nonce_str'</span>       <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nonce_str'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'orderdate'</span>       <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'orderdate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'orgno'</span>           <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'orgno'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'out_trade_no'</span>    <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'out_trade_no'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'periods'</span>         <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'periods'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'result'</span>          <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'result'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'secondtimestamp'</span> <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secondtimestamp'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'status'</span>          <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'total_fee'</span>       <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'total_fee'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token variable">$sign</span> <span class="token operator">=</span> <span class="token class-name static-context">Utility</span><span class="token operator">::</span><span class="token function">generate_sign</span><span class="token punctuation">(</span> <span class="token variable">$args</span><span class="token punctuation">,</span> <span class="token class-name static-context">Utility</span><span class="token operator">::</span><span class="token function">get_secret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// $params['sign'] 是金流商回傳的，把它拿來跟我們自己算出來的 $sign 做比對</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$sign</span> <span class="token operator">===</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sign'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">current_action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'woocommerce_api_iron-pay'</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token function">do_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ironpay_online_response'</span><span class="token punctuation">,</span> <span class="token variable">$params</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span> <span class="token function">current_action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'woocommerce_api_iron-pay-offline'</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token function">do_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ironpay_offline_response'</span><span class="token punctuation">,</span> <span class="token variable">$params</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name static-context">Response</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先我們先檢查是否有回傳參數，因為不同金流商有可能會用 <code>$_POST</code> 或是 <code>$_GET</code> 回傳，所以用 <code>$_REQUEST</code> 可以通用在不同專案之中，<code>wc_clean()</code> 跟 <code>wp_unslash()</code> 是 WooCommerce 內建的函式，用來消除斜線或是空格等字元，我們把回傳的資料組成一個陣列，在建立勾點之前，我們先要判斷回傳的演算法是否有符合我們自己算出來的結果，藉此來確保這次的請求是由金流商呼叫。</p>
<p>我們先用 Utility 類別來算出我們的 sign，計算的方法為傳入所有參數加上商店金鑰，算好後再用它來比對金流商的 sign 是否吻合，如果正確的話才會建立勾點。 <code>current_action()</code> 是判斷該方法是在哪個勾點被執行，<code>do_action()</code> 則是建立勾點，第一個參數為勾點名稱，第二個為使用該勾點的函式可以拿到的變數。</p>
<p>接下來是做訂單處理的 <code>valid_response()</code> 方法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Gateways</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Irp<span class="token punctuation">\</span>Utility</span><span class="token punctuation">;</span>

<span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">exit</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Receive response from ironpay.
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Response</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">/**
	 * Initialize and add hooks
	 *
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 略</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token comment">/**
	 * Receive response from ironpay
	 *
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">receive_response</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 略</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token comment">/**
	 * Receive online payment
	 *
	 * @param array $params The post data received from ironpay.
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">valid_response</span><span class="token punctuation">(</span> <span class="token variable">$params</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">global</span> <span class="token variable">$woocommerce</span><span class="token punctuation">;</span>
		<span class="token variable">$order</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>WC_Order</span><span class="token punctuation">(</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'out_trade_no'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token string single-quoted-string">'0000'</span> <span class="token operator">===</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token variable">$order</span><span class="token operator">-></span><span class="token function">payment_complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token variable">$order</span><span class="token operator">-></span><span class="token function">reduce_order_stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
				<span class="token variable">$order</span><span class="token operator">-></span><span class="token function">update_status</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'on-hold'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token variable">$woocommerce</span><span class="token operator">-></span><span class="token property">cart</span><span class="token operator">-></span><span class="token function">empty_cart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">update_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_irp_resp_code'</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">update_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_irp_resp_result'</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'result'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$order</span><span class="token operator">-></span><span class="token function">add_order_note</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'鐵人付交易結果：'</span> <span class="token operator">.</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'result'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">wp_safe_redirect</span><span class="token punctuation">(</span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_checkout_order_received_url</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">exit</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name static-context">Response</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們先取得全域變數 <code>$woocommerce</code>，這個變數等下可以來操作購物車，接著是用金流商回傳的訂單 ID 來建立訂單物件，訂單物件有很多方法提供給我們修改訂單資料。<code>$params[&#39;status&#39;]</code> 為金流商回傳的交易代號，通常每個代號會代表不同的結果，所以根據金流文件來判斷當代號為 0000 成功時，執行以下的動作：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$order</span><span class="token operator">-></span><span class="token function">payment_complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$order</span><span class="token operator">-></span><span class="token function">reduce_order_stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$woocommerce</span><span class="token operator">-></span><span class="token property">cart</span><span class="token operator">-></span><span class="token function">empty_cart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">update_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_irp_resp_code'</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">update_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_irp_resp_result'</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'result'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$order</span><span class="token operator">-></span><span class="token function">add_order_note</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'鐵人付交易結果：'</span> <span class="token operator">.</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'result'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>分別是將訂單狀態改完完成、減少庫存、清空購物車，以及更新我們的自訂欄位 <code>_irp_resp_code</code> 與 <code>_irp_resp_result</code>，最後的 <code>add_order_note()</code> 方法是新增訂單備註，回傳資料要做哪些事會根據客戶需求而有所不同，但大致上不外乎是以上幾種流程。</p>
<p>處理完訂單後則使用 <code>wp_safe_redirect()</code> 指定跳轉頁面，<code>$order-&gt;get_checkout_order_received_url()</code> 為完成購買頁，至於背景呼叫 <code>valid_response_offline()</code> 也差不多，主要差別在於不需做頁面跳轉，以及可能會需要返回金流商指定的內容：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Gateways</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Irp<span class="token punctuation">\</span>Utility</span><span class="token punctuation">;</span>

<span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">exit</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Receive response from ironpay.
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Response</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">/**
	 * Initialize and add hooks
	 *
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 略</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token comment">/**
	 * Receive response from ironpay
	 *
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">receive_response</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 略</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token comment">/**
	 * Receive online payment
	 *
	 * @param array $params The post data received from ironpay.
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">valid_response</span><span class="token punctuation">(</span> <span class="token variable">$params</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 略</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token comment">/**
	 * Receive offline payment
	 *
	 * @param array $params The post data received from ironpay.
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">valid_response_offline</span><span class="token punctuation">(</span> <span class="token variable">$params</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">global</span> <span class="token variable">$woocommerce</span><span class="token punctuation">;</span>
		<span class="token variable">$order</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>WC_Order</span><span class="token punctuation">(</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'out_trade_no'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 略</span>
			<span class="token function">wp_send_json</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'success'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">exit</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name static-context">Response</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述 <code>wp_send_json()</code>為 WordPress 內建的函式，主要功能是輸出 JSON 字串，假設金流商那邊希望當呼叫我們的 API 網址時，如果有成功接收的話回傳 success 字串，那我們就可以寫成 <code>wp_send_json( &#39;success&#39; );</code> 來符合金流商的要求。</p>
<p>完整的 Response 類別程式碼如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Gateways</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Irp<span class="token punctuation">\</span>Utility</span><span class="token punctuation">;</span>

<span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">exit</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Receive response from ironpay.
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Response</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">/**
	 * Initialize and add hooks
	 *
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

		<span class="token comment">// Online Payment listener.</span>
		<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_api_iron-pay'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token constant">__CLASS__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'receive_response'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ironpay_online_response'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token constant">__CLASS__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'valid_response'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Offline Payment listener.</span>
		<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_api_iron-pay-offline'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token constant">__CLASS__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'receive_response'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ironpay_offline_response'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token constant">__CLASS__</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'valid_response_offline'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token comment">/**
	 * Receive response from ironpay
	 *
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">receive_response</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$params</span> <span class="token operator">=</span> <span class="token function">wc_clean</span><span class="token punctuation">(</span> <span class="token function">wp_unslash</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$args</span>   <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
				<span class="token string single-quoted-string">'authcode'</span>        <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'authcode'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'nonce_str'</span>       <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nonce_str'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'orderdate'</span>       <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'orderdate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'orgno'</span>           <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'orgno'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'out_trade_no'</span>    <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'out_trade_no'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'periods'</span>         <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'periods'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'result'</span>          <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'result'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'secondtimestamp'</span> <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secondtimestamp'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'status'</span>          <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string single-quoted-string">'total_fee'</span>       <span class="token operator">=></span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'total_fee'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token variable">$sign</span> <span class="token operator">=</span> <span class="token class-name static-context">Utility</span><span class="token operator">::</span><span class="token function">generate_sign</span><span class="token punctuation">(</span> <span class="token variable">$args</span><span class="token punctuation">,</span> <span class="token class-name static-context">Utility</span><span class="token operator">::</span><span class="token function">get_secret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$sign</span> <span class="token operator">===</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sign'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">current_action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'woocommerce_api_iron-pay'</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token function">do_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ironpay_online_response'</span><span class="token punctuation">,</span> <span class="token variable">$params</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span> <span class="token function">current_action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'woocommerce_api_iron-pay-offline'</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token function">do_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ironpay_offline_response'</span><span class="token punctuation">,</span> <span class="token variable">$params</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">/**
	 * Receive online payment
	 *
	 * @param array $params The post data received from ironpay.
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">valid_response</span><span class="token punctuation">(</span> <span class="token variable">$params</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">global</span> <span class="token variable">$woocommerce</span><span class="token punctuation">;</span>
		<span class="token variable">$order</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>WC_Order</span><span class="token punctuation">(</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'out_trade_no'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token string single-quoted-string">'0000'</span> <span class="token operator">===</span> <span class="token variable">$status</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token variable">$order</span><span class="token operator">-></span><span class="token function">payment_complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token variable">$order</span><span class="token operator">-></span><span class="token function">reduce_order_stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
				<span class="token variable">$order</span><span class="token operator">-></span><span class="token function">update_status</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'on-hold'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token variable">$woocommerce</span><span class="token operator">-></span><span class="token property">cart</span><span class="token operator">-></span><span class="token function">empty_cart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">update_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_irp_resp_code'</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">update_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_irp_resp_result'</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'result'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$order</span><span class="token operator">-></span><span class="token function">add_order_note</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'鐵人付交易結果：'</span> <span class="token operator">.</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'result'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">wp_safe_redirect</span><span class="token punctuation">(</span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_checkout_order_received_url</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">exit</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">/**
	 * Receive offline payment
	 *
	 * @param array $params The post data received from ironpay.
	 * @return void
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">valid_response_offline</span><span class="token punctuation">(</span> <span class="token variable">$params</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">global</span> <span class="token variable">$woocommerce</span><span class="token punctuation">;</span>
		<span class="token variable">$order</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>WC_Order</span><span class="token punctuation">(</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'out_trade_no'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$order</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token string single-quoted-string">'0000'</span> <span class="token operator">===</span> <span class="token variable">$status</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token variable">$order</span><span class="token operator">-></span><span class="token function">payment_complete</span><span class="token punctuation">(</span> <span class="token variable">$buysafe_no</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token variable">$order</span><span class="token operator">-></span><span class="token function">reduce_order_stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
			<span class="token punctuation">&#125;</span>
			<span class="token variable">$woocommerce</span><span class="token operator">-></span><span class="token property">cart</span><span class="token operator">-></span><span class="token function">empty_cart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">update_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_irp_resp_code'</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">update_post_meta</span><span class="token punctuation">(</span> <span class="token variable">$order</span><span class="token operator">-></span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_irp_resp_result'</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'result'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$order</span><span class="token operator">-></span><span class="token function">add_order_note</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'鐵人付交易結果：'</span> <span class="token operator">.</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'result'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">wp_send_json</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'success'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">exit</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name static-context">Response</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就算是完成接收金流商回傳資料的工作了，剩下的就是根據金流商的規格去做調整，WooCommerce 金流串接就能大功告成了，但在交給客戶測試驗收前，我們先自己來做單元測試，下一篇來介紹如何寫測試以及說明應該要測試哪些類別與方法。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
      </tags>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰（十）- 自動化測試</title>
    <url>/tw/woocommerce-payment-testing/</url>
    <content><![CDATA[<p>剛開始接案的時候，常常為了能趕在結案日來臨之前把案子結掉，很多功能都是表面上能運作就拿去交差，心裏雖然知道可能會有問題，但總是會抱持著賭一把客戶不會發現的心態，就這樣請他們測試驗收，十次裡面大概有十次都會被發現有問題，從此之後我就發現我完全沒有賭運，乖乖把功能測試到自己有信心時才請客戶驗收。</p>
<p>大部分時間我都是用手動測試，如果要測金流外掛，就是每次手動操作一次結帳流程，選擇該金流後進行結帳，然後看 Log 有沒有噴錯。但如果在結帳時有很多欄位要輸入，或是要測試某些商品組合時，每進行一次結帳測試都會多花 10~30 秒，別小看這些時間，當重複測試很多次累積起來所消耗的時間就會非常驚人。</p>
<p>另外自己常發生改東牆壞西牆的狀況，明明在處理的是 A 功能，做完後也測試過沒問題了，結果卻發現看似毫無關聯的 B 功能壞掉了，而且通常都是等到客戶回報才會知道，這樣不僅讓整個程式碼很脆弱，還會降低客戶的信任感，因此我開始試著導入自動化測試來穩固程式碼。</p>
<p>寫測試的目的不是讓程式自動根除臭蟲，而是能夠及早發現問題所在及早治療。</p>
<span id="more"></span>

<h2 id="測試的種類"><a href="#測試的種類" class="headerlink" title="測試的種類"></a>測試的種類</h2><p>軟體測試有許多不同的類型，主要目的都是為了可以在正式上線前提早發現問題，避免正式上線後因為這問題而造成損失，常見的測試有以下幾種：</p>
<h3 id="1-單元測試-Unit-Test"><a href="#1-單元測試-Unit-Test" class="headerlink" title="1.單元測試 Unit Test"></a>1.單元測試 Unit Test</h3><p>針對程式裡面的最小單元來進行的測試叫做單元測試，最小單元具體的來說可以是一個函式或是類別中的一個方法，測試的目的在於確保每一個函式或方法回傳的結果是如我們所預期的，以及測試當例外狀況或錯誤發生時，回傳的結果也是在我們預料之內，藉此提早發現風險。</p>
<h3 id="2-整合測試-Integration-Test"><a href="#2-整合測試-Integration-Test" class="headerlink" title="2.整合測試 Integration Test"></a>2.整合測試 Integration Test</h3><p>結合外部資料來進行測試稱之為整合測試，有別於單元測試是要測試最小單元，必須要隔離所有會影響測試結果的外部因素，像是從資料庫取得的資料、從 API 拿到的回傳結果來進行測試，而整合測試就是把這些外部因素拉進來一起測試的方法，確保當這些最小單元組合在一起並引入外部因素後仍然可以正常運作。</p>
<h3 id="3-端對端測試-End-to-end-Test"><a href="#3-端對端測試-End-to-end-Test" class="headerlink" title="3.端對端測試 End-to-end Test"></a>3.端對端測試 End-to-end Test</h3><p>單元測試與整合測試是從工程師的角度來進行，而端對端測試則是模擬真實使用者的行為來進行測試，像是我們自己在做手動測試一樣，只是全部都改為用前端程式搭配瀏覽器來控制使用者的滑鼠點擊、頁面跳轉等行為，如果以 WooCommerce 來說，就是測試使用者把商品加入購物車、輸入結帳資料、選擇金流點選結帳按鈕等流程。</p>
<h2 id="寫單元測試的重點"><a href="#寫單元測試的重點" class="headerlink" title="寫單元測試的重點"></a>寫單元測試的重點</h2><p>以投入的成本來看，單元測試是 CP 值最高的種類，因為只是測試最小單元所以執行起來的速度很快，又能預先發現潛在的風險，以下為寫單元測試的大原則：</p>
<h3 id="單元測試的命名「要」清晰易懂"><a href="#單元測試的命名「要」清晰易懂" class="headerlink" title="單元測試的命名「要」清晰易懂"></a>單元測試的命名「要」清晰易懂</h3><p>可以直接從名稱中辨識這個測試的目的是什麼，像是我想要測試金流商的加密演算方法是否有正確運作，命名 <code>test_ironpay_generate_sign()</code> 就能很直觀看出來其目的。</p>
<h3 id="單元測試「要」測試-True-amp-False"><a href="#單元測試「要」測試-True-amp-False" class="headerlink" title="單元測試「要」測試 True &amp; False"></a>單元測試「要」測試 True &amp; False</h3><p>不僅要驗證資料正確的部分，也要考慮到當傳入不正確的資料時，看被測試對象會如何反應，以及反應結果是否如我們所預期。</p>
<h3 id="單元測試「要」隨手進行"><a href="#單元測試「要」隨手進行" class="headerlink" title="單元測試「要」隨手進行"></a>單元測試「要」隨手進行</h3><p>不像整合測試或端對端測試因為需要外部環境的支援所以執行起來會很花時間，單元測試可以每寫完一個方法就立刻進行測試，不管是使用命令列工具還是編輯器的擴充套件都能很方便的隨時進行測試。</p>
<h3 id="單元測試「要」持續維護"><a href="#單元測試「要」持續維護" class="headerlink" title="單元測試「要」持續維護"></a>單元測試「要」持續維護</h3><p>理想上當然是希望寫一次就可以永遠堪用，但隨著功能的演變測試也要跟上，不然就失去了寫測試的意義。</p>
<h3 id="單元測試裡面「不要」測試實作細節"><a href="#單元測試裡面「不要」測試實作細節" class="headerlink" title="單元測試裡面「不要」測試實作細節"></a>單元測試裡面「不要」測試實作細節</h3><p>因為實作有可能會隨著功能需求的變更而進行修改，這會導致測試類別也必須要跟著修改，測試應該要把目標放在輸出結果的驗證而非實作細節。</p>
<h3 id="單元測試裡面「不要」使用邏輯"><a href="#單元測試裡面「不要」使用邏輯" class="headerlink" title="單元測試裡面「不要」使用邏輯"></a>單元測試裡面「不要」使用邏輯</h3><p>如果在測試裡面寫了 if else 或其他判斷語句，會增加測試的變數，測試要維持最單純的資料輸入以及驗證輸出的狀態。</p>
<h3 id="單元測試之間「不要」共用變數"><a href="#單元測試之間「不要」共用變數" class="headerlink" title="單元測試之間「不要」共用變數"></a>單元測試之間「不要」共用變數</h3><p>如同上面提到單元測試的目的就是要測試最小單元，所以每個測試都是可以獨立測試運作，有時候我們可能為方便重用測試資料，所以會把測試資料當作變數傳入測試中，但這樣可能會導致測試產生預期外的錯誤，如果真有這樣的需求可以用 DataProvider 來處理。</p>
<h2 id="金流外掛的測試項目"><a href="#金流外掛的測試項目" class="headerlink" title="金流外掛的測試項目"></a>金流外掛的測試項目</h2><p>開發 WooCommerce 外掛的好處是內建的函式或方法都已經經過開發人員的測試，使用他們提供的 API 可以減少出錯的機會，所以我們需要測試的項目是我們自行設計的邏輯，以鐵人付外掛為例，請求類別 Request、接收類別 Response 以及工具類別 Utility 就是應該著重測試的地方。</p>
<p>下一篇我們以測試 Utility 類別裡面的三個方法為例，來說明如何在外掛中導入單元測試，以及介紹 VSCode 實用的套件來加速測試流程。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
        <tag>自動化測試</tag>
        <tag>單元測試</tag>
      </tags>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰（十ㄧ）- 導入單元測試</title>
    <url>/tw/woocommerce-payment-unit-test/</url>
    <content><![CDATA[<p>先來回顧一下目前鐵人付外掛的資料夾結構：</p>
<pre class="line-numbers language-none"><code class="language-none">iron-pay
├── composer.json
├── composer.lock
├── iron-pay.php
├── src
│   ├── Gateways
│   │   ├── CreditCard.php
│   │   ├── Request.php
│   │   ├── Response.php
│   │   └── VirtualAccount.php
│   ├── Options.php
│   ├── Posts
│   │   └── ShopOrder
│   │       └── Metabox.php
│   └── Utility.php
└── vendor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通常我們會新增一個 tests 資料夾來放入測試的類別，並且其目錄結構會完全比照 src 裡面的所有內容，以及在既有的檔名後面加入 Test 的後綴，具體的結構如下：</p>
<pre class="line-numbers language-none"><code class="language-none">iron-pay
├── composer.json
├── composer.lock
├── iron-pay.php
├── src
│   ├── Gateways
│   │   ├── CreditCard.php
│   │   ├── Request.php
│   │   ├── Response.php
│   │   └── VirtualAccount.php
│   ├── Options.php
│   ├── Posts
│   │   └── ShopOrder
│   │       └── Metabox.php
│   └── Utility.php
├── tests
│   ├── Gateways
│   │   ├── CreditCardTest.php
│   │   ├── RequestTest.php
│   │   ├── ResponseTest.php
│   │   └── VirtualAccountTest.php
│   ├── OptionsTest.php
│   ├── Posts
│   │   └── ShopOrder
│   │       └── MetaboxTest.php
│   └── UtilityTest.php
└── vendor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在本文中會專注於測試 Utility 這個類別，這個類別主要有兩個方法，第一個是測試產生金流商驗證演算法的計算結果是否有符合預期，第二個是測試取得商店代號的格式是否正確。</p>
<span id="more"></span>

<p>首先看到 <code>Utility.php</code> 的內容：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Irp</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Utility</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 略</span>

	<span class="token comment">/**
	 * Build pass code for api usage.
	 *
	 * @param string $args args.
	 * @param string $secret API secret.
	 * @return string
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">generate_sign</span><span class="token punctuation">(</span> <span class="token variable">$args</span><span class="token punctuation">,</span> <span class="token variable">$secret</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$post_datastr</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
		<span class="token keyword">foreach</span> <span class="token punctuation">(</span> <span class="token variable">$args</span> <span class="token keyword">as</span> <span class="token variable">$name</span> <span class="token operator">=></span> <span class="token variable">$value</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">is_array</span><span class="token punctuation">(</span> <span class="token variable">$value</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$value</span> <span class="token operator">!==</span> <span class="token constant">null</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$value</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">''</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token variable">$post_datastr</span> <span class="token operator">=</span> <span class="token variable">$post_datastr</span> <span class="token operator">.</span> <span class="token variable">$name</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'='</span> <span class="token operator">.</span> <span class="token variable">$value</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&amp;'</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token variable">$tmp_array</span>  <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'&amp;'</span><span class="token punctuation">,</span> <span class="token function">trim</span><span class="token punctuation">(</span> <span class="token variable">$post_datastr</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&amp;'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">sort</span><span class="token punctuation">(</span> <span class="token variable">$tmp_array</span><span class="token punctuation">,</span> <span class="token constant">SORT_STRING</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$source</span>     <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'&amp;'</span><span class="token punctuation">,</span> <span class="token variable">$tmp_array</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$source_key</span> <span class="token operator">=</span> <span class="token variable">$source</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&amp;key='</span> <span class="token operator">.</span> <span class="token variable">$secret</span><span class="token punctuation">;</span>
		<span class="token variable">$sign</span>       <span class="token operator">=</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token variable">$source_key</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token variable">$sign</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">/**
	 * Get stord id
	 *
	 * @return string
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">get_store_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'irp_store_id'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這篇示範測試其中兩個靜態方法： <code>generate_sign()</code> 與 <code>get_store_id()</code> 。</p>
<p>為了要能夠測試，把程式碼寫得易於測試是非常重要的，易於測試的其中一個原則就是要有返回結果，有這個結果才能在測試時進行比對，同時在使用這個方法時也能預先處理沒有取得預期結果的情況。</p>
<p>準備好測試對象已經測試檔案後，接下來我們透過 Composer 安裝測試套件 PHPUnit，可以把它安裝在專案的目錄之下，或是可以裝在全域的環境下，這樣以後每個專案都可以直接使用 PHPUnit 的指令而無需再個別安裝，這邊介紹全域的安裝方式。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ composer global require phpunit&#x2F;phpunit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接下來切換到專案資料夾，執行 phpunit，看到以下訊息即代表安裝成功：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">iron-pay$ phpunit

PHPUnit 9.5.4 by Sebastian Bergmann and contributors.

Usage:
  phpunit [options] UnitTest.php
  phpunit [options] &lt;directory&gt;

Code Coverage Options:
  --coverage-clover &lt;file&gt;    Generate code coverage report in Clover XML format
  --coverage-cobertura &lt;file&gt; Generate code coverage report in Cobertura XML format
  --coverage-crap4j &lt;file&gt;    Generate code coverage report in Crap4J XML format<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先進行 PHPUnit 的初始化：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">iron-pay$ phpunit --generate-configuration<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>會看到以下 PHPUnit 詢問的問題：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Bootstrap script (relative to path shown above; default: vendor&#x2F;autoload.php): 
Tests directory (relative to path shown above; default: tests): 
Source directory (relative to path shown above; default: src): 
Cache directory (relative to path shown above; default: .phpunit.cache): 

Generated phpunit.xml in &#x2F;Users&#x2F;oberonlai&#x2F;Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins&#x2F;iron-pay.
Make sure to exclude the .phpunit.cache directory from version control.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第一個問題會需要指定 Bootstrap 的檔案路徑，這個檔案是用來做自動載入的設定以及存放一些全域變數的檔案，預設的話會是 Composer 的 <code>autoload.php</code> 這個檔案。</p>
<p>其他問題會問你是否要修改測試目錄、原始檔目錄以及快取目錄的路徑，這些都採用預設值即可，完成後記得把 <code>.phpunit.cache</code> 目錄在版控中忽略掉，設定完成後可以在外掛根目錄看到一個 <code>phpunit.xml</code> 的設定檔，之後要修改 PHPUnit 的設定都可以在這個檔案調整。</p>
<p>通常我們要執行測試時，需要到終端機下指令輸入 phpunit，但畢竟還要切換介面會稍微增加進行測試的阻力，如果這時候你是使用 VSCode 的話，建議可以安裝由 Recca Tsai 開發的 <a href="https://marketplace.visualstudio.com/items?itemName=recca0120.vscode-phpunit">PHPUnit Test Explorer</a> 測試套件。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-unit-test/wordpress-unit-test-01.jpg"></p>
<p>它可以直接在 VSCode 的面板中管理已經寫好的測試項目，透過介面點選要執行的測試，更方便之處在於可以透過快捷鍵來進行測試，這樣可以大幅增加執行測試的效率。</p>
<p>VScode 還有另外一個寫測試超好用的提示工具，它是由 Winnie Lin 開發的 <a href="https://marketplace.visualstudio.com/items?itemName=onecentlin.phpunit-snippets">PHPUnit Snippets</a> 套件，只要輸入關鍵字 pu:，就能自動帶入寫測試時的框架，完全不需要再自己手動輸入，尤其像我這種手殘黨特別適用。</p>
<p>安裝好兩款測試套件後，我們還需要更新  compose.json 檔，加入 autoload 的指定路徑，並且新增 autoload-dev 的 tests 載入，這讓 PHPUnit 可以抓到 src 裡面的類別：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"autoload"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	<span class="token property">"psr-4"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"Irp\\"</span><span class="token operator">:</span> <span class="token string">"src"</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token property">"autoload-dev"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	<span class="token property">"psr-4"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"Irp\\Tests\\"</span><span class="token operator">:</span> <span class="token string">"tests/"</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>路徑是根據命名空間指定的，更新完後記得要執行 dump 指令才會重新產生自動載入的檔案：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">iron-pay$ composer dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>準備好以上所有寫測試的環境後，我們就來開始實作 UtilityTest.php，測試的基本架構如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Irp<span class="token punctuation">\</span>Tests</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">PHPUnit<span class="token punctuation">\</span>Framework<span class="token punctuation">\</span>TestCase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Irp<span class="token punctuation">\</span>Utility</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * UtilityTest
 *
 * @group group
 */</span>
<span class="token keyword">class</span> <span class="token class-name">UtilityTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>

	<span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// code</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// code</span>
	<span class="token punctuation">&#125;</span>


	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test_generate_sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// Test</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test_get_store_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// Test</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>測試類別從 <code>TestCase</code> 繼承而來，<code>setUp()</code> 會在執行測試方法前觸發，因此可以把要測試的類別建立以及相關變數放在這邊，那麼在測試中就可以取得這些內容。</p>
<p>相反的 <code>tearDown()</code> 則是在每一個測試跑完的當下會被觸發，如果需要在測試完後還原某些資料或是重設設定，就可以放在這個方法之中。</p>
<p>所有的測試方法要加入 test 前綴，並且盡量遵循 Arrange、Act、Assert 的 3A 架構：</p>
<ul>
<li>Arrange 指的是測試前的初始資料準備，像是預期的結果、變數的初始值等等。</li>
<li>Act 是呼叫測試對象的方法，藉此取得執行該方法後的返回結果。</li>
<li>Assert 斷言，也就是檢查 Act 中的返回結果跟 Arrange 裡面的預期結果是否吻合。</li>
</ul>
<h2 id="測試加密演算法"><a href="#測試加密演算法" class="headerlink" title="測試加密演算法"></a>測試加密演算法</h2><p>接下來我們實作 <code>test_generate_sign()</code> ，這邊我想測試的是當參數傳入之後，是否有產出我們所期待的演算結果。鐵人付的加密演算邏輯為傳入參數經過整理後與店家金鑰組合做 MD5 雜湊，因此金鑰應為必填欄位，測試程式碼如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test_generate_sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Arrange.</span>
	<span class="token variable">$args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
		<span class="token string single-quoted-string">'nonce_str'</span>       <span class="token operator">=></span> <span class="token number">71669965</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'orgno'</span>           <span class="token operator">=></span> <span class="token number">1265</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'secondtimestamp'</span> <span class="token operator">=></span> <span class="token number">1489215551</span><span class="token punctuation">,</span>
		<span class="token string single-quoted-string">'total_fee'</span>       <span class="token operator">=></span> <span class="token number">8888</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token variable">$secret</span>   <span class="token operator">=</span> <span class="token string single-quoted-string">'12345'</span><span class="token punctuation">;</span>
	<span class="token variable">$expected</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'B59951E5AA2E6FCA1596253E2978ED2B'</span><span class="token punctuation">;</span>

	<span class="token comment">// Act.</span>
	<span class="token variable">$actual</span> <span class="token operator">=</span> <span class="token class-name static-context">Utility</span><span class="token operator">::</span><span class="token function">generate_sign</span><span class="token punctuation">(</span> <span class="token variable">$args</span><span class="token punctuation">,</span> <span class="token variable">$secret</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// Assert.</span>
	<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">assertEquals</span><span class="token punctuation">(</span> <span class="token variable">$expected</span><span class="token punctuation">,</span> <span class="token variable">$actual</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Arrange 的部分先設定要傳入的變數，以及預期的演算結果，Act 則是執行 <code>generate_sign()</code> 並將結果存在 $actual 變數中，最後的 Assert 則是檢查這兩個變數是否有符合預期結果，<code>assertEquals()</code> 是判斷傳入的兩個變數值是否相等。</p>
<p>接下來切換到 VSCode 左側面板找到燒杯的圖案，就能看到一個測試項目，這時候點選上面的播放圖示或是用快捷鍵輸入 Cmd + t + s 就能執行測試，記得 t 跟 s 不用同時，只要按住 Cmd 先按 t 再按 s 即可，也可以點擊下圖中間箭頭處的 Run 來執行：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-unit-test/wordpress-unit-test-02.jpg"></p>
<p>順利的話就能在下方的 Output 視窗看到測試結果，當然，你也可以在終端機輸入 phpunit 來執行測試。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">PHPUnit 9.5.9 by Sebastian Bergmann and contributors.

Runtime:       PHP 7.4.13
Configuration: &#x2F;Users&#x2F;oberonlai&#x2F;Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins&#x2F;iron-pay&#x2F;phpunit.xml

R                                                                   1 &#x2F; 1 (100%)

Time: 00:00.016, Memory: 6.00 MB

There was 1 risky test:

1) Irp\Tests\UtilityTest::test_generate_sign
This test does not have a @covers annotation but is expected to have one

OK, but incomplete, skipped, or risky tests!
Tests: 1, Assertions: 1, Risky: 1.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這邊我們會發現雖然測試通過了，但出現一個提示訊息說：This test does not have a @covers annotation but is expected to have one，這代表我們沒有這個方法沒有標記要測試哪些項目，更多關於 annotation 的用法可以參考官方文件。</p>
<p>這邊我們先忽略它，要關閉這個提示的話開啟 phpunit.xml，找到 <code>forceCoversAnnotation</code> 設定為 false 即可：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">forceCoversAnnotation="false"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再執行一次測試就可以看到通過的訊息：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">PHPUnit 9.5.9 by Sebastian Bergmann and contributors.

Runtime:       PHP 7.4.13
Configuration: &#x2F;Users&#x2F;oberonlai&#x2F;Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins&#x2F;iron-pay&#x2F;phpunit.xml

.                                                                   1 &#x2F; 1 (100%)

Time: 00:00.018, Memory: 6.00 MB

OK (1 test, 1 assertion)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="測試取得商店代號"><a href="#測試取得商店代號" class="headerlink" title="測試取得商店代號"></a>測試取得商店代號</h2><p>第二個我們要測試的是 <code>get_store_id()</code>，這方法我們要測試的是從資料庫取得的商店代號的位數是否為 8 碼，以及是否皆整數。先回到這個方法的實作：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_store_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'irp_payment_orgno'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可以看到裡面只有一個 <code>get_option()</code>，這個方法是 WordPress 取得 wp_options 資料表的函式，但在這邊我們只是要驗證 <code>get_store_id()</code> 返回的資料是否正確，而非 <code>get_option()</code> 是否能正確的從資料庫取得資料，再加上我們要隔離外部環境也就是資料庫的操作，因此我們不能直接呼叫 WordPress 的函式，而是要用模擬的方式來做出假的結果，藉此來確保我們自己寫出來的程式是正確的。</p>
<p>而模擬的方法叫做測試分身 - Test Doubles，我們這邊使用 PHPMock 來模擬 <code>get_option()</code>，先透過 Composer 來進行安裝，記得要加 –dev 來指定該套件只用開發環境：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">iron-pay$ composer require --dev php-mock&#x2F;php-mock-phpunit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然後使用 PHPMock 來模擬 <code>get_option()</code>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">UnitTestDemo</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">phpmock<span class="token punctuation">\</span>phpunit<span class="token punctuation">\</span>PHPMock</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">UtilityTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">use</span> <span class="token package">PHPMock</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 略</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test_get_store_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// Arrange.</span>
		<span class="token variable">$get_option</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getFunctionMock</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Irp'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'get_option'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$get_option</span><span class="token operator">-></span><span class="token function">expects</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">once</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
					<span class="token operator">-></span><span class="token function">with</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">equalTo</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'irp_payment_orgno'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
					<span class="token operator">-></span><span class="token function">willReturn</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'mystoreid'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token variable">$expected</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'mystoreid'</span><span class="token punctuation">;</span>

		<span class="token comment">// Act.</span>
		<span class="token variable">$actual</span> <span class="token operator">=</span> <span class="token class-name static-context">Utility</span><span class="token operator">::</span><span class="token function">get_store_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Assert.</span>
		<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">assertEquals</span><span class="token punctuation">(</span> <span class="token variable">$expected</span><span class="token punctuation">,</span> <span class="token variable">$actual</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>變數 <code>$get_option</code> 就是模擬出來的對象，它透過 <code>getFunctionMock()</code> 來建立分身，第一個參數傳的是命名空間，第二個是要模擬的函式名稱，接下來呼叫 expects、will、willReturn 三個方法，第一個 expects 的參數為 <code>$this-&gt;once()</code>，代表在這個測試中只會呼叫一次我們自己做出來的 <code>get_option()</code>。</p>
<p>第二個 with 代表要傳入這個假方法的參數，也就是原本方法的裡面的 <code>return get_option( &#39;irp_store_id&#39; )</code> 的 <code>irp_store_id</code> 欄位名稱，第三個 willReturn 代表的是這個假方法會回傳的結果，也就是商店代號，最後就可以檢查是否吻合。</p>
<p>測試寫到這邊，會發現到測試對象 <code>get_store_id()</code> 並不完整，它既沒有檢查資料是否有正確取得以及格式是否正確，而這也是寫測試的最大好處，為了要能夠寫測試，會思考到當下沒有考慮到的情境，我們把 <code>get_store_id()</code> 重構如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_store_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token variable">$store_id</span> <span class="token operator">=</span> <span class="token function">get_option</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'irp_store_id'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token variable">$store_id</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token string single-quoted-string">'未輸入商店代號'</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span> <span class="token variable">$stord_id</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token string single-quoted-string">'商店代號限定數字'</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span> <span class="token variable">$stord_id</span> <span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">8</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token string single-quoted-string">'商店代號須為 8 碼'</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token keyword">return</span> <span class="token variable">$store_id</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>回到測試裡面，將原本的 <code>$get_option</code> 修改為執行四次，並且每次都回傳不同的結果：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> DemoTest <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>PHPUnit_Framework_TestCase</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">PHPMock</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test_get_store_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$get_option</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getFunctionMock</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Irp'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'get_option'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$get_option</span><span class="token operator">-></span><span class="token function">expects</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">exactly</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
					<span class="token operator">-></span><span class="token function">with</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">equalTo</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'irp_payment_orgno'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
					<span class="token operator">-></span><span class="token function">willReturnOnConsecutiveCalls</span><span class="token punctuation">(</span>
						<span class="token string single-quoted-string">'12345678'</span><span class="token punctuation">,</span>
						<span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>
						<span class="token string single-quoted-string">'abc123'</span><span class="token punctuation">,</span>
						<span class="token string single-quoted-string">'123'</span>
					<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$expected</span>        <span class="token operator">=</span> <span class="token string single-quoted-string">'12345678'</span><span class="token punctuation">;</span>
		<span class="token variable">$expected_empty</span>  <span class="token operator">=</span> <span class="token string single-quoted-string">'未輸入商店代號'</span><span class="token punctuation">;</span>
		<span class="token variable">$expected_number</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'商店代號限定數字'</span><span class="token punctuation">;</span>
		<span class="token variable">$expected_length</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'商店代號須為 8 碼'</span><span class="token punctuation">;</span>

		<span class="token comment">// Act.</span>
		<span class="token variable">$actual</span>        <span class="token operator">=</span> <span class="token class-name static-context">Utility</span><span class="token operator">::</span><span class="token function">get_store_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$actual_empty</span>  <span class="token operator">=</span> <span class="token class-name static-context">Utility</span><span class="token operator">::</span><span class="token function">get_store_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$actual_number</span> <span class="token operator">=</span> <span class="token class-name static-context">Utility</span><span class="token operator">::</span><span class="token function">get_store_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$actual_length</span> <span class="token operator">=</span> <span class="token class-name static-context">Utility</span><span class="token operator">::</span><span class="token function">get_store_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Assert.</span>
		<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">assertEquals</span><span class="token punctuation">(</span> <span class="token variable">$expected</span><span class="token punctuation">,</span> <span class="token variable">$actual</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">assertEquals</span><span class="token punctuation">(</span> <span class="token variable">$expected_empty</span><span class="token punctuation">,</span> <span class="token variable">$actual_empty</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">assertEquals</span><span class="token punctuation">(</span> <span class="token variable">$expected_number</span><span class="token punctuation">,</span> <span class="token variable">$actual_number</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">assertEquals</span><span class="token punctuation">(</span> <span class="token variable">$expected_length</span><span class="token punctuation">,</span> <span class="token variable">$actual_length</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>原本使用 <code>willReturn()</code> 來模擬傳回一個結果，現在改用 <code>willReturnOnConsecutiveCalls()</code> 傳回四個，第一個是正確的格式，另外三個是例外情況，然後分別對應到在例外情況下 <code>test_get_store_id()</code> 會回傳的結果。</p>
<p>除了使用 PHPMock 來模擬內建的函式外，在社群中也有提供針對 WordPress 使用的測試替身，像是 <a href="https://github.com/10up/wp_mock">WP_Mock</a> 以及 <a href="https://brain-wp.github.io/BrainMonkey/">Brain Mockey</a>，PHP 也有一套專門的測試框架叫做 <a href="https://codeception.com/">CodeCeption</a>，而用在 WordPress 上面的叫做 <a href="https://wpbrowser.wptestkit.dev/">wp-browser</a>，另外還有針對 WooCommerce 的 <a href="https://github.com/level-level/wp-browser-woocommerce">wp-browser-woocommerce</a>，這些工具讓我們可以更無痛的導入測試流程。</p>
<p>寫測試的價值在於讓我們想到原本沒有想到的狀況，進而來改善原始程式碼對於例外情況的處理，這也是為什麼寫了測試反而可以省下除錯時間，因為當例外狀況都在我們的掌控之中，要追查問題出在哪裏就會很快，省去很多摸索的時間。</p>
<p>在業界流行一種測試驅動開發 ( Test-Driven Development ) 的流程，先把測試寫完再去真正實作功能的開發，寫測試的當下就能先思考這個類別該如何使用以及可能會有的例外情況，把一切都考慮進去想清楚後再來動手，就能減少很多修改程式的時間。</p>
<p>但要測試開發的功能能否在真實世界正常運作，我們還需要整合測試與端對端測試，下一篇我們先介紹端對端測試，也就是透過模擬使用者的操作行為來進行測。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
        <tag>自動化測試</tag>
        <tag>單元測試</tag>
      </tags>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰（十二）- 端對端測試</title>
    <url>/tw/woocommerce-payment-e2e/</url>
    <content><![CDATA[<p>曾經做過一個專案，顧客把商品加入購物車後，可以同時選擇要加入幾筆商品，然後在結帳頁的時候需要根據商品數量來增加報名資料的欄位，也就是說如果購物車裡面有三筆資料，一樣的報名表單就需要填寫三份不同的客戶資料，有點類似旅行社在報名前需要填寫所有成員的資料一樣。</p>
<p>然後某天接到客戶反應說當只有一位報名時功能正常，但只要是多位報名會有問題，我就依照慣例開始手動測試，每一個報名要填的欄位有 8 個，所以每測試一次我至少要填 8 x 2 = 16 個欄位，用瀏覽器記憶的功能輸入或許不會花太多時間，但萬一客戶反應同時報名五個人以上會有問題，我就要填 40 個以上的欄位了，在找尋有沒有更快的測試方法時，才知道有端對端測試工具這種好物。</p>
<span id="more"></span>

<p>所謂的端對端測試就是透過 JS 來自動操縱瀏覽器來依序執行頁面跳轉、按鈕點擊、填寫表單等真實使用者的瀏覽行為，它可以帶來以下好處：</p>
<ul>
<li>確保我們寫好的程式碼是可以被使用者正常操作的</li>
<li>測試程式碼寫好一次後可以重複利用</li>
<li>減少手動測試的人為錯誤</li>
<li>減少手動測試的時間</li>
<li>安排固定時間自動執行測試</li>
<li>提升程式碼品質</li>
</ul>
<p>現在市面上有超多廠商在提供這樣端對端測試的 SaaS 服務，像是 Ghost Inspector、Lambadtest、Usertrace 等等，只要搜尋 auto test tool 就可以找到一大堆，而本文要介紹的是 WooCommerce 官方提供的 wc-e2e-page-object。</p>
<p>它是一個 JS 的套件，整合斷言庫 Chai.js 以及 WooCommerce 常見的操作行為，像是前台加入購物車、點擊結帳按鈕，或是後台的新增商品、編輯訂單資料等等，都可以透過這個套件來進行操作。</p>
<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><p>首先為了跟 PHPUnit 的資料夾區分，我們新建一個 e2e 資料夾，裡面會放 JS 的測試<code>place-order.js</code>，接著新增 <code>.babelrc</code> 貼入並以下內容：</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;presets&quot;: [
        &quot;es2015&quot;,
        &quot;stage-2&quot;
    ],
    &quot;plugins&quot;: [
        &quot;add-module-exports&quot;
    ]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>wc-e2e 套件需經由 NPM 安裝，須確保電腦可執行 Node.js，切換到外掛根目錄下，新增 package.json 檔，並貼入以下內容：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"iron-pay"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"cross-env NODE_CONFIG_DIR='./config' BABEL_ENV=commonjs mocha e2e/place-order.js --compilers js:babel-register --recursive"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"babel"</span><span class="token operator">:</span> <span class="token string">"^6.5.2"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-cli"</span><span class="token operator">:</span> <span class="token string">"^6.14.0"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-eslint"</span><span class="token operator">:</span> <span class="token string">"^7.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-plugin-add-module-exports"</span><span class="token operator">:</span> <span class="token string">"^0.2.1"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-preset-es2015"</span><span class="token operator">:</span> <span class="token string">"^6.14.0"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-preset-stage-2"</span><span class="token operator">:</span> <span class="token string">"^6.13.0"</span><span class="token punctuation">,</span>
    <span class="token property">"chai"</span><span class="token operator">:</span> <span class="token string">"^3.5.0"</span><span class="token punctuation">,</span>
    <span class="token property">"chai-as-promised"</span><span class="token operator">:</span> <span class="token string">"^6.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"config"</span><span class="token operator">:</span> <span class="token string">"^1.24.0"</span><span class="token punctuation">,</span>
    <span class="token property">"cross-env"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"istanbul"</span><span class="token operator">:</span> <span class="token string">"^1.0.0-alpha"</span><span class="token punctuation">,</span>
    <span class="token property">"mocha"</span><span class="token operator">:</span> <span class="token string">"^3.0.2"</span><span class="token punctuation">,</span>
    <span class="token property">"wc-e2e-page-objects"</span><span class="token operator">:</span> <span class="token string">"0.2.2"</span><span class="token punctuation">,</span>
    <span class="token property">"chromedriver"</span><span class="token operator">:</span> <span class="token string">"^93.0.1"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要注意的地方是 scripts 的地方，要把 test 路徑設定為我們的 e2e 資料夾裡面的測試程式碼 <code>place-order.js</code>：</p>
<pre class="line-numbers language-none"><code class="language-none">&quot;test&quot;: &quot;cross-env NODE_CONFIG_DIR&#x3D;&#39;.&#x2F;config&#39; BABEL_ENV&#x3D;commonjs mocha e2e&#x2F;place-order.js --compilers js:babel-register --recursive&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最後是新增一個 config 資料夾裡面放跑端對端測試時的設定檔 <code>default.json</code>：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://woocommerce.test"</span><span class="token punctuation">,</span>
    <span class="token property">"users"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"woocommerce"</span><span class="token punctuation">,</span>
            <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"password"</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token property">"customer"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
            <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">""</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"startBrowserTimeoutMs"</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>
    <span class="token property">"mochaTimeoutMs"</span><span class="token operator">:</span> <span class="token number">120000</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>url 是本機 WordPress 的路徑，並提供管理者的登入帳密，完成以上資料準備後，就能進行套件的安裝：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">iron-pay$ npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安裝完成後外掛資料夾結構如下：</p>
<pre class="line-numbers language-none"><code class="language-none">iron-pay
├── composer.json
├── composer.lock
├── config
│   └── default.json
├── e2e
│   └── place-order.js
├── iron-pay.php
├── node_modules
├── package-lock.json
├── package.json
├── phpunit.xml
├── src
│   ├── Gateways
│   ├── Options.php
│   ├── Posts
│   └── Utility.php
├── tests
│   ├── Gateways
│   ├── OptionsTest.php
│   ├── Posts
│   └── UtilityTest.php
└── vendor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="撰寫測試程式"><a href="#撰寫測試程式" class="headerlink" title="撰寫測試程式"></a>撰寫測試程式</h2><p>接著我們要撰寫測試程式碼，我們的測試流程為將商品加入購物車 -&gt; 確保購物車內有該商品 -&gt; 進入結帳頁 -&gt; 選擇鐵人付信用卡金流 -&gt; 按下結帳按鈕成立訂單</p>
<p>開啟 <code>place-order.js</code>，貼入以下測試的架構：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">'config'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> chai <span class="token keyword">from</span> <span class="token string">'chai'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> chaiAsPromised <span class="token keyword">from</span> <span class="token string">'chai-as-promised'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">'selenium-webdriver/testing'</span><span class="token punctuation">;</span>

<span class="token comment">// Helper objects for performing actions.</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> WebDriverManager<span class="token punctuation">,</span> WebDriverHelper <span class="token keyword">as</span> helper <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'wp-e2e-webdriver'</span><span class="token punctuation">;</span>

<span class="token comment">// We're going to use the ShopPage and CartPage objects for this tutorial.</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ShopPage<span class="token punctuation">,</span> CartPage<span class="token punctuation">,</span> CheckoutPage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'wc-e2e-page-objects'</span><span class="token punctuation">;</span>

chai<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span> chaiAsPromised <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> assert <span class="token operator">=</span> chai<span class="token punctuation">.</span>assert<span class="token punctuation">;</span>

<span class="token keyword">let</span> manager<span class="token punctuation">;</span>
<span class="token keyword">let</span> driver<span class="token punctuation">;</span>

test<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span> <span class="token string">'鐵人付信用卡測試'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Set up the driver and manager before testing starts.</span>
    test<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span> <span class="token string">'open browser'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span> config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span> <span class="token string">'startBrowserTimeoutMs'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

        manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebDriverManager</span><span class="token punctuation">(</span> <span class="token string">'chrome'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> baseUrl<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span> <span class="token string">'url'</span> <span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        driver <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        helper<span class="token punctuation">.</span><span class="token function">clearCookiesAndDeleteLocalStorage</span><span class="token punctuation">(</span> driver <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span> config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span> <span class="token string">'mochaTimeoutMs'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 測試</span>

    test<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span> <span class="token string">'quit browser'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        manager<span class="token punctuation">.</span><span class="token function">quitBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>基本架構為先引入測試要用的套件，分別匯入 ShopPage、CartPage、CheckoutPage 三個由 wc-e2e-page-objects 提供的模組，這些模組都有各自的方法來進行介面的互動。</p>
<p>測試的任務從 <code>test.describe()</code> 開始，先定義這個任務的名稱，然後開啟瀏覽器、檢查是否逾時，到最後關閉瀏覽器，介於 <code>test.before()</code> 跟 <code>test.after()</code> 中間就是我們要執行的動作。</p>
<p>首先是將商品加入購物車：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 略</span>
test<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span> <span class="token string">'鐵人付信用卡測試'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Set up the driver and manager before testing starts.</span>
    test<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span> <span class="token string">'open browser'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 略</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span> config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span> <span class="token string">'mochaTimeoutMs'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 測試加入購物車</span>
	test<span class="token punctuation">.</span><span class="token function">it</span><span class="token punctuation">(</span> <span class="token string">'將商品加入購物車'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> shopPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShopPage</span><span class="token punctuation">(</span> driver<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> url<span class="token operator">:</span> manager<span class="token punctuation">.</span><span class="token function">getPageUrl</span><span class="token punctuation">(</span> <span class="token string">'/shop'</span> <span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> added_product <span class="token operator">=</span> shopPage<span class="token punctuation">.</span><span class="token function">addProductToCart</span><span class="token punctuation">(</span> <span class="token string">'Flying Ninja'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        assert<span class="token punctuation">.</span>eventually<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span> added_product <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    test<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span> <span class="token string">'quit browser'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 略</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>宣告 ShopPage 的實例，並且將本機頁面跳轉至 shop 頁面，接下來使用 ShopPage 物件的 <code>addProductToCart()</code> 方法，將商品 Flying Ninja 加入購物車，該方法會回傳布林值，所以用斷言 <code>assert.eventually.ok( added_product )</code> 檢查是否回傳為 true，完成後執行 <code>npm run test</code>，就會看到 Chrome 瀏覽器被啟用，並且自動執行加入購物車的動作，並在命令列裡面看到執行成功的訊息：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">iron-pay$ npm run test

&gt; iron-pay@1.0.0 test &#x2F;Users&#x2F;oberonlai&#x2F;Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins&#x2F;iron-pay
&gt; cross-env NODE_CONFIG_DIR&#x3D;&#39;.&#x2F;config&#39; BABEL_ENV&#x3D;commonjs mocha e2e&#x2F;place-order.js --compilers js:babel-register --recursive



  鐵人付信用卡測試
    ✓ 將商品加入購物車 (1936ms)


  1 passing (4s)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下來加入第二個任務，讓頁面自動跳轉到購物車並且確認裡面有剛剛加入的商品名稱：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 略</span>
test<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span> <span class="token string">'鐵人付信用卡測試'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Set up the driver and manager before testing starts.</span>
    test<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span> <span class="token string">'open browser'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 略</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span> config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span> <span class="token string">'mochaTimeoutMs'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 測試加入購物車</span>
	test<span class="token punctuation">.</span><span class="token function">it</span><span class="token punctuation">(</span> <span class="token string">'將商品加入購物車'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 略</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 測試購物車有正確加入商品</span>
	test<span class="token punctuation">.</span><span class="token function">it</span><span class="token punctuation">(</span> <span class="token string">'前往購物車'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> cartPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CartPage</span><span class="token punctuation">(</span> driver<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> url<span class="token operator">:</span> manager<span class="token punctuation">.</span><span class="token function">getPageUrl</span><span class="token punctuation">(</span> <span class="token string">'/cart'</span> <span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> has_product <span class="token operator">=</span> cartPage<span class="token punctuation">.</span><span class="token function">hasItem</span><span class="token punctuation">(</span> <span class="token string">'Flying Ninja'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        assert<span class="token punctuation">.</span>eventually<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span> has_product <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    test<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span> <span class="token string">'quit browser'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 略</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這邊我們使用的是 CartPage 物件，並且用它的 <code>hasItem()</code> 方法來檢查購物車裡面是否有 Flying Ninja 這個商品，如果有的話就能通過斷言：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">iron-pay$ npm run test

iron-pay@1.0.0 test &#x2F;Users&#x2F;oberonlai&#x2F;Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins&#x2F;iron-pay
&gt; cross-env NODE_CONFIG_DIR&#x3D;&#39;.&#x2F;config&#39; BABEL_ENV&#x3D;commonjs mocha e2e&#x2F;place-order.js --compilers js:babel-register --recursive



  鐵人付信用卡測試
    ✓ 將商品加入購物車 (2302ms)
    ✓ 前往購物車 (831ms)


  2 passing (5s)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最後是測試鐵人付信用卡結帳，測試流程是選擇信用卡並點擊前往付款按鈕：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 略</span>
test<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span> <span class="token string">'鐵人付信用卡測試'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Set up the driver and manager before testing starts.</span>
    test<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span> <span class="token string">'open browser'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 略</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span> config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span> <span class="token string">'mochaTimeoutMs'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 測試加入購物車</span>
	test<span class="token punctuation">.</span><span class="token function">it</span><span class="token punctuation">(</span> <span class="token string">'將商品加入購物車'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 略</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 測試購物車有正確加入商品</span>
	test<span class="token punctuation">.</span><span class="token function">it</span><span class="token punctuation">(</span> <span class="token string">'前往購物車'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
       <span class="token comment">// 略</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span>
	
	<span class="token comment">// 測試能夠使用鐵人付前往結帳</span>
	test<span class="token punctuation">.</span><span class="token function">it</span><span class="token punctuation">(</span> <span class="token string">'前往結帳頁並下訂單'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> checkoutPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheckoutPage</span><span class="token punctuation">(</span> driver<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> url<span class="token operator">:</span> manager<span class="token punctuation">.</span><span class="token function">getPageUrl</span><span class="token punctuation">(</span> <span class="token string">'/checkout'</span> <span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> select_payment <span class="token operator">=</span> checkoutPage<span class="token punctuation">.</span><span class="token function">selectPaymentMethod</span><span class="token punctuation">(</span> <span class="token string">'信用卡'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> place_order <span class="token operator">=</span> checkoutPage<span class="token punctuation">.</span><span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        assert<span class="token punctuation">.</span>eventually<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span> select_payment <span class="token punctuation">)</span><span class="token punctuation">;</span>
        assert<span class="token punctuation">.</span>eventually<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span> place_order <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    test<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span> <span class="token string">'quit browser'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 略</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這邊使用 CheckoutPage 物件，並利用 <code>selectPaymentMethod()</code> 與 <code>placeOrder()</code> 這兩個方法來執行選擇付款方式與結帳的動作，要注意的地方是不管是哪種方法，要傳送的參數都是頁面上看得到的名稱，而非欄位的 id 或 value 值，畫面上看到什麼就傳什麼，執行結果如下：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">iron-pay$ npm run test

&gt; iron-pay@1.0.0 test &#x2F;Users&#x2F;oberonlai&#x2F;Sites&#x2F;woocommerce&#x2F;wp-content&#x2F;plugins&#x2F;iron-pay
&gt; cross-env NODE_CONFIG_DIR&#x3D;&#39;.&#x2F;config&#39; BABEL_ENV&#x3D;commonjs mocha e2e&#x2F;place-order.js --compilers js:babel-register --recursive



  鐵人付信用卡測試
    ✓ 將商品加入購物車 (1972ms)
    ✓ 前往購物車 (487ms)
    ✓ 前往結帳頁並下訂單 (786ms)


  3 passing (5s)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就能確保使用鐵人付信用卡是可以正常建立訂單的。</p>
<p>當我們寫了測試來檢查自己的程式碼時，目的不是消除所有錯誤，也並非是寫了測試功能就完全不會有臭蟲，而是讓我們在修改程式的當下，萬一引發某些錯誤時可以立即透過測試來得知。</p>
<p>像上面的這個測試我們就無法測到金流商 API 發生錯誤時的情境，但因為有了這些測試，我們可以快速定位到是因為回傳資料有誤進而追查，而非又要翻原始碼去逐一定位問題所在，有了測試我們可以把除錯範圍縮小，減少除錯的時間。</p>
<p>當我們在本機測試完成後，接下來就要進入測試機的階段，下一篇會介紹外掛的部署流程，以及如何使用 VPS 建置測試站。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
        <tag>自動化測試</tag>
        <tag>e2e</tag>
      </tags>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰（十三）- 建立測試機</title>
    <url>/tw/woocommerce-payment-staging/</url>
    <content><![CDATA[<p>開發 WooCommerce 金流外掛能在本機測試的部分除了確保設定項有正確寫入資料庫外，剩下的就是確保按下結帳按鈕時不會有任何的錯誤產生，至於能否將正確的資料送到金流商以及成功接收回傳資料，都還是要在遠端主機才能進行測試，雖然我們可以用一些工具像是 Postman 來模擬金流商的 API，但最終這支外掛還是要能夠在正式環境中運作才行。</p>
<p>通常承接外掛開發這一類的案件，客戶本身都已經有運作中的網站，為了要讓我們的外掛可以在不影響客戶網站的情況下測試，最好的方法就是客戶可以提供給我們跟正式環境一模一樣的測試站來執行金流外掛的結帳流程。</p>
<p>但常遇到的狀況是客戶無法提供，這樣的話就需要我們自己架設測試環境，但自架的測試環境跟正式站還是會有所落差，所以主要測試的方向就是確保金流商的 API 可以運作正常，至於裝在正式站是否會跟其他外掛產生衝突或其他狀況而造成問題，這就只能等到上正式站才能知道了。</p>
<span id="more"></span>

<p>通常我的開發流程如下：在本機完成外掛開發 -&gt; 自動化測試 -&gt; 開 VPS 測試機 -&gt; 進入測試機繼續開發與除錯 -&gt; 自動化測試 -&gt; 人工測試 -&gt; 部署到正式站</p>
<p>當本機開發完成第一輪後，接下進入測試機確保 API 的傳送與接收都正常，確認沒問題後再透過自動化工具部署到正式站，在自動部署的過程中會再跑一次測試，萬一上正式站後發生問題，就能手動還原部署前的狀態，接下來檢查造成問題的因素有哪些，再將這些因素搬移到測試機來進行重現並除錯。</p>
<p>最好的情況下是客戶允許我們把正式站的資料倒進測試機，但盡可能只搬移檔案的部分不要動到資料庫，要動到資料庫也排除跟使用者相關的資料表，以減少個資外洩的風險。</p>
<p>如果在測試機無法重現，我們勢必還是要進入正式機來除錯，為了避免顧客不小心選到我們正在測試中的金流商，可以加入一個只限定管理員才能看到該付款方式的功能，另外一定要準備好的就是日誌紀錄，WooCommerce 有提供日誌類別 <code>WC_Logger</code>，使用之後就可以在後台的 WooCommerce &gt; 狀態 &gt; 日誌紀錄來印出訊息，千萬不要讓除錯的資訊直接顯示在前台。</p>
<p>設定好部署流程之後，接下來我們就來建立測試機，我習慣用 VPS 來建置，因為可以透過指令碼把我們需要的工具一次安裝完成，還記得之前我們用的本機開發環境 Valet 嗎？它有提供 Linux 的版本，這樣就能讓我們的本機與測試環境一樣。</p>
<p>但 Valet 的主要用途就是拿來本機開發用，雖然他有外連網址的功能，但因為沒辦法綁網域，因此也就無法安裝 SSL，有些金流商會要求回傳網址需要加密，這讓 Valet 不適合用在測試環境之中。</p>
<p>因此我們會採用一套叫做 WordOps 的 WordPress 環境，只要下一段指令就能一次安裝好 PHP、Nginx、MySql 以及 WordPress，同時也內建了 SSL 功能，再加上它將伺服器設定進行過最佳化，讓網站跑起來可以非常順暢，它可以直接作為正式環境來使用，因此拿來當測試環境再適合也不過。</p>
<p>除此之外，我們還需要以下工具：Git、Compose、Node.js，這些都能透過指令安裝，我們希望在安裝 VPS 時，只要輸入測試站的網址以及後台登入帳密，剩下的這些作業全部可以自動化搞定，為了達成這一點，首先我們必須先找可以使用指令工具來建立環境的 VPS，這邊示範使用 Linode 的服務。</p>
<h2 id="安裝-linode-cli"><a href="#安裝-linode-cli" class="headerlink" title="安裝 linode-cli"></a>安裝 linode-cli</h2><p>linode-cli 是使用 Python 開發的，因此要確保本機環境有安裝，如果沒有的話可以使用 Homebrew 進行安裝：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ brew install python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接下來安裝 linode-cli：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ pip install linode-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安裝完成後我們先把登入授權設定好：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ linode-cli configure --token<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>它會請我們前往管理後台取得登入的 Token，照它的說明取得後輸入即可：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Welcome to the Linode CLI.  This will walk you through some initial setup.

First, we need a Personal Access Token.  To get one, please visit
https:&#x2F;&#x2F;cloud.linode.com&#x2F;profile&#x2F;tokens and click
&quot;Create a Personal Access Token&quot;.  The CLI needs access to everything
on your account to work correctly.
Personal Access Token:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再來是設定測試機的機房位置與規格：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ linode-cli configurate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>我們使用東京機房，所以選擇 ap-norteast：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Default Region for operations.  Choices are:
 1 - ap-west
 2 - ca-central
 3 - ap-southeast
 4 - us-central
 5 - us-west
 6 - us-southeast
 7 - us-east
 8 - eu-west
 9 - ap-south
 10 - eu-central
 11 - ap-northeast

Default Region (Optional): 11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>選擇最小規格的主機每月 5 美金：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Default Type of Linode to deploy.  Choices are:
 1 - g6-nanode-1
 2 - g6-standard-1
 3 - g6-standard-2
 4 - g6-standard-4
 5 - g6-standard-6
 6 - g6-standard-8
 7 - g6-standard-16
 8 - g6-standard-20
 9 - g6-standard-24
 10 - g6-standard-32
 11 - g7-highmem-1
 12 - g7-highmem-2
 13 - g7-highmem-4
 14 - g7-highmem-8
 15 - g7-highmem-16
 16 - g6-dedicated-2
 17 - g6-dedicated-4
 18 - g6-dedicated-8
 19 - g6-dedicated-16
 20 - g6-dedicated-32
 21 - g6-dedicated-48
 22 - g6-dedicated-50
 23 - g6-dedicated-56
 24 - g6-dedicated-64
 25 - g1-gpu-rtx6000-1
 26 - g1-gpu-rtx6000-2
 27 - g1-gpu-rtx6000-3
 28 - g1-gpu-rtx6000-4

Default Type of Linode (Optional): 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>預設的 OS 使用 linode/ubuntu20.04：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Default Image to deploy to new Linodes.  Choices are:
 1 - linode&#x2F;almalinux8
 2 - linode&#x2F;alpine3.10
 3 - linode&#x2F;alpine3.11
 4 - linode&#x2F;alpine3.12
 5 - linode&#x2F;alpine3.13
 6 - linode&#x2F;alpine3.14
 7 - linode&#x2F;arch
 8 - linode&#x2F;centos7
 9 - linode&#x2F;centos8
 10 - linode&#x2F;centos-stream8
 11 - linode&#x2F;debian10
 12 - linode&#x2F;debian11
 13 - linode&#x2F;debian9
 14 - linode&#x2F;fedora32
 15 - linode&#x2F;fedora33
 16 - linode&#x2F;fedora34
 17 - linode&#x2F;gentoo
 18 - linode&#x2F;debian9-kube-v1.19.11
 19 - linode&#x2F;debian9-kube-v1.20.7
 20 - linode&#x2F;debian9-kube-v1.21.1
 21 - linode&#x2F;opensuse15.2
 22 - linode&#x2F;opensuse15.3
 23 - linode&#x2F;rocky8
 24 - linode&#x2F;slackware14.2
 25 - linode&#x2F;ubuntu16.04lts
 26 - linode&#x2F;ubuntu18.04
 27 - linode&#x2F;ubuntu20.04
 28 - linode&#x2F;ubuntu20.10
 29 - linode&#x2F;ubuntu21.04
 30 - linode&#x2F;alpine3.9
 31 - linode&#x2F;centos6.8
 32 - linode&#x2F;debian8
 33 - linode&#x2F;fedora31
 34 - linode&#x2F;opensuse15.1
 35 - linode&#x2F;slackware14.1

Default Image (Optional): 27<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>完成基本設定後，就能使用指令建立機器，後面的 123456 就是 root 權限登入密碼：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ linode-cli linodes create --root_pass 123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接下來會看到以下的主機資訊：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>label</th>
<th>region</th>
<th>type</th>
<th>image</th>
<th>status</th>
<th>ipv4</th>
</tr>
</thead>
<tbody><tr>
<td>12345678</td>
<td>linode12345678</td>
<td>ap-northeast</td>
<td>g6-nanode-1</td>
<td>linode/ubuntu20.04</td>
<td>provisioning</td>
<td>123.123.123.123</td>
</tr>
</tbody></table>
<p>在等待建立的過程中，我們可以先把自己電腦的 RSA key 傳上去，這樣 ssh 登入就不用輸入密碼了，如果沒有 key 的話先產生一個：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接下來複製到剛開好的主機中：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ ssh-copy-id root@123.123.123.123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然後輸入一次 root 密碼即可，完成後會看到以下訊息：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Number of key(s) added:        1

Now try logging into the machine, with:   &quot;ssh &#39;root@123.123.123.123&#39;&quot;
and check to make sure that only the key(s) you wanted were added.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>下一步使用 ssh 登入主機並執行自動化指令安裝：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">root@localhost:~ bash &lt;(curl -s https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;oberonlai&#x2F;sh_staging&#x2F;master&#x2F;wordops.sh)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>首先要回答六個問題，分別為：</p>
<ul>
<li>測試站的網址，不用輸入 http/https</li>
<li>管理者登入帳號</li>
<li>管理者登入密碼</li>
<li>管理者電子郵件</li>
<li>外掛名稱</li>
<li>外掛的存放庫網址</li>
</ul>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">1.Staging site url:
staging.example.com
2.Staging admin user:
user
3.Staging admin password:
pass
4.Staging admin email:
mail@mail.com
5.Plugin name:
my-plugin
6.Git clone url:
https:&#x2F;&#x2F;github.com&#x2F;xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>指令的內容如下：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># Get information
echo &quot;1.Staging site url:&quot;
read staging_url
echo &quot;2.Staging admin user:&quot;
read staging_user
echo &quot;3.Staging admin password:&quot;
read staging_pass
echo &quot;4.Staging admin email:&quot;
read staging_email
echo &quot;5.Plugin name:&quot;
read plugin_name
echo &quot;6.Git clone url:&quot;
read repo

# Set timezone
sudo timedatectl set-timezone Asia&#x2F;Taipei

# Install WordOps
wget -qO wo wops.cc &amp;&amp; sudo bash wo --force
wo stack upgrade --nginx
wo site create &quot;$staging_url&quot; --wp --user&#x3D;&quot;$staging_user&quot; --pass&#x3D;&quot;$staging_pass&quot; --email&#x3D;&quot;$staging_email&quot; --letsencrypt
cd &#x2F;var&#x2F;www&#x2F;&quot;$staging_url&quot;&#x2F;htdocs

# Install plugins and themes
wp language core install zh_TW --allow-root
wp language core activate zh_TW --allow-root
wp option update timezone_string &quot;Asia&#x2F;Taipei&quot; --allow-root
wp site switch-language zh_TW --allow-root
wp plugin install woocommerce --allow-root
wp language plugin install woocommerce zh_TW --allow-root
wp plugin activate woocommerce zh_TW --allow-root
wp theme install storefront --allow-root
wp language theme install storefront zh_TW --allow-root
wp theme activate storefront --allow-root

# Install Tool
sudo apt update
sudo apt -y upgrade
sudo apt -y autoremove
sudo apt -y install git-all
sudo apt -y install nodejs npm
sudo apt -y install composer

cd wp-content&#x2F;plugins
git clone &quot;$repo&quot;
cd &quot;$plugin_name&quot;
composer install
npm install
usermod --shell &#x2F;bin&#x2F;bash www-data
echo &quot;Staging build successfully!&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先設定時區以及 WordOps 的安裝，把我們輸入的資料帶進 WordOps 建立網站的指令中，然後將目錄切換到該站底下，使用 WP CLI 來處理網站的內容，因為我們現在是使用 root 權限在執行，所以要加上 –allow-root 的參數。</p>
<p>安裝完 WordPress 之後再把我們開發上需要的工具 Git、Node.js、Composer 透過 apt 來進行安裝，最後將目錄切換到測試站的 plugins 資料夾底下，把放在 Github 的金流外掛 clone 下來，並根據需要進行 composer 與 npm install，最後將網站使用者 www-data 加入權限，之後就能使用 www-data 來執行指令。</p>
<p>大家可以根據這個範本整理成自己需要的項目，整個安裝過程大概十分鐘，記得在執行之前要先把 DNS 指到這台主機，這樣 WordOps 才能正確加上憑證。</p>
<p>測試機安裝完成後，幫 VSCode 安裝 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack">Remote Development</a> 套件，這樣就可以在本地連線到測試機繼續開發，之後的版本控管也都可以在測試機上面進行，如果要回到本機測試的話，再 Pull 回來即可。</p>
<p>下一篇介紹自動部署到正式機的方法。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
        <tag>自動化測試</tag>
        <tag>e2e</tag>
      </tags>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰（十四）- 部署正式機</title>
    <url>/tw/woocommerce-payment-deployment/</url>
    <content><![CDATA[<p>當我們在測試機確認過金流功能皆能正常運作後，接下來就是要把我們開發的外掛上傳客戶主機的時候了，在上傳之前，為了避免發生預期外的錯誤，我會進行以下的自動化流程：</p>
<ol>
<li>檢查程式碼是否符合 WordPress Coding Standard 規範</li>
<li>執行單元測試確保通過所有的測試項目</li>
<li>打包外掛並排除不需要上傳到正式站的檔案</li>
<li>上傳正式機</li>
<li>當發生問題時可以還原到上傳前的狀態</li>
</ol>
<p>第一個檢查項目是 WordPress 程式碼規範，PHP 有一套自己的程式碼規範，叫做 PHP Standards Recommendations ( PSR )，雖然 WordPress 是用 PHP 寫的，但在規範上有許多地方不一樣，這個檢查項目確保優先使用 WordPress 提供的函式。</p>
<span id="more"></span>

<p>第二個檢查項目是單元測試，這部分我們在先前的文章有提及，事實上在邊開發時我們就會同時進行測試，這邊要檢查的就是全部測試都再跑一遍，確保之前已經通過的測試在所有功能開發完成後依舊可以過關。</p>
<p>第三個項目是打包需要上傳的檔案，在客戶的正式機上面我們不需要放單元測試以及做端對端測試的套件，另外還有一些快取資料夾，這部分我們可以先透過 .gitignore 來控管，然後等到打包的時候只要安裝必要的套件即可。</p>
<p>最後一個項目也是最重要的還原機制，在正式機上面一定會裝有很多外掛，所以當我們的外掛安裝上去時就非常有可能出現預期外的錯誤，所以一定要有還原的機制，確保在上傳之後萬一出問題可以恢復成正常的狀態，以免造成客戶的損失。</p>
<p>部署到正式機根據客戶情境有兩種方式：</p>
<h2 id="透過第三方外掛部署"><a href="#透過第三方外掛部署" class="headerlink" title="透過第三方外掛部署"></a>透過第三方外掛部署</h2><p>有時候客戶能夠提供的管理權限就只有後台帳密，可能是礙於安全性考量或是他們也不知道還有什麼其他帳密可以提供給我們，遇到這種情況就只能從後台來進行部署，雖然可以手動打包 zip 檔從後台進行外掛上傳，但步驟就會變得很繁瑣，這時候我們可以在正式機安裝 WP Pusher 這支免費外掛做自動化處理。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-01.jpg"></p>
<p>它的邏輯是透過 webhook 來偵測是否有新的 commit 被 push，有的話就會自動從 Github clone 最新的一份下來，因此我們只要把 WP Pusher 安裝並設定好我們的存放庫，之後在每一次的 push 它都會幫我們把最新版的檔案自動 pull 回正式站，這樣就不用手動上傳壓縮檔。</p>
<p>具體的設定步驟如下：</p>
<ol>
<li>前往 <a href="https://wppusher.com/">https://wppusher.com</a> 下載免費版本，付費版差別在於可以使用私有存放庫</li>
<li>進入正式站後台的 &gt; 外掛 &gt; 安裝外掛，將下載回來的 <code>wppusher.zip</code>上傳後並啟用</li>
<li>找到後台主選單的 WP Pusher 並選擇 Github 頁籤，點選 Obtain a  Github token</li>
</ol>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-02.jpg"></p>
<ol start="4">
<li>取得 token 後貼回 WP Pusher 並點選 Save Github token</li>
<li>進入 WP Pusher &gt; Install Plugin 選單，輸入使用者＋存放庫的名稱，並勾選 Push-to-Deploy，按下 Install Plugin</li>
</ol>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-03.jpg"></p>
<ol start="6">
<li>安裝完成後就能在外掛列表以及 WP Pusher 的 Plugins 選單看到我們的外掛</li>
</ol>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-04.jpg"></p>
<p>但這個方法有一個很大的壞處，那就是存放庫上面有什麼檔案它就會拉什麼檔案，它沒有辦法針對我們需求進行各別打包，也就是自動部署流程第三點提到的項目，譬如說在 vendor 資料夾裡面有正式環境不需要的套件像是 PHPUnit、PHPMock 等等，透過 WP Pusher 一併會被拉到正式機。</p>
<p>解決的辦法是從本機或是測試機 push 的時候，就先把整個 vendor 資料夾 ignore 掉，然後再用白名單的方式把我們需要的套件取消忽略，假設我們的 vendor 有以下套件，打 * 號的是要上正式機的：</p>
<pre class="line-numbers language-none"><code class="language-none">vendor
├── a7 *
├── autoload.php *
├── oberonlai *
├── php-mock
└── phpunit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>gitignore 要先把整個 vendor 資料夾忽略掉，然後使用驚嘆號把正式機需要用的套件加入：</p>
<pre class="line-numbers language-none"><code class="language-none">vendor&#x2F;*
!vendor&#x2F;a7
!vendor&#x2F;oberonlai
!vendor&#x2F;autoload.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>但這樣做還是會很麻煩，因為當正式環境需要的套件有相依套件時我們可能不會知道，如果沒有把相依套件也加入白名單的話一樣會噴錯，因此最好的方法還是可以取得客戶網站的 SSH 或是 SFTP 帳密，如果沒有的話至少也要有 FTP 才能使用部署工具來打包所需套件。</p>
<h2 id="透過自動化服務進行整合與部署"><a href="#透過自動化服務進行整合與部署" class="headerlink" title="透過自動化服務進行整合與部署"></a>透過自動化服務進行整合與部署</h2><p>如果很幸運可以取得客戶的 FTP 或是主機的遠端登入帳密，那麼在做整合與部署會方便非常多，這類的服務不少，WordPress 官方文件推薦的是 Travis CI，而 Github 本身也有 Actions 可以使用，其基本邏輯是使用一個 yml 設定檔來設定該做哪些流程。</p>
<p>而本文要介紹的是一套視覺化的部署工具 <a href="https://buddy.works/">Buddy</a>，它能省去編寫設定檔的時間，直接使用所見即所得的介面來決定部署前的流程，它還整合許多常見的第三方服務，以下就為具體的設定步驟</p>
<h3 id="1-建立-Project-與-pipeline"><a href="#1-建立-Project-與-pipeline" class="headerlink" title="1.建立 Project 與 pipeline"></a>1.建立 Project 與 pipeline</h3><p>Buddy 是以 Project 為單位，一個 Project 會綁定一個存放庫，它的免費方案可以使用五個 Project，對於個人接案者來說算是非常夠用。先前往 Buddy 進行申請，可以直接使用 Github 註冊：<a href="https://buddy.works/sign-up">https://buddy.works/sign-up</a></p>
<p>註冊完成後可以看到 Project 列表，點擊右上方的 Create a new project 即可建立新專案。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-05.jpg"></p>
<p>可以看到已經 Buddy 已經與我們的 Github 做綁定，直接從中間的 Repository 搜尋找到特定存放庫，並點選存放庫即可完成 Project 的新增。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-06.jpg"></p>
<p>做好 Project 與存放庫的綁定之後，接下來就是要建立 pipeline，pipeline 指的就是部署前的流程，以本文的情境來說，就是程式碼規範檢查 &gt; 單元測試 &gt; 打包 &gt; 上傳正式機這四個步驟，現在先點選中間的 Add a new pipeline 按鈕：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-07.jpg"></p>
<p>就能看到 pipeline 的設定畫面，先幫這個 pipeline 取名，然後設定要觸發它的時間，有三種模式：手動、push 跟排程，另外 pipeline 可以新增多個，也就是說在不同的觸發條件下我們可以設定不同的自動化工作。像是在開發的時候我們會需要在 push 時跑程式碼規範檢查，或是可以在每天半夜十二點自動做測試。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-08.jpg"></p>
<h3 id="2-檢查程式碼規範"><a href="#2-檢查程式碼規範" class="headerlink" title="2.檢查程式碼規範"></a>2.檢查程式碼規範</h3><p>接下我們會看到一大堆的 action，也就是我們要執行的環境或工作，我們先新增第一個 PHP CodeSniffer 來做程式碼規範檢查：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-09.jpg"></p>
<p>點進去後會看一個指令視窗，這個 action 它是一個 Docker 環境，裡面已經幫我們把 PHP 跟 CodeSniffer 都安裝好了，所以我們只要下載並設定 WordPress 的 Coding Standard 即可，輸入以下指令：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">rm -rf wpcs
git clone -b master https:&#x2F;&#x2F;github.com&#x2F;WordPress&#x2F;WordPress-Coding-Standards.git wpcs
phpcs --config-set installed_paths &#x2F;buddy&#x2F;iron-pay&#x2F;wpcs
phpcs --standard&#x3D;WordPress &#x2F;buddy&#x2F;iron-pay&#x2F;src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>這邊我們先把 /buddy 這個目錄的 wpcs 資料夾刪除，然後從 Github 下載 WordPress 規範，然後設定路徑並指定 phpcs 用 WordPress 來檢查存放庫裡面的 src 資料夾也就是我們外掛的核心檔案，這邊的存放庫路徑記得都要用 <code>/buddy/iron-pay/</code>，因為這是在 Docker 裡面，Buddy 會把存放庫都放在這個目錄之中。</p>
<p>寫好指令後點選 Save this action：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-10.jpg"></p>
<p>第一個工作設定好之後我們就可以點選右上角的 Run pipeline 來檢查第一關是否有通過：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-11.jpg"></p>
<p>執行前要先設定這次測試任務的對應的 commit，這樣之後有問題才能進行還原：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-12.jpg"></p>
<p>執行中的畫面：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-13.jpg"></p>
<p>成功的話會顯示綠色，失敗的話是，點選 Logs 可以看到執行的細節：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-14.jpg"></p>
<h3 id="3-執行單元測試"><a href="#3-執行單元測試" class="headerlink" title="3.執行單元測試"></a>3.執行單元測試</h3><p>回到 pipeline，繼續來新增單元測試，點選 Actions 並點擊下方的加號來新增：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-15.jpg"></p>
<p>選擇 PHP：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-16.jpg"></p>
<p>將 vendor/bin/phpunit 的註解取消，並點選 Add this aciton：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-17.jpg"></p>
<p>再來執行一次 pipeline，會多出單元測試的 Action，並透過測試：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-18.jpg"></p>
<h3 id="4-打包部署的檔案"><a href="#4-打包部署的檔案" class="headerlink" title="4.打包部署的檔案"></a>4.打包部署的檔案</h3><p>步驟跟上一步差不多，一樣是使用 PHP 的 Action，然後指令換成 <code>composer install --no-dev</code>，這樣就不會把 PHPUnit 這種測試環境用的套件一併打包進去，也不用再寫 gitignore 白名單來處理。</p>
<h3 id="5-部署正式機"><a href="#5-部署正式機" class="headerlink" title="5. 部署正式機"></a>5. 部署正式機</h3><p>要用什麼方式部署就看我們能夠取得正式機的哪種帳密，Buddy 有提供四種：FTP、FTPS、SFTP 跟 RSync，這邊先選擇使用 SFTP 的 Action 來部署。進入 SFTP 的設定頁面時可以看到需要輸入相關的帳密資訊以及 Source 來源，這邊記得要選擇 Pipeline Filesystem 才會是抓到有經過 <code>composer install --no-dev</code> 安裝的存放庫：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-19.jpg"></p>
<p>設定好之後，我們的 pipeline 長得如下圖：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-20.jpg"></p>
<p>最後按下 Run pipeline 就能享受一鍵自動部署的樂趣了XD，但萬一發生意外，我們可以回到 pipeline 的 Executions 頁籤，選擇要還原的動作，這樣就能確保有問題時可以快速還原：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-deploy/wordpress-deploy-21.jpg"></p>
<p>Buddy 可以做到非常多的功能，像是部署完成後的 Slack 通知、打包 Zip、Cloudflare、GCP、AWS 整合等等一堆的動作，萬一都沒有也可以自己寫指令來跑，另外它還可以把 pipeline 存成範本，之後有新 Project 時直接套用即可。</p>
<p>介紹完自動部署之後，下一篇會說明如何自管 WordPress 外掛的更新，以及當要販售外掛時該如何導入序號機制並整合 WooCommerce 來進行控管。</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
        <tag>自動部署</tag>
        <tag>Buddy</tag>
      </tags>
  </entry>
  <entry>
    <title>WooCommerce 金流串接實戰（十五）- 販售外掛</title>
    <url>/tw/woocommerce-payment-sell/</url>
    <content><![CDATA[<p>在完成特定客戶的需求之後，也許會有其他商家也希望可以在他們的 WooCommerce 購物網站上增加鐵人付的金流功能，這時候我們有以下幾種選擇：</p>
<ol>
<li>上架 wordpress.org 讓客戶可以在後台直接使用搜尋功能找到鐵人付外掛後安裝</li>
<li>提供壓縮好的檔案傳送給潛在客戶請他們自行從後台安裝</li>
<li>將外掛檔案上傳到 Github 並發行版本供客戶下載</li>
</ol>
<p>如果是要以免費外掛來增加曝光，上架 wordpress.org 是比較好的選擇，對於客戶來說操作上最直覺，上架的步驟也很簡單，基本上就是把檔案打包好之後使用表單提交出去即可，具體的步驟可以參考<a href="https://huanyichuang.com/blog/wordpress-plugin-submission/">這篇文章</a>。</p>
<span id="more"></span>

<p>但有時候做好的外掛我們不一定選擇上架，有可能是等待審核的時間過長，或是這是需要收費的商業外掛，這時候我們就需要用其他方法來提供給客戶安裝。讓客戶安裝相對單純，比較麻煩的是後續的更新維護，如果是上架 wordpress.org，只要把更新檔透過 SVN 版本控管提交後，在客戶的後台就會收到更新提醒，我們完全不用擔心更新伺服器是如何跟客戶網站做通知的。</p>
<p>但如果我們今天要發行的是付費外掛，這個環節就需要我們自行處理，在 Github 裡面有不少的存放庫可以解決這問題，然後除了更新外，發行付費外掛還需要有序號機制、網域授權、帳號管理等流程，所以我們需要一套解決方案來開始販售外掛。</p>
<p>在準備展開販售外掛的事業之前，有件非常重要的事情我們必須要先了解，那就是 WordPress 的開源授權規範是採用很嚴格的 GPL，不只是核心程式，在 WordPress 裡面使用的佈景主題、外掛也直接套用 GPL 授權。這代表任何人都可以自由的修改並且散播程式碼。</p>
<p>也因為這樣的授權規範，販售外掛根據「程式碼」來進行收費就沒意義了，因為所有 WordPress 的程式碼都是開源的，而你客製過的程式也必須遵守開源的規範，必須以相同的授權進行免費散播，同時讓人有自由修改的權利。</p>
<p>那麼販售 WordPress 外掛真正賣的是什麼呢？</p>
<p>因為這樣的授權方式，現在可以找到一堆 GPL Download 的服務，這些服務從各種管道取得付費外掛的原始碼，然後用低於市價或是訂閱制的方式銷售這些程式，然後聲稱他們收的是「維護費」，並強調他們提供的程式 100% 正版，絕對沒有後門，而且還會定期更新。</p>
<p>之前看過一篇訪談，受訪者是幾間知名外掛大廠的負責人，討論對於 GPL 授權以及 GPL Download 的想法，多數老闆對於 GPL Download 斥之以鼻，但也有老闆不在意，因為他們賣的不是程式碼，而是「服務」，協助使用者解決問題或是開發更多新功能才是他們的核心價值。</p>
<p>而「服務」就是我們販售外掛的核心，縱使有人不知道從哪裡拿到你寫好的付費外掛，而這版本萬一被埋了後門或是套件過舊有漏洞，以及他們在使用上有任何問題，都得不到更新與維護，因此賣的是這些後續服務費用。</p>
<p>所以要販售外掛首先就不能在意有人「破解」你的外掛，畢竟全都是開放原始碼，要拔掉序號使用限制對於懂一點 PHP 的人來說易如反掌，與其要去防範如何讓有心人士無法破解，不如把時間放在提升產品的功能上。</p>
<p>但難道我們就這樣做白工便宜那些有心人士嗎？如果今天外掛已經賣翻天了我覺得再來擔心這件事比較合理，對個人開發者來說要在 WordPress 生態圈裡面找到還沒有被滿足的需求，這件事的難度絕對比防破解要高上個千萬倍。</p>
<p>有了這樣的心理準備之後，我們從以下幾個環節來探討該如何展開外掛販售事業：</p>
<ol>
<li>調查市場需求</li>
<li>申請 Appsero</li>
<li>整合 Appsero 套件</li>
<li>建立外掛販售網站與定價</li>
</ol>
<h2 id="1-調查市場需求"><a href="#1-調查市場需求" class="headerlink" title="1. 調查市場需求"></a>1. 調查市場需求</h2><p>該如何知道這支外掛有沒有付費的市場需求，我從兩個角度下去切入，第一個是既有客戶請我客製化開發的第三方串接功能，像金流就是一種，當我的客戶需要，也許就會有其他客戶需要，把這樣的外掛將比較核心功能抽離出來，並把之前寫死的參數變成可以從後台設定的功能，讓客戶可以在後台直接操作。</p>
<p>第二個是觀察社群討論內容、近期熱門的服務，思考如果轉換成 WordPress 外掛能滿足誰的需求，同時也可以研究是否有同性質的外掛，有的話是否可以把介面改良或是增加潛在客戶可能會需要的功能，多問多聽多看自然就會有想法。</p>
<p>但不管是哪一種方式，沒有真正放在市場上永遠不會知道是否有人願意購買，因此寫一篇商品的介紹文就非常重要，介紹文描述這個商品可以解決什麼問題、提供哪些功能、該如何設定以及聯繫方式，就跟真正的外掛介紹頁一樣，只是還沒有開發出來而已XD</p>
<p>這樣做的好處是首先就能讓有需求的客戶透過關鍵字找到這篇介紹文，二來在寫這篇介紹文的同時，自己會把開發規格詳列出來，而這些規格都是要解決一個特定的問題，不然常常埋首下去開發的時候，很容易包山包海，東加西加的結果會讓商品定位不夠聚焦，自然就無法讓客戶理解這外掛可以解決他們的什麼問題。</p>
<p>透過介紹文可以聚焦開發規格，具體的想像要怎麼使用這個外掛，然後最好附上一些設定頁面的截圖，這些畫面不需要真的實際寫程式開發出來，我的作法是拿類似操作邏輯的外掛改圖做出來的，或是用一些做自訂欄位的外掛快速拉一下，只要記住一個原則，在還沒有確定真的會有人付費之前，半行程式都不要寫。</p>
<p>至於何時可以開始寫呢？我習慣是收到數封以上的來信詢問，詢問價格以及授權方式時，我就會知道這東西有市場，還有不少人會三番兩次來信催問，就能知道這個需求非常迫切，等到這個時候就能開始實作了。</p>
<h2 id="2-申請-Appsero"><a href="#2-申請-Appsero" class="headerlink" title="2. 申請 Appsero"></a>2. 申請 Appsero</h2><p>Appsero 是一套專門用來提供 WordPress 佈景主題與外掛販售的解決方案，它整合了上面提到的需求，像是更新、序號、授權控管，另外還有客戶管理、圖表分析以及自動部署的功能，同時也有 WooCommerce 外掛，基本上用了這個服務可以很快速的把銷售環節都搭建起來，不用自己寫半行程式碼。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-01.jpg"></p>
<p>但既然是完整的解決方案就勢必要付出一些成本，Appsero 雖然有免費方案，但那是提供給有上架 wordpress.org 的外掛使用的，如果不上架要自己託管，就必須年繳一定的金額，它的計費方案算滿好入門的，一個月 25 鎂可以提供 500 個序號，所以最好商品的定價可以負擔這筆開銷，等到真的賣到超出這個量，可以選擇進階方案或是建置自己的解決方案。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-02.jpg"></p>
<p>它的管理後台有許多實用的管理功能，首先是分析工具，透過圖表可以看到已啟用與停用的數量，並且還能看到有裝該外掛的客戶環境，像是 PHP、WordPress 版本，這樣就能根據較多人使用的環境來進行測試：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-03.jpg"></p>
<p>其次是客戶管理，可以看到該客戶的總購買金額以及基本資料，由於這些資料都是從 WooCommerce 送過來的，可以省去前往網站後台查看的時間：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-04.jpg"></p>
<p>至於序號管理可以直接在 Appsero 做停用與啟用，並且得知該序號使用在哪個網域上，或是根本沒有被啟用，同時也能知道序號到期的時間點，這樣就能在到期前提早通知客戶進行續約：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-05.jpg"></p>
<p>另外它還可以自訂當客戶停用外掛時的原因，方便得知客戶在使用上遇到的問題：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-06.jpg"></p>
<p>在實際運作之後發現 Appsero 最大的問題就是沒有中文語系，不管是他們提供的外掛或是整合套件都需要自己手動處理翻譯，但還好目前沒有遇過客戶看不懂的問題，所以綜合以上好處，我很推薦使用 Appsero 來進行事業初期的外掛販售管理。</p>
<h2 id="3-整合-Appsero-套件"><a href="#3-整合-Appsero-套件" class="headerlink" title="3.整合 Appsero 套件"></a>3.整合 Appsero 套件</h2><p>要如何讓 Appsero 認得我們的外掛並確認序號是正確可用的呢？很簡單，直接使用 composer 安裝他們的套件即可，然後用該套件提供的方法來判斷序號是否正確啟用，具體步驟如下：</p>
<h3 id="新增外掛"><a href="#新增外掛" class="headerlink" title="新增外掛"></a>新增外掛</h3><p>申請好帳號後可以看到主畫面，點選左側選單的 Plugins，進入頁面後再點選右上角的<br>Add Plugin：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-07.jpg"></p>
<p>選擇新增付費外掛：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-08.jpg"></p>
<p>輸入外掛基本資料：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-09.jpg"></p>
<p>將序號交由 Appero 管理：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-10.jpg"></p>
<p>Appsero 支援多種軟體販售平台，目前我們先選擇最後一個即可：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-11.jpg"></p>
<p>下一步會問你想要用哪一種方式進行銷售，可以使用 WooCommerce 或是另外一套在 WordPress 上面販售虛擬商品的 Easy Digital Download 外掛，但以目前台灣的金流收款考量，選擇 WooCommerce 能獲得比較大的支援度，因此這邊先選擇 WooCommerce：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-12.jpg"></p>
<p>最後選擇 Appsero 來管理序號：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-13.jpg"></p>
<p>以及在販售的網站上面安裝 Appsero 的外掛並將 Key 貼入後進行驗證：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-14.jpg"></p>
<p>上述步驟都完成後，會提示套件的安裝說明：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-15.jpg"></p>
<p>把 <code>composer require appsero/client</code> 複製下來，稍後會回到我們外掛的目錄來進行安裝，點選下一步，Appsero 提供了一個函式來初始化套件，包含建立實 例、資料蒐集、更新以及輸入序號的選單註冊，另外它還貼心了提供隱私權政策範本，告知本外掛會收集哪些資料。</p>
<h3 id="套件安裝"><a href="#套件安裝" class="headerlink" title="套件安裝"></a>套件安裝</h3><p>接下來開啟編輯器，在我們的外掛資料夾裡面執行安裝：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">iron-pay$ composer require appsero&#x2F;client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安裝好之後開啟 <code>iron-pay.php</code>引入 appsero 的套件，</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// 略</span>
<span class="token comment">/**
 * Initialize the plugin tracker
 *
 * @return void
 */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">class_exists</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Appsero\Client'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">require_once</span> <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/appsero/src/Client.php'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$client</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Appsero<span class="token punctuation">\</span>Client</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'xxxx-xxx-xxx-xxxxxxx'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'鐵人付金流'</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Active insights.</span>
<span class="token variable">$client</span><span class="token operator">-></span><span class="token function">insights</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Active automatic updater.</span>
<span class="token variable">$client</span><span class="token operator">-></span><span class="token function">updater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$client</span><span class="token operator">-></span><span class="token function">license</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	\<span class="token constant">A7</span>\<span class="token function">autoload</span><span class="token punctuation">(</span> <span class="token function">plugin_dir_path</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'src'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 略</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>關鍵是 <code>$client-&gt;license()-&gt;is_valid()</code> 這個判斷式，這代表只有當客戶的序號通過驗證時才會執行的內容，我把載入核心檔案的方法寫在這裡面，也就是序號通過才會載入主程式，所以要「破解」也非常容易，把載入程式移出判斷式就好，因此要謹記，我們賣的是服務不是程式碼。</p>
<h3 id="外掛更新"><a href="#外掛更新" class="headerlink" title="外掛更新"></a>外掛更新</h3><p>Appero 是使用 Release 來控管更新的推播，版本更新有兩種方式，一種是從 Appsero 後台直接上傳壓縮檔，另外一種是用 Github 的 tag 來取得最新版本，使用後者會比較方便，因此本文以 Github 來示範如何做到自動部署新版本。</p>
<p>首先我們要先把我們的存放庫跟 Appsero 做綁定，在 Appsero 後台找到 Intergration 的選單，進入後可以看到 Github 的區塊，選擇 iron-pay 的存放庫即可完成綁定：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-17.jpg"></p>
<p>接下來回到編輯器，在外掛根目錄新增一個 Readme.txt 文字檔，裡面紀錄了外掛的更新資訊、相容版本以及已測試過的 WordPress 版本，範例如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&#x3D;&#x3D;&#x3D; Iron Pay &#x3D;&#x3D;&#x3D;
Requires at least: 4.9.8
Tested up to: 5.8
Requires PHP: 7.0
Stable Tag: 1.0.0
WC requires at least: 5.0
WC tested up to: 5.5.2
License: GPLv3
License URI: https:&#x2F;&#x2F;www.gnu.org&#x2F;licenses&#x2F;gpl-3.0.html

&#x3D;&#x3D; Description &#x3D;&#x3D;

鐵人付外掛為鐵人賽的 WooCommerce 金流外掛

&#x3D;&#x3D; Installation &#x3D;&#x3D;

請參考安裝教學:https:&#x2F;&#x2F;oberonlai.blog&#x2F;tw&#x2F;wordpress-plugin-sell

&#x3D;&#x3D; Changelog &#x3D;&#x3D;
&lt;p&gt;v1.0.0 - 新增版本資訊&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這個資訊會顯在 WordPress 後台的外掛資訊內，需要注意的是 Stable Tag，這邊的版本號是 Appsero 判斷是否有新版本提供的資訊，如果今天版更為 1.0.1 的話，這邊也記得要修改。</p>
<p>接下來當我們增加了新功能或是除完錯之後，可以先使用前一篇提到的 Buddy 來做自動化測試，確認無誤後就能用 <code>git tag</code> 來新增發行版本並推到主線上：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">iron-pay$ git tag -a v1.0.1 -m &#39;新增功能&#39;
iron-pay$ git push origin v1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>透過這個動作 Appsero 就能知道有新版本推送了，它就會主動去推播給有安裝該外掛的 WordPress 網站，同時也能在 Appsero 後台的 Release 看到發行版本紀錄：</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/wordpress-plugin-sell/wordpress-plugin-sell-18.jpg"></p>
<h2 id="4-建立外掛販售網站與定價"><a href="#4-建立外掛販售網站與定價" class="headerlink" title="4. 建立外掛販售網站與定價"></a>4. 建立外掛販售網站與定價</h2><p>接下來我們就可以用 WooCommerce 建立一個購物網站來販售這支外掛，記得要先安裝 <a href="https://wordpress.org/plugins/appsero-helper/">Appsero Helper</a>，這樣當訂單付款完成後顧客會收到下載連結，以及可以在網站這邊登入帳號讓顧客查看序號以及購買紀錄。</p>
<p>另外我還推薦以下幾支賣虛擬商品會用到的免費外掛：</p>
<ul>
<li><strong><a href="https://wordpress.org/plugins/autocomplete-woocommerce-orders/">Autocomplete WooCommerce Orders</a></strong> - 自動將虛擬商品的已付費訂單變更為已完成，這樣顧客才能收到下載連結</li>
<li><strong><a href="https://wordpress.org/plugins/change-quantity-on-checkout-for-woocommerce/">Change Quantity on Checkout for WooCommerce</a></strong> - 讓顧客可以在結帳頁修改商品數量，避免讓顧客重複購買虛擬商品</li>
<li><strong><a href="https://wordpress.org/plugins/woo-checkout-field-editor-pro/">Checkout Field Editor for WooCommerce</a></strong> - 調整結帳欄位把不需要的地址、電話拔掉，販售虛擬商品只要填寫電子郵件即可</li>
<li><strong><a href="https://wordpress.org/plugins/woocommerce-direct-checkout/">Direct Checkout for WooCommerce</a></strong> - WooCommerce 預設的購物流程是先進購物車再進資料填寫頁，如果只有販售一個商品就能用這支外掛簡化這個步驟</li>
<li><strong><a href="https://wordpress.org/plugins/my-custom-functions/">My Custom Functions</a></strong> - 不用開編輯器就能夠直接在後台寫 PHP</li>
<li><strong><a href="https://tw.wordpress.org/plugins/ry-woocommerce-tools/">RY WooCommerce Tools</a></strong> - 功能很強大的金流外掛，可以串接多家台灣第三方金流</li>
<li><strong><a href="https://wordpress.org/plugins/wpforms-lite/">WPForms Lite</a></strong> - 表單外掛，作為顧客問題回報的管道</li>
</ul>
<p>以上最麻煩的部分是收款，現在台灣第三方金流控管比較嚴格，要販售虛擬商品需要進行審核，如果真的申請不過，那就只能先提供匯款帳號的方式來處理，但就必須要人工對帳以及手動開通外掛下載權限。</p>
<p>至於一套外掛該賣多少錢呢？我個人是覺得至少要能打平做這件事的後續服務成本，因此定價最好不要太低，常看到國外的付費外掛功能強大到不行但卻只賣十幾二十塊美金，我是覺得不能用國外的付費外掛價格來當作對照組，而是要根據本地市場來測試合適的價格區間，現在台灣也有很多廠商專門在販售 WordPress 付費外掛，以他們的價格當參考會比較準確。</p>
<p>萬一想提高單價但又沒有比其他廠商多出強大的功能，這時候我們可以從方案下手，像是授權一個網域是一個價格，授權十個或是無限制是另一個價，也可以把多個外掛做組合銷售，都是可以提高銷售額卻又不會增加成本的作法，總之就是多方嘗試，找到市場可以接受的價格區間。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>WordPress 除了提供給不會寫程式的人架設功能豐富的網站外，也讓開發者有了很多機會來拓展自己的事業，不管是靠它接案還是販售付費外掛，甚至是最後被大廠商併購，這在 WordPress 生態圈都已經不是新聞了，因此重點是不停止學習就可以發現更多的機會，持續學習才能不被既有的知識所侷限！</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
      </categories>
      <tags>
        <tag>WooCommerce 金流</tag>
        <tag>WordPress 外掛</tag>
        <tag>WooCommerce 外掛</tag>
        <tag>GPL</tag>
        <tag>Appsero</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次開發 WordPress 就上手</title>
    <url>/tw/wordpress-learning/</url>
    <content><![CDATA[<p>這篇文章本來應該是鐵人賽的最後一篇文章，但因為文章寫到頭暈眼花，一整個算錯了剩餘篇數，於是就多出一篇來，剛好拿來當第一份週更的發刊XD</p>
<hr>
<p>今天想跟大家分享我是如何學習 WordPress 開發的，先跟大家自我介紹一下我的背景，我不是念資訊相關科系的本科生，我大學是主修應用外文系的商用英文，基本上跟軟體開發扯不上半點邊，只是因為剛好大三的電腦課學了 Dreamweaver 一款用來做網頁的軟體，從此迷上設計這個領域。</p>
<p>我大概到了大四才知道自己想從事平面設計這個產業，對，不是網頁設計而是平面設計，因為看了很多設計大師的作品，覺得做設計超酷超帥又超自由(?)，所以當我退伍後都是找設計助理相關的工作，因為沒有經歷也沒有學歷，工作真是有夠難找，最後去了一間高級日式餐廳旗下的設計公司做設計助理，然後做了兩個禮拜後就被資遣，當時覺得社會大學實在有夠難混。</p>
<span id="more"></span>

<p>於是就開始了全職接案與全職工作的人生循環，接案接不下去跑去上班，上班覺得太無聊又跑回去接案，直到認識了 WordPress 之後才開始有所改變，也逐漸從以設計為職志轉變為程式開發，我學習 WordPress 經歷過以下幾個階段：</p>
<h2 id="探索期"><a href="#探索期" class="headerlink" title="探索期"></a>探索期</h2><p>跟大家剛開始接觸 WordPress 一樣，當第一次把 WordPress 安裝完成後，迎面而來的就是有永遠挑不完的佈景主題跟什麼功能都有的花花世界，我曾經做過 Visual Composer 的聯盟行銷，同時也賣中文化的語系檔，那時候就很想把這些工具分享給在接案的朋友，因為實在是太好用了，隨便選幾個版套型花十分鐘改一下內容，就能拿去給客戶提案甚至是當成初稿交差，接案用 WordPress 實在太方便。</p>
<p>幾個案子實戰下來，大概就能知道 WordPress 適用於哪些案件以及它的侷限，比較棘手的是找不到合適的外掛可以做，或是有類似的外掛但功能無法百分之百的滿足客戶需求，縱使還是可以靠著業務技巧來矇混過關，但總是會有遇到無法解決的問題，於是開始試著去修改一些程式碼。</p>
<h2 id="複製貼上期"><a href="#複製貼上期" class="headerlink" title="複製貼上期"></a>複製貼上期</h2><p>WordPress 除了有龐大的外掛可以使用外，最關鍵的是在 Stackoverflow 上面有無數的大大貢獻的免費程式碼可以拿來複製貼上，更不用說還有許多工程師會分享他們的技術教學，只要英文關鍵字打得對，都可以找到現成的程式碼複製貼上即可使用，然後再修修改改組成自己要的功能，就能解決大部分的客戶需求。</p>
<p>在這時期最棘手的部分就是完全不明白貼過來的程式碼在做什麼事情，萬一出了問題也改不動，只能放棄這段程式碼去尋找其他的解答，有時候尋找的過程所花費的時間，搞不好比認真搞懂程式的寫法還要來得久，當這種狀況常出現時，就勢必要跟程式碼正面對決了。</p>
<h2 id="回歸基本期"><a href="#回歸基本期" class="headerlink" title="回歸基本期"></a>回歸基本期</h2><p>我會開始把貼回來的程式碼一行一行拆解看它到底在幹嘛，然後有沒看過的寫法就丟進 Google 查，雖然會花比較多時間在研究這些現成的解決方案，但這些時間本來就是應該要投資的，只是因為 WordPress 太方便了所以讓我都省略了這些基本功。</p>
<p>同時也開始閱讀 WordPress 官方提供的開發文件，雖然無法立刻記得裡面的所有內容，但可以增加開發相關的詞彙讓之後找解答時有更多的關鍵字可以使用，也能對於開發 WordPress 的流程有一個清楚的方法與架構。</p>
<hr>
<p>我的學習歷程比較像是從結果開始回推，因為要實現某個特定的功能，所以必須要去找相對應的解決方案，這樣的好處是可以快速取得成果，但弱勢的地方在於基礎薄弱無法舉一反三，也很容易寫出不安全的程式碼，因此如果你今天要想要開始學習 WordPress 開發，我會建議以下幾個原則：</p>
<ol>
<li><p>設定開發目標：首先要設定好終點，不管是要完成一個客戶的案子，或是要開發自己的 Side Project，沒有這個目標就沒有學習的動力，而接案會是一個很強的動力來源，無論是為了賺錢還是做不出來就會被吉，先找到一個目標絕對是學習的首要之務。</p>
</li>
<li><p>跟程式交朋友：很多時候為了結案，一找到解決方案就複製貼上交差是我的壞習慣，因為我不想看程式，覺得自己看不懂，久而久之就更不想看。當有這樣的心情時先靜下心來，把通訊軟體全部關掉，專注面對眼前的程式碼，看不懂的就查，當全部都理解之後的爽快感會讓人上癮，從此就再也不會害怕了。</p>
</li>
<li><p>限縮資訊來源：現今的資訊量不是怕你沒東西讀，而是爆炸多到會讓人焦慮以及產生一種自己好像什麼都不知道的匱乏感，因此我還是喜歡看實體書或電子書，作者會有脈絡的把所有知識做整理，看完後會比較踏實，雖然網路資訊更新即時，但一堆跳出的連結總是會偏離原本的學習主題，剛開始學習不需要這麼多的資訊量，先把最關鍵最基礎的知識建立起來，等到有餘裕時再去追求新知，也才能看得懂別人在討論什麼。</p>
</li>
<li><p>整理教學文：所謂的教學文並非只是單純紀錄官方文件寫的內容，而是用自己的話、結合自己設計的案例來介紹這門技術該如何使用，當能用自己的話解釋出來時才代表是真正的理解，而為了要寫出這樣的教學文，在寫的當下會需要釐清自己還不懂的部分，因此教學文看起來像是分享，但背後的最大目的是督促自己學習。</p>
</li>
</ol>
<p>以上幾個學習原則分享給大家參考，如果有更好的學習方式或是你想知道有哪些具體的 WordPress 學習資源也歡迎回信交流，我們下週五見！</p>
]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title>一堂 25 萬元的實體課我學到了什麼？</title>
    <url>/tw/what-did-i-learn-from-client/</url>
    <content><![CDATA[<blockquote>
<p>一個年底簽約、要在隔年春節前結案、總價 25 萬的案子，成為我接案路上學過最貴的一課，也是讓我差點想要放棄做網站、熱情被消磨殆盡的最後一根稻草…</p>
</blockquote>
<p>接到工程師 Chris 的詢問來信那天是十二月中，信件內文條理分明、彬彬有禮，案件的需求為一個媒體平台需要重新設計並加入許多社群互動的功能，那時候第一次遇過這樣的案子，我與 PM 夥伴 Kevin 都很興奮，覺得這案子後續發展潛力無窮。</p>
<p>隔不到一週，帶著興奮的心情我們雙方約了第一次的會議，Chris 跟老闆 James 非常喜歡我們過去的作品，同時對於這個平台未來的發展我們討論到欲罷不能，有太多的好點子一直噴發，溝通過程也能感受到 James 非常看重我們，這讓我們非常想要拿下這個案子，以後就能拿這作品去說嘴了，於是會議完後就趕緊整理合約書與報價單，希望可以盡快展開合作。</p>
<span id="more"></span>

<p>James 是技術背景出身，對於程式開發有一定程度的理解，而改版的主要原因是因為他們在 WordPress 的承載效能上遇到了瓶頸，記得第一次看到他們 Google Analytics 的即時流量是一個我這輩子從沒看過的數字，每小時他們平台的造訪人次高到嚇死我，所以當會議時，James 希望我們可以從底層資料庫來進行最佳化，進而可以負荷更多瀏覽人數，於是請我這邊提供 WordPress 的 DB Schema。</p>
<p>當年我的開發知識大概就是買一個現成的佈景主題，然後會一點前端改改樣式以及找一些程式碼片段來修改既有的功能，James 很多在講的技術細節事實上我都聽不懂，但為了拿下案子只能硬著頭皮衝了，當作是逼自己成長進步。</p>
<p>審完合約書跟報價單之後，我們在 12/31 簽約，約定 1/30 請第二筆款項，2/14 結案，製作的內容包含網站企劃、SEO 規劃、視覺設計、前端設計以及許多社群互動的後端功能開發，最後議價結果為 25 萬，這代表我們要在一個半月內搞定這個站，因為要做的事情不少，很多又是第一次做，當簽約完後我和 Kevin 就開始瘋狂趕工，想說年前拼一下就有年終獎金可以領了。</p>
<h2 id="飄來一股壞味道"><a href="#飄來一股壞味道" class="headerlink" title="飄來一股壞味道"></a>飄來一股壞味道</h2><p>我們花了兩週的時間蒐集參考資料、研究使用者需求，設計了網站原型，以及整理了 WordPress 的所有資料表，希望第一次提案就讓 James 點頭然後進入視覺設計的實作，但事情沒我們想像中的這麼順利，看到這些我們提供的文件，James 陷入深思，覺得這樣的規劃方向好像不是他要的，但又說不出個具體的方向。</p>
<p>另一方面，我花了很多時間整理的資料表 James 看到後搖搖頭，說這個不是他想要的，他試著跟我解釋他需要的東西，但他看我好像聽不懂，最後就放棄了，因此第一次提案有點灰心，最後的結論就是先照我們規劃的方向走，然後開始下一階段的視覺設計。</p>
<p>為了能夠在期限內完成，我們以一款付費的佈景主題來加以改良，並把舊站的資料倒過去，先讓新版網站有一個基本的雛形可以討論，同時我找了很多可以做到社群功能的外掛，並想辦法整合在這個佈景主題之中，然後還需要顧慮到網站的效能問題，這些從沒做過的項目都讓我備感壓力，但隨著結案日期越來越近，根本沒時間去顧慮到自己的身心狀態，只能告訴自己再拼一下，就快結案了。</p>
<h2 id="出乎意料的進展"><a href="#出乎意料的進展" class="headerlink" title="出乎意料的進展"></a>出乎意料的進展</h2><p>當我們把第一版成品提交給 James 確認的時候，James 又陷入了我最害怕的深思狀態，最後 James 說能不能再規劃成另一個方向，請我們再試試不同的作法，我聽完後傻眼了，Kevin 努力跟 James 解釋時程的壓力，但 James 堅持要再調整一下，最後協調的結果是先改看看首頁就好，並在不變動既有的架構下進行調整。</p>
<p>會後我和 Kevin 去到我們常去的咖啡店，開始一整天的腦力激盪來規劃新版的首頁，一有想法就立刻用 Photoshop 把 UI 畫出來，就這樣一直反覆討論反覆修改，那天我們花了十二個小時瘋狂加班趕提案，隔天整理好後就交給 James 確認，好消息是 James 非常滿意，他覺得這就是他想像中新版本應該要有的樣子，有一些其他同類型平台沒有的功能，還能增加使用者留存。</p>
<p>我和 Kevin 爽翻天，想說終於搞定 James 要的了，但頭大的是這個新版並沒有現成佈景主題可以用，必須要全部手刻，而且還要可以整合成原本已經安裝好的社群功能外掛，我當時心想這應該很快，但事實是根本不敢去想我有沒有辦法在剩餘時間做完，只能像無頭蒼蠅一樣一直衝，又是那句再拼一下、拼完就可以過年的想法在腦海中徘徊。</p>
<p>實作幾週之後 James 主動邀約會議，我和 Kevin 都有不好的預感，果然，James 很擔心這個新版的設計太新潮了，不知道會不會對既有使用者造成太大的影響，聽到的當下我內心三字經連發，明明就已經說好的內容又全部翻盤，這幾個禮拜的心血全部都做白工，當下就萌生擺爛不幹的念頭。</p>
<p>最後沒辦法，為了要趕上線的日子，只能回到第一版套版的版本，然後把剩下的功能給做完，這階段花了很多時間在調整 UI 的部分，尤其是手機版更是做了很多修改，再加上原有的內容倒過來產生不少跑版的狀況，都必須要逐一檢視並修正，就這樣到了上線前一週…</p>
<h2 id="壓力鍋終究還是會爆的"><a href="#壓力鍋終究還是會爆的" class="headerlink" title="壓力鍋終究還是會爆的"></a>壓力鍋終究還是會爆的</h2><p>James 測試即將上線的版本，抓出了不少的錯誤，開始質疑我們到底有沒有認真在做事，因為是自己的不細心，只能默默的繼續改，心裡只想著趕快把案子結掉脫離這陣子的地獄人生。</p>
<p>終於到了上線前一天，James 要求我們必須在場同步除錯，因為要避開網站人潮的高峰期，James 要我們半夜必須在公司待命，於是我先爆了，我不想管了，我把所有這些機歪事全都推給 Kevin 去應付，Kevin 凌晨就過去跟 Chris 一起待命，而我是睡到天亮才過去。</p>
<p>到公司的時候 James 不見人影，他很不爽，因為對於身為專案成員的我怎麼可以在關鍵上線時刻還在那邊睡大頭覺，上線那天還好沒發生什麼大問題，但我跟 Kevin 和 Chris 說我受夠了，這個案子我不幹了，錢我不要了。</p>
<p>Kevin 全力支持我，Chris 也能體諒我的立場，剩下的就是看要如何清算並安全下莊，Chris 幫我們把想結束的想法轉達 James，得到的回覆也讓我很灰心，反正結論是就這樣吧，要結束就結束吧。</p>
<p>當時我們唯一擔心的點就是怕被吉，但因為當初案件開始的很趕，到了上線我們連訂金都還沒請款，而我也不想要了，只想趕快脫離這個地獄，反正沒拿你半毛錢，這一個半月就當作什麼事都發生。</p>
<p>那一年的農曆年假過得非常心酸，拼了這麼久卻半毛錢都沒有拿到，還被客戶覺得做事不力，連個一句「辛苦了」都得不到，我後來寫了一封萬言書給 James，把這陣子的委屈跟不滿一次爆發出來，雖然按下送出後好像比較爽快了些，但接下來好幾個月都是沒有收入的狀態，少了這一筆讓我的生活陷入困境，只能開始尋找正職工作來維持基本開銷。</p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>現在回過頭來看這件往事，有太多可以避免走到這一步的方法，但每個人在當下的決策，一定都是根據當時的時空背景所產生的，當年知識不足、能力不夠，接到了不適合自己的案子所以導致這樣的結果。</p>
<p>對現在的我來說，增加知識、培養能力、找到合適自己的案子是再自然也不過的事，有時候會忘記自己是如何走到這一步的，甚至還以為「<a href="https://oberonlai.blog/tw/wordpress-freelance-quotation-1/">敏捷式接案</a>」是自己某天睡起來靈光乍現獲得的，屁！都是要吃了一肚子的虧才能逐漸理解自己想要的是什麼樣的生活。</p>
<p>如果你現在剛好也卡在一個你不喜歡的工作裡面，或是一個永遠做不完的案子，退後一步，把結案日或是各種外在因素拋諸腦後，想想到底是什麼原因會把自己逼成這種樣子，然後反過來想你要的生活應該會是長什麼樣子，如果能做到，你就能開始逆轉自己的人生了。</p>
]]></content>
      <categories>
        <category>專案管理</category>
      </categories>
  </entry>
  <entry>
    <title>12 本 WordPress 開發者必讀書籍</title>
    <url>/tw/wordpress-learning-books/</url>
    <content><![CDATA[<p>前幾週聊到我的 WordPress 開發學習歷程，基本上都是遇到自己過不去的關卡時，靠著搜尋找到語法然後複製貼上拼湊成自己需要的答案，這樣的過程持續了很多年，直到每次要重新回去修改舊的程式碼發現完全改不動或是完全不記得該如何修改，以及改東牆壞西牆的狀況ㄧ再發生後，我才決定回歸基礎，改變先前只想快速找到答案的心態。</p>
<p>如果你也是跟我一樣的歷程，我是覺得少了基礎直接去實戰也沒有什麼不好，我是那種只看理論就會睡著的學生，當我不知道學這個東西可以用在哪裡時，我就完全沒有學習的動力，所以當我經過多年實戰再回頭看這些基礎時，反而會覺得好像重新認識了工作，不管是對於工具的理解還是每一行程式碼代表的意義，進而體會到自己的不足，才能保持著每天都在學習的心態來面對今天的工作。</p>
<span id="more"></span>

<p>在學習 WordPress 開發基礎的路上，發現原來官方有提供這麼多的學習資源，也發現有很多大大寫了很棒的書籍來教我該如何把程式寫得更好，尤其是關於物件導向我一開始完全不知道它在幹嘛，只是依樣畫葫蘆用 class 把所有 function 包起來，但隨著改變作法後就會產生疑惑，這邊為何要這樣寫？那邊那樣寫的用意是什麼？這些疑惑以前的自己完全不在意，因為只要功能可以正常運作就好。</p>
<p>當地雷埋夠多哪天不是被客戶就是被自己踩到，踩到後實際除錯時就開始咒罵上一個經手的工程師，寫這什麼程式碼，語意不明、重複的東西一堆、不相關的函式都塞在一起、叫我阿罵來寫都寫得比這個好…，然後才想起來上一個經手的工程師就是自己XDD</p>
<p>所以我第一個開始意識到的事情就是自動化測試，因為我發現自己花太多時間在除錯了，接下來開始去理解物件導向背後的意義，然後試著使用一些設計模式，去處理更多更複雜的問題，因為現在接的案子跟以往幾個月就能結束的不同，目前手上的客戶都已經合作超過一年以上，這期間我不斷重構一年前寫的程式碼，以便於能夠更彈性的加入新功能而不會造成既有功能的損壞，這對我來說是一個大挑戰。</p>
<p>總之從意識到自己寫的程式會爆炸以及接案模式的改變，讓我有了轉變的契機，以下我就五個面向來推薦值得一看的書籍，這些書籍不一定要照順序看，每個時期會在意的問題不同，從自己最在意的問題先下手即可，時間久了自然而然會衍伸到其他的知識。</p>
<p>另外書目中有不少是官方文件，為了方便閱讀，我花了好幾個月的時間整理成電子書以及 PDF 的格式，如果你跟我一樣不想在下班後用太多螢幕，可以用電子閱讀器來念，官方文件的電子書版本可以在這邊下載：<a href="https://handbookspub.oberonlai.blog/">https://handbookspub.oberonlai.blog</a></p>
<h2 id="WordPress-開發基礎知識書籍推薦"><a href="#WordPress-開發基礎知識書籍推薦" class="headerlink" title="WordPress 開發基礎知識書籍推薦"></a>WordPress 開發基礎知識書籍推薦</h2><h4 id="Coding-Standard-Handbook"><a href="#Coding-Standard-Handbook" class="headerlink" title="Coding Standard Handbook"></a>Coding Standard Handbook</h4><p><img src="https://handbookspub.oberonlai.blog/img/1.06f8af9e.png"></p>
<p><a href="https://developer.wordpress.org/coding-standards/">https://developer.wordpress.org/coding-standards/</a></p>
<p>為了讓程式碼更好閱讀，遵循著一致的規範非常重要，可以讓程式碼經過多年後依舊有可閱讀性，當然要記得所有的規範是不太可能的，在實務上可以透過一些小工具來讓我們的程式碼符合 WordPress 的規範，但小工具並非萬能的，還是需要一些基礎知識才能完全符合規範。</p>
<h4 id="Common-APIs-Handbook"><a href="#Common-APIs-Handbook" class="headerlink" title="Common APIs Handbook"></a>Common APIs Handbook</h4><p><img src="https://handbookspub.oberonlai.blog/img/3.5d1f2f90.png"></p>
<p><a href="https://developer.wordpress.org/apis/">https://developer.wordpress.org/apis/</a></p>
<p>開發 WordPress 常用的 API 都寫在這本裡面了，以往在做相關功能的時候都是一知半解，所以在看這本時我一直發出驚呼聲，想不到原來還有這個跟那個，驚呼到連老婆都來關切發生了什麼事XD，雖然看完之後還是會忘記，但當搜尋時自然就會用對關鍵字，甚至想起好像在哪邊看過這支 API 的說明，這時再回去翻就會感謝自己有看過這本。</p>
<h4 id="Discover-object-oriented-programming-using-WordPress"><a href="#Discover-object-oriented-programming-using-WordPress" class="headerlink" title="Discover object-oriented programming using WordPress"></a>Discover object-oriented programming using WordPress</h4><p><a href="https://carlalexander.ca/object-oriented-programming-wordpress/">https://carlalexander.ca/object-oriented-programming-wordpress/</a></p>
<p>由 Carl Alexander 所撰寫的付費電子書，裡面使用生動的例子來說明何謂物件導向以及相關的特性，並且將 WordPress API 封裝成類別使用，很多範例程式碼都可以直接拿來實戰，我覺得是一本 CP 值很高而且寫得非常清楚的書籍，英文用字都不會太難，這本幫助我開始使用物件導向來做 WordPress 開發。</p>
<h2 id="WordPress-佈景主題開發書籍推薦"><a href="#WordPress-佈景主題開發書籍推薦" class="headerlink" title="WordPress 佈景主題開發書籍推薦"></a>WordPress 佈景主題開發書籍推薦</h2><h4 id="WordPress-客製化實戰講座：自製佈景‧外掛‧社群行銷‧SEO優化"><a href="#WordPress-客製化實戰講座：自製佈景‧外掛‧社群行銷‧SEO優化" class="headerlink" title="WordPress 客製化實戰講座：自製佈景‧外掛‧社群行銷‧SEO優化"></a>WordPress 客製化實戰講座：自製佈景‧外掛‧社群行銷‧SEO優化</h4><p><img src="https://cf-assets2.tenlong.com.tw/products/images/000/110/851/medium/9789863124610_bc.jpg?1525540185"></p>
<p><a href="https://www.tenlong.com.tw/products/9789863124610?list_name=srh">https://www.tenlong.com.tw/products/9789863124610?list_name=srh</a></p>
<p>我很喜歡日本作者寫的電腦書籍，常可以看到很多生動的圖片來解釋抽象的概念，這本也不例外，他把開發佈景主題所需的知識講解的非常清楚，幫我釐清了許多每天在用卻一知半解的概念，如果你要設計自己的佈景主題大推這本！</p>
<h4 id="Theme-Handbook"><a href="#Theme-Handbook" class="headerlink" title="Theme Handbook"></a>Theme Handbook</h4><p><img src="https://handbookspub.oberonlai.blog/img/4.defeea9e.png"></p>
<p><a href="https://developer.wordpress.org/themes/">https://developer.wordpress.org/themes/</a></p>
<p>涵蓋所有開發 WordPress 佈景主題的所有面向，包含了主題結構、範本層級、安全性、發佈主題等等，我會建議先把上面那本中文的看完後再來看這本會比較有概念。</p>
<h2 id="WordPress-外掛開發書籍推薦"><a href="#WordPress-外掛開發書籍推薦" class="headerlink" title="WordPress 外掛開發書籍推薦"></a>WordPress 外掛開發書籍推薦</h2><h4 id="Building-Web-Apps-with-WordPress"><a href="#Building-Web-Apps-with-WordPress" class="headerlink" title="Building Web Apps with WordPress"></a>Building Web Apps with WordPress</h4><p><img src="https://cf-assets2.tenlong.com.tw/products/images/000/127/746/medium/51v-okZykeL._SX379_BO1_204_203_200_.jpg?1574929377"></p>
<p><a href="https://www.tenlong.com.tw/products/9781491990087">https://www.tenlong.com.tw/products/9781491990087</a></p>
<p>由 Brian Messenlehner 與 Jason Coleman 合著的好書，內容十分豐富，同時也提供了程式碼範例，雖然不少章節跟 WordPress Handbook 有所重疊，但解釋的方式比較容易理解，再搭配實際的案例更能幫助記憶，英文用字也很淺顯易懂，我有整理了四篇書摘：<a href="https://oberonlai.blog/tw/building-web-apps-with-wordpress/">https://oberonlai.blog/tw/building-web-apps-with-wordpress/</a></p>
<h4 id="Plugin-Handbook"><a href="#Plugin-Handbook" class="headerlink" title="Plugin Handbook"></a>Plugin Handbook</h4><p><img src="https://handbookspub.oberonlai.blog/img/5.7803c2e3.png"></p>
<p><a href="https://developer.wordpress.org/plugins/">https://developer.wordpress.org/plugins/</a></p>
<p>WordPress 外掛開發手冊，介紹開發外掛所需要的各種知識，但缺少實際的應用案例，我會建議先把上一本看完後再用這本來補足相關知識。</p>
<h2 id="物件導向開發相關書籍推薦"><a href="#物件導向開發相關書籍推薦" class="headerlink" title="物件導向開發相關書籍推薦"></a>物件導向開發相關書籍推薦</h2><h4 id="PHP-大師之路-開源的技術淬練"><a href="#PHP-大師之路-開源的技術淬練" class="headerlink" title="PHP 大師之路 - 開源的技術淬練"></a>PHP 大師之路 - 開源的技術淬練</h4><p><a href="https://ithelp.ithome.com.tw/users/20111119/ironman/3269?page=1">https://ithelp.ithome.com.tw/users/20111119/ironman/3269?page=1</a></p>
<p>這是由 Terry Lin 在 2020 年的鐵人賽參賽作品，從一開始的 PHP 設計模式切入，到 PHP 套件的開發，最後整合成 WordPress 的外掛，這 30 篇文章非常精彩，有非常完整的說明，但因為作者過於忙碌，要出版成冊只能靠緣份了XD</p>
<h4 id="PHP-OOP-Way"><a href="#PHP-OOP-Way" class="headerlink" title="PHP OOP Way"></a>PHP OOP Way</h4><p><img src="https://oberonlai.blog/wp-content/uploads/2020/09/hero.jpeg"></p>
<p>由 Segrey Zhuk 撰寫的付費電子書，專注在解釋 PHP 的物件導向，比 Discover object-oriented programming using WordPress 更深入的介紹，而且可能是因為讀了 Carl 的那一本，PHP OOP Way 讓我有更上一層的感覺，我有整理部分書摘：<a href="https://oberonlai.blog/tw/php-oop-way/">https://oberonlai.blog/tw/php-oop-way/</a></p>
<h4 id="大話重構"><a href="#大話重構" class="headerlink" title="大話重構"></a>大話重構</h4><p><img src="https://cf-assets1.tenlong.com.tw/images/94935/medium/PG21454-1.jpg"></p>
<p><a href="https://www.tenlong.com.tw/products/9789864340460?list_name=srh">https://www.tenlong.com.tw/products/9789864340460?list_name=srh</a></p>
<p>這本不講 PHP，裡面範例都是 Java，唸起來有點辛苦，但是對於重構的概念深深吸引著我，因為每天在做的事就是不停修改自己上禮拜寫的程式碼，書中提到的一個核心就是加新功能前先停下來，檢視目前程式碼的結構，調整成可以容納新功能的狀態，完成後再把新功能加進去，這件事對我幫助超大，現在要改之前寫的東西比以前輕鬆許多。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>在每天的工作中最常碰到的不外乎是 WooCommerce，但相關書籍都還是偏向後台介面的操作而非程式開發，所以主要都還是以 WooCommerce 的官方文件為主</p>
<h4 id="WooCommerce-Theme-Developer-Handbook"><a href="#WooCommerce-Theme-Developer-Handbook" class="headerlink" title="WooCommerce Theme Developer Handbook"></a>WooCommerce Theme Developer Handbook</h4><p><a href="https://docs.woocommerce.com/document/woocommerce-theme-developer-handbook/">https://docs.woocommerce.com/document/woocommerce-theme-developer-handbook/</a></p>
<p>開發 WooCommerce Theme 的說明文件。</p>
<h4 id="WooCommerce-Plugin-Developer-Handbook"><a href="#WooCommerce-Plugin-Developer-Handbook" class="headerlink" title="WooCommerce Plugin Developer Handbook"></a>WooCommerce Plugin Developer Handbook</h4><p><a href="https://docs.woocommerce.com/document/create-a-plugin">https://docs.woocommerce.com/document/create-a-plugin</a></p>
<p>開發支援 WooCommerce Plugin 的說明文件。</p>
<p>剩下的就是直接去爬有上架在 wordpress.org 的 WooCommerce 外掛，直接從程式碼中看他們是如何寫相對應的功能，一開始就直接複製貼上，然後再改成自己要的，從程式碼學習是開源軟體的最大福利。</p>
<hr>
<p>以上是我推薦的 WordPress 開發閱讀書單，如果你也有唸過不錯的書籍想跟我分享的務必跟我說，還是大家現在都是看線上文件不看書的XD，記得好久以前就被一位朋友說過學技術哪有在看紙本書的，看網路才是最新的知識，年紀越大覺得看紙本或電子書才不會被一堆連結分心，你覺得呢？</p>
<hr>
<h2 id="徵求合作夥伴"><a href="#徵求合作夥伴" class="headerlink" title="徵求合作夥伴"></a>徵求合作夥伴</h2><p>如果你學了一堆 WordPress 開發知識卻苦無機會實戰，或是接案接的不順利常常加班加到往生又請不到尾款，要不要試著一起合作接案看看？我一直想找合作夥伴很久了，但一直沒有遇到適合的人選，如果你有開發過 WordPress 佈景主題或是外掛，對於<a href="https://oberonlai.blog/tw/wordpress-freelance-practice-1/">時薪制的敏捷式接案模式</a>很感興趣的話，歡迎跟我聯絡，直接回信附上你的部落格連結即可，希望可以找到一起打拼的你！</p>
]]></content>
      <categories>
        <category>WordPress 開發</category>
      </categories>
      <tags>
        <tag>電子書</tag>
        <tag>學習資源</tag>
      </tags>
  </entry>
  <entry>
    <title>掌握五個原則，清楚表達案件需求</title>
    <url>/tw/know-you-specification/</url>
    <content><![CDATA[<p>快到年末，又是案量的高峰期，這一週不約而同遇到三位來信的陌生客戶，都很困擾不知道該如何整理需求讓我理解，而我的回覆都是只要用你們自己方便的方式即可，不管是文字描述、截圖說明，甚至是錄製影片都可以，但後來想想這樣的解釋似乎太籠統了，於是順手紀錄一下如何表達案件需求讓執行者可以快速理解，進而減少 Email 的往返時間。</p>
<span id="more"></span>

<p>事實上關於需求規格書我之前有寫過<a href="https://oberonlai.blog/tw/how-to-write-the-effective-specification/">「企劃人員如何撰寫有效的軟體需求規格文件」</a>這一篇文章，內容比較偏向企劃或是專案經理該如何與團隊中各種不同角色溝通，如果你的案件規模比較大、參與的角色很多，並且是從無到有全新專案，我建議參考這篇文章會比較完整。本篇偏向初步的需求訪談，主要目的是了解客戶在既有網站下需要進行的修改以及新功能的加入，我透過以下五個步驟進行說明：</p>
<h2 id="需求名稱？"><a href="#需求名稱？" class="headerlink" title="需求名稱？"></a>需求名稱？</h2><p>一句話描述需求，盡可能具體並簡要的說明該需求的意圖，可以從希望改善的頁面或是增加想功能來描述，像是「修改結帳流程」、「增加商品的顯示欄位」，也可以從另一個角度來形容，像是「簡化結帳步驟」、「提升商品資訊呈現完整度」，關鍵是讓我們能夠初步理解該需求是跟哪方面的系統相關，範例如下：</p>
<ul>
<li>最佳化網站購買流程，以增進訂單轉換率</li>
</ul>
<h2 id="使用者是誰？"><a href="#使用者是誰？" class="headerlink" title="使用者是誰？"></a>使用者是誰？</h2><p>加入使用者描述是必要的資訊，因為可能同個頁面、同個功能，換了使用者之後就會有完全不同的結果，像是有些網站會區分已登入、未登入會員，或是依照不同消費等級區分 VIP、VVIP 以及一般顧客，如果是後台的需求也會因為不同的角色而有不同的顯示畫面，像是編輯者跟商店經理能夠操作的功能就不一樣，因此這個需求是要做給誰的、有哪些使用者角色可以使用、或只是限定單一類型的使用者，範例如下：</p>
<ul>
<li>未登入顧客、已登入會員</li>
</ul>
<h2 id="需求相關頁面？"><a href="#需求相關頁面？" class="headerlink" title="需求相關頁面？"></a>需求相關頁面？</h2><p>該需求會呈現在哪些頁面上是客戶常常會遺漏的資訊，有些功能可能會橫跨多個頁面或是同時牽涉到前後台的操作，因此得知該資訊對於評估整個需求是很關鍵的部分，但有時候客戶會不清楚原來這個需求會關係到其他頁面，而這就需要我們再協助客戶進行釐清。</p>
<p>所在頁面的資訊可提供網址、頁面名稱，如果有截圖並附上圖示再好也不過，更清楚的方式可以使用 <a href="https://www.markup.io/">Markup.io</a> 這種視覺化工具來標記現行網站的修改需求，範例如下：</p>
<ul>
<li>商品銷售頁、購物車頁、結帳頁</li>
</ul>
<h2 id="目前網站行為"><a href="#目前網站行為" class="headerlink" title="目前網站行為"></a>目前網站行為</h2><p>描述目前在現行網站與需求相關的部分是如何運作的，具體說明操作的步驟與流程，可以讓我們知道該需求會牽涉到哪些環節，並且提前預知可能會產生哪些問題或是衍生新需求的地方，範例如下：</p>
<ul>
<li>潛在顧客透過網路廣告進到商品銷售頁，點擊畫面中央的加入購物車按鈕後，需要再點選前往購物車頁面，註冊或登入會員後再進入結帳頁，輸入完付款資訊後進行結帳。</li>
<li>已登入會員透過網路廣告進到商品銷售頁，點擊畫面中央的加入購物車按鈕後，需要再點選前往購物車頁面與前往結帳頁，輸入完付款資訊後進行結帳。</li>
</ul>
<h2 id="預期網站行為"><a href="#預期網站行為" class="headerlink" title="預期網站行為"></a>預期網站行為</h2><p>描述目前的網站行為發生了什麼問題以及希望可以改進的方式，這部分主要讓我們知道客戶在意的點以及他們想要達成的目標，至於要採用哪種解決方式就是後續跟客戶一起討論，我們不一定要採取客戶提供的方法，畢竟要爬到山頂有很多條不同的路可以走，範例如下：</p>
<ul>
<li>希望潛在顧客在購買的過程中，可以省去登入會員、進入購物車頁，直接點擊加入加入購物車後就能跳轉到結帳頁，進而增加訂單的轉換率。</li>
</ul>
<p>透過以上五個問題我們可以初步得知客戶想要開發的功能，但這只能算是需求的草稿，我們還需要進行二次確認與彙整才能提供一個估價範圍，在這階段重點放在大方向就好，千萬不要開始著眼於開發細節，像是資料庫欄位要開哪些、介面的互動操作效果等等，這些都是等到案件確認執行後再利用使用者故事來跟客戶逐一確認。</p>
<p>此外，我們要跟客戶理解到這樣的估價範圍並非最終的規格與價格，在確認開發細節以及實際執行時都可能會有許多當初沒有預期到的狀況會出現，這種合作過程就像我們跟客戶一起爬山一樣，隨時查看天氣與路況來調整行進路線，而非我們爬我們的而客戶坐直升機到山頂等，常遇到很多客戶會覺得外包就是可以省下時間與金錢來解決問題，而忽略了傳達需求的過程，因此務必要讓客戶理解「溝通」是外包的最大成本。</p>
]]></content>
      <categories>
        <category>專案管理</category>
        <category>需求訪談</category>
      </categories>
  </entry>
  <entry>
    <title>WooCommerce 客製化商品外掛</title>
    <url>/tw/woocommerce-product-dynamic-price/</url>
    <content><![CDATA[<p>上週遇到一個很有趣的需求，客戶來信說希望可以在商品頁面增加一個文字欄位輸入框，當顧客輸入數字時可以改變商品售價，這位客戶的網站是販售某種電線還纜線之類的產品，除了會依照線的材質會有不同的售價外，還會根據線的長度來計價。</p>
<p>具體的需求是他們希望當顧客輸入 1~100 這個區間的任意數字時，商品售價可以依照公式計算出除了基本規格的售價外，再將長度變數加入最後價格中，假設當商品售價初始價格為 100 元，輸入 10 會變成 110 元，輸入 50 會變成 150 元，有點類似客製化商品的作法。</p>
<span id="more"></span>

<p>一開始我的思路是從變化商品下手，想說能否開一個屬性是可以動態決定這個長度的價格，而當這個屬性被選擇時，就能多一個文字輸入框來提供顧客輸入任意的數字，但研究後發現變化商品的售價就是一個固定的欄位，沒有辨法進行動態的改變。</p>
<p>於是又想說直接在前端根據輸入文字欄位來修改商品定價，但跟變化商品的價格一樣，只要售價在後台設定後它就是一個固定的值，任何的變動都會影響到訂單的總金額，弄不好可能還會影響到其他訂單，既然直接修改商品價格不可行，我就朝著訂單附加費用的角度來思考，可能是把長度的計算加總在運費或是稅務上，但這樣一樣會讓運費與稅務大亂。</p>
<p>後來想起關鍵字 Dynamic Product Price，但找到的多半是像買兩件折 50，或是買三件打八折這種行銷用途的外掛，但從他們的作法中我可以確信使用附加費用解決這個需求是正確的方向，最後我找到了 <a href="https://wordpress.org/plugins/advanced-product-fields-for-woocommerce/">Advanced Product Fields (Product Addons) for WooCommerce</a> 這隻外掛。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/woocommerce-product-dynamic-price/woocommerce-product-dynamic-price-01.jpg"></p>
<p>這支外掛的主要功能是可以增加商品在前台的欄位，免費版本可以增加九種欄位在商品頁面中，付費版還有更多欄位可以選擇，最重要的是它可以根據欄位的輸入結果來加入訂單的附加費用，完完全全可以解決客戶的需求。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/woocommerce-product-dynamic-price/woocommerce-product-dynamic-price-02.jpg"></p>
<p>但免費版本的商品附加費用，只能是固定費率，也就是判斷有輸入這個長度欄位的話，附加費用是固定金額，升級付費版的話就可以依照輸入的輸字來決定金額，甚至還能寫入自己的公式來進行計算，操作介面如果你有使用過 ACF 的話，這一套完全可以無痛上手，想試用的話在他們的外掛說明頁上都有提供展示連結，或是直接下載玩看看最快。</p>
<p><img src="https://oberonlai.blog/wp-content/uploads/woocommerce-product-dynamic-price/woocommerce-product-dynamic-price-03.jpg"></p>
<p>我進一步研究他們的程式碼，想了解附加費用的機制是如何運作的，發現到幾支關鍵的勾點可以使用：</p>
<h3 id="woocommerce-add-cart-item-data"><a href="#woocommerce-add-cart-item-data" class="headerlink" title="woocommerce_add_cart_item_data"></a>woocommerce_add_cart_item_data</h3><p>用於修改自行新增的商品自訂欄位到結帳購物車中，讓購物車可以讀到商品的自訂欄位，可以傳入三個參數：$cart_item_data、$product_id 以及 $variation_id，回傳 $cart_item_data</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// define the woocommerce_add_cart_item_data callback </span>
<span class="token keyword">function</span> <span class="token function">filter_woocommerce_add_cart_item_data</span><span class="token punctuation">(</span> <span class="token variable">$cart_item_data</span><span class="token punctuation">,</span> <span class="token variable">$product_id</span><span class="token punctuation">,</span> <span class="token variable">$variation_id</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token comment">// make filter magic happen here... </span>
    <span class="token keyword">return</span> <span class="token variable">$cart_item_data</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
         
<span class="token comment">// add the filter </span>
<span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_add_cart_item_data'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'filter_woocommerce_add_cart_item_data'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="woocommerce-get-item-data"><a href="#woocommerce-get-item-data" class="headerlink" title="woocommerce_get_item_data"></a>woocommerce_get_item_data</h3><p>用於取得已經儲存的商品自訂欄位，可以傳入兩個參數：$item_data 以及 $cart_item，回傳 $item_data，透過這個勾點可以把長度的規格顯示在結帳頁的商品清單中：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// define the woocommerce_get_item_data callback </span>
<span class="token keyword">function</span> <span class="token function">filter_woocommerce_get_item_data</span><span class="token punctuation">(</span> <span class="token variable">$item_data</span><span class="token punctuation">,</span> <span class="token variable">$cart_item</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token comment">// make filter magic happen here... </span>
    <span class="token keyword">return</span> <span class="token variable">$item_data</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
         
<span class="token comment">// add the filter </span>
<span class="token function">add_filter</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'woocommerce_get_item_data'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'filter_woocommerce_get_item_data'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="woocommerce-before-calculate-totals"><a href="#woocommerce-before-calculate-totals" class="headerlink" title="woocommerce_before_calculate_totals"></a>woocommerce_before_calculate_totals</h3><p>用於計算訂單金額，訂單的總金額可以針對商品自訂欄位進行加總靠得就是它，下面為這支外掛外掛處理訂單金額計算的方法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">adjust_cart_item_pricing</span><span class="token punctuation">(</span><span class="token variable">$cart_obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'DOING_AJAX'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>

	<span class="token keyword">foreach</span><span class="token punctuation">(</span> <span class="token variable">$cart_obj</span><span class="token operator">-></span><span class="token function">get_cart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=></span><span class="token variable">$item</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'wapf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>

		<span class="token variable">$quantity</span> <span class="token operator">=</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'quantity'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token function">wc_stock_amount</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'quantity'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$product</span> <span class="token operator">=</span> <span class="token function">wc_get_product</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'variation_id'</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'variation_id'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'product_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$base</span> <span class="token operator">=</span> <span class="token class-name static-context">Helper</span><span class="token operator">::</span><span class="token function">get_product_base_price</span><span class="token punctuation">(</span><span class="token variable">$product</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$options_total</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

		<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'wapf'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$field</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$field</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$field</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'price'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

					<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$price</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'value'</span><span class="token punctuation">]</span>  <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
						<span class="token keyword">continue</span><span class="token punctuation">;</span>

					<span class="token variable">$options_total</span> <span class="token operator">=</span> <span class="token variable">$options_total</span> <span class="token operator">+</span> <span class="token class-name static-context">Fields</span><span class="token operator">::</span><span class="token function">do_pricing</span><span class="token punctuation">(</span><span class="token variable">$price</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$quantity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>

		<span class="token punctuation">&#125;</span>

		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$options_total</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">set_price</span><span class="token punctuation">(</span><span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$options_total</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token punctuation">&#125;</span>
	
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>它先檢查購物車裡面的商品是否帶有價格的自訂欄位，有的話就透過 Fields 類別的靜態方法來取得附加費用的計算邏輯，最後再把原始價格 $base 加上算出來的費用，使用 WooCommerce 的 <code>set_price()</code> 來做為訂單總價。</p>
<p>結合以上三個勾點我們就能搞懂這支外掛基本運作邏輯：先將商品自訂欄位寫入，然後在前台的商品頁加入前端表格，透過 JS 計算出附加費用後，再去修改購物車的商品總金額，藉此達成根據顧客手動輸入的結果來改變訂單總價。</p>
<p>另外值得一提的是 Advanced Product Fields 的設定頁面做得很好，除了比照 ACF 的設定邏輯外，整個資料夾結構也非常清楚，未來如果要開發自訂欄位的操作介面，這支外掛是非常好的參考教材。</p>
<p>補充：<a href="https://woocommerce.com/products/measurement-price-calculator/">Measurement Price Calculator</a> 也可以達成類似的功能</p>
]]></content>
      <categories>
        <category>WooCommerce</category>
        <category>WooCommerce 外掛</category>
      </categories>
  </entry>
</search>
